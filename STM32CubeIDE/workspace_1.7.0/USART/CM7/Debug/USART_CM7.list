
USART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e18  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f0  080090f0  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f8  080090f8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  24000000  08009100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  24000038  08009138  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000260  08009138  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020446  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d67  00000000  00000000  000404ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00043218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  000442f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000398fc  00000000  00000000  00045300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165a7  00000000  00000000  0007ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183a7e  00000000  00000000  000951a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00218c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b8  00000000  00000000  00218c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009098 	.word	0x08009098

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	08009098 	.word	0x08009098

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fc7e 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f878 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000710:	f000 f9be 	bl	8000a90 <MX_DMA_Init>
  MX_GPIO_Init();
 8000714:	f000 f9dc 	bl	8000ad0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000718:	f000 f922 	bl	8000960 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800071c:	f000 f96c 	bl	80009f8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000720:	f000 f8e8 	bl	80008f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <main+0xc8>)
 8000726:	f005 fe2d 	bl	8006384 <HAL_TIM_Base_Start>

  prev_time=__HAL_TIM_GET_COUNTER(&htim6);
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <main+0xc8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <main+0xcc>)
 8000734:	801a      	strh	r2, [r3, #0]
  //HAL_Delay(1000);
  HAL_UART_Transmit(&huart1, Tx_Data, sizeof(Tx_Data), 1000);
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	2214      	movs	r2, #20
 800073c:	4925      	ldr	r1, [pc, #148]	; (80007d4 <main+0xd0>)
 800073e:	4826      	ldr	r0, [pc, #152]	; (80007d8 <main+0xd4>)
 8000740:	f006 f978 	bl	8006a34 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8000744:	2104      	movs	r1, #4
 8000746:	4825      	ldr	r0, [pc, #148]	; (80007dc <main+0xd8>)
 8000748:	f003 fa35 	bl	8003bb6 <HAL_GPIO_TogglePin>
  curr_time=__HAL_TIM_GET_COUNTER(&htim6);
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0xc8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <main+0xdc>)
 8000756:	801a      	strh	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, &Rx_Data, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	4922      	ldr	r1, [pc, #136]	; (80007e4 <main+0xe0>)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <main+0xd4>)
 800075e:	f006 f9ff 	bl	8006b60 <HAL_UART_Receive_IT>
  //UART_Start_Receive_DMA(&huart1, buff,1);

  //HAL_UART_Receive_DMA (&huart1, buff,1);

//
  tim=curr_time-prev_time;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <main+0xdc>)
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <main+0xcc>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <main+0xe4>)
 8000770:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   Pin_status=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <main+0xe8>)
 8000778:	f003 f9ec 	bl	8003b54 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <main+0xec>)
 8000782:	701a      	strb	r2, [r3, #0]

	  if(Flag && Pin_status==GPIO_PIN_SET)
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <main+0xf0>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0f2      	beq.n	8000772 <main+0x6e>
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <main+0xec>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d1ee      	bne.n	8000772 <main+0x6e>
	  	  {
				HAL_UART_Transmit(&huart1, Tx1_Data, sizeof(Tx1_Data), 1000);
 8000794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000798:	2214      	movs	r2, #20
 800079a:	4917      	ldr	r1, [pc, #92]	; (80007f8 <main+0xf4>)
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0xd4>)
 800079e:	f006 f949 	bl	8006a34 <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 80007a2:	2104      	movs	r1, #4
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <main+0xd8>)
 80007a6:	f003 fa06 	bl	8003bb6 <HAL_GPIO_TogglePin>
				HAL_UART_Receive_IT(&huart1, &Rx_Data, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	490d      	ldr	r1, [pc, #52]	; (80007e4 <main+0xe0>)
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0xd4>)
 80007b0:	f006 f9d6 	bl	8006b60 <HAL_UART_Receive_IT>
				//HAL_UART_Receive_DMA (&huart1, buff,sizeof(buff));

				Flag = FALSE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <main+0xf0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
				i = 0;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <main+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	801a      	strh	r2, [r3, #0]
				HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f000 fcb2 	bl	800112c <HAL_Delay>
	   Pin_status=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007c8:	e7d3      	b.n	8000772 <main+0x6e>
 80007ca:	bf00      	nop
 80007cc:	2400020c 	.word	0x2400020c
 80007d0:	2400020a 	.word	0x2400020a
 80007d4:	24000008 	.word	0x24000008
 80007d8:	24000178 	.word	0x24000178
 80007dc:	58022400 	.word	0x58022400
 80007e0:	24000208 	.word	0x24000208
 80007e4:	24000258 	.word	0x24000258
 80007e8:	2400006c 	.word	0x2400006c
 80007ec:	58020800 	.word	0x58020800
 80007f0:	2400006e 	.word	0x2400006e
 80007f4:	24000068 	.word	0x24000068
 80007f8:	2400001c 	.word	0x2400001c
 80007fc:	2400006a 	.word	0x2400006a

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	; 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	224c      	movs	r2, #76	; 0x4c
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f008 fc3a 	bl	8009088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2220      	movs	r2, #32
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 fc34 	bl	8009088 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000820:	2004      	movs	r0, #4
 8000822:	f003 f9e3 	bl	8003bec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <SystemClock_Config+0xec>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <SystemClock_Config+0xec>)
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <SystemClock_Config+0xec>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <SystemClock_Config+0xf0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <SystemClock_Config+0xf0>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <SystemClock_Config+0xf0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000858:	bf00      	nop
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemClock_Config+0xf0>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000866:	d1f8      	bne.n	800085a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800086c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	2302      	movs	r3, #2
 8000878:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800087a:	2305      	movs	r3, #5
 800087c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000886:	2304      	movs	r3, #4
 8000888:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800088e:	2308      	movs	r3, #8
 8000890:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000892:	2300      	movs	r3, #0
 8000894:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 f9fe 	bl	8003ca0 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008aa:	f000 f9f9 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	233f      	movs	r3, #63	; 0x3f
 80008b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2303      	movs	r3, #3
 80008b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ba:	2308      	movs	r3, #8
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2102      	movs	r1, #2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 fe0f 	bl	80044f8 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008e0:	f000 f9de 	bl	8000ca0 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3770      	adds	r7, #112	; 0x70
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58000400 	.word	0x58000400
 80008f0:	58024800 	.word	0x58024800

080008f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_TIM6_Init+0x64>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_TIM6_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_TIM6_Init+0x64>)
 800090c:	22c8      	movs	r2, #200	; 0xc8
 800090e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_TIM6_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_TIM6_Init+0x64>)
 8000918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_TIM6_Init+0x64>)
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_TIM6_Init+0x64>)
 8000926:	f005 fcd5 	bl	80062d4 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000930:	f000 f9b6 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_TIM6_Init+0x64>)
 8000942:	f005 ff7b 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 f9a8 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2400020c 	.word	0x2400020c
 800095c:	40001000 	.word	0x40001000

08000960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_USART1_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009aa:	f005 fff3 	bl	8006994 <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 f974 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009bc:	f008 fa75 	bl	8008eaa <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 f96b 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009ce:	f008 faaa 	bl	8008f26 <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f962 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009de:	f008 fa2b 	bl	8008e38 <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f95a 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	24000178 	.word	0x24000178
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MX_USART3_UART_Init+0x94>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a42:	f005 ffa7 	bl	8006994 <HAL_UART_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f928 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a54:	f008 fa29 	bl	8008eaa <HAL_UARTEx_SetTxFifoThreshold>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 f91f 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a66:	f008 fa5e 	bl	8008f26 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 f916 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a76:	f008 f9df 	bl	8008e38 <HAL_UARTEx_DisableFifoMode>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 f90e 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000070 	.word	0x24000070
 8000a8c:	40004800 	.word	0x40004800

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_DMA_Init+0x3c>)
 8000a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <MX_DMA_Init+0x3c>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_DMA_Init+0x3c>)
 8000aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2044      	movs	r0, #68	; 0x44
 8000aba:	f000 fc42 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000abe:	2044      	movs	r0, #68	; 0x44
 8000ac0:	f000 fc59 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a40      	ldr	r2, [pc, #256]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a39      	ldr	r2, [pc, #228]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <MX_GPIO_Init+0x120>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <MX_GPIO_Init+0x124>)
 8000b84:	f002 fffe 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <MX_GPIO_Init+0x128>)
 8000b8e:	f002 fff9 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <MX_GPIO_Init+0x12c>)
 8000ba8:	f002 fe24 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <MX_GPIO_Init+0x124>)
 8000bc6:	f002 fe15 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_GPIO_Init+0x128>)
 8000be2:	f002 fe07 	bl	80037f4 <HAL_GPIO_Init>

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58022000 	.word	0x58022000
 8000bf8:	58022400 	.word	0x58022400
 8000bfc:	58020800 	.word	0x58020800

08000c00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	buff[i] = Rx_Data;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_UART_RxCpltCallback+0x70>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_UART_RxCpltCallback+0x74>)
 8000c10:	7819      	ldrb	r1, [r3, #0]
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_RxCpltCallback+0x78>)
 8000c14:	5499      	strb	r1, [r3, r2]
	if(buff[i] == '\r')
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_UART_RxCpltCallback+0x70>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_UART_RxCpltCallback+0x78>)
 8000c1e:	5c9b      	ldrb	r3, [r3, r2]
 8000c20:	2b0d      	cmp	r3, #13
 8000c22:	d10e      	bne.n	8000c42 <HAL_UART_RxCpltCallback+0x42>
	{
		Flag = TRUE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_RxCpltCallback+0x7c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	4814      	ldr	r0, [pc, #80]	; (8000c80 <HAL_UART_RxCpltCallback+0x80>)
 8000c30:	f002 ffc1 	bl	8003bb6 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, buff, sizeof(buff), 1000);
 8000c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c38:	2214      	movs	r2, #20
 8000c3a:	490f      	ldr	r1, [pc, #60]	; (8000c78 <HAL_UART_RxCpltCallback+0x78>)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <HAL_UART_RxCpltCallback+0x84>)
 8000c3e:	f005 fef9 	bl	8006a34 <HAL_UART_Transmit>
		//HAL_UART_Receive_DMA (&huart1, buff,sizeof(buff));
	}
	HAL_UART_Receive_IT(&huart1, &Rx_Data, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	490b      	ldr	r1, [pc, #44]	; (8000c74 <HAL_UART_RxCpltCallback+0x74>)
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <HAL_UART_RxCpltCallback+0x88>)
 8000c48:	f005 ff8a 	bl	8006b60 <HAL_UART_Receive_IT>

	if(i>=sizeof(buff))
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_UART_RxCpltCallback+0x70>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	2b13      	cmp	r3, #19
 8000c52:	d903      	bls.n	8000c5c <HAL_UART_RxCpltCallback+0x5c>
	{
		i = 0;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_UART_RxCpltCallback+0x70>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	801a      	strh	r2, [r3, #0]
	else
	{
		i++;
	}

}
 8000c5a:	e005      	b.n	8000c68 <HAL_UART_RxCpltCallback+0x68>
		i++;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_UART_RxCpltCallback+0x70>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_UART_RxCpltCallback+0x70>)
 8000c66:	801a      	strh	r2, [r3, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2400006a 	.word	0x2400006a
 8000c74:	24000258 	.word	0x24000258
 8000c78:	24000054 	.word	0x24000054
 8000c7c:	24000068 	.word	0x24000068
 8000c80:	58022000 	.word	0x58022000
 8000c84:	24000070 	.word	0x24000070
 8000c88:	24000178 	.word	0x24000178

08000c8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x30>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x30>)
 8000cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d116      	bne.n	8000d20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_TIM_Base_MspInit+0x4c>)
 8000cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x4c>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x4c>)
 8000d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d08:	f003 0310 	and.w	r3, r3, #16
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 fb14 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1a:	2036      	movs	r0, #54	; 0x36
 8000d1c:	f000 fb2b 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40001000 	.word	0x40001000
 8000d2c:	58024400 	.word	0x58024400

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ba      	sub	sp, #232	; 0xe8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	22bc      	movs	r2, #188	; 0xbc
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f008 f999 	bl	8009088 <memset>
  if(huart->Instance==USART1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a67      	ldr	r2, [pc, #412]	; (8000ef8 <HAL_UART_MspInit+0x1c8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d177      	bne.n	8000e50 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 ff4e 	bl	8004c10 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff ff91 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d84:	4a5d      	ldr	r2, [pc, #372]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d8e:	4b5b      	ldr	r3, [pc, #364]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a56      	ldr	r2, [pc, #344]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b53      	ldr	r3, [pc, #332]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4848      	ldr	r0, [pc, #288]	; (8000f00 <HAL_UART_MspInit+0x1d0>)
 8000de0:	f002 fd08 	bl	80037f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000de4:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000de6:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_UART_MspInit+0x1d8>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000dea:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000dec:	2229      	movs	r2, #41	; 0x29
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e10:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e24:	f000 fac2 	bl	80013ac <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000e2e:	f7ff ff37 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a33      	ldr	r2, [pc, #204]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e36:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e38:	4a32      	ldr	r2, [pc, #200]	; (8000f04 <HAL_UART_MspInit+0x1d4>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2025      	movs	r0, #37	; 0x25
 8000e44:	f000 fa7d 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e48:	2025      	movs	r0, #37	; 0x25
 8000e4a:	f000 fa94 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4e:	e04f      	b.n	8000ef0 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a2d      	ldr	r2, [pc, #180]	; (8000f0c <HAL_UART_MspInit+0x1dc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d14a      	bne.n	8000ef0 <HAL_UART_MspInit+0x1c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fed1 	bl	8004c10 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8000e74:	f7ff ff14 	bl	8000ca0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a17      	ldr	r2, [pc, #92]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_MspInit+0x1cc>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4809      	ldr	r0, [pc, #36]	; (8000f00 <HAL_UART_MspInit+0x1d0>)
 8000edc:	f002 fc8a 	bl	80037f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2027      	movs	r0, #39	; 0x27
 8000ee6:	f000 fa2c 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eea:	2027      	movs	r0, #39	; 0x27
 8000eec:	f000 fa43 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	37e8      	adds	r7, #232	; 0xe8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020400 	.word	0x58020400
 8000f04:	24000100 	.word	0x24000100
 8000f08:	40020488 	.word	0x40020488
 8000f0c:	40004800 	.word	0x40004800

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f8c6 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART1_IRQHandler+0x10>)
 8000f6a:	f005 fe4f 	bl	8006c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000178 	.word	0x24000178

08000f78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <USART3_IRQHandler+0x10>)
 8000f7e:	f005 fe45 	bl	8006c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000070 	.word	0x24000070

08000f8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM6_DAC_IRQHandler+0x10>)
 8000f92:	f005 fa67 	bl	8006464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2400020c 	.word	0x2400020c

08000fa0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DMA2_Stream5_IRQHandler+0x10>)
 8000fa6:	f001 fabf 	bl	8002528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000100 	.word	0x24000100

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff fb0a 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f008 f82d 	bl	8009040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fb8d 	bl	8000704 <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8000ff8:	08009100 	.word	0x08009100
  ldr r2, =_sbss
 8000ffc:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 8001000:	24000260 	.word	0x24000260

08001004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f98c 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001014:	f003 fc26 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	; (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f814 	bl	8001080 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fe23 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	080090b0 	.word	0x080090b0
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e021      	b.n	80010d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_InitTick+0x64>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f971 	bl	8001392 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f93b 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x68>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000034 	.word	0x24000034
 80010e4:	24000000 	.word	0x24000000
 80010e8:	24000030 	.word	0x24000030

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	24000034 	.word	0x24000034
 8001110:	2400025c 	.word	0x2400025c

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2400025c 	.word	0x2400025c

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	24000034 	.word	0x24000034

08001174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetREVID+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0c1b      	lsrs	r3, r3, #16
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	5c001000 	.word	0x5c001000

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	05fa0000 	.word	0x05fa0000

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff feae 	bl	8001114 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e316      	b.n	80019f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a66      	ldr	r2, [pc, #408]	; (8001564 <HAL_DMA_Init+0x1b8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d04a      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_DMA_Init+0x1bc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d045      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_DMA_Init+0x1c0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d040      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a62      	ldr	r2, [pc, #392]	; (8001570 <HAL_DMA_Init+0x1c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d03b      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_DMA_Init+0x1c8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d036      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_DMA_Init+0x1cc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d031      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_DMA_Init+0x1d0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02c      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <HAL_DMA_Init+0x1d4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d027      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_DMA_Init+0x1d8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d022      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a59      	ldr	r2, [pc, #356]	; (8001588 <HAL_DMA_Init+0x1dc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d01d      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_DMA_Init+0x1e0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d018      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_DMA_Init+0x1e4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_DMA_Init+0x1e8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00e      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a53      	ldr	r2, [pc, #332]	; (8001598 <HAL_DMA_Init+0x1ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d009      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_DMA_Init+0x1f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_DMA_Init+0x1f4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Init+0xbc>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_DMA_Init+0xbe>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 813b 	beq.w	80016e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a37      	ldr	r2, [pc, #220]	; (8001564 <HAL_DMA_Init+0x1b8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d04a      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a36      	ldr	r2, [pc, #216]	; (8001568 <HAL_DMA_Init+0x1bc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d045      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a34      	ldr	r2, [pc, #208]	; (800156c <HAL_DMA_Init+0x1c0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d040      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a33      	ldr	r2, [pc, #204]	; (8001570 <HAL_DMA_Init+0x1c4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d03b      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_DMA_Init+0x1c8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d036      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_DMA_Init+0x1cc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d031      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2e      	ldr	r2, [pc, #184]	; (800157c <HAL_DMA_Init+0x1d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d02c      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_DMA_Init+0x1d4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d027      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <HAL_DMA_Init+0x1d8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d022      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <HAL_DMA_Init+0x1dc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d01d      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_DMA_Init+0x1e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d018      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_DMA_Init+0x1e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_DMA_Init+0x1e8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00e      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a24      	ldr	r2, [pc, #144]	; (8001598 <HAL_DMA_Init+0x1ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d009      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_DMA_Init+0x1f0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_DMA_Init+0x1f4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d108      	bne.n	8001532 <HAL_DMA_Init+0x186>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e007      	b.n	8001542 <HAL_DMA_Init+0x196>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001542:	e02f      	b.n	80015a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001544:	f7ff fde6 	bl	8001114 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b05      	cmp	r3, #5
 8001550:	d928      	bls.n	80015a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e246      	b.n	80019f2 <HAL_DMA_Init+0x646>
 8001564:	40020010 	.word	0x40020010
 8001568:	40020028 	.word	0x40020028
 800156c:	40020040 	.word	0x40020040
 8001570:	40020058 	.word	0x40020058
 8001574:	40020070 	.word	0x40020070
 8001578:	40020088 	.word	0x40020088
 800157c:	400200a0 	.word	0x400200a0
 8001580:	400200b8 	.word	0x400200b8
 8001584:	40020410 	.word	0x40020410
 8001588:	40020428 	.word	0x40020428
 800158c:	40020440 	.word	0x40020440
 8001590:	40020458 	.word	0x40020458
 8001594:	40020470 	.word	0x40020470
 8001598:	40020488 	.word	0x40020488
 800159c:	400204a0 	.word	0x400204a0
 80015a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1c8      	bne.n	8001544 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4b83      	ldr	r3, [pc, #524]	; (80017cc <HAL_DMA_Init+0x420>)
 80015be:	4013      	ands	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d107      	bne.n	8001608 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4313      	orrs	r3, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_DMA_Init+0x424>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <HAL_DMA_Init+0x428>)
 800160e:	4013      	ands	r3, r2
 8001610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001614:	d328      	bcc.n	8001668 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b28      	cmp	r3, #40	; 0x28
 800161c:	d903      	bls.n	8001626 <HAL_DMA_Init+0x27a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b2e      	cmp	r3, #46	; 0x2e
 8001624:	d917      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b3e      	cmp	r3, #62	; 0x3e
 800162c:	d903      	bls.n	8001636 <HAL_DMA_Init+0x28a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b42      	cmp	r3, #66	; 0x42
 8001634:	d90f      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b46      	cmp	r3, #70	; 0x46
 800163c:	d903      	bls.n	8001646 <HAL_DMA_Init+0x29a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b48      	cmp	r3, #72	; 0x48
 8001644:	d907      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b4e      	cmp	r3, #78	; 0x4e
 800164c:	d905      	bls.n	800165a <HAL_DMA_Init+0x2ae>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b52      	cmp	r3, #82	; 0x52
 8001654:	d801      	bhi.n	800165a <HAL_DMA_Init+0x2ae>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_DMA_Init+0x2b0>
 800165a:	2300      	movs	r3, #0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001666:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f023 0307 	bic.w	r3, r3, #7
 800167e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b04      	cmp	r3, #4
 8001690:	d117      	bne.n	80016c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00e      	beq.n	80016c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f001 ff1b 	bl	80034e0 <DMA_CheckFifoParam>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e197      	b.n	80019f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 fe56 	bl	800337c <DMA_CalcBaseAndBitshift>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	223f      	movs	r2, #63	; 0x3f
 80016de:	409a      	lsls	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e0cd      	b.n	8001882 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <HAL_DMA_Init+0x42c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_DMA_Init+0x430>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01d      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_DMA_Init+0x434>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d018      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <HAL_DMA_Init+0x438>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <HAL_DMA_Init+0x43c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00e      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <HAL_DMA_Init+0x440>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d009      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <HAL_DMA_Init+0x444>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d004      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_DMA_Init+0x448>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_DMA_Init+0x38e>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_DMA_Init+0x390>
 800173a:	2300      	movs	r3, #0
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8097 	beq.w	8001870 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_DMA_Init+0x42c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d021      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Init+0x430>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01c      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_DMA_Init+0x434>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d017      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Init+0x438>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d012      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_DMA_Init+0x43c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Init+0x440>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_DMA_Init+0x444>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d003      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_DMA_Init+0x448>)
 800178e:	4293      	cmp	r3, r2
 8001790:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_DMA_Init+0x44c>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d020      	beq.n	80017fc <HAL_DMA_Init+0x450>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d102      	bne.n	80017c8 <HAL_DMA_Init+0x41c>
 80017c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c6:	e01a      	b.n	80017fe <HAL_DMA_Init+0x452>
 80017c8:	2300      	movs	r3, #0
 80017ca:	e018      	b.n	80017fe <HAL_DMA_Init+0x452>
 80017cc:	fe10803f 	.word	0xfe10803f
 80017d0:	5c001000 	.word	0x5c001000
 80017d4:	ffff0000 	.word	0xffff0000
 80017d8:	58025408 	.word	0x58025408
 80017dc:	5802541c 	.word	0x5802541c
 80017e0:	58025430 	.word	0x58025430
 80017e4:	58025444 	.word	0x58025444
 80017e8:	58025458 	.word	0x58025458
 80017ec:	5802546c 	.word	0x5802546c
 80017f0:	58025480 	.word	0x58025480
 80017f4:	58025494 	.word	0x58025494
 80017f8:	fffe000f 	.word	0xfffe000f
 80017fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68d2      	ldr	r2, [r2, #12]
 8001802:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800180c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800181c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800182c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_DMA_Init+0x650>)
 8001844:	4413      	add	r3, r2
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_DMA_Init+0x654>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 fd91 	bl	800337c <DMA_CalcBaseAndBitshift>
 800185a:	4603      	mov	r3, r0
 800185c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e008      	b.n	8001882 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0b7      	b.n	80019f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5f      	ldr	r2, [pc, #380]	; (8001a04 <HAL_DMA_Init+0x658>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d072      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <HAL_DMA_Init+0x65c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d06d      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_DMA_Init+0x660>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d068      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <HAL_DMA_Init+0x664>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d063      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <HAL_DMA_Init+0x668>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d05e      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a57      	ldr	r2, [pc, #348]	; (8001a18 <HAL_DMA_Init+0x66c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d059      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_DMA_Init+0x670>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d054      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_DMA_Init+0x674>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d04f      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_DMA_Init+0x678>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04a      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_DMA_Init+0x67c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d045      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_DMA_Init+0x680>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d040      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_DMA_Init+0x684>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d03b      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_DMA_Init+0x688>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d036      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_DMA_Init+0x68c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d031      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_DMA_Init+0x690>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d02c      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_DMA_Init+0x694>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d027      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_DMA_Init+0x698>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d022      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_DMA_Init+0x69c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01d      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_DMA_Init+0x6a0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d018      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_DMA_Init+0x6a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_DMA_Init+0x6a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <HAL_DMA_Init+0x6ac>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d009      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_DMA_Init+0x6b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_DMA_Init+0x6b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_DMA_Init+0x5ca>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_DMA_Init+0x5cc>
 8001976:	2300      	movs	r3, #0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f001 fe2b 	bl	80035d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b80      	cmp	r3, #128	; 0x80
 8001988:	d102      	bne.n	8001990 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <HAL_DMA_Init+0x624>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d80c      	bhi.n	80019d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 fea8 	bl	800370c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e008      	b.n	80019e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	a7fdabf8 	.word	0xa7fdabf8
 8001a00:	cccccccd 	.word	0xcccccccd
 8001a04:	40020010 	.word	0x40020010
 8001a08:	40020028 	.word	0x40020028
 8001a0c:	40020040 	.word	0x40020040
 8001a10:	40020058 	.word	0x40020058
 8001a14:	40020070 	.word	0x40020070
 8001a18:	40020088 	.word	0x40020088
 8001a1c:	400200a0 	.word	0x400200a0
 8001a20:	400200b8 	.word	0x400200b8
 8001a24:	40020410 	.word	0x40020410
 8001a28:	40020428 	.word	0x40020428
 8001a2c:	40020440 	.word	0x40020440
 8001a30:	40020458 	.word	0x40020458
 8001a34:	40020470 	.word	0x40020470
 8001a38:	40020488 	.word	0x40020488
 8001a3c:	400204a0 	.word	0x400204a0
 8001a40:	400204b8 	.word	0x400204b8
 8001a44:	58025408 	.word	0x58025408
 8001a48:	5802541c 	.word	0x5802541c
 8001a4c:	58025430 	.word	0x58025430
 8001a50:	58025444 	.word	0x58025444
 8001a54:	58025458 	.word	0x58025458
 8001a58:	5802546c 	.word	0x5802546c
 8001a5c:	58025480 	.word	0x58025480
 8001a60:	58025494 	.word	0x58025494

08001a64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fb52 	bl	8001114 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e2dc      	b.n	8002036 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d008      	beq.n	8001a9a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e2cd      	b.n	8002036 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a76      	ldr	r2, [pc, #472]	; (8001c78 <HAL_DMA_Abort+0x214>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a74      	ldr	r2, [pc, #464]	; (8001c7c <HAL_DMA_Abort+0x218>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a73      	ldr	r2, [pc, #460]	; (8001c80 <HAL_DMA_Abort+0x21c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a71      	ldr	r2, [pc, #452]	; (8001c84 <HAL_DMA_Abort+0x220>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a70      	ldr	r2, [pc, #448]	; (8001c88 <HAL_DMA_Abort+0x224>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_DMA_Abort+0x228>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6d      	ldr	r2, [pc, #436]	; (8001c90 <HAL_DMA_Abort+0x22c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6b      	ldr	r2, [pc, #428]	; (8001c94 <HAL_DMA_Abort+0x230>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <HAL_DMA_Abort+0x234>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a68      	ldr	r2, [pc, #416]	; (8001c9c <HAL_DMA_Abort+0x238>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_DMA_Abort+0x23c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_DMA_Abort+0x240>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a64      	ldr	r2, [pc, #400]	; (8001ca8 <HAL_DMA_Abort+0x244>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a62      	ldr	r2, [pc, #392]	; (8001cac <HAL_DMA_Abort+0x248>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a61      	ldr	r2, [pc, #388]	; (8001cb0 <HAL_DMA_Abort+0x24c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5f      	ldr	r2, [pc, #380]	; (8001cb4 <HAL_DMA_Abort+0x250>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Abort+0xda>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_DMA_Abort+0xdc>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 021e 	bic.w	r2, r2, #30
 8001b52:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b62:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e00a      	b.n	8001b82 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <HAL_DMA_Abort+0x214>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d072      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_DMA_Abort+0x218>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d06d      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a39      	ldr	r2, [pc, #228]	; (8001c80 <HAL_DMA_Abort+0x21c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d068      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <HAL_DMA_Abort+0x220>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d063      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <HAL_DMA_Abort+0x224>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <HAL_DMA_Abort+0x228>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d059      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a33      	ldr	r2, [pc, #204]	; (8001c90 <HAL_DMA_Abort+0x22c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d054      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <HAL_DMA_Abort+0x230>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04f      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <HAL_DMA_Abort+0x234>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04a      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_DMA_Abort+0x238>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d045      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_DMA_Abort+0x23c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d040      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_DMA_Abort+0x240>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d03b      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_DMA_Abort+0x244>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d036      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_DMA_Abort+0x248>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d031      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_DMA_Abort+0x24c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d02c      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_DMA_Abort+0x250>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d027      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_DMA_Abort+0x254>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_Abort+0x258>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01d      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_DMA_Abort+0x25c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d018      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_DMA_Abort+0x260>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_DMA_Abort+0x264>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_DMA_Abort+0x268>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_DMA_Abort+0x26c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_DMA_Abort+0x270>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d132      	bne.n	8001cd8 <HAL_DMA_Abort+0x274>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e031      	b.n	8001cda <HAL_DMA_Abort+0x276>
 8001c76:	bf00      	nop
 8001c78:	40020010 	.word	0x40020010
 8001c7c:	40020028 	.word	0x40020028
 8001c80:	40020040 	.word	0x40020040
 8001c84:	40020058 	.word	0x40020058
 8001c88:	40020070 	.word	0x40020070
 8001c8c:	40020088 	.word	0x40020088
 8001c90:	400200a0 	.word	0x400200a0
 8001c94:	400200b8 	.word	0x400200b8
 8001c98:	40020410 	.word	0x40020410
 8001c9c:	40020428 	.word	0x40020428
 8001ca0:	40020440 	.word	0x40020440
 8001ca4:	40020458 	.word	0x40020458
 8001ca8:	40020470 	.word	0x40020470
 8001cac:	40020488 	.word	0x40020488
 8001cb0:	400204a0 	.word	0x400204a0
 8001cb4:	400204b8 	.word	0x400204b8
 8001cb8:	58025408 	.word	0x58025408
 8001cbc:	5802541c 	.word	0x5802541c
 8001cc0:	58025430 	.word	0x58025430
 8001cc4:	58025444 	.word	0x58025444
 8001cc8:	58025458 	.word	0x58025458
 8001ccc:	5802546c 	.word	0x5802546c
 8001cd0:	58025480 	.word	0x58025480
 8001cd4:	58025494 	.word	0x58025494
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6d      	ldr	r2, [pc, #436]	; (8001ea8 <HAL_DMA_Abort+0x444>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d04a      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <HAL_DMA_Abort+0x448>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d045      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_DMA_Abort+0x44c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d040      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a68      	ldr	r2, [pc, #416]	; (8001eb4 <HAL_DMA_Abort+0x450>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d03b      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a67      	ldr	r2, [pc, #412]	; (8001eb8 <HAL_DMA_Abort+0x454>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d036      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a65      	ldr	r2, [pc, #404]	; (8001ebc <HAL_DMA_Abort+0x458>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d031      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a64      	ldr	r2, [pc, #400]	; (8001ec0 <HAL_DMA_Abort+0x45c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d02c      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a62      	ldr	r2, [pc, #392]	; (8001ec4 <HAL_DMA_Abort+0x460>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d027      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a61      	ldr	r2, [pc, #388]	; (8001ec8 <HAL_DMA_Abort+0x464>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5f      	ldr	r2, [pc, #380]	; (8001ecc <HAL_DMA_Abort+0x468>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_DMA_Abort+0x46c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d018      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a5c      	ldr	r2, [pc, #368]	; (8001ed4 <HAL_DMA_Abort+0x470>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <HAL_DMA_Abort+0x474>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a59      	ldr	r2, [pc, #356]	; (8001edc <HAL_DMA_Abort+0x478>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d009      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_DMA_Abort+0x47c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_DMA_Abort+0x480>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <HAL_DMA_Abort+0x33c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e007      	b.n	8001db0 <HAL_DMA_Abort+0x34c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001db0:	e013      	b.n	8001dda <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db2:	f7ff f9af 	bl	8001114 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d90c      	bls.n	8001dda <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e12d      	b.n	8002036 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e5      	bne.n	8001db2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <HAL_DMA_Abort+0x444>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04a      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <HAL_DMA_Abort+0x448>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d045      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <HAL_DMA_Abort+0x44c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d040      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <HAL_DMA_Abort+0x450>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d03b      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <HAL_DMA_Abort+0x454>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d036      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <HAL_DMA_Abort+0x458>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d031      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_DMA_Abort+0x45c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d02c      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_DMA_Abort+0x460>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_DMA_Abort+0x464>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <HAL_DMA_Abort+0x468>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01d      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_DMA_Abort+0x46c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d018      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_DMA_Abort+0x470>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_DMA_Abort+0x474>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_DMA_Abort+0x478>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_DMA_Abort+0x47c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_DMA_Abort+0x480>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_DMA_Abort+0x426>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_DMA_Abort+0x428>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d02b      	beq.n	8001ee8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	223f      	movs	r2, #63	; 0x3f
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	e02a      	b.n	8001efe <HAL_DMA_Abort+0x49a>
 8001ea8:	40020010 	.word	0x40020010
 8001eac:	40020028 	.word	0x40020028
 8001eb0:	40020040 	.word	0x40020040
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	40020070 	.word	0x40020070
 8001ebc:	40020088 	.word	0x40020088
 8001ec0:	400200a0 	.word	0x400200a0
 8001ec4:	400200b8 	.word	0x400200b8
 8001ec8:	40020410 	.word	0x40020410
 8001ecc:	40020428 	.word	0x40020428
 8001ed0:	40020440 	.word	0x40020440
 8001ed4:	40020458 	.word	0x40020458
 8001ed8:	40020470 	.word	0x40020470
 8001edc:	40020488 	.word	0x40020488
 8001ee0:	400204a0 	.word	0x400204a0
 8001ee4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a4f      	ldr	r2, [pc, #316]	; (8002040 <HAL_DMA_Abort+0x5dc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d072      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_DMA_Abort+0x5e0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d06d      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_DMA_Abort+0x5e4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d068      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_DMA_Abort+0x5e8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d063      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_DMA_Abort+0x5ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_DMA_Abort+0x5f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d059      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_DMA_Abort+0x5f4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d054      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a44      	ldr	r2, [pc, #272]	; (800205c <HAL_DMA_Abort+0x5f8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d04f      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_DMA_Abort+0x5fc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_DMA_Abort+0x600>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <HAL_DMA_Abort+0x604>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3e      	ldr	r2, [pc, #248]	; (800206c <HAL_DMA_Abort+0x608>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_DMA_Abort+0x60c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <HAL_DMA_Abort+0x610>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <HAL_DMA_Abort+0x614>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <HAL_DMA_Abort+0x618>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a37      	ldr	r2, [pc, #220]	; (8002080 <HAL_DMA_Abort+0x61c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a35      	ldr	r2, [pc, #212]	; (8002084 <HAL_DMA_Abort+0x620>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a34      	ldr	r2, [pc, #208]	; (8002088 <HAL_DMA_Abort+0x624>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_DMA_Abort+0x628>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_DMA_Abort+0x62c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <HAL_DMA_Abort+0x630>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <HAL_DMA_Abort+0x634>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <HAL_DMA_Abort+0x638>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Abort+0x58e>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_Abort+0x590>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002000:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002018:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002022:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40020010 	.word	0x40020010
 8002044:	40020028 	.word	0x40020028
 8002048:	40020040 	.word	0x40020040
 800204c:	40020058 	.word	0x40020058
 8002050:	40020070 	.word	0x40020070
 8002054:	40020088 	.word	0x40020088
 8002058:	400200a0 	.word	0x400200a0
 800205c:	400200b8 	.word	0x400200b8
 8002060:	40020410 	.word	0x40020410
 8002064:	40020428 	.word	0x40020428
 8002068:	40020440 	.word	0x40020440
 800206c:	40020458 	.word	0x40020458
 8002070:	40020470 	.word	0x40020470
 8002074:	40020488 	.word	0x40020488
 8002078:	400204a0 	.word	0x400204a0
 800207c:	400204b8 	.word	0x400204b8
 8002080:	58025408 	.word	0x58025408
 8002084:	5802541c 	.word	0x5802541c
 8002088:	58025430 	.word	0x58025430
 800208c:	58025444 	.word	0x58025444
 8002090:	58025458 	.word	0x58025458
 8002094:	5802546c 	.word	0x5802546c
 8002098:	58025480 	.word	0x58025480
 800209c:	58025494 	.word	0x58025494

080020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e205      	b.n	80024be <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e1fa      	b.n	80024be <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a8c      	ldr	r2, [pc, #560]	; (8002300 <HAL_DMA_Abort_IT+0x260>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d04a      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a8b      	ldr	r2, [pc, #556]	; (8002304 <HAL_DMA_Abort_IT+0x264>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d045      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a89      	ldr	r2, [pc, #548]	; (8002308 <HAL_DMA_Abort_IT+0x268>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d040      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a88      	ldr	r2, [pc, #544]	; (800230c <HAL_DMA_Abort_IT+0x26c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d03b      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a86      	ldr	r2, [pc, #536]	; (8002310 <HAL_DMA_Abort_IT+0x270>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d036      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a85      	ldr	r2, [pc, #532]	; (8002314 <HAL_DMA_Abort_IT+0x274>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d031      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a83      	ldr	r2, [pc, #524]	; (8002318 <HAL_DMA_Abort_IT+0x278>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02c      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a82      	ldr	r2, [pc, #520]	; (800231c <HAL_DMA_Abort_IT+0x27c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d027      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a80      	ldr	r2, [pc, #512]	; (8002320 <HAL_DMA_Abort_IT+0x280>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d022      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7f      	ldr	r2, [pc, #508]	; (8002324 <HAL_DMA_Abort_IT+0x284>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d01d      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a7d      	ldr	r2, [pc, #500]	; (8002328 <HAL_DMA_Abort_IT+0x288>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d018      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7c      	ldr	r2, [pc, #496]	; (800232c <HAL_DMA_Abort_IT+0x28c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a7a      	ldr	r2, [pc, #488]	; (8002330 <HAL_DMA_Abort_IT+0x290>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a79      	ldr	r2, [pc, #484]	; (8002334 <HAL_DMA_Abort_IT+0x294>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a77      	ldr	r2, [pc, #476]	; (8002338 <HAL_DMA_Abort_IT+0x298>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a76      	ldr	r2, [pc, #472]	; (800233c <HAL_DMA_Abort_IT+0x29c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_DMA_Abort_IT+0xcc>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_DMA_Abort_IT+0xce>
 800216c:	2300      	movs	r3, #0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d065      	beq.n	800223e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2204      	movs	r2, #4
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a60      	ldr	r2, [pc, #384]	; (8002300 <HAL_DMA_Abort_IT+0x260>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d04a      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5e      	ldr	r2, [pc, #376]	; (8002304 <HAL_DMA_Abort_IT+0x264>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d045      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_DMA_Abort_IT+0x268>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d040      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_DMA_Abort_IT+0x26c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d03b      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_DMA_Abort_IT+0x270>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d036      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_DMA_Abort_IT+0x274>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_DMA_Abort_IT+0x278>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d02c      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a55      	ldr	r2, [pc, #340]	; (800231c <HAL_DMA_Abort_IT+0x27c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d027      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a54      	ldr	r2, [pc, #336]	; (8002320 <HAL_DMA_Abort_IT+0x280>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d022      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_DMA_Abort_IT+0x284>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01d      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_DMA_Abort_IT+0x288>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d018      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	; (800232c <HAL_DMA_Abort_IT+0x28c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a4e      	ldr	r2, [pc, #312]	; (8002330 <HAL_DMA_Abort_IT+0x290>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_DMA_Abort_IT+0x294>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <HAL_DMA_Abort_IT+0x298>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_DMA_Abort_IT+0x17a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_DMA_Abort_IT+0x29c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <HAL_DMA_Abort_IT+0x18c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e147      	b.n	80024bc <HAL_DMA_Abort_IT+0x41c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e13e      	b.n	80024bc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 020e 	bic.w	r2, r2, #14
 800224c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_DMA_Abort_IT+0x260>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04a      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_DMA_Abort_IT+0x264>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d045      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_DMA_Abort_IT+0x268>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d040      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_DMA_Abort_IT+0x26c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d03b      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_DMA_Abort_IT+0x270>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d036      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_DMA_Abort_IT+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d031      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_DMA_Abort_IT+0x278>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d02c      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a20      	ldr	r2, [pc, #128]	; (800231c <HAL_DMA_Abort_IT+0x27c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d027      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_DMA_Abort_IT+0x280>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_DMA_Abort_IT+0x284>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01d      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_DMA_Abort_IT+0x288>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d018      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_DMA_Abort_IT+0x28c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_DMA_Abort_IT+0x290>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_DMA_Abort_IT+0x294>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_DMA_Abort_IT+0x298>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_DMA_Abort_IT+0x24e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_DMA_Abort_IT+0x29c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d128      	bne.n	8002340 <HAL_DMA_Abort_IT+0x2a0>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e027      	b.n	8002350 <HAL_DMA_Abort_IT+0x2b0>
 8002300:	40020010 	.word	0x40020010
 8002304:	40020028 	.word	0x40020028
 8002308:	40020040 	.word	0x40020040
 800230c:	40020058 	.word	0x40020058
 8002310:	40020070 	.word	0x40020070
 8002314:	40020088 	.word	0x40020088
 8002318:	400200a0 	.word	0x400200a0
 800231c:	400200b8 	.word	0x400200b8
 8002320:	40020410 	.word	0x40020410
 8002324:	40020428 	.word	0x40020428
 8002328:	40020440 	.word	0x40020440
 800232c:	40020458 	.word	0x40020458
 8002330:	40020470 	.word	0x40020470
 8002334:	40020488 	.word	0x40020488
 8002338:	400204a0 	.word	0x400204a0
 800233c:	400204b8 	.word	0x400204b8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5c      	ldr	r2, [pc, #368]	; (80024c8 <HAL_DMA_Abort_IT+0x428>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d072      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <HAL_DMA_Abort_IT+0x42c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d06d      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a59      	ldr	r2, [pc, #356]	; (80024d0 <HAL_DMA_Abort_IT+0x430>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d068      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_DMA_Abort_IT+0x434>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d063      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a56      	ldr	r2, [pc, #344]	; (80024d8 <HAL_DMA_Abort_IT+0x438>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d05e      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a55      	ldr	r2, [pc, #340]	; (80024dc <HAL_DMA_Abort_IT+0x43c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d059      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a53      	ldr	r2, [pc, #332]	; (80024e0 <HAL_DMA_Abort_IT+0x440>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d054      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_DMA_Abort_IT+0x444>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d04f      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_DMA_Abort_IT+0x448>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d04a      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a4f      	ldr	r2, [pc, #316]	; (80024ec <HAL_DMA_Abort_IT+0x44c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d045      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4d      	ldr	r2, [pc, #308]	; (80024f0 <HAL_DMA_Abort_IT+0x450>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d040      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_DMA_Abort_IT+0x454>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d03b      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <HAL_DMA_Abort_IT+0x458>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d036      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a49      	ldr	r2, [pc, #292]	; (80024fc <HAL_DMA_Abort_IT+0x45c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d031      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_DMA_Abort_IT+0x460>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02c      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_DMA_Abort_IT+0x464>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d027      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a44      	ldr	r2, [pc, #272]	; (8002508 <HAL_DMA_Abort_IT+0x468>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d022      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a43      	ldr	r2, [pc, #268]	; (800250c <HAL_DMA_Abort_IT+0x46c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d01d      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a41      	ldr	r2, [pc, #260]	; (8002510 <HAL_DMA_Abort_IT+0x470>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d018      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a40      	ldr	r2, [pc, #256]	; (8002514 <HAL_DMA_Abort_IT+0x474>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3e      	ldr	r2, [pc, #248]	; (8002518 <HAL_DMA_Abort_IT+0x478>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3d      	ldr	r2, [pc, #244]	; (800251c <HAL_DMA_Abort_IT+0x47c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_DMA_Abort_IT+0x480>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_DMA_Abort_IT+0x3a0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_DMA_Abort_IT+0x484>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_DMA_Abort_IT+0x3a4>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_DMA_Abort_IT+0x3a6>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d028      	beq.n	800249c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002458:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002478:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002490:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800249a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40020010 	.word	0x40020010
 80024cc:	40020028 	.word	0x40020028
 80024d0:	40020040 	.word	0x40020040
 80024d4:	40020058 	.word	0x40020058
 80024d8:	40020070 	.word	0x40020070
 80024dc:	40020088 	.word	0x40020088
 80024e0:	400200a0 	.word	0x400200a0
 80024e4:	400200b8 	.word	0x400200b8
 80024e8:	40020410 	.word	0x40020410
 80024ec:	40020428 	.word	0x40020428
 80024f0:	40020440 	.word	0x40020440
 80024f4:	40020458 	.word	0x40020458
 80024f8:	40020470 	.word	0x40020470
 80024fc:	40020488 	.word	0x40020488
 8002500:	400204a0 	.word	0x400204a0
 8002504:	400204b8 	.word	0x400204b8
 8002508:	58025408 	.word	0x58025408
 800250c:	5802541c 	.word	0x5802541c
 8002510:	58025430 	.word	0x58025430
 8002514:	58025444 	.word	0x58025444
 8002518:	58025458 	.word	0x58025458
 800251c:	5802546c 	.word	0x5802546c
 8002520:	58025480 	.word	0x58025480
 8002524:	58025494 	.word	0x58025494

08002528 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002534:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_DMA_IRQHandler+0x1ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_DMA_IRQHandler+0x1b0>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5f      	ldr	r2, [pc, #380]	; (80026dc <HAL_DMA_IRQHandler+0x1b4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d04a      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5d      	ldr	r2, [pc, #372]	; (80026e0 <HAL_DMA_IRQHandler+0x1b8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d045      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5c      	ldr	r2, [pc, #368]	; (80026e4 <HAL_DMA_IRQHandler+0x1bc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d040      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <HAL_DMA_IRQHandler+0x1c0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d03b      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a59      	ldr	r2, [pc, #356]	; (80026ec <HAL_DMA_IRQHandler+0x1c4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d036      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_DMA_IRQHandler+0x1c8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d031      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a56      	ldr	r2, [pc, #344]	; (80026f4 <HAL_DMA_IRQHandler+0x1cc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d02c      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_DMA_IRQHandler+0x1d0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d027      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <HAL_DMA_IRQHandler+0x1d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d022      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_DMA_IRQHandler+0x1d8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01d      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_DMA_IRQHandler+0x1dc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d018      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <HAL_DMA_IRQHandler+0x1e0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4d      	ldr	r2, [pc, #308]	; (800270c <HAL_DMA_IRQHandler+0x1e4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00e      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_DMA_IRQHandler+0x1e8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d009      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_DMA_IRQHandler+0x1ec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_DMA_IRQHandler+0xd2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_DMA_IRQHandler+0x1f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_IRQHandler+0xd6>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_DMA_IRQHandler+0xd8>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 842b 	beq.w	8002e5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2208      	movs	r2, #8
 8002610:	409a      	lsls	r2, r3
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80a2 	beq.w	8002760 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <HAL_DMA_IRQHandler+0x1b4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04a      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <HAL_DMA_IRQHandler+0x1b8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d045      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_DMA_IRQHandler+0x1bc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_DMA_IRQHandler+0x1c0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d03b      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_DMA_IRQHandler+0x1c4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d036      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_DMA_IRQHandler+0x1c8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_DMA_IRQHandler+0x1cc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02c      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_DMA_IRQHandler+0x1d0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d027      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_DMA_IRQHandler+0x1d4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_DMA_IRQHandler+0x1d8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_DMA_IRQHandler+0x1dc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <HAL_DMA_IRQHandler+0x1e0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_DMA_IRQHandler+0x1e4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_DMA_IRQHandler+0x1e8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_DMA_IRQHandler+0x1ec>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_IRQHandler+0x194>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a18      	ldr	r2, [pc, #96]	; (8002718 <HAL_DMA_IRQHandler+0x1f0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d12f      	bne.n	800271c <HAL_DMA_IRQHandler+0x1f4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf14      	ite	ne
 80026ca:	2301      	movne	r3, #1
 80026cc:	2300      	moveq	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	e02e      	b.n	8002730 <HAL_DMA_IRQHandler+0x208>
 80026d2:	bf00      	nop
 80026d4:	24000000 	.word	0x24000000
 80026d8:	1b4e81b5 	.word	0x1b4e81b5
 80026dc:	40020010 	.word	0x40020010
 80026e0:	40020028 	.word	0x40020028
 80026e4:	40020040 	.word	0x40020040
 80026e8:	40020058 	.word	0x40020058
 80026ec:	40020070 	.word	0x40020070
 80026f0:	40020088 	.word	0x40020088
 80026f4:	400200a0 	.word	0x400200a0
 80026f8:	400200b8 	.word	0x400200b8
 80026fc:	40020410 	.word	0x40020410
 8002700:	40020428 	.word	0x40020428
 8002704:	40020440 	.word	0x40020440
 8002708:	40020458 	.word	0x40020458
 800270c:	40020470 	.word	0x40020470
 8002710:	40020488 	.word	0x40020488
 8002714:	400204a0 	.word	0x400204a0
 8002718:	400204b8 	.word	0x400204b8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d015      	beq.n	8002760 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2208      	movs	r2, #8
 800274e:	409a      	lsls	r2, r3
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d06e      	beq.n	8002854 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a69      	ldr	r2, [pc, #420]	; (8002920 <HAL_DMA_IRQHandler+0x3f8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d04a      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a67      	ldr	r2, [pc, #412]	; (8002924 <HAL_DMA_IRQHandler+0x3fc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d045      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a66      	ldr	r2, [pc, #408]	; (8002928 <HAL_DMA_IRQHandler+0x400>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d040      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a64      	ldr	r2, [pc, #400]	; (800292c <HAL_DMA_IRQHandler+0x404>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d03b      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a63      	ldr	r2, [pc, #396]	; (8002930 <HAL_DMA_IRQHandler+0x408>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d036      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a61      	ldr	r2, [pc, #388]	; (8002934 <HAL_DMA_IRQHandler+0x40c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d031      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_DMA_IRQHandler+0x410>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d02c      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_DMA_IRQHandler+0x414>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d027      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_DMA_IRQHandler+0x418>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_DMA_IRQHandler+0x41c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01d      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_DMA_IRQHandler+0x420>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_DMA_IRQHandler+0x424>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a57      	ldr	r2, [pc, #348]	; (8002950 <HAL_DMA_IRQHandler+0x428>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a55      	ldr	r2, [pc, #340]	; (8002954 <HAL_DMA_IRQHandler+0x42c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a54      	ldr	r2, [pc, #336]	; (8002958 <HAL_DMA_IRQHandler+0x430>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2ee>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_DMA_IRQHandler+0x434>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10a      	bne.n	800282c <HAL_DMA_IRQHandler+0x304>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e003      	b.n	8002834 <HAL_DMA_IRQHandler+0x30c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2201      	movs	r2, #1
 8002842:	409a      	lsls	r2, r3
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0202 	orr.w	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2204      	movs	r2, #4
 800285e:	409a      	lsls	r2, r3
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 808f 	beq.w	8002988 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_DMA_IRQHandler+0x3f8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d04a      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_DMA_IRQHandler+0x3fc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d045      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_DMA_IRQHandler+0x400>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d040      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_DMA_IRQHandler+0x404>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d03b      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_DMA_IRQHandler+0x408>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d036      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_DMA_IRQHandler+0x40c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d031      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_DMA_IRQHandler+0x410>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d02c      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_DMA_IRQHandler+0x414>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d027      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_DMA_IRQHandler+0x418>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d022      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_DMA_IRQHandler+0x41c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01d      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_DMA_IRQHandler+0x420>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d018      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_DMA_IRQHandler+0x424>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_DMA_IRQHandler+0x428>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_DMA_IRQHandler+0x42c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_DMA_IRQHandler+0x430>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_DMA_IRQHandler+0x3e2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_DMA_IRQHandler+0x434>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d12a      	bne.n	8002960 <HAL_DMA_IRQHandler+0x438>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e023      	b.n	8002968 <HAL_DMA_IRQHandler+0x440>
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2204      	movs	r2, #4
 8002976:	409a      	lsls	r2, r3
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f043 0204 	orr.w	r2, r3, #4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2210      	movs	r2, #16
 8002992:	409a      	lsls	r2, r3
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a6 	beq.w	8002aea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a85      	ldr	r2, [pc, #532]	; (8002bb8 <HAL_DMA_IRQHandler+0x690>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04a      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a83      	ldr	r2, [pc, #524]	; (8002bbc <HAL_DMA_IRQHandler+0x694>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d045      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a82      	ldr	r2, [pc, #520]	; (8002bc0 <HAL_DMA_IRQHandler+0x698>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d040      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a80      	ldr	r2, [pc, #512]	; (8002bc4 <HAL_DMA_IRQHandler+0x69c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d03b      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7f      	ldr	r2, [pc, #508]	; (8002bc8 <HAL_DMA_IRQHandler+0x6a0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d036      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7d      	ldr	r2, [pc, #500]	; (8002bcc <HAL_DMA_IRQHandler+0x6a4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7c      	ldr	r2, [pc, #496]	; (8002bd0 <HAL_DMA_IRQHandler+0x6a8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d02c      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_DMA_IRQHandler+0x6ac>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d027      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a79      	ldr	r2, [pc, #484]	; (8002bd8 <HAL_DMA_IRQHandler+0x6b0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a77      	ldr	r2, [pc, #476]	; (8002bdc <HAL_DMA_IRQHandler+0x6b4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01d      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a76      	ldr	r2, [pc, #472]	; (8002be0 <HAL_DMA_IRQHandler+0x6b8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <HAL_DMA_IRQHandler+0x6bc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <HAL_DMA_IRQHandler+0x6c0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a71      	ldr	r2, [pc, #452]	; (8002bec <HAL_DMA_IRQHandler+0x6c4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a70      	ldr	r2, [pc, #448]	; (8002bf0 <HAL_DMA_IRQHandler+0x6c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x516>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6e      	ldr	r2, [pc, #440]	; (8002bf4 <HAL_DMA_IRQHandler+0x6cc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10a      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x52c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e009      	b.n	8002a68 <HAL_DMA_IRQHandler+0x540>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d03e      	beq.n	8002aea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2210      	movs	r2, #16
 8002a76:	409a      	lsls	r2, r3
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d018      	beq.n	8002abc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d108      	bne.n	8002aaa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d024      	beq.n	8002aea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e01f      	b.n	8002aea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01b      	beq.n	8002aea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
 8002aba:	e016      	b.n	8002aea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0208 	bic.w	r2, r2, #8
 8002ad8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2220      	movs	r2, #32
 8002af4:	409a      	lsls	r2, r3
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8110 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	; (8002bb8 <HAL_DMA_IRQHandler+0x690>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d04a      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_DMA_IRQHandler+0x694>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d045      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <HAL_DMA_IRQHandler+0x698>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d040      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_DMA_IRQHandler+0x69c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d03b      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a26      	ldr	r2, [pc, #152]	; (8002bc8 <HAL_DMA_IRQHandler+0x6a0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d036      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <HAL_DMA_IRQHandler+0x6a4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d031      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a23      	ldr	r2, [pc, #140]	; (8002bd0 <HAL_DMA_IRQHandler+0x6a8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d02c      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_DMA_IRQHandler+0x6ac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d027      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <HAL_DMA_IRQHandler+0x6b0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d022      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_DMA_IRQHandler+0x6b4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d01d      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_DMA_IRQHandler+0x6b8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d018      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_DMA_IRQHandler+0x6bc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_DMA_IRQHandler+0x6c0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00e      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_DMA_IRQHandler+0x6c4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_DMA_IRQHandler+0x6c8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x678>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_DMA_IRQHandler+0x6cc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d12b      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x6d0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e02a      	b.n	8002c0c <HAL_DMA_IRQHandler+0x6e4>
 8002bb6:	bf00      	nop
 8002bb8:	40020010 	.word	0x40020010
 8002bbc:	40020028 	.word	0x40020028
 8002bc0:	40020040 	.word	0x40020040
 8002bc4:	40020058 	.word	0x40020058
 8002bc8:	40020070 	.word	0x40020070
 8002bcc:	40020088 	.word	0x40020088
 8002bd0:	400200a0 	.word	0x400200a0
 8002bd4:	400200b8 	.word	0x400200b8
 8002bd8:	40020410 	.word	0x40020410
 8002bdc:	40020428 	.word	0x40020428
 8002be0:	40020440 	.word	0x40020440
 8002be4:	40020458 	.word	0x40020458
 8002be8:	40020470 	.word	0x40020470
 8002bec:	40020488 	.word	0x40020488
 8002bf0:	400204a0 	.word	0x400204a0
 8002bf4:	400204b8 	.word	0x400204b8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8087 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d139      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0216 	bic.w	r2, r2, #22
 8002c3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x736>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0208 	bic.w	r2, r2, #8
 8002c6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	223f      	movs	r2, #63	; 0x3f
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 834a 	beq.w	800332c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
          }
          return;
 8002ca0:	e344      	b.n	800332c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d018      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d02c      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e027      	b.n	8002d20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e01e      	b.n	8002d20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0210 	bic.w	r2, r2, #16
 8002cfe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8306 	beq.w	8003336 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8088 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a7a      	ldr	r2, [pc, #488]	; (8002f30 <HAL_DMA_IRQHandler+0xa08>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <HAL_DMA_IRQHandler+0xa0c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d045      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <HAL_DMA_IRQHandler+0xa10>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d040      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a76      	ldr	r2, [pc, #472]	; (8002f3c <HAL_DMA_IRQHandler+0xa14>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a74      	ldr	r2, [pc, #464]	; (8002f40 <HAL_DMA_IRQHandler+0xa18>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d036      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a73      	ldr	r2, [pc, #460]	; (8002f44 <HAL_DMA_IRQHandler+0xa1c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d031      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a71      	ldr	r2, [pc, #452]	; (8002f48 <HAL_DMA_IRQHandler+0xa20>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02c      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a70      	ldr	r2, [pc, #448]	; (8002f4c <HAL_DMA_IRQHandler+0xa24>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6e      	ldr	r2, [pc, #440]	; (8002f50 <HAL_DMA_IRQHandler+0xa28>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6d      	ldr	r2, [pc, #436]	; (8002f54 <HAL_DMA_IRQHandler+0xa2c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01d      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6b      	ldr	r2, [pc, #428]	; (8002f58 <HAL_DMA_IRQHandler+0xa30>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <HAL_DMA_IRQHandler+0xa34>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_DMA_IRQHandler+0xa38>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a67      	ldr	r2, [pc, #412]	; (8002f64 <HAL_DMA_IRQHandler+0xa3c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a65      	ldr	r2, [pc, #404]	; (8002f68 <HAL_DMA_IRQHandler+0xa40>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x8b8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a64      	ldr	r2, [pc, #400]	; (8002f6c <HAL_DMA_IRQHandler+0xa44>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <HAL_DMA_IRQHandler+0x8ca>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e007      	b.n	8002e02 <HAL_DMA_IRQHandler+0x8da>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d307      	bcc.n	8002e1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f2      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x8da>
 8002e1c:	e000      	b.n	8002e20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e36:	e003      	b.n	8002e40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8272 	beq.w	8003336 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
 8002e5a:	e26c      	b.n	8003336 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a43      	ldr	r2, [pc, #268]	; (8002f70 <HAL_DMA_IRQHandler+0xa48>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d022      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_DMA_IRQHandler+0xa4c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01d      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <HAL_DMA_IRQHandler+0xa50>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d018      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	; (8002f7c <HAL_DMA_IRQHandler+0xa54>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3d      	ldr	r2, [pc, #244]	; (8002f80 <HAL_DMA_IRQHandler+0xa58>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00e      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <HAL_DMA_IRQHandler+0xa5c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <HAL_DMA_IRQHandler+0xa60>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_IRQHandler+0x984>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a39      	ldr	r2, [pc, #228]	; (8002f8c <HAL_DMA_IRQHandler+0xa64>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x988>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x98a>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 823f 	beq.w	8003336 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2204      	movs	r2, #4
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80cd 	beq.w	8003070 <HAL_DMA_IRQHandler+0xb48>
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80c7 	beq.w	8003070 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2204      	movs	r2, #4
 8002eec:	409a      	lsls	r2, r3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d049      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8210 	beq.w	8003330 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f18:	e20a      	b.n	8003330 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8206 	beq.w	8003330 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f2c:	e200      	b.n	8003330 <HAL_DMA_IRQHandler+0xe08>
 8002f2e:	bf00      	nop
 8002f30:	40020010 	.word	0x40020010
 8002f34:	40020028 	.word	0x40020028
 8002f38:	40020040 	.word	0x40020040
 8002f3c:	40020058 	.word	0x40020058
 8002f40:	40020070 	.word	0x40020070
 8002f44:	40020088 	.word	0x40020088
 8002f48:	400200a0 	.word	0x400200a0
 8002f4c:	400200b8 	.word	0x400200b8
 8002f50:	40020410 	.word	0x40020410
 8002f54:	40020428 	.word	0x40020428
 8002f58:	40020440 	.word	0x40020440
 8002f5c:	40020458 	.word	0x40020458
 8002f60:	40020470 	.word	0x40020470
 8002f64:	40020488 	.word	0x40020488
 8002f68:	400204a0 	.word	0x400204a0
 8002f6c:	400204b8 	.word	0x400204b8
 8002f70:	58025408 	.word	0x58025408
 8002f74:	5802541c 	.word	0x5802541c
 8002f78:	58025430 	.word	0x58025430
 8002f7c:	58025444 	.word	0x58025444
 8002f80:	58025458 	.word	0x58025458
 8002f84:	5802546c 	.word	0x5802546c
 8002f88:	58025480 	.word	0x58025480
 8002f8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d160      	bne.n	800305c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a8c      	ldr	r2, [pc, #560]	; (80031d0 <HAL_DMA_IRQHandler+0xca8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8a      	ldr	r2, [pc, #552]	; (80031d4 <HAL_DMA_IRQHandler+0xcac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a89      	ldr	r2, [pc, #548]	; (80031d8 <HAL_DMA_IRQHandler+0xcb0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a87      	ldr	r2, [pc, #540]	; (80031dc <HAL_DMA_IRQHandler+0xcb4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a86      	ldr	r2, [pc, #536]	; (80031e0 <HAL_DMA_IRQHandler+0xcb8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a84      	ldr	r2, [pc, #528]	; (80031e4 <HAL_DMA_IRQHandler+0xcbc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a83      	ldr	r2, [pc, #524]	; (80031e8 <HAL_DMA_IRQHandler+0xcc0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a81      	ldr	r2, [pc, #516]	; (80031ec <HAL_DMA_IRQHandler+0xcc4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a80      	ldr	r2, [pc, #512]	; (80031f0 <HAL_DMA_IRQHandler+0xcc8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a7e      	ldr	r2, [pc, #504]	; (80031f4 <HAL_DMA_IRQHandler+0xccc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7d      	ldr	r2, [pc, #500]	; (80031f8 <HAL_DMA_IRQHandler+0xcd0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7b      	ldr	r2, [pc, #492]	; (80031fc <HAL_DMA_IRQHandler+0xcd4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7a      	ldr	r2, [pc, #488]	; (8003200 <HAL_DMA_IRQHandler+0xcd8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a78      	ldr	r2, [pc, #480]	; (8003204 <HAL_DMA_IRQHandler+0xcdc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a77      	ldr	r2, [pc, #476]	; (8003208 <HAL_DMA_IRQHandler+0xce0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_IRQHandler+0xb12>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a75      	ldr	r2, [pc, #468]	; (800320c <HAL_DMA_IRQHandler+0xce4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <HAL_DMA_IRQHandler+0xb24>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0208 	bic.w	r2, r2, #8
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e007      	b.n	800305c <HAL_DMA_IRQHandler+0xb34>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8165 	beq.w	8003330 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800306e:	e15f      	b.n	8003330 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2202      	movs	r2, #2
 800307a:	409a      	lsls	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80c5 	beq.w	8003210 <HAL_DMA_IRQHandler+0xce8>
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80bf 	beq.w	8003210 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2202      	movs	r2, #2
 800309c:	409a      	lsls	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d018      	beq.n	80030de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 813a 	beq.w	8003334 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030c8:	e134      	b.n	8003334 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8130 	beq.w	8003334 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030dc:	e12a      	b.n	8003334 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d168      	bne.n	80031ba <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <HAL_DMA_IRQHandler+0xca8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d04a      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a37      	ldr	r2, [pc, #220]	; (80031d4 <HAL_DMA_IRQHandler+0xcac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d045      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a35      	ldr	r2, [pc, #212]	; (80031d8 <HAL_DMA_IRQHandler+0xcb0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d040      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a34      	ldr	r2, [pc, #208]	; (80031dc <HAL_DMA_IRQHandler+0xcb4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03b      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a32      	ldr	r2, [pc, #200]	; (80031e0 <HAL_DMA_IRQHandler+0xcb8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d036      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a31      	ldr	r2, [pc, #196]	; (80031e4 <HAL_DMA_IRQHandler+0xcbc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d031      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2f      	ldr	r2, [pc, #188]	; (80031e8 <HAL_DMA_IRQHandler+0xcc0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02c      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <HAL_DMA_IRQHandler+0xcc4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d027      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <HAL_DMA_IRQHandler+0xcc8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_DMA_IRQHandler+0xccc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01d      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <HAL_DMA_IRQHandler+0xcd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a28      	ldr	r2, [pc, #160]	; (80031fc <HAL_DMA_IRQHandler+0xcd4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_DMA_IRQHandler+0xcd8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_DMA_IRQHandler+0xcdc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a23      	ldr	r2, [pc, #140]	; (8003208 <HAL_DMA_IRQHandler+0xce0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_IRQHandler+0xc60>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_DMA_IRQHandler+0xce4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <HAL_DMA_IRQHandler+0xc72>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0214 	bic.w	r2, r2, #20
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e007      	b.n	80031aa <HAL_DMA_IRQHandler+0xc82>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 020a 	bic.w	r2, r2, #10
 80031a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80b8 	beq.w	8003334 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031cc:	e0b2      	b.n	8003334 <HAL_DMA_IRQHandler+0xe0c>
 80031ce:	bf00      	nop
 80031d0:	40020010 	.word	0x40020010
 80031d4:	40020028 	.word	0x40020028
 80031d8:	40020040 	.word	0x40020040
 80031dc:	40020058 	.word	0x40020058
 80031e0:	40020070 	.word	0x40020070
 80031e4:	40020088 	.word	0x40020088
 80031e8:	400200a0 	.word	0x400200a0
 80031ec:	400200b8 	.word	0x400200b8
 80031f0:	40020410 	.word	0x40020410
 80031f4:	40020428 	.word	0x40020428
 80031f8:	40020440 	.word	0x40020440
 80031fc:	40020458 	.word	0x40020458
 8003200:	40020470 	.word	0x40020470
 8003204:	40020488 	.word	0x40020488
 8003208:	400204a0 	.word	0x400204a0
 800320c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2208      	movs	r2, #8
 800321a:	409a      	lsls	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8088 	beq.w	8003336 <HAL_DMA_IRQHandler+0xe0e>
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8082 	beq.w	8003336 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a41      	ldr	r2, [pc, #260]	; (800333c <HAL_DMA_IRQHandler+0xe14>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3f      	ldr	r2, [pc, #252]	; (8003340 <HAL_DMA_IRQHandler+0xe18>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3e      	ldr	r2, [pc, #248]	; (8003344 <HAL_DMA_IRQHandler+0xe1c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3c      	ldr	r2, [pc, #240]	; (8003348 <HAL_DMA_IRQHandler+0xe20>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3b      	ldr	r2, [pc, #236]	; (800334c <HAL_DMA_IRQHandler+0xe24>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a39      	ldr	r2, [pc, #228]	; (8003350 <HAL_DMA_IRQHandler+0xe28>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_DMA_IRQHandler+0xe2c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a36      	ldr	r2, [pc, #216]	; (8003358 <HAL_DMA_IRQHandler+0xe30>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a35      	ldr	r2, [pc, #212]	; (800335c <HAL_DMA_IRQHandler+0xe34>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a33      	ldr	r2, [pc, #204]	; (8003360 <HAL_DMA_IRQHandler+0xe38>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a32      	ldr	r2, [pc, #200]	; (8003364 <HAL_DMA_IRQHandler+0xe3c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a30      	ldr	r2, [pc, #192]	; (8003368 <HAL_DMA_IRQHandler+0xe40>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <HAL_DMA_IRQHandler+0xe44>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <HAL_DMA_IRQHandler+0xe48>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <HAL_DMA_IRQHandler+0xe4c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xdaa>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <HAL_DMA_IRQHandler+0xe50>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <HAL_DMA_IRQHandler+0xdbc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 021c 	bic.w	r2, r2, #28
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e007      	b.n	80032f4 <HAL_DMA_IRQHandler+0xdcc>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 020e 	bic.w	r2, r2, #14
 80032f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2201      	movs	r2, #1
 80032fe:	409a      	lsls	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	e004      	b.n	8003336 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800332c:	bf00      	nop
 800332e:	e002      	b.n	8003336 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003334:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8

0800337c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <DMA_CalcBaseAndBitshift+0x118>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d04a      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a41      	ldr	r2, [pc, #260]	; (8003498 <DMA_CalcBaseAndBitshift+0x11c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d045      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3f      	ldr	r2, [pc, #252]	; (800349c <DMA_CalcBaseAndBitshift+0x120>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d040      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a3e      	ldr	r2, [pc, #248]	; (80034a0 <DMA_CalcBaseAndBitshift+0x124>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d03b      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3c      	ldr	r2, [pc, #240]	; (80034a4 <DMA_CalcBaseAndBitshift+0x128>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d036      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d031      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a39      	ldr	r2, [pc, #228]	; (80034ac <DMA_CalcBaseAndBitshift+0x130>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d02c      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <DMA_CalcBaseAndBitshift+0x134>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d027      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <DMA_CalcBaseAndBitshift+0x138>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d022      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a35      	ldr	r2, [pc, #212]	; (80034b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d01d      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a33      	ldr	r2, [pc, #204]	; (80034bc <DMA_CalcBaseAndBitshift+0x140>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d018      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <DMA_CalcBaseAndBitshift+0x144>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <DMA_CalcBaseAndBitshift+0x148>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2d      	ldr	r2, [pc, #180]	; (80034cc <DMA_CalcBaseAndBitshift+0x150>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <DMA_CalcBaseAndBitshift+0xa8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2c      	ldr	r2, [pc, #176]	; (80034d0 <DMA_CalcBaseAndBitshift+0x154>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <DMA_CalcBaseAndBitshift+0xac>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <DMA_CalcBaseAndBitshift+0xae>
 8003428:	2300      	movs	r3, #0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d024      	beq.n	8003478 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3b10      	subs	r3, #16
 8003436:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <DMA_CalcBaseAndBitshift+0x158>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003448:	5cd3      	ldrb	r3, [r2, r3]
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d908      	bls.n	8003468 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <DMA_CalcBaseAndBitshift+0x160>)
 800345e:	4013      	ands	r3, r2
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58
 8003466:	e00d      	b.n	8003484 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <DMA_CalcBaseAndBitshift+0x160>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6593      	str	r3, [r2, #88]	; 0x58
 8003476:	e005      	b.n	8003484 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	aaaaaaab 	.word	0xaaaaaaab
 80034d8:	080090c0 	.word	0x080090c0
 80034dc:	fffffc00 	.word	0xfffffc00

080034e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d120      	bne.n	8003536 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d858      	bhi.n	80035ae <DMA_CheckFifoParam+0xce>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <DMA_CheckFifoParam+0x24>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003515 	.word	0x08003515
 8003508:	08003527 	.word	0x08003527
 800350c:	08003515 	.word	0x08003515
 8003510:	080035af 	.word	0x080035af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d048      	beq.n	80035b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003524:	e045      	b.n	80035b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800352e:	d142      	bne.n	80035b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003534:	e03f      	b.n	80035b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353e:	d123      	bne.n	8003588 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	2b03      	cmp	r3, #3
 8003546:	d838      	bhi.n	80035ba <DMA_CheckFifoParam+0xda>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <DMA_CheckFifoParam+0x70>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003561 	.word	0x08003561
 8003554:	08003567 	.word	0x08003567
 8003558:	08003561 	.word	0x08003561
 800355c:	08003579 	.word	0x08003579
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
        break;
 8003564:	e030      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d025      	beq.n	80035be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003576:	e022      	b.n	80035be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003580:	d11f      	bne.n	80035c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003586:	e01c      	b.n	80035c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	2b02      	cmp	r3, #2
 800358e:	d902      	bls.n	8003596 <DMA_CheckFifoParam+0xb6>
 8003590:	2b03      	cmp	r3, #3
 8003592:	d003      	beq.n	800359c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003594:	e018      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
        break;
 800359a:	e015      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
    break;
 80035ac:	e00b      	b.n	80035c6 <DMA_CheckFifoParam+0xe6>
        break;
 80035ae:	bf00      	nop
 80035b0:	e00a      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        break;
 80035b2:	bf00      	nop
 80035b4:	e008      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        break;
 80035b6:	bf00      	nop
 80035b8:	e006      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        break;
 80035ba:	bf00      	nop
 80035bc:	e004      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        break;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
        break;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <DMA_CheckFifoParam+0xe8>
    break;
 80035c6:	bf00      	nop
    }
  }

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a38      	ldr	r2, [pc, #224]	; (80036cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a36      	ldr	r2, [pc, #216]	; (80036d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a32      	ldr	r2, [pc, #200]	; (80036dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3b08      	subs	r3, #8
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003664:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003674:	e024      	b.n	80036c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3b10      	subs	r3, #16
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d806      	bhi.n	800369e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d902      	bls.n	800369e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3308      	adds	r3, #8
 800369c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80036b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	58025408 	.word	0x58025408
 80036d0:	5802541c 	.word	0x5802541c
 80036d4:	58025430 	.word	0x58025430
 80036d8:	58025444 	.word	0x58025444
 80036dc:	58025458 	.word	0x58025458
 80036e0:	5802546c 	.word	0x5802546c
 80036e4:	58025480 	.word	0x58025480
 80036e8:	58025494 	.word	0x58025494
 80036ec:	cccccccd 	.word	0xcccccccd
 80036f0:	16009600 	.word	0x16009600
 80036f4:	58025880 	.word	0x58025880
 80036f8:	aaaaaaab 	.word	0xaaaaaaab
 80036fc:	400204b8 	.word	0x400204b8
 8003700:	4002040f 	.word	0x4002040f
 8003704:	10008200 	.word	0x10008200
 8003708:	40020880 	.word	0x40020880

0800370c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04a      	beq.n	80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d847      	bhi.n	80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a25      	ldr	r2, [pc, #148]	; (80037c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a24      	ldr	r2, [pc, #144]	; (80037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d01d      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003794:	671a      	str	r2, [r3, #112]	; 0x70
 8003796:	e009      	b.n	80037ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80037aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	2201      	movs	r2, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	58025408 	.word	0x58025408
 80037c8:	5802541c 	.word	0x5802541c
 80037cc:	58025430 	.word	0x58025430
 80037d0:	58025444 	.word	0x58025444
 80037d4:	58025458 	.word	0x58025458
 80037d8:	5802546c 	.word	0x5802546c
 80037dc:	58025480 	.word	0x58025480
 80037e0:	58025494 	.word	0x58025494
 80037e4:	1600963f 	.word	0x1600963f
 80037e8:	58025940 	.word	0x58025940
 80037ec:	1000823f 	.word	0x1000823f
 80037f0:	40020940 	.word	0x40020940

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003802:	4b89      	ldr	r3, [pc, #548]	; (8003a28 <HAL_GPIO_Init+0x234>)
 8003804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003806:	e194      	b.n	8003b32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8186 	beq.w	8003b2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d005      	beq.n	8003838 <HAL_GPIO_Init+0x44>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d130      	bne.n	800389a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2203      	movs	r2, #3
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800386e:	2201      	movs	r2, #1
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0201 	and.w	r2, r3, #1
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d017      	beq.n	80038d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d123      	bne.n	800392a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	08da      	lsrs	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3208      	adds	r2, #8
 80038ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	08da      	lsrs	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	69b9      	ldr	r1, [r7, #24]
 8003926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0203 	and.w	r2, r3, #3
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80e0 	beq.w	8003b2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396c:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_GPIO_Init+0x238>)
 800396e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003972:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <HAL_GPIO_Init+0x238>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800397c:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_GPIO_Init+0x238>)
 800397e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_GPIO_Init+0x23c>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <HAL_GPIO_Init+0x240>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d052      	beq.n	8003a5c <HAL_GPIO_Init+0x268>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_GPIO_Init+0x244>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d031      	beq.n	8003a22 <HAL_GPIO_Init+0x22e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <HAL_GPIO_Init+0x248>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02b      	beq.n	8003a1e <HAL_GPIO_Init+0x22a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_GPIO_Init+0x24c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d025      	beq.n	8003a1a <HAL_GPIO_Init+0x226>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_GPIO_Init+0x250>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <HAL_GPIO_Init+0x222>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_GPIO_Init+0x254>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d019      	beq.n	8003a12 <HAL_GPIO_Init+0x21e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <HAL_GPIO_Init+0x258>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0x21a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_GPIO_Init+0x25c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00d      	beq.n	8003a0a <HAL_GPIO_Init+0x216>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_GPIO_Init+0x260>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <HAL_GPIO_Init+0x212>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <HAL_GPIO_Init+0x264>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_GPIO_Init+0x20e>
 80039fe:	2309      	movs	r3, #9
 8003a00:	e02d      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a02:	230a      	movs	r3, #10
 8003a04:	e02b      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a06:	2308      	movs	r3, #8
 8003a08:	e029      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	e027      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a0e:	2306      	movs	r3, #6
 8003a10:	e025      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a12:	2305      	movs	r3, #5
 8003a14:	e023      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e021      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e01f      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e01d      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01b      	b.n	8003a5e <HAL_GPIO_Init+0x26a>
 8003a26:	bf00      	nop
 8003a28:	58000080 	.word	0x58000080
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	58000400 	.word	0x58000400
 8003a34:	58020000 	.word	0x58020000
 8003a38:	58020400 	.word	0x58020400
 8003a3c:	58020800 	.word	0x58020800
 8003a40:	58020c00 	.word	0x58020c00
 8003a44:	58021000 	.word	0x58021000
 8003a48:	58021400 	.word	0x58021400
 8003a4c:	58021800 	.word	0x58021800
 8003a50:	58021c00 	.word	0x58021c00
 8003a54:	58022000 	.word	0x58022000
 8003a58:	58022400 	.word	0x58022400
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	f002 0203 	and.w	r2, r2, #3
 8003a64:	0092      	lsls	r2, r2, #2
 8003a66:	4093      	lsls	r3, r2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a6e:	4938      	ldr	r1, [pc, #224]	; (8003b50 <HAL_GPIO_Init+0x35c>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f ae63 	bne.w	8003808 <HAL_GPIO_Init+0x14>
  }
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	3724      	adds	r7, #36	; 0x24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	58000400 	.word	0x58000400

08003b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e001      	b.n	8003b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
 8003b90:	4613      	mov	r3, r2
 8003b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b94:	787b      	ldrb	r3, [r7, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ba0:	e003      	b.n	8003baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	041a      	lsls	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003bf4:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d00a      	beq.n	8003c16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e040      	b.n	8003c94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e03e      	b.n	8003c94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003c1e:	491f      	ldr	r1, [pc, #124]	; (8003c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c26:	f7fd fa75 	bl	8001114 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c2c:	e009      	b.n	8003c42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c2e:	f7fd fa71 	bl	8001114 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3c:	d901      	bls.n	8003c42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e028      	b.n	8003c94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c42:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	d1ee      	bne.n	8003c2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b1e      	cmp	r3, #30
 8003c54:	d008      	beq.n	8003c68 <HAL_PWREx_ConfigSupply+0x7c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b2e      	cmp	r3, #46	; 0x2e
 8003c5a:	d005      	beq.n	8003c68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b1d      	cmp	r3, #29
 8003c60:	d002      	beq.n	8003c68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b2d      	cmp	r3, #45	; 0x2d
 8003c66:	d114      	bne.n	8003c92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003c68:	f7fd fa54 	bl	8001114 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c6e:	e009      	b.n	8003c84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c70:	f7fd fa50 	bl	8001114 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c7e:	d901      	bls.n	8003c84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d1ee      	bne.n	8003c70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	58024800 	.word	0x58024800

08003ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	; 0x30
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f000 bc1c 	b.w	80044ec <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8087 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4b9e      	ldr	r3, [pc, #632]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ccc:	4b9b      	ldr	r3, [pc, #620]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d007      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x48>
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	2b18      	cmp	r3, #24
 8003cdc:	d110      	bne.n	8003d00 <HAL_RCC_OscConfig+0x60>
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b94      	ldr	r3, [pc, #592]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d06c      	beq.n	8003dce <HAL_RCC_OscConfig+0x12e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d168      	bne.n	8003dce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e3f5      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x78>
 8003d0a:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a8b      	ldr	r2, [pc, #556]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e02e      	b.n	8003d76 <HAL_RCC_OscConfig+0xd6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCC_OscConfig+0x9a>
 8003d20:	4b86      	ldr	r3, [pc, #536]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a85      	ldr	r2, [pc, #532]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b83      	ldr	r3, [pc, #524]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a82      	ldr	r2, [pc, #520]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e01d      	b.n	8003d76 <HAL_RCC_OscConfig+0xd6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0xbe>
 8003d44:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7c      	ldr	r2, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b7a      	ldr	r3, [pc, #488]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a79      	ldr	r2, [pc, #484]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCC_OscConfig+0xd6>
 8003d5e:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a76      	ldr	r2, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b74      	ldr	r3, [pc, #464]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a73      	ldr	r2, [pc, #460]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd f9c9 	bl	8001114 <HAL_GetTick>
 8003d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d86:	f7fd f9c5 	bl	8001114 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e3a9      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0xe6>
 8003da4:	e014      	b.n	8003dd0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd f9b5 	bl	8001114 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dae:	f7fd f9b1 	bl	8001114 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e395      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dc0:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x10e>
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80ca 	beq.w	8003f72 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dde:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003de8:	4b54      	ldr	r3, [pc, #336]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_RCC_OscConfig+0x164>
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b18      	cmp	r3, #24
 8003df8:	d156      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x208>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d151      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x17c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e367      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e1c:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 0219 	bic.w	r2, r3, #25
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4944      	ldr	r1, [pc, #272]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e2e:	f7fd f971 	bl	8001114 <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fd f96d 	bl	8001114 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e351      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e48:	4b3c      	ldr	r3, [pc, #240]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e54:	f7fd f98e 	bl	8001174 <HAL_GetREVID>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d817      	bhi.n	8003e92 <HAL_RCC_OscConfig+0x1f2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d108      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1dc>
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e72:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e7a:	e07a      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	031b      	lsls	r3, r3, #12
 8003e8a:	492c      	ldr	r1, [pc, #176]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e90:	e06f      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	4926      	ldr	r1, [pc, #152]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea6:	e064      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d047      	beq.n	8003f40 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eb0:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 0219 	bic.w	r2, r3, #25
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	491f      	ldr	r1, [pc, #124]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fd f927 	bl	8001114 <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fd f923 	bl	8001114 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e307      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	f7fd f944 	bl	8001174 <HAL_GetREVID>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d817      	bhi.n	8003f26 <HAL_RCC_OscConfig+0x286>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d108      	bne.n	8003f10 <HAL_RCC_OscConfig+0x270>
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f06:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	6053      	str	r3, [r2, #4]
 8003f0e:	e030      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	031b      	lsls	r3, r3, #12
 8003f1e:	4907      	ldr	r1, [pc, #28]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	e025      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	4901      	ldr	r1, [pc, #4]	; (8003f3c <HAL_RCC_OscConfig+0x29c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
 8003f3a:	e01a      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
 8003f3c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f40:	4b9e      	ldr	r3, [pc, #632]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a9d      	ldr	r2, [pc, #628]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd f8e2 	bl	8001114 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fd f8de 	bl	8001114 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e2c2      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f66:	4b95      	ldr	r3, [pc, #596]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80a9 	beq.w	80040d2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f80:	4b8e      	ldr	r3, [pc, #568]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f8a:	4b8c      	ldr	r3, [pc, #560]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x306>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b18      	cmp	r3, #24
 8003f9a:	d13a      	bne.n	8004012 <HAL_RCC_OscConfig+0x372>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d135      	bne.n	8004012 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fa6:	4b85      	ldr	r3, [pc, #532]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x31e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e296      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fbe:	f7fd f8d9 	bl	8001174 <HAL_GetREVID>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d817      	bhi.n	8003ffc <HAL_RCC_OscConfig+0x35c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d108      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x346>
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fdc:	4a77      	ldr	r2, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fe2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fe4:	e075      	b.n	80040d2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fe6:	4b75      	ldr	r3, [pc, #468]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	069b      	lsls	r3, r3, #26
 8003ff4:	4971      	ldr	r1, [pc, #452]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ffa:	e06a      	b.n	80040d2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	496c      	ldr	r1, [pc, #432]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004010:	e05f      	b.n	80040d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d042      	beq.n	80040a0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800401a:	4b68      	ldr	r3, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a67      	ldr	r2, [pc, #412]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd f875 	bl	8001114 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800402e:	f7fd f871 	bl	8001114 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e255      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004040:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800404c:	f7fd f892 	bl	8001174 <HAL_GetREVID>
 8004050:	4603      	mov	r3, r0
 8004052:	f241 0203 	movw	r2, #4099	; 0x1003
 8004056:	4293      	cmp	r3, r2
 8004058:	d817      	bhi.n	800408a <HAL_RCC_OscConfig+0x3ea>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x3d4>
 8004062:	4b56      	ldr	r3, [pc, #344]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800406a:	4a54      	ldr	r2, [pc, #336]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800406c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004070:	6053      	str	r3, [r2, #4]
 8004072:	e02e      	b.n	80040d2 <HAL_RCC_OscConfig+0x432>
 8004074:	4b51      	ldr	r3, [pc, #324]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	069b      	lsls	r3, r3, #26
 8004082:	494e      	ldr	r1, [pc, #312]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
 8004088:	e023      	b.n	80040d2 <HAL_RCC_OscConfig+0x432>
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	061b      	lsls	r3, r3, #24
 8004098:	4948      	ldr	r1, [pc, #288]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	60cb      	str	r3, [r1, #12]
 800409e:	e018      	b.n	80040d2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040a0:	4b46      	ldr	r3, [pc, #280]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a45      	ldr	r2, [pc, #276]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 80040a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd f832 	bl	8001114 <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040b4:	f7fd f82e 	bl	8001114 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e212      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d036      	beq.n	800414c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b35      	ldr	r3, [pc, #212]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	4a34      	ldr	r2, [pc, #208]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fd f80f 	bl	8001114 <HAL_GetTick>
 80040f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fa:	f7fd f80b 	bl	8001114 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1ef      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800410e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x45a>
 8004118:	e018      	b.n	800414c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	4a27      	ldr	r2, [pc, #156]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fc fff5 	bl	8001114 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412e:	f7fc fff1 	bl	8001114 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1d5      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d039      	beq.n	80041cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d019      	beq.n	8004194 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800416a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800416c:	f7fc ffd2 	bl	8001114 <HAL_GetTick>
 8004170:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004174:	f7fc ffce 	bl	8001114 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1b2      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x4d4>
 8004192:	e01b      	b.n	80041cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a08      	ldr	r2, [pc, #32]	; (80041bc <HAL_RCC_OscConfig+0x51c>)
 800419a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800419e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041a0:	f7fc ffb8 	bl	8001114 <HAL_GetTick>
 80041a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041a8:	f7fc ffb4 	bl	8001114 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d904      	bls.n	80041c0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e198      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
 80041ba:	bf00      	nop
 80041bc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c0:	4ba3      	ldr	r3, [pc, #652]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ed      	bne.n	80041a8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8081 	beq.w	80042dc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041da:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <HAL_RCC_OscConfig+0x7b4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a9d      	ldr	r2, [pc, #628]	; (8004454 <HAL_RCC_OscConfig+0x7b4>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e6:	f7fc ff95 	bl	8001114 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7fc ff91 	bl	8001114 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e175      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004200:	4b94      	ldr	r3, [pc, #592]	; (8004454 <HAL_RCC_OscConfig+0x7b4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x582>
 8004214:	4b8e      	ldr	r3, [pc, #568]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a8d      	ldr	r2, [pc, #564]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	e02d      	b.n	800427e <HAL_RCC_OscConfig+0x5de>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x5a4>
 800422a:	4b89      	ldr	r3, [pc, #548]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a88      	ldr	r2, [pc, #544]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	4b86      	ldr	r3, [pc, #536]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a85      	ldr	r2, [pc, #532]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800423c:	f023 0304 	bic.w	r3, r3, #4
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	e01c      	b.n	800427e <HAL_RCC_OscConfig+0x5de>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b05      	cmp	r3, #5
 800424a:	d10c      	bne.n	8004266 <HAL_RCC_OscConfig+0x5c6>
 800424c:	4b80      	ldr	r3, [pc, #512]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a7f      	ldr	r2, [pc, #508]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004252:	f043 0304 	orr.w	r3, r3, #4
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
 8004258:	4b7d      	ldr	r3, [pc, #500]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a7c      	ldr	r2, [pc, #496]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	e00b      	b.n	800427e <HAL_RCC_OscConfig+0x5de>
 8004266:	4b7a      	ldr	r3, [pc, #488]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a79      	ldr	r2, [pc, #484]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	4b77      	ldr	r3, [pc, #476]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a76      	ldr	r2, [pc, #472]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d015      	beq.n	80042b2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fc ff45 	bl	8001114 <HAL_GetTick>
 800428a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fc ff41 	bl	8001114 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e123      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ee      	beq.n	800428e <HAL_RCC_OscConfig+0x5ee>
 80042b0:	e014      	b.n	80042dc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fc ff2f 	bl	8001114 <HAL_GetTick>
 80042b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fc ff2b 	bl	8001114 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e10d      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d0:	4b5f      	ldr	r3, [pc, #380]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1ee      	bne.n	80042ba <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8102 	beq.w	80044ea <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042e6:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ee:	2b18      	cmp	r3, #24
 80042f0:	f000 80bd 	beq.w	800446e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	f040 8095 	bne.w	8004428 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b54      	ldr	r3, [pc, #336]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a53      	ldr	r2, [pc, #332]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fc ff03 	bl	8001114 <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fc feff 	bl	8001114 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0e3      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004324:	4b4a      	ldr	r3, [pc, #296]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004330:	4b47      	ldr	r3, [pc, #284]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004334:	4b48      	ldr	r3, [pc, #288]	; (8004458 <HAL_RCC_OscConfig+0x7b8>)
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	430a      	orrs	r2, r1
 8004344:	4942      	ldr	r1, [pc, #264]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004346:	4313      	orrs	r3, r2
 8004348:	628b      	str	r3, [r1, #40]	; 0x28
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	3b01      	subs	r3, #1
 8004350:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	3b01      	subs	r3, #1
 800435a:	025b      	lsls	r3, r3, #9
 800435c:	b29b      	uxth	r3, r3
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	3b01      	subs	r3, #1
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800437a:	4935      	ldr	r1, [pc, #212]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004380:	4b33      	ldr	r3, [pc, #204]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a32      	ldr	r2, [pc, #200]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800438c:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800438e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_RCC_OscConfig+0x7bc>)
 8004392:	4013      	ands	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004398:	00d2      	lsls	r2, r2, #3
 800439a:	492d      	ldr	r1, [pc, #180]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043a0:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	f023 020c 	bic.w	r2, r3, #12
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	4928      	ldr	r1, [pc, #160]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043b2:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f023 0202 	bic.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	4924      	ldr	r1, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	4a21      	ldr	r2, [pc, #132]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043dc:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 80043fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fc fe88 	bl	8001114 <HAL_GetTick>
 8004404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004408:	f7fc fe84 	bl	8001114 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e068      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x768>
 8004426:	e060      	b.n	80044ea <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a08      	ldr	r2, [pc, #32]	; (8004450 <HAL_RCC_OscConfig+0x7b0>)
 800442e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fe6e 	bl	8001114 <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800443a:	e011      	b.n	8004460 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fe6a 	bl	8001114 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d90a      	bls.n	8004460 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04e      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
 800444e:	bf00      	nop
 8004450:	58024400 	.word	0x58024400
 8004454:	58024800 	.word	0x58024800
 8004458:	fffffc0c 	.word	0xfffffc0c
 800445c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCC_OscConfig+0x854>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e7      	bne.n	800443c <HAL_RCC_OscConfig+0x79c>
 800446c:	e03d      	b.n	80044ea <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_RCC_OscConfig+0x854>)
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004474:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <HAL_RCC_OscConfig+0x854>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2b01      	cmp	r3, #1
 8004480:	d031      	beq.n	80044e6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d12a      	bne.n	80044e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d122      	bne.n	80044e6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d11a      	bne.n	80044e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	0a5b      	lsrs	r3, r3, #9
 80044b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d111      	bne.n	80044e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d108      	bne.n	80044e6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	0e1b      	lsrs	r3, r3, #24
 80044d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	58024400 	.word	0x58024400

080044f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e19c      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d910      	bls.n	800453c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b87      	ldr	r3, [pc, #540]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 020f 	bic.w	r2, r3, #15
 8004522:	4985      	ldr	r1, [pc, #532]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b83      	ldr	r3, [pc, #524]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e184      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	4b7b      	ldr	r3, [pc, #492]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004554:	429a      	cmp	r2, r3
 8004556:	d908      	bls.n	800456a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004558:	4b78      	ldr	r3, [pc, #480]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4975      	ldr	r1, [pc, #468]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004566:	4313      	orrs	r3, r2
 8004568:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	4b70      	ldr	r3, [pc, #448]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004582:	429a      	cmp	r2, r3
 8004584:	d908      	bls.n	8004598 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004586:	4b6d      	ldr	r3, [pc, #436]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	496a      	ldr	r1, [pc, #424]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004594:	4313      	orrs	r3, r2
 8004596:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b64      	ldr	r3, [pc, #400]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	495e      	ldr	r1, [pc, #376]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045de:	429a      	cmp	r2, r3
 80045e0:	d908      	bls.n	80045f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045e2:	4b56      	ldr	r3, [pc, #344]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4953      	ldr	r1, [pc, #332]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	4b4d      	ldr	r3, [pc, #308]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	429a      	cmp	r2, r3
 800460e:	d908      	bls.n	8004622 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f023 020f 	bic.w	r2, r3, #15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4947      	ldr	r1, [pc, #284]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800461e:	4313      	orrs	r3, r2
 8004620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d055      	beq.n	80046da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800462e:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4940      	ldr	r1, [pc, #256]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800463c:	4313      	orrs	r3, r2
 800463e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d107      	bne.n	8004658 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004648:	4b3c      	ldr	r3, [pc, #240]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d121      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0f6      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d107      	bne.n	8004670 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0ea      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004678:	4b30      	ldr	r3, [pc, #192]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0de      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004688:	4b2c      	ldr	r3, [pc, #176]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0d6      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f023 0207 	bic.w	r2, r3, #7
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4925      	ldr	r1, [pc, #148]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046aa:	f7fc fd33 	bl	8001114 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b2:	f7fc fd2f 	bl	8001114 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0be      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d1eb      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d208      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	490e      	ldr	r1, [pc, #56]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004704:	4313      	orrs	r3, r2
 8004706:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d214      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	4906      	ldr	r1, [pc, #24]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e086      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
 8004738:	52002000 	.word	0x52002000
 800473c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004758:	429a      	cmp	r2, r3
 800475a:	d208      	bcs.n	800476e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800475c:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4939      	ldr	r1, [pc, #228]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 800476a:	4313      	orrs	r3, r2
 800476c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004786:	429a      	cmp	r2, r3
 8004788:	d208      	bcs.n	800479c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800478a:	4b31      	ldr	r3, [pc, #196]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	492e      	ldr	r1, [pc, #184]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004798:	4313      	orrs	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	4b28      	ldr	r3, [pc, #160]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d208      	bcs.n	80047ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4922      	ldr	r1, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d208      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4917      	ldr	r1, [pc, #92]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047f8:	f000 f834 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	4912      	ldr	r1, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x35c>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
 8004814:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <HAL_RCC_ClockConfig+0x35c>)
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x360>)
 800482e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x364>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_ClockConfig+0x368>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fc fc20 	bl	8001080 <HAL_InitTick>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	58024400 	.word	0x58024400
 8004854:	080090b0 	.word	0x080090b0
 8004858:	24000004 	.word	0x24000004
 800485c:	24000000 	.word	0x24000000
 8004860:	24000030 	.word	0x24000030

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486a:	4bb3      	ldr	r3, [pc, #716]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004872:	2b18      	cmp	r3, #24
 8004874:	f200 8155 	bhi.w	8004b22 <HAL_RCC_GetSysClockFreq+0x2be>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_RCC_GetSysClockFreq+0x1c>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048e5 	.word	0x080048e5
 8004884:	08004b23 	.word	0x08004b23
 8004888:	08004b23 	.word	0x08004b23
 800488c:	08004b23 	.word	0x08004b23
 8004890:	08004b23 	.word	0x08004b23
 8004894:	08004b23 	.word	0x08004b23
 8004898:	08004b23 	.word	0x08004b23
 800489c:	08004b23 	.word	0x08004b23
 80048a0:	0800490b 	.word	0x0800490b
 80048a4:	08004b23 	.word	0x08004b23
 80048a8:	08004b23 	.word	0x08004b23
 80048ac:	08004b23 	.word	0x08004b23
 80048b0:	08004b23 	.word	0x08004b23
 80048b4:	08004b23 	.word	0x08004b23
 80048b8:	08004b23 	.word	0x08004b23
 80048bc:	08004b23 	.word	0x08004b23
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004b23 	.word	0x08004b23
 80048c8:	08004b23 	.word	0x08004b23
 80048cc:	08004b23 	.word	0x08004b23
 80048d0:	08004b23 	.word	0x08004b23
 80048d4:	08004b23 	.word	0x08004b23
 80048d8:	08004b23 	.word	0x08004b23
 80048dc:	08004b23 	.word	0x08004b23
 80048e0:	08004917 	.word	0x08004917
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048e4:	4b94      	ldr	r3, [pc, #592]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048f0:	4b91      	ldr	r3, [pc, #580]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	08db      	lsrs	r3, r3, #3
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	4a90      	ldr	r2, [pc, #576]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004902:	e111      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004904:	4b8d      	ldr	r3, [pc, #564]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004906:	61bb      	str	r3, [r7, #24]
    break;
 8004908:	e10e      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800490a:	4b8d      	ldr	r3, [pc, #564]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800490c:	61bb      	str	r3, [r7, #24]
    break;
 800490e:	e10b      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004910:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004912:	61bb      	str	r3, [r7, #24]
    break;
 8004914:	e108      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004916:	4b88      	ldr	r3, [pc, #544]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004920:	4b85      	ldr	r3, [pc, #532]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800492c:	4b82      	ldr	r3, [pc, #520]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004936:	4b80      	ldr	r3, [pc, #512]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80e1 	beq.w	8004b1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b02      	cmp	r3, #2
 800495e:	f000 8083 	beq.w	8004a68 <HAL_RCC_GetSysClockFreq+0x204>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b02      	cmp	r3, #2
 8004966:	f200 80a1 	bhi.w	8004aac <HAL_RCC_GetSysClockFreq+0x248>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x114>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d056      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004976:	e099      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004978:	4b6f      	ldr	r3, [pc, #444]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02d      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004984:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	4a6b      	ldr	r2, [pc, #428]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b62      	ldr	r3, [pc, #392]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80049de:	e087      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004b4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b51      	ldr	r3, [pc, #324]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	e065      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e043      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004b54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	e021      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	0a5b      	lsrs	r3, r3, #9
 8004af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afa:	3301      	adds	r3, #1
 8004afc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b14:	ee17 3a90 	vmov	r3, s15
 8004b18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b1a:	e005      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
    break;
 8004b20:	e002      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b24:	61bb      	str	r3, [r7, #24]
    break;
 8004b26:	bf00      	nop
  }

  return sysclockfreq;
 8004b28:	69bb      	ldr	r3, [r7, #24]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3724      	adds	r7, #36	; 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	03d09000 	.word	0x03d09000
 8004b40:	003d0900 	.word	0x003d0900
 8004b44:	017d7840 	.word	0x017d7840
 8004b48:	46000000 	.word	0x46000000
 8004b4c:	4c742400 	.word	0x4c742400
 8004b50:	4a742400 	.word	0x4a742400
 8004b54:	4bbebc20 	.word	0x4bbebc20

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b5e:	f7ff fe81 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490f      	ldr	r1, [pc, #60]	; (8004bac <HAL_RCC_GetHCLKFreq+0x54>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_RCC_GetHCLKFreq+0x54>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b96:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	080090b0 	.word	0x080090b0
 8004bb0:	24000004 	.word	0x24000004
 8004bb4:	24000000 	.word	0x24000000

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004bbc:	f7ff ffcc 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4904      	ldr	r1, [pc, #16]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	080090b0 	.word	0x080090b0

08004be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004be8:	f7ff ffb6 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4904      	ldr	r1, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	080090b0 	.word	0x080090b0

08004c10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d03f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c34:	d02a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c3a:	d824      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c40:	d018      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c46:	d81e      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c50:	d007      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c52:	e018      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4bab      	ldr	r3, [pc, #684]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4aaa      	ldr	r2, [pc, #680]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c60:	e015      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f9cf 	bl	800600c <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c72:	e00c      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3324      	adds	r3, #36	; 0x24
 8004c78:	2102      	movs	r1, #2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fa78 	bl	8006170 <RCCEx_PLL3_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c84:	e003      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c94:	4b9b      	ldr	r3, [pc, #620]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca0:	4998      	ldr	r1, [pc, #608]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ca6:	e001      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03d      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d826      	bhi.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cdd 	.word	0x08004cdd
 8004ccc:	08004ceb 	.word	0x08004ceb
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d15 	.word	0x08004d15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cdc:	4b89      	ldr	r3, [pc, #548]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4a88      	ldr	r2, [pc, #544]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce8:	e015      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 f98b 	bl	800600c <RCCEx_PLL2_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cfa:	e00c      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3324      	adds	r3, #36	; 0x24
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 fa34 	bl	8006170 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d0c:	e003      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
      break;
 8004d12:	e000      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d1c:	4b79      	ldr	r3, [pc, #484]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d20:	f023 0207 	bic.w	r2, r3, #7
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d28:	4976      	ldr	r1, [pc, #472]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d2e:	e001      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d042      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d48:	d02b      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	d825      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d50:	2bc0      	cmp	r3, #192	; 0xc0
 8004d52:	d028      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d54:	2bc0      	cmp	r3, #192	; 0xc0
 8004d56:	d821      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d016      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004d5c:	2b80      	cmp	r3, #128	; 0x80
 8004d5e:	d81d      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d007      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d68:	e018      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6a:	4b66      	ldr	r3, [pc, #408]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	4a65      	ldr	r2, [pc, #404]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d76:	e017      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f944 	bl	800600c <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d88:	e00e      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3324      	adds	r3, #36	; 0x24
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 f9ed 	bl	8006170 <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d9a:	e005      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004da0:	e002      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004da2:	bf00      	nop
 8004da4:	e000      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004dae:	4b55      	ldr	r3, [pc, #340]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	4952      	ldr	r1, [pc, #328]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	650b      	str	r3, [r1, #80]	; 0x50
 8004dc0:	e001      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d049      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ddc:	d030      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004de2:	d82a      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004de4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004de8:	d02c      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004dea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dee:	d824      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df4:	d018      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfa:	d81e      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e04:	d007      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004e06:	e018      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e08:	4b3e      	ldr	r3, [pc, #248]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	4a3d      	ldr	r2, [pc, #244]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e14:	e017      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f8f5 	bl	800600c <RCCEx_PLL2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e26:	e00e      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3324      	adds	r3, #36	; 0x24
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 f99e 	bl	8006170 <RCCEx_PLL3_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e38:	e005      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e5a:	492a      	ldr	r1, [pc, #168]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	658b      	str	r3, [r1, #88]	; 0x58
 8004e60:	e001      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04c      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e7c:	d030      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e82:	d82a      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e88:	d02c      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004e8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e8e:	d824      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e94:	d018      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e9a:	d81e      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea4:	d007      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ea6:	e018      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea8:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eb4:	e017      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 f8a5 	bl	800600c <RCCEx_PLL2_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ec6:	e00e      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 f94e 	bl	8006170 <RCCEx_PLL3_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10d      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004efa:	4902      	ldr	r1, [pc, #8]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	658b      	str	r3, [r1, #88]	; 0x58
 8004f00:	e004      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004f02:	bf00      	nop
 8004f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d032      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d01c      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f20:	2b30      	cmp	r3, #48	; 0x30
 8004f22:	d817      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d00c      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d813      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d016      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d10f      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f34:	4baf      	ldr	r3, [pc, #700]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	4aae      	ldr	r2, [pc, #696]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f40:	e00e      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 f85f 	bl	800600c <RCCEx_PLL2_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f66:	4ba3      	ldr	r3, [pc, #652]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	49a0      	ldr	r1, [pc, #640]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f78:	e001      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d047      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f92:	d030      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f98:	d82a      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f9e:	d02c      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004fa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fa4:	d824      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004faa:	d018      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb0:	d81e      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d007      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004fbc:	e018      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbe:	4b8d      	ldr	r3, [pc, #564]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4a8c      	ldr	r2, [pc, #560]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fca:	e017      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 f81a 	bl	800600c <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e00e      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3324      	adds	r3, #36	; 0x24
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 f8c3 	bl	8006170 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	e002      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005002:	4b7c      	ldr	r3, [pc, #496]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	4979      	ldr	r1, [pc, #484]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005010:	4313      	orrs	r3, r2
 8005012:	650b      	str	r3, [r1, #80]	; 0x50
 8005014:	e001      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d049      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502e:	d02e      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005034:	d828      	bhi.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800503a:	d02a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800503c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005040:	d822      	bhi.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005046:	d026      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800504c:	d81c      	bhi.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800504e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005052:	d010      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005058:	d816      	bhi.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01d      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d111      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f000 ffce 	bl	800600c <RCCEx_PLL2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005074:	e012      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3324      	adds	r3, #36	; 0x24
 800507a:	2101      	movs	r1, #1
 800507c:	4618      	mov	r0, r3
 800507e:	f001 f877 	bl	8006170 <RCCEx_PLL3_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005086:	e009      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75fb      	strb	r3, [r7, #23]
      break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800509a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509c:	7dfb      	ldrb	r3, [r7, #23]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	4951      	ldr	r1, [pc, #324]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	650b      	str	r3, [r1, #80]	; 0x50
 80050b4:	e001      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
 80050b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04b      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d0:	d02e      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80050d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d6:	d828      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050dc:	d02a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d822      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050e8:	d026      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80050ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050ee:	d81c      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d010      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d816      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01d      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005104:	d111      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3304      	adds	r3, #4
 800510a:	2101      	movs	r1, #1
 800510c:	4618      	mov	r0, r3
 800510e:	f000 ff7d 	bl	800600c <RCCEx_PLL2_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005116:	e012      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3324      	adds	r3, #36	; 0x24
 800511c:	2101      	movs	r1, #1
 800511e:	4618      	mov	r0, r3
 8005120:	f001 f826 	bl	8006170 <RCCEx_PLL3_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005128:	e009      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
      break;
 800512e:	e006      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005130:	bf00      	nop
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800513c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005152:	4928      	ldr	r1, [pc, #160]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005154:	4313      	orrs	r3, r2
 8005156:	658b      	str	r3, [r1, #88]	; 0x58
 8005158:	e001      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d02f      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005172:	d00e      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005178:	d814      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d015      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005182:	d10f      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800518a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005190:	e00c      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	2101      	movs	r1, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f000 ff37 	bl	800600c <RCCEx_PLL2_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051a2:	e003      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	e000      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80051aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051be:	490d      	ldr	r1, [pc, #52]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	650b      	str	r3, [r1, #80]	; 0x50
 80051c4:	e001      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d033      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d81c      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	0800521f 	.word	0x0800521f
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	08005207 	.word	0x08005207
 80051f0:	0800521f 	.word	0x0800521f
 80051f4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f8:	4bb8      	ldr	r3, [pc, #736]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4ab7      	ldr	r2, [pc, #732]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005204:	e00c      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	2102      	movs	r1, #2
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fefd 	bl	800600c <RCCEx_PLL2_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800521e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005226:	4bad      	ldr	r3, [pc, #692]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	f023 0203 	bic.w	r2, r3, #3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	49aa      	ldr	r1, [pc, #680]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005238:	e001      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8086 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800524c:	4ba4      	ldr	r3, [pc, #656]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4aa3      	ldr	r2, [pc, #652]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005258:	f7fb ff5c 	bl	8001114 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800525e:	e009      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005260:	f7fb ff58 	bl	8001114 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	; 0x64
 800526c:	d902      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	75fb      	strb	r3, [r7, #23]
        break;
 8005272:	e005      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005274:	4b9a      	ldr	r3, [pc, #616]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0ef      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d166      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005286:	4b95      	ldr	r3, [pc, #596]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005290:	4053      	eors	r3, r2
 8005292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005296:	2b00      	cmp	r3, #0
 8005298:	d013      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800529a:	4b90      	ldr	r3, [pc, #576]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a4:	4b8d      	ldr	r3, [pc, #564]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a8c      	ldr	r2, [pc, #560]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b0:	4b8a      	ldr	r3, [pc, #552]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a89      	ldr	r2, [pc, #548]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052bc:	4a87      	ldr	r2, [pc, #540]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052cc:	d115      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ce:	f7fb ff21 	bl	8001114 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052d4:	e00b      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d6:	f7fb ff1d 	bl	8001114 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d902      	bls.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	75fb      	strb	r3, [r7, #23]
            break;
 80052ec:	e005      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ee:	4b7b      	ldr	r3, [pc, #492]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0ed      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d126      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530e:	d10d      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005310:	4b72      	ldr	r3, [pc, #456]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800531e:	0919      	lsrs	r1, r3, #4
 8005320:	4b70      	ldr	r3, [pc, #448]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005322:	400b      	ands	r3, r1
 8005324:	496d      	ldr	r1, [pc, #436]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]
 800532a:	e005      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800532c:	4b6b      	ldr	r3, [pc, #428]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	4a6a      	ldr	r2, [pc, #424]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005336:	6113      	str	r3, [r2, #16]
 8005338:	4b68      	ldr	r3, [pc, #416]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800533a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005346:	4965      	ldr	r1, [pc, #404]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	670b      	str	r3, [r1, #112]	; 0x70
 800534c:	e004      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	75bb      	strb	r3, [r7, #22]
 8005352:	e001      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d07e      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005368:	2b28      	cmp	r3, #40	; 0x28
 800536a:	d867      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005443 	.word	0x08005443
 8005378:	0800543d 	.word	0x0800543d
 800537c:	0800543d 	.word	0x0800543d
 8005380:	0800543d 	.word	0x0800543d
 8005384:	0800543d 	.word	0x0800543d
 8005388:	0800543d 	.word	0x0800543d
 800538c:	0800543d 	.word	0x0800543d
 8005390:	0800543d 	.word	0x0800543d
 8005394:	08005419 	.word	0x08005419
 8005398:	0800543d 	.word	0x0800543d
 800539c:	0800543d 	.word	0x0800543d
 80053a0:	0800543d 	.word	0x0800543d
 80053a4:	0800543d 	.word	0x0800543d
 80053a8:	0800543d 	.word	0x0800543d
 80053ac:	0800543d 	.word	0x0800543d
 80053b0:	0800543d 	.word	0x0800543d
 80053b4:	0800542b 	.word	0x0800542b
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	0800543d 	.word	0x0800543d
 80053c0:	0800543d 	.word	0x0800543d
 80053c4:	0800543d 	.word	0x0800543d
 80053c8:	0800543d 	.word	0x0800543d
 80053cc:	0800543d 	.word	0x0800543d
 80053d0:	0800543d 	.word	0x0800543d
 80053d4:	08005443 	.word	0x08005443
 80053d8:	0800543d 	.word	0x0800543d
 80053dc:	0800543d 	.word	0x0800543d
 80053e0:	0800543d 	.word	0x0800543d
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800543d 	.word	0x0800543d
 80053f4:	08005443 	.word	0x08005443
 80053f8:	0800543d 	.word	0x0800543d
 80053fc:	0800543d 	.word	0x0800543d
 8005400:	0800543d 	.word	0x0800543d
 8005404:	0800543d 	.word	0x0800543d
 8005408:	0800543d 	.word	0x0800543d
 800540c:	0800543d 	.word	0x0800543d
 8005410:	0800543d 	.word	0x0800543d
 8005414:	08005443 	.word	0x08005443
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fdf4 	bl	800600c <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005428:	e00c      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fe9d 	bl	8006170 <RCCEx_PLL3_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
      break;
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005456:	4921      	ldr	r1, [pc, #132]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	654b      	str	r3, [r1, #84]	; 0x54
 800545c:	e001      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03e      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	2b05      	cmp	r3, #5
 8005474:	d820      	bhi.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	080054bf 	.word	0x080054bf
 8005480:	08005495 	.word	0x08005495
 8005484:	080054a7 	.word	0x080054a7
 8005488:	080054bf 	.word	0x080054bf
 800548c:	080054bf 	.word	0x080054bf
 8005490:	080054bf 	.word	0x080054bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fdb6 	bl	800600c <RCCEx_PLL2_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054a4:	e00c      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3324      	adds	r3, #36	; 0x24
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fe5f 	bl	8006170 <RCCEx_PLL3_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054b6:	e003      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
      break;
 80054bc:	e000      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80054be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d110      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f023 0207 	bic.w	r2, r3, #7
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	4902      	ldr	r1, [pc, #8]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	654b      	str	r3, [r1, #84]	; 0x54
 80054d8:	e008      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80054da:	bf00      	nop
 80054dc:	58024400 	.word	0x58024400
 80054e0:	58024800 	.word	0x58024800
 80054e4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d039      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d820      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800554b 	.word	0x0800554b
 800550c:	08005521 	.word	0x08005521
 8005510:	08005533 	.word	0x08005533
 8005514:	0800554b 	.word	0x0800554b
 8005518:	0800554b 	.word	0x0800554b
 800551c:	0800554b 	.word	0x0800554b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2101      	movs	r1, #1
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fd70 	bl	800600c <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005530:	e00c      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3324      	adds	r3, #36	; 0x24
 8005536:	2101      	movs	r1, #1
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fe19 	bl	8006170 <RCCEx_PLL3_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005542:	e003      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
      break;
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800554a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005552:	4bb7      	ldr	r3, [pc, #732]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	f023 0207 	bic.w	r2, r3, #7
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	49b3      	ldr	r1, [pc, #716]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005562:	4313      	orrs	r3, r2
 8005564:	658b      	str	r3, [r1, #88]	; 0x58
 8005566:	e001      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d04b      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005582:	d02e      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005588:	d828      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d02a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d822      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559a:	d026      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800559c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055a0:	d81c      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80055a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a6:	d010      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80055a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ac:	d816      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01d      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80055b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b6:	d111      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fd24 	bl	800600c <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055c8:	e012      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3324      	adds	r3, #36	; 0x24
 80055ce:	2102      	movs	r1, #2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fdcd 	bl	8006170 <RCCEx_PLL3_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055da:	e009      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
      break;
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055e2:	bf00      	nop
 80055e4:	e004      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055f6:	4b8e      	ldr	r3, [pc, #568]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005604:	498a      	ldr	r1, [pc, #552]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005606:	4313      	orrs	r3, r2
 8005608:	654b      	str	r3, [r1, #84]	; 0x54
 800560a:	e001      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d04b      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005622:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005626:	d02e      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005628:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800562c:	d828      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d02a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005638:	d822      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800563a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800563e:	d026      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005644:	d81c      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	d010      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005650:	d816      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01d      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565a:	d111      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fcd2 	bl	800600c <RCCEx_PLL2_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800566c:	e012      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3324      	adds	r3, #36	; 0x24
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fd7b 	bl	8006170 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800567e:	e009      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
      break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800569a:	4b65      	ldr	r3, [pc, #404]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800569c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a8:	4961      	ldr	r1, [pc, #388]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	658b      	str	r3, [r1, #88]	; 0x58
 80056ae:	e001      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d04b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056ca:	d02e      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80056cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056d0:	d828      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	d02a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056dc:	d822      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056e2:	d026      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80056e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056e8:	d81c      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ee:	d010      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f4:	d816      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01d      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80056fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fe:	d111      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fc80 	bl	800600c <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005710:	e012      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3324      	adds	r3, #36	; 0x24
 8005716:	2102      	movs	r1, #2
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fd29 	bl	8006170 <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005722:	e009      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
      break;
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800573e:	4b3c      	ldr	r3, [pc, #240]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800574c:	4938      	ldr	r1, [pc, #224]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800574e:	4313      	orrs	r3, r2
 8005750:	658b      	str	r3, [r1, #88]	; 0x58
 8005752:	e001      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	d10a      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	2102      	movs	r1, #2
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fcfa 	bl	8006170 <RCCEx_PLL3_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005786:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005794:	4926      	ldr	r1, [pc, #152]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005796:	4313      	orrs	r3, r2
 8005798:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d10a      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3324      	adds	r3, #36	; 0x24
 80057b6:	2102      	movs	r1, #2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fcd9 	bl	8006170 <RCCEx_PLL3_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d6:	4916      	ldr	r1, [pc, #88]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d036      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f2:	d01f      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80057f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f8:	d817      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80057fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005802:	d009      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005804:	e011      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fbfd 	bl	800600c <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005816:	e00e      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fca6 	bl	8006170 <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005828:	e005      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
      break;
 800582e:	e002      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005830:	58024400 	.word	0x58024400
      break;
 8005834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800583c:	4b93      	ldr	r3, [pc, #588]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800584a:	4990      	ldr	r1, [pc, #576]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	658b      	str	r3, [r1, #88]	; 0x58
 8005850:	e001      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d033      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800586c:	d01c      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800586e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005872:	d816      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005878:	d003      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800587a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800587e:	d007      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005880:	e00f      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005882:	4b82      	ldr	r3, [pc, #520]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a81      	ldr	r2, [pc, #516]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800588e:	e00c      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	2101      	movs	r1, #1
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fc6a 	bl	8006170 <RCCEx_PLL3_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80058a0:	e003      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	75fb      	strb	r3, [r7, #23]
      break;
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80058a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058b0:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058be:	4973      	ldr	r1, [pc, #460]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	654b      	str	r3, [r1, #84]	; 0x54
 80058c4:	e001      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d029      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e2:	d007      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80058e4:	e00f      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e6:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058f2:	e00b      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2102      	movs	r1, #2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fb86 	bl	800600c <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005904:	e002      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
      break;
 800590a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005912:	4b5e      	ldr	r3, [pc, #376]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005916:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	495b      	ldr	r1, [pc, #364]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005924:	e001      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3324      	adds	r3, #36	; 0x24
 800593a:	2102      	movs	r1, #2
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fc17 	bl	8006170 <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d030      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005960:	d017      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005966:	d811      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d013      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800596e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005972:	d80b      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d010      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597c:	d106      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597e:	4b43      	ldr	r3, [pc, #268]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	4a42      	ldr	r2, [pc, #264]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800598a:	e007      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
      break;
 8005990:	e004      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005992:	bf00      	nop
 8005994:	e002      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005996:	bf00      	nop
 8005998:	e000      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800599a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a2:	4b3a      	ldr	r3, [pc, #232]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ae:	4937      	ldr	r1, [pc, #220]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	654b      	str	r3, [r1, #84]	; 0x54
 80059b4:	e001      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059c6:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	492e      	ldr	r1, [pc, #184]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059e4:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059f2:	4926      	ldr	r1, [pc, #152]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a10:	491e      	ldr	r1, [pc, #120]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a22:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a2c:	6113      	str	r3, [r2, #16]
 8005a2e:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a38:	4914      	ldr	r1, [pc, #80]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da08      	bge.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	490e      	ldr	r1, [pc, #56]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	4906      	ldr	r1, [pc, #24]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a78:	7dbb      	ldrb	r3, [r7, #22]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400

08005a90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a94:	f7ff f860 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4904      	ldr	r1, [pc, #16]	; (8005ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	080090b0 	.word	0x080090b0

08005abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	; 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ac4:	4ba1      	ldr	r3, [pc, #644]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ace:	4b9f      	ldr	r3, [pc, #636]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	0b1b      	lsrs	r3, r3, #12
 8005ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ada:	4b9c      	ldr	r3, [pc, #624]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005ae6:	4b99      	ldr	r3, [pc, #612]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	08db      	lsrs	r3, r3, #3
 8005aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8111 	beq.w	8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	f000 8083 	beq.w	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	f200 80a1 	bhi.w	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d056      	beq.n	8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b26:	e099      	b.n	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b28:	4b88      	ldr	r3, [pc, #544]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d02d      	beq.n	8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b34:	4b85      	ldr	r3, [pc, #532]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	08db      	lsrs	r3, r3, #3
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	4a84      	ldr	r2, [pc, #528]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
 8005b44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	ee07 3a90 	vmov	s15, r3
 8005b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5e:	4b7b      	ldr	r3, [pc, #492]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b8e:	e087      	b.n	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b6a      	ldr	r3, [pc, #424]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd2:	e065      	b.n	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b59      	ldr	r3, [pc, #356]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c16:	e043      	b.n	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b48      	ldr	r3, [pc, #288]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c5a:	e021      	b.n	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6e:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	0a5b      	lsrs	r3, r3, #9
 8005ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc6:	ee17 2a90 	vmov	r2, s15
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005cce:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	0c1b      	lsrs	r3, r3, #16
 8005cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd8:	ee07 3a90 	vmov	s15, r3
 8005cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf4:	ee17 2a90 	vmov	r2, s15
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005cfc:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	0e1b      	lsrs	r3, r3, #24
 8005d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d22:	ee17 2a90 	vmov	r2, s15
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d2a:	e008      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	3724      	adds	r7, #36	; 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	03d09000 	.word	0x03d09000
 8005d54:	46000000 	.word	0x46000000
 8005d58:	4c742400 	.word	0x4c742400
 8005d5c:	4a742400 	.word	0x4a742400
 8005d60:	4bbebc20 	.word	0x4bbebc20

08005d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d6c:	4ba1      	ldr	r3, [pc, #644]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d76:	4b9f      	ldr	r3, [pc, #636]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	0d1b      	lsrs	r3, r3, #20
 8005d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d82:	4b9c      	ldr	r3, [pc, #624]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d8e:	4b99      	ldr	r3, [pc, #612]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	08db      	lsrs	r3, r3, #3
 8005d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8111 	beq.w	8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	f000 8083 	beq.w	8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f200 80a1 	bhi.w	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d056      	beq.n	8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dce:	e099      	b.n	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd0:	4b88      	ldr	r3, [pc, #544]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02d      	beq.n	8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ddc:	4b85      	ldr	r3, [pc, #532]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	08db      	lsrs	r3, r3, #3
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	4a84      	ldr	r2, [pc, #528]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b7b      	ldr	r3, [pc, #492]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e36:	e087      	b.n	8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4a:	4b6a      	ldr	r3, [pc, #424]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e7a:	e065      	b.n	8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	4b59      	ldr	r3, [pc, #356]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ebe:	e043      	b.n	8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed2:	4b48      	ldr	r3, [pc, #288]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f02:	e021      	b.n	8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f16:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f48:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	0a5b      	lsrs	r3, r3, #9
 8005f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6e:	ee17 2a90 	vmov	r2, s15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f76:	4b1f      	ldr	r3, [pc, #124]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9c:	ee17 2a90 	vmov	r2, s15
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005fa4:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	0e1b      	lsrs	r3, r3, #24
 8005faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fca:	ee17 2a90 	vmov	r2, s15
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]
}
 8005fe6:	bf00      	nop
 8005fe8:	3724      	adds	r7, #36	; 0x24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	03d09000 	.word	0x03d09000
 8005ffc:	46000000 	.word	0x46000000
 8006000:	4c742400 	.word	0x4c742400
 8006004:	4a742400 	.word	0x4a742400
 8006008:	4bbebc20 	.word	0x4bbebc20

0800600c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800601a:	4b53      	ldr	r3, [pc, #332]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d101      	bne.n	800602a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e099      	b.n	800615e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800602a:	4b4f      	ldr	r3, [pc, #316]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4e      	ldr	r2, [pc, #312]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006036:	f7fb f86d 	bl	8001114 <HAL_GetTick>
 800603a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800603c:	e008      	b.n	8006050 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800603e:	f7fb f869 	bl	8001114 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e086      	b.n	800615e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f0      	bne.n	800603e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800605c:	4b42      	ldr	r3, [pc, #264]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	493f      	ldr	r1, [pc, #252]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 800606c:	4313      	orrs	r3, r2
 800606e:	628b      	str	r3, [r1, #40]	; 0x28
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	3b01      	subs	r3, #1
 8006076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	3b01      	subs	r3, #1
 8006080:	025b      	lsls	r3, r3, #9
 8006082:	b29b      	uxth	r3, r3
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	041b      	lsls	r3, r3, #16
 800608e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	3b01      	subs	r3, #1
 800609a:	061b      	lsls	r3, r3, #24
 800609c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060a0:	4931      	ldr	r1, [pc, #196]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060a6:	4b30      	ldr	r3, [pc, #192]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	492d      	ldr	r1, [pc, #180]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060b8:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f023 0220 	bic.w	r2, r3, #32
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	4928      	ldr	r1, [pc, #160]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060ca:	4b27      	ldr	r3, [pc, #156]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	4a26      	ldr	r2, [pc, #152]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060d0:	f023 0310 	bic.w	r3, r3, #16
 80060d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060d6:	4b24      	ldr	r3, [pc, #144]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <RCCEx_PLL2_Config+0x160>)
 80060dc:	4013      	ands	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	69d2      	ldr	r2, [r2, #28]
 80060e2:	00d2      	lsls	r2, r2, #3
 80060e4:	4920      	ldr	r1, [pc, #128]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060ea:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060f0:	f043 0310 	orr.w	r3, r3, #16
 80060f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060fc:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a19      	ldr	r2, [pc, #100]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006108:	e00f      	b.n	800612a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d106      	bne.n	800611e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006110:	4b15      	ldr	r3, [pc, #84]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4a14      	ldr	r2, [pc, #80]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800611c:	e005      	b.n	800612a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800611e:	4b12      	ldr	r3, [pc, #72]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4a11      	ldr	r2, [pc, #68]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a0e      	ldr	r2, [pc, #56]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006136:	f7fa ffed 	bl	8001114 <HAL_GetTick>
 800613a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800613c:	e008      	b.n	8006150 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800613e:	f7fa ffe9 	bl	8001114 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e006      	b.n	800615e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <RCCEx_PLL2_Config+0x15c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	58024400 	.word	0x58024400
 800616c:	ffff0007 	.word	0xffff0007

08006170 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800617e:	4b53      	ldr	r3, [pc, #332]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b03      	cmp	r3, #3
 8006188:	d101      	bne.n	800618e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e099      	b.n	80062c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800618e:	4b4f      	ldr	r3, [pc, #316]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a4e      	ldr	r2, [pc, #312]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800619a:	f7fa ffbb 	bl	8001114 <HAL_GetTick>
 800619e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061a0:	e008      	b.n	80061b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80061a2:	f7fa ffb7 	bl	8001114 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e086      	b.n	80062c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061b4:	4b45      	ldr	r3, [pc, #276]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f0      	bne.n	80061a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061c0:	4b42      	ldr	r3, [pc, #264]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	051b      	lsls	r3, r3, #20
 80061ce:	493f      	ldr	r1, [pc, #252]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	628b      	str	r3, [r1, #40]	; 0x28
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	3b01      	subs	r3, #1
 80061da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	025b      	lsls	r3, r3, #9
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	061b      	lsls	r3, r3, #24
 8006200:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006204:	4931      	ldr	r1, [pc, #196]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800620a:	4b30      	ldr	r3, [pc, #192]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	492d      	ldr	r1, [pc, #180]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006218:	4313      	orrs	r3, r2
 800621a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800621c:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	4928      	ldr	r1, [pc, #160]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	4a26      	ldr	r2, [pc, #152]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 800623c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623e:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <RCCEx_PLL3_Config+0x160>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	69d2      	ldr	r2, [r2, #28]
 8006246:	00d2      	lsls	r2, r2, #3
 8006248:	4920      	ldr	r1, [pc, #128]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 800624a:	4313      	orrs	r3, r2
 800624c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800624e:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	4a1e      	ldr	r2, [pc, #120]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006260:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4a19      	ldr	r2, [pc, #100]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800626a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800626c:	e00f      	b.n	800628e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d106      	bne.n	8006282 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 800627a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800627e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006280:	e005      	b.n	800628e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800628c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a0e      	ldr	r2, [pc, #56]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629a:	f7fa ff3b 	bl	8001114 <HAL_GetTick>
 800629e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062a0:	e008      	b.n	80062b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062a2:	f7fa ff37 	bl	8001114 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e006      	b.n	80062c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <RCCEx_PLL3_Config+0x15c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
 80062d0:	ffff0007 	.word	0xffff0007

080062d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e049      	b.n	800637a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fa fcf0 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f000 f9f8 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d001      	beq.n	800639c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e04c      	b.n	8006436 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a26      	ldr	r2, [pc, #152]	; (8006444 <HAL_TIM_Base_Start+0xc0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d01d      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a22      	ldr	r2, [pc, #136]	; (8006448 <HAL_TIM_Base_Start+0xc4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a21      	ldr	r2, [pc, #132]	; (800644c <HAL_TIM_Base_Start+0xc8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <HAL_TIM_Base_Start+0xcc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1e      	ldr	r2, [pc, #120]	; (8006454 <HAL_TIM_Base_Start+0xd0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1c      	ldr	r2, [pc, #112]	; (8006458 <HAL_TIM_Base_Start+0xd4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIM_Base_Start+0x70>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1b      	ldr	r2, [pc, #108]	; (800645c <HAL_TIM_Base_Start+0xd8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d115      	bne.n	8006420 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	4b19      	ldr	r3, [pc, #100]	; (8006460 <HAL_TIM_Base_Start+0xdc>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b06      	cmp	r3, #6
 8006404:	d015      	beq.n	8006432 <HAL_TIM_Base_Start+0xae>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d011      	beq.n	8006432 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	e008      	b.n	8006432 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e000      	b.n	8006434 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40010000 	.word	0x40010000
 8006448:	40000400 	.word	0x40000400
 800644c:	40000800 	.word	0x40000800
 8006450:	40000c00 	.word	0x40000c00
 8006454:	40010400 	.word	0x40010400
 8006458:	40001800 	.word	0x40001800
 800645c:	40014000 	.word	0x40014000
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0202 	mvn.w	r2, #2
 8006490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f90f 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f901 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f912 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d122      	bne.n	8006514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d11b      	bne.n	8006514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0204 	mvn.w	r2, #4
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8e5 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8d7 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8e8 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b08      	cmp	r3, #8
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0208 	mvn.w	r2, #8
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2204      	movs	r2, #4
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8bb 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8ad 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8be 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0210 	mvn.w	r2, #16
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2208      	movs	r2, #8
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f891 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f883 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f894 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10e      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0201 	mvn.w	r2, #1
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f85d 	bl	80066a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d107      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9ac 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d10e      	bne.n	8006642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	d107      	bne.n	8006642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800663a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f99f 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d10e      	bne.n	800666e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d107      	bne.n	800666e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f842 	bl	80066f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b20      	cmp	r3, #32
 800667a:	d10e      	bne.n	800669a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b20      	cmp	r3, #32
 8006688:	d107      	bne.n	800669a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0220 	mvn.w	r2, #32
 8006692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f95f 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a40      	ldr	r2, [pc, #256]	; (800681c <TIM_Base_SetConfig+0x114>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d00f      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <TIM_Base_SetConfig+0x118>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00b      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3c      	ldr	r2, [pc, #240]	; (8006824 <TIM_Base_SetConfig+0x11c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3b      	ldr	r2, [pc, #236]	; (8006828 <TIM_Base_SetConfig+0x120>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a3a      	ldr	r2, [pc, #232]	; (800682c <TIM_Base_SetConfig+0x124>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d108      	bne.n	800675a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2f      	ldr	r2, [pc, #188]	; (800681c <TIM_Base_SetConfig+0x114>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01f      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d01b      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <TIM_Base_SetConfig+0x118>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <TIM_Base_SetConfig+0x11c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <TIM_Base_SetConfig+0x120>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <TIM_Base_SetConfig+0x124>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a28      	ldr	r2, [pc, #160]	; (8006830 <TIM_Base_SetConfig+0x128>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <TIM_Base_SetConfig+0x12c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a26      	ldr	r2, [pc, #152]	; (8006838 <TIM_Base_SetConfig+0x130>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d108      	bne.n	80067b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <TIM_Base_SetConfig+0x114>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a11      	ldr	r2, [pc, #68]	; (8006830 <TIM_Base_SetConfig+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_Base_SetConfig+0x12c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <TIM_Base_SetConfig+0x130>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006850:	2302      	movs	r3, #2
 8006852:	e06d      	b.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a30      	ldr	r2, [pc, #192]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800688e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d01d      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10c      	bne.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4313      	orrs	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40001800 	.word	0x40001800
 8006954:	40014000 	.word	0x40014000

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e042      	b.n	8006a2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fa f9b9 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2224      	movs	r2, #36	; 0x24
 80069c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fccc 	bl	8007374 <UART_SetConfig>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e022      	b.n	8006a2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fa20 	bl	8007e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 faa7 	bl	8007f78 <UART_CheckIdleState>
 8006a2a:	4603      	mov	r3, r0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	4613      	mov	r3, r2
 8006a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	f040 8083 	bne.w	8006b56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_UART_Transmit+0x28>
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e07b      	b.n	8006b58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Transmit+0x3a>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e074      	b.n	8006b58 <HAL_UART_Transmit+0x124>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2221      	movs	r2, #33	; 0x21
 8006a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fa fb45 	bl	8001114 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa4:	d108      	bne.n	8006ab8 <HAL_UART_Transmit+0x84>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e003      	b.n	8006ac0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006ac8:	e02c      	b.n	8006b24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 fa9a 	bl	800800e <UART_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e039      	b.n	8006b58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	3302      	adds	r3, #2
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	e007      	b.n	8006b12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1cc      	bne.n	8006aca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2140      	movs	r1, #64	; 0x40
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fa67 	bl	800800e <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e006      	b.n	8006b58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e000      	b.n	8006b58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b56:	2302      	movs	r3, #2
  }
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d142      	bne.n	8006bfe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_UART_Receive_IT+0x24>
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e03b      	b.n	8006c00 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Receive_IT+0x36>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e034      	b.n	8006c00 <HAL_UART_Receive_IT+0xa0>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_UART_Receive_IT+0xa8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01f      	beq.n	8006bee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d018      	beq.n	8006bee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	623b      	str	r3, [r7, #32]
 8006bdc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	69f9      	ldr	r1, [r7, #28]
 8006be0:	6a3a      	ldr	r2, [r7, #32]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f001 fad3 	bl	80081a0 <UART_Start_Receive_IT>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	e000      	b.n	8006c00 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
  }
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3728      	adds	r7, #40	; 0x28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	58000c00 	.word	0x58000c00

08006c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b0ba      	sub	sp, #232	; 0xe8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c36:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11b      	bne.n	8006c80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d015      	beq.n	8006c80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 835a 	beq.w	800732a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      }
      return;
 8006c7e:	e354      	b.n	800732a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 811f 	beq.w	8006ec8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c8e:	4b8b      	ldr	r3, [pc, #556]	; (8006ebc <HAL_UART_IRQHandler+0x2b0>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c9a:	4b89      	ldr	r3, [pc, #548]	; (8006ec0 <HAL_UART_IRQHandler+0x2b4>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8112 	beq.w	8006ec8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d011      	beq.n	8006cd4 <HAL_UART_IRQHandler+0xc8>
 8006cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <HAL_UART_IRQHandler+0xf8>
 8006ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfa:	f043 0204 	orr.w	r2, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d011      	beq.n	8006d34 <HAL_UART_IRQHandler+0x128>
 8006d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2204      	movs	r2, #4
 8006d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2a:	f043 0202 	orr.w	r2, r3, #2
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d50:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <HAL_UART_IRQHandler+0x2b0>)
 8006d52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d66:	f043 0208 	orr.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d012      	beq.n	8006da2 <HAL_UART_IRQHandler+0x196>
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00c      	beq.n	8006da2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d98:	f043 0220 	orr.w	r2, r3, #32
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 82c0 	beq.w	800732e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d013      	beq.n	8006de2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d105      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d04f      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 faf4 	bl	80083f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d141      	bne.n	8006e9e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1d9      	bne.n	8006e1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d013      	beq.n	8006e96 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e72:	4a14      	ldr	r2, [pc, #80]	; (8006ec4 <HAL_UART_IRQHandler+0x2b8>)
 8006e74:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fb f910 	bl	80020a0 <HAL_DMA_Abort_IT>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	e00f      	b.n	8006eb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa56 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9c:	e00b      	b.n	8006eb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa52 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea4:	e007      	b.n	8006eb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa4e 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006eb4:	e23b      	b.n	800732e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb6:	bf00      	nop
    return;
 8006eb8:	e239      	b.n	800732e <HAL_UART_IRQHandler+0x722>
 8006eba:	bf00      	nop
 8006ebc:	10000001 	.word	0x10000001
 8006ec0:	04000120 	.word	0x04000120
 8006ec4:	080084c1 	.word	0x080084c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 81ce 	bne.w	800726e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 81c7 	beq.w	800726e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 81c0 	beq.w	800726e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2210      	movs	r2, #16
 8006ef4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	f040 813b 	bne.w	800717c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a8b      	ldr	r2, [pc, #556]	; (800713c <HAL_UART_IRQHandler+0x530>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d059      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a89      	ldr	r2, [pc, #548]	; (8007140 <HAL_UART_IRQHandler+0x534>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d053      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a87      	ldr	r2, [pc, #540]	; (8007144 <HAL_UART_IRQHandler+0x538>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04d      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a85      	ldr	r2, [pc, #532]	; (8007148 <HAL_UART_IRQHandler+0x53c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d047      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a83      	ldr	r2, [pc, #524]	; (800714c <HAL_UART_IRQHandler+0x540>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d041      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a81      	ldr	r2, [pc, #516]	; (8007150 <HAL_UART_IRQHandler+0x544>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a7f      	ldr	r2, [pc, #508]	; (8007154 <HAL_UART_IRQHandler+0x548>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d035      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a7d      	ldr	r2, [pc, #500]	; (8007158 <HAL_UART_IRQHandler+0x54c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02f      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a7b      	ldr	r2, [pc, #492]	; (800715c <HAL_UART_IRQHandler+0x550>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d029      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a79      	ldr	r2, [pc, #484]	; (8007160 <HAL_UART_IRQHandler+0x554>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d023      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a77      	ldr	r2, [pc, #476]	; (8007164 <HAL_UART_IRQHandler+0x558>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a75      	ldr	r2, [pc, #468]	; (8007168 <HAL_UART_IRQHandler+0x55c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d017      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a73      	ldr	r2, [pc, #460]	; (800716c <HAL_UART_IRQHandler+0x560>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d011      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a71      	ldr	r2, [pc, #452]	; (8007170 <HAL_UART_IRQHandler+0x564>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00b      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a6f      	ldr	r2, [pc, #444]	; (8007174 <HAL_UART_IRQHandler+0x568>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d005      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x3ba>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6d      	ldr	r2, [pc, #436]	; (8007178 <HAL_UART_IRQHandler+0x56c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d105      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x3c6>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	e004      	b.n	8006fdc <HAL_UART_IRQHandler+0x3d0>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 81a4 	beq.w	8007332 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	f080 819c 	bcs.w	8007332 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700e:	f000 8086 	beq.w	800711e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800702a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800702e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800703c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007040:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007048:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1da      	bne.n	8007012 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800706c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800706e:	f023 0301 	bic.w	r3, r3, #1
 8007072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007080:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007084:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e1      	bne.n	800705c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3308      	adds	r3, #8
 80070b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e3      	bne.n	8007098 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ee:	f023 0310 	bic.w	r3, r3, #16
 80070f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007100:	65bb      	str	r3, [r7, #88]	; 0x58
 8007102:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800710e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e4      	bne.n	80070de <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007118:	4618      	mov	r0, r3
 800711a:	f7fa fca3 	bl	8001a64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800712a:	b29b      	uxth	r3, r3
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	b29b      	uxth	r3, r3
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f912 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007138:	e0fb      	b.n	8007332 <HAL_UART_IRQHandler+0x726>
 800713a:	bf00      	nop
 800713c:	40020010 	.word	0x40020010
 8007140:	40020028 	.word	0x40020028
 8007144:	40020040 	.word	0x40020040
 8007148:	40020058 	.word	0x40020058
 800714c:	40020070 	.word	0x40020070
 8007150:	40020088 	.word	0x40020088
 8007154:	400200a0 	.word	0x400200a0
 8007158:	400200b8 	.word	0x400200b8
 800715c:	40020410 	.word	0x40020410
 8007160:	40020428 	.word	0x40020428
 8007164:	40020440 	.word	0x40020440
 8007168:	40020458 	.word	0x40020458
 800716c:	40020470 	.word	0x40020470
 8007170:	40020488 	.word	0x40020488
 8007174:	400204a0 	.word	0x400204a0
 8007178:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007188:	b29b      	uxth	r3, r3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80cc 	beq.w	8007336 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800719e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80c7 	beq.w	8007336 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ca:	647b      	str	r3, [r7, #68]	; 0x44
 80071cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e4      	bne.n	80071a8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	623b      	str	r3, [r7, #32]
   return(result);
 80071ee:	6a3a      	ldr	r2, [r7, #32]
 80071f0:	4b54      	ldr	r3, [pc, #336]	; (8007344 <HAL_UART_IRQHandler+0x738>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007202:	633a      	str	r2, [r7, #48]	; 0x30
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e3      	bne.n	80071de <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	60fb      	str	r3, [r7, #12]
   return(result);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0310 	bic.w	r3, r3, #16
 800723e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	617b      	str	r3, [r7, #20]
   return(result);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e4      	bne.n	800722a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f878 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800726c:	e063      	b.n	8007336 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800726e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <HAL_UART_IRQHandler+0x68c>
 800727a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800727e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800728e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fdb3 	bl	8008dfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007296:	e051      	b.n	800733c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d014      	beq.n	80072ce <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d03a      	beq.n	800733a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
    }
    return;
 80072cc:	e035      	b.n	800733a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_UART_IRQHandler+0x6e2>
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f900 	bl	80084ec <UART_EndTransmit_IT>
    return;
 80072ec:	e026      	b.n	800733c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <HAL_UART_IRQHandler+0x702>
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fd8c 	bl	8008e24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800730c:	e016      	b.n	800733c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d010      	beq.n	800733c <HAL_UART_IRQHandler+0x730>
 800731a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731e:	2b00      	cmp	r3, #0
 8007320:	da0c      	bge.n	800733c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 fd74 	bl	8008e10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007328:	e008      	b.n	800733c <HAL_UART_IRQHandler+0x730>
      return;
 800732a:	bf00      	nop
 800732c:	e006      	b.n	800733c <HAL_UART_IRQHandler+0x730>
    return;
 800732e:	bf00      	nop
 8007330:	e004      	b.n	800733c <HAL_UART_IRQHandler+0x730>
      return;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <HAL_UART_IRQHandler+0x730>
      return;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <HAL_UART_IRQHandler+0x730>
    return;
 800733a:	bf00      	nop
  }
}
 800733c:	37e8      	adds	r7, #232	; 0xe8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	effffffe 	.word	0xeffffffe

08007348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007374:	b5b0      	push	{r4, r5, r7, lr}
 8007376:	b08e      	sub	sp, #56	; 0x38
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	4313      	orrs	r3, r2
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4bbf      	ldr	r3, [pc, #764]	; (80076a0 <UART_SetConfig+0x32c>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073aa:	430b      	orrs	r3, r1
 80073ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4ab5      	ldr	r2, [pc, #724]	; (80076a4 <UART_SetConfig+0x330>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073da:	4313      	orrs	r3, r2
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	4bb0      	ldr	r3, [pc, #704]	; (80076a8 <UART_SetConfig+0x334>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073ee:	430b      	orrs	r3, r1
 80073f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	f023 010f 	bic.w	r1, r3, #15
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4aa7      	ldr	r2, [pc, #668]	; (80076ac <UART_SetConfig+0x338>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d176      	bne.n	8007500 <UART_SetConfig+0x18c>
 8007412:	4ba7      	ldr	r3, [pc, #668]	; (80076b0 <UART_SetConfig+0x33c>)
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800741a:	2b28      	cmp	r3, #40	; 0x28
 800741c:	d86c      	bhi.n	80074f8 <UART_SetConfig+0x184>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0xb0>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	080074c9 	.word	0x080074c9
 8007428:	080074f9 	.word	0x080074f9
 800742c:	080074f9 	.word	0x080074f9
 8007430:	080074f9 	.word	0x080074f9
 8007434:	080074f9 	.word	0x080074f9
 8007438:	080074f9 	.word	0x080074f9
 800743c:	080074f9 	.word	0x080074f9
 8007440:	080074f9 	.word	0x080074f9
 8007444:	080074d1 	.word	0x080074d1
 8007448:	080074f9 	.word	0x080074f9
 800744c:	080074f9 	.word	0x080074f9
 8007450:	080074f9 	.word	0x080074f9
 8007454:	080074f9 	.word	0x080074f9
 8007458:	080074f9 	.word	0x080074f9
 800745c:	080074f9 	.word	0x080074f9
 8007460:	080074f9 	.word	0x080074f9
 8007464:	080074d9 	.word	0x080074d9
 8007468:	080074f9 	.word	0x080074f9
 800746c:	080074f9 	.word	0x080074f9
 8007470:	080074f9 	.word	0x080074f9
 8007474:	080074f9 	.word	0x080074f9
 8007478:	080074f9 	.word	0x080074f9
 800747c:	080074f9 	.word	0x080074f9
 8007480:	080074f9 	.word	0x080074f9
 8007484:	080074e1 	.word	0x080074e1
 8007488:	080074f9 	.word	0x080074f9
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080074f9 	.word	0x080074f9
 8007494:	080074f9 	.word	0x080074f9
 8007498:	080074f9 	.word	0x080074f9
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	080074e9 	.word	0x080074e9
 80074a8:	080074f9 	.word	0x080074f9
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	080074f9 	.word	0x080074f9
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	080074f9 	.word	0x080074f9
 80074bc:	080074f9 	.word	0x080074f9
 80074c0:	080074f9 	.word	0x080074f9
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e222      	b.n	8007916 <UART_SetConfig+0x5a2>
 80074d0:	2304      	movs	r3, #4
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	e21e      	b.n	8007916 <UART_SetConfig+0x5a2>
 80074d8:	2308      	movs	r3, #8
 80074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074de:	e21a      	b.n	8007916 <UART_SetConfig+0x5a2>
 80074e0:	2310      	movs	r3, #16
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e216      	b.n	8007916 <UART_SetConfig+0x5a2>
 80074e8:	2320      	movs	r3, #32
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e212      	b.n	8007916 <UART_SetConfig+0x5a2>
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e20e      	b.n	8007916 <UART_SetConfig+0x5a2>
 80074f8:	2380      	movs	r3, #128	; 0x80
 80074fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fe:	e20a      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a6b      	ldr	r2, [pc, #428]	; (80076b4 <UART_SetConfig+0x340>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d130      	bne.n	800756c <UART_SetConfig+0x1f8>
 800750a:	4b69      	ldr	r3, [pc, #420]	; (80076b0 <UART_SetConfig+0x33c>)
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	2b05      	cmp	r3, #5
 8007514:	d826      	bhi.n	8007564 <UART_SetConfig+0x1f0>
 8007516:	a201      	add	r2, pc, #4	; (adr r2, 800751c <UART_SetConfig+0x1a8>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007535 	.word	0x08007535
 8007520:	0800753d 	.word	0x0800753d
 8007524:	08007545 	.word	0x08007545
 8007528:	0800754d 	.word	0x0800754d
 800752c:	08007555 	.word	0x08007555
 8007530:	0800755d 	.word	0x0800755d
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753a:	e1ec      	b.n	8007916 <UART_SetConfig+0x5a2>
 800753c:	2304      	movs	r3, #4
 800753e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007542:	e1e8      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007544:	2308      	movs	r3, #8
 8007546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754a:	e1e4      	b.n	8007916 <UART_SetConfig+0x5a2>
 800754c:	2310      	movs	r3, #16
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e1e0      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007554:	2320      	movs	r3, #32
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e1dc      	b.n	8007916 <UART_SetConfig+0x5a2>
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e1d8      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007564:	2380      	movs	r3, #128	; 0x80
 8007566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756a:	e1d4      	b.n	8007916 <UART_SetConfig+0x5a2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a51      	ldr	r2, [pc, #324]	; (80076b8 <UART_SetConfig+0x344>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d130      	bne.n	80075d8 <UART_SetConfig+0x264>
 8007576:	4b4e      	ldr	r3, [pc, #312]	; (80076b0 <UART_SetConfig+0x33c>)
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b05      	cmp	r3, #5
 8007580:	d826      	bhi.n	80075d0 <UART_SetConfig+0x25c>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x214>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075a9 	.word	0x080075a9
 8007590:	080075b1 	.word	0x080075b1
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a6:	e1b6      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075a8:	2304      	movs	r3, #4
 80075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ae:	e1b2      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075b0:	2308      	movs	r3, #8
 80075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b6:	e1ae      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075b8:	2310      	movs	r3, #16
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075be:	e1aa      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075c0:	2320      	movs	r3, #32
 80075c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c6:	e1a6      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075c8:	2340      	movs	r3, #64	; 0x40
 80075ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ce:	e1a2      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075d0:	2380      	movs	r3, #128	; 0x80
 80075d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d6:	e19e      	b.n	8007916 <UART_SetConfig+0x5a2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a37      	ldr	r2, [pc, #220]	; (80076bc <UART_SetConfig+0x348>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d130      	bne.n	8007644 <UART_SetConfig+0x2d0>
 80075e2:	4b33      	ldr	r3, [pc, #204]	; (80076b0 <UART_SetConfig+0x33c>)
 80075e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d826      	bhi.n	800763c <UART_SetConfig+0x2c8>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <UART_SetConfig+0x280>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	08007625 	.word	0x08007625
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007635 	.word	0x08007635
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e180      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e17c      	b.n	8007916 <UART_SetConfig+0x5a2>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e178      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e174      	b.n	8007916 <UART_SetConfig+0x5a2>
 800762c:	2320      	movs	r3, #32
 800762e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007632:	e170      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763a:	e16c      	b.n	8007916 <UART_SetConfig+0x5a2>
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007642:	e168      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <UART_SetConfig+0x34c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d142      	bne.n	80076d4 <UART_SetConfig+0x360>
 800764e:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <UART_SetConfig+0x33c>)
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b05      	cmp	r3, #5
 8007658:	d838      	bhi.n	80076cc <UART_SetConfig+0x358>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <UART_SetConfig+0x2ec>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007679 	.word	0x08007679
 8007664:	08007681 	.word	0x08007681
 8007668:	08007689 	.word	0x08007689
 800766c:	08007691 	.word	0x08007691
 8007670:	08007699 	.word	0x08007699
 8007674:	080076c5 	.word	0x080076c5
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767e:	e14a      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007686:	e146      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768e:	e142      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007696:	e13e      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007698:	2320      	movs	r3, #32
 800769a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769e:	e13a      	b.n	8007916 <UART_SetConfig+0x5a2>
 80076a0:	cfff69f3 	.word	0xcfff69f3
 80076a4:	58000c00 	.word	0x58000c00
 80076a8:	11fff4ff 	.word	0x11fff4ff
 80076ac:	40011000 	.word	0x40011000
 80076b0:	58024400 	.word	0x58024400
 80076b4:	40004400 	.word	0x40004400
 80076b8:	40004800 	.word	0x40004800
 80076bc:	40004c00 	.word	0x40004c00
 80076c0:	40005000 	.word	0x40005000
 80076c4:	2340      	movs	r3, #64	; 0x40
 80076c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ca:	e124      	b.n	8007916 <UART_SetConfig+0x5a2>
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d2:	e120      	b.n	8007916 <UART_SetConfig+0x5a2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4acc      	ldr	r2, [pc, #816]	; (8007a0c <UART_SetConfig+0x698>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d176      	bne.n	80077cc <UART_SetConfig+0x458>
 80076de:	4bcc      	ldr	r3, [pc, #816]	; (8007a10 <UART_SetConfig+0x69c>)
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e6:	2b28      	cmp	r3, #40	; 0x28
 80076e8:	d86c      	bhi.n	80077c4 <UART_SetConfig+0x450>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x37c>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007795 	.word	0x08007795
 80076f4:	080077c5 	.word	0x080077c5
 80076f8:	080077c5 	.word	0x080077c5
 80076fc:	080077c5 	.word	0x080077c5
 8007700:	080077c5 	.word	0x080077c5
 8007704:	080077c5 	.word	0x080077c5
 8007708:	080077c5 	.word	0x080077c5
 800770c:	080077c5 	.word	0x080077c5
 8007710:	0800779d 	.word	0x0800779d
 8007714:	080077c5 	.word	0x080077c5
 8007718:	080077c5 	.word	0x080077c5
 800771c:	080077c5 	.word	0x080077c5
 8007720:	080077c5 	.word	0x080077c5
 8007724:	080077c5 	.word	0x080077c5
 8007728:	080077c5 	.word	0x080077c5
 800772c:	080077c5 	.word	0x080077c5
 8007730:	080077a5 	.word	0x080077a5
 8007734:	080077c5 	.word	0x080077c5
 8007738:	080077c5 	.word	0x080077c5
 800773c:	080077c5 	.word	0x080077c5
 8007740:	080077c5 	.word	0x080077c5
 8007744:	080077c5 	.word	0x080077c5
 8007748:	080077c5 	.word	0x080077c5
 800774c:	080077c5 	.word	0x080077c5
 8007750:	080077ad 	.word	0x080077ad
 8007754:	080077c5 	.word	0x080077c5
 8007758:	080077c5 	.word	0x080077c5
 800775c:	080077c5 	.word	0x080077c5
 8007760:	080077c5 	.word	0x080077c5
 8007764:	080077c5 	.word	0x080077c5
 8007768:	080077c5 	.word	0x080077c5
 800776c:	080077c5 	.word	0x080077c5
 8007770:	080077b5 	.word	0x080077b5
 8007774:	080077c5 	.word	0x080077c5
 8007778:	080077c5 	.word	0x080077c5
 800777c:	080077c5 	.word	0x080077c5
 8007780:	080077c5 	.word	0x080077c5
 8007784:	080077c5 	.word	0x080077c5
 8007788:	080077c5 	.word	0x080077c5
 800778c:	080077c5 	.word	0x080077c5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e0bc      	b.n	8007916 <UART_SetConfig+0x5a2>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e0b8      	b.n	8007916 <UART_SetConfig+0x5a2>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e0b4      	b.n	8007916 <UART_SetConfig+0x5a2>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e0b0      	b.n	8007916 <UART_SetConfig+0x5a2>
 80077b4:	2320      	movs	r3, #32
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e0ac      	b.n	8007916 <UART_SetConfig+0x5a2>
 80077bc:	2340      	movs	r3, #64	; 0x40
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e0a8      	b.n	8007916 <UART_SetConfig+0x5a2>
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e0a4      	b.n	8007916 <UART_SetConfig+0x5a2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a90      	ldr	r2, [pc, #576]	; (8007a14 <UART_SetConfig+0x6a0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d130      	bne.n	8007838 <UART_SetConfig+0x4c4>
 80077d6:	4b8e      	ldr	r3, [pc, #568]	; (8007a10 <UART_SetConfig+0x69c>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d826      	bhi.n	8007830 <UART_SetConfig+0x4bc>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <UART_SetConfig+0x474>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	08007801 	.word	0x08007801
 80077ec:	08007809 	.word	0x08007809
 80077f0:	08007811 	.word	0x08007811
 80077f4:	08007819 	.word	0x08007819
 80077f8:	08007821 	.word	0x08007821
 80077fc:	08007829 	.word	0x08007829
 8007800:	2300      	movs	r3, #0
 8007802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007806:	e086      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007808:	2304      	movs	r3, #4
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e082      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007810:	2308      	movs	r3, #8
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e07e      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007818:	2310      	movs	r3, #16
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e07a      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007820:	2320      	movs	r3, #32
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e076      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007828:	2340      	movs	r3, #64	; 0x40
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e072      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007830:	2380      	movs	r3, #128	; 0x80
 8007832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007836:	e06e      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a76      	ldr	r2, [pc, #472]	; (8007a18 <UART_SetConfig+0x6a4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d130      	bne.n	80078a4 <UART_SetConfig+0x530>
 8007842:	4b73      	ldr	r3, [pc, #460]	; (8007a10 <UART_SetConfig+0x69c>)
 8007844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b05      	cmp	r3, #5
 800784c:	d826      	bhi.n	800789c <UART_SetConfig+0x528>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <UART_SetConfig+0x4e0>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	0800786d 	.word	0x0800786d
 8007858:	08007875 	.word	0x08007875
 800785c:	0800787d 	.word	0x0800787d
 8007860:	08007885 	.word	0x08007885
 8007864:	0800788d 	.word	0x0800788d
 8007868:	08007895 	.word	0x08007895
 800786c:	2300      	movs	r3, #0
 800786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007872:	e050      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007874:	2304      	movs	r3, #4
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787a:	e04c      	b.n	8007916 <UART_SetConfig+0x5a2>
 800787c:	2308      	movs	r3, #8
 800787e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007882:	e048      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007884:	2310      	movs	r3, #16
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e044      	b.n	8007916 <UART_SetConfig+0x5a2>
 800788c:	2320      	movs	r3, #32
 800788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007892:	e040      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007894:	2340      	movs	r3, #64	; 0x40
 8007896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789a:	e03c      	b.n	8007916 <UART_SetConfig+0x5a2>
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078a2:	e038      	b.n	8007916 <UART_SetConfig+0x5a2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5c      	ldr	r2, [pc, #368]	; (8007a1c <UART_SetConfig+0x6a8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d130      	bne.n	8007910 <UART_SetConfig+0x59c>
 80078ae:	4b58      	ldr	r3, [pc, #352]	; (8007a10 <UART_SetConfig+0x69c>)
 80078b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d826      	bhi.n	8007908 <UART_SetConfig+0x594>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x54c>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	080078e1 	.word	0x080078e1
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	080078f9 	.word	0x080078f9
 80078d4:	08007901 	.word	0x08007901
 80078d8:	2302      	movs	r3, #2
 80078da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078de:	e01a      	b.n	8007916 <UART_SetConfig+0x5a2>
 80078e0:	2304      	movs	r3, #4
 80078e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078e6:	e016      	b.n	8007916 <UART_SetConfig+0x5a2>
 80078e8:	2308      	movs	r3, #8
 80078ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ee:	e012      	b.n	8007916 <UART_SetConfig+0x5a2>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f6:	e00e      	b.n	8007916 <UART_SetConfig+0x5a2>
 80078f8:	2320      	movs	r3, #32
 80078fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fe:	e00a      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007906:	e006      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007908:	2380      	movs	r3, #128	; 0x80
 800790a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790e:	e002      	b.n	8007916 <UART_SetConfig+0x5a2>
 8007910:	2380      	movs	r3, #128	; 0x80
 8007912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a40      	ldr	r2, [pc, #256]	; (8007a1c <UART_SetConfig+0x6a8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	f040 80ef 	bne.w	8007b00 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007926:	2b20      	cmp	r3, #32
 8007928:	dc46      	bgt.n	80079b8 <UART_SetConfig+0x644>
 800792a:	2b02      	cmp	r3, #2
 800792c:	f2c0 8081 	blt.w	8007a32 <UART_SetConfig+0x6be>
 8007930:	3b02      	subs	r3, #2
 8007932:	2b1e      	cmp	r3, #30
 8007934:	d87d      	bhi.n	8007a32 <UART_SetConfig+0x6be>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x5c8>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079bf 	.word	0x080079bf
 8007940:	08007a33 	.word	0x08007a33
 8007944:	080079c7 	.word	0x080079c7
 8007948:	08007a33 	.word	0x08007a33
 800794c:	08007a33 	.word	0x08007a33
 8007950:	08007a33 	.word	0x08007a33
 8007954:	080079d7 	.word	0x080079d7
 8007958:	08007a33 	.word	0x08007a33
 800795c:	08007a33 	.word	0x08007a33
 8007960:	08007a33 	.word	0x08007a33
 8007964:	08007a33 	.word	0x08007a33
 8007968:	08007a33 	.word	0x08007a33
 800796c:	08007a33 	.word	0x08007a33
 8007970:	08007a33 	.word	0x08007a33
 8007974:	080079e7 	.word	0x080079e7
 8007978:	08007a33 	.word	0x08007a33
 800797c:	08007a33 	.word	0x08007a33
 8007980:	08007a33 	.word	0x08007a33
 8007984:	08007a33 	.word	0x08007a33
 8007988:	08007a33 	.word	0x08007a33
 800798c:	08007a33 	.word	0x08007a33
 8007990:	08007a33 	.word	0x08007a33
 8007994:	08007a33 	.word	0x08007a33
 8007998:	08007a33 	.word	0x08007a33
 800799c:	08007a33 	.word	0x08007a33
 80079a0:	08007a33 	.word	0x08007a33
 80079a4:	08007a33 	.word	0x08007a33
 80079a8:	08007a33 	.word	0x08007a33
 80079ac:	08007a33 	.word	0x08007a33
 80079b0:	08007a33 	.word	0x08007a33
 80079b4:	08007a25 	.word	0x08007a25
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d036      	beq.n	8007a2a <UART_SetConfig+0x6b6>
 80079bc:	e039      	b.n	8007a32 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079be:	f7fe f867 	bl	8005a90 <HAL_RCCEx_GetD3PCLK1Freq>
 80079c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80079c4:	e03b      	b.n	8007a3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079c6:	f107 0314 	add.w	r3, r7, #20
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe f876 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d4:	e033      	b.n	8007a3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe f9c2 	bl	8005d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e4:	e02b      	b.n	8007a3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e6:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <UART_SetConfig+0x69c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <UART_SetConfig+0x69c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	08db      	lsrs	r3, r3, #3
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	4a08      	ldr	r2, [pc, #32]	; (8007a20 <UART_SetConfig+0x6ac>)
 80079fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a04:	e01b      	b.n	8007a3e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007a06:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <UART_SetConfig+0x6ac>)
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a0a:	e018      	b.n	8007a3e <UART_SetConfig+0x6ca>
 8007a0c:	40011400 	.word	0x40011400
 8007a10:	58024400 	.word	0x58024400
 8007a14:	40007800 	.word	0x40007800
 8007a18:	40007c00 	.word	0x40007c00
 8007a1c:	58000c00 	.word	0x58000c00
 8007a20:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a24:	4bc4      	ldr	r3, [pc, #784]	; (8007d38 <UART_SetConfig+0x9c4>)
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a28:	e009      	b.n	8007a3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a30:	e005      	b.n	8007a3e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 81da 	beq.w	8007dfa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	4abc      	ldr	r2, [pc, #752]	; (8007d3c <UART_SetConfig+0x9c8>)
 8007a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a58:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4413      	add	r3, r2
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d305      	bcc.n	8007a76 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a70:	6a3a      	ldr	r2, [r7, #32]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d903      	bls.n	8007a7e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a7c:	e1bd      	b.n	8007dfa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	4618      	mov	r0, r3
 8007a82:	f04f 0100 	mov.w	r1, #0
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	4aac      	ldr	r2, [pc, #688]	; (8007d3c <UART_SetConfig+0x9c8>)
 8007a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	f7f8 fc1f 	bl	80002d8 <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	020b      	lsls	r3, r1, #8
 8007aac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ab0:	0202      	lsls	r2, r0, #8
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	6849      	ldr	r1, [r1, #4]
 8007ab6:	0849      	lsrs	r1, r1, #1
 8007ab8:	4608      	mov	r0, r1
 8007aba:	f04f 0100 	mov.w	r1, #0
 8007abe:	1814      	adds	r4, r2, r0
 8007ac0:	eb43 0501 	adc.w	r5, r3, r1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 fc01 	bl	80002d8 <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4613      	mov	r3, r2
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae4:	d308      	bcc.n	8007af8 <UART_SetConfig+0x784>
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aec:	d204      	bcs.n	8007af8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	e180      	b.n	8007dfa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007afe:	e17c      	b.n	8007dfa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b08:	f040 80be 	bne.w	8007c88 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8007b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	dc49      	bgt.n	8007ba8 <UART_SetConfig+0x834>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	db7c      	blt.n	8007c12 <UART_SetConfig+0x89e>
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d87a      	bhi.n	8007c12 <UART_SetConfig+0x89e>
 8007b1c:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <UART_SetConfig+0x7b0>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007baf 	.word	0x08007baf
 8007b28:	08007bb7 	.word	0x08007bb7
 8007b2c:	08007c13 	.word	0x08007c13
 8007b30:	08007c13 	.word	0x08007c13
 8007b34:	08007bbf 	.word	0x08007bbf
 8007b38:	08007c13 	.word	0x08007c13
 8007b3c:	08007c13 	.word	0x08007c13
 8007b40:	08007c13 	.word	0x08007c13
 8007b44:	08007bcf 	.word	0x08007bcf
 8007b48:	08007c13 	.word	0x08007c13
 8007b4c:	08007c13 	.word	0x08007c13
 8007b50:	08007c13 	.word	0x08007c13
 8007b54:	08007c13 	.word	0x08007c13
 8007b58:	08007c13 	.word	0x08007c13
 8007b5c:	08007c13 	.word	0x08007c13
 8007b60:	08007c13 	.word	0x08007c13
 8007b64:	08007bdf 	.word	0x08007bdf
 8007b68:	08007c13 	.word	0x08007c13
 8007b6c:	08007c13 	.word	0x08007c13
 8007b70:	08007c13 	.word	0x08007c13
 8007b74:	08007c13 	.word	0x08007c13
 8007b78:	08007c13 	.word	0x08007c13
 8007b7c:	08007c13 	.word	0x08007c13
 8007b80:	08007c13 	.word	0x08007c13
 8007b84:	08007c13 	.word	0x08007c13
 8007b88:	08007c13 	.word	0x08007c13
 8007b8c:	08007c13 	.word	0x08007c13
 8007b90:	08007c13 	.word	0x08007c13
 8007b94:	08007c13 	.word	0x08007c13
 8007b98:	08007c13 	.word	0x08007c13
 8007b9c:	08007c13 	.word	0x08007c13
 8007ba0:	08007c13 	.word	0x08007c13
 8007ba4:	08007c05 	.word	0x08007c05
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d02e      	beq.n	8007c0a <UART_SetConfig+0x896>
 8007bac:	e031      	b.n	8007c12 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bae:	f7fd f803 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8007bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bb4:	e033      	b.n	8007c1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb6:	f7fd f815 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8007bba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bbc:	e02f      	b.n	8007c1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bbe:	f107 0314 	add.w	r3, r7, #20
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd ff7a 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bcc:	e027      	b.n	8007c1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bce:	f107 0308 	add.w	r3, r7, #8
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe f8c6 	bl	8005d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bdc:	e01f      	b.n	8007c1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bde:	4b58      	ldr	r3, [pc, #352]	; (8007d40 <UART_SetConfig+0x9cc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bea:	4b55      	ldr	r3, [pc, #340]	; (8007d40 <UART_SetConfig+0x9cc>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	08db      	lsrs	r3, r3, #3
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	4a53      	ldr	r2, [pc, #332]	; (8007d44 <UART_SetConfig+0x9d0>)
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bfc:	e00f      	b.n	8007c1e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007bfe:	4b51      	ldr	r3, [pc, #324]	; (8007d44 <UART_SetConfig+0x9d0>)
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c02:	e00c      	b.n	8007c1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c04:	4b4c      	ldr	r3, [pc, #304]	; (8007d38 <UART_SetConfig+0x9c4>)
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c08:	e009      	b.n	8007c1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c10:	e005      	b.n	8007c1e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80ea 	beq.w	8007dfa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	4a44      	ldr	r2, [pc, #272]	; (8007d3c <UART_SetConfig+0x9c8>)
 8007c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c30:	461a      	mov	r2, r3
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c38:	005a      	lsls	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	441a      	add	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	2b0f      	cmp	r3, #15
 8007c50:	d916      	bls.n	8007c80 <UART_SetConfig+0x90c>
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d212      	bcs.n	8007c80 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f023 030f 	bic.w	r3, r3, #15
 8007c62:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c72:	4313      	orrs	r3, r2
 8007c74:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c7c:	60da      	str	r2, [r3, #12]
 8007c7e:	e0bc      	b.n	8007dfa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c86:	e0b8      	b.n	8007dfa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	dc4b      	bgt.n	8007d28 <UART_SetConfig+0x9b4>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f2c0 8087 	blt.w	8007da4 <UART_SetConfig+0xa30>
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	f200 8084 	bhi.w	8007da4 <UART_SetConfig+0xa30>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x930>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007d2f 	.word	0x08007d2f
 8007ca8:	08007d49 	.word	0x08007d49
 8007cac:	08007da5 	.word	0x08007da5
 8007cb0:	08007da5 	.word	0x08007da5
 8007cb4:	08007d51 	.word	0x08007d51
 8007cb8:	08007da5 	.word	0x08007da5
 8007cbc:	08007da5 	.word	0x08007da5
 8007cc0:	08007da5 	.word	0x08007da5
 8007cc4:	08007d61 	.word	0x08007d61
 8007cc8:	08007da5 	.word	0x08007da5
 8007ccc:	08007da5 	.word	0x08007da5
 8007cd0:	08007da5 	.word	0x08007da5
 8007cd4:	08007da5 	.word	0x08007da5
 8007cd8:	08007da5 	.word	0x08007da5
 8007cdc:	08007da5 	.word	0x08007da5
 8007ce0:	08007da5 	.word	0x08007da5
 8007ce4:	08007d71 	.word	0x08007d71
 8007ce8:	08007da5 	.word	0x08007da5
 8007cec:	08007da5 	.word	0x08007da5
 8007cf0:	08007da5 	.word	0x08007da5
 8007cf4:	08007da5 	.word	0x08007da5
 8007cf8:	08007da5 	.word	0x08007da5
 8007cfc:	08007da5 	.word	0x08007da5
 8007d00:	08007da5 	.word	0x08007da5
 8007d04:	08007da5 	.word	0x08007da5
 8007d08:	08007da5 	.word	0x08007da5
 8007d0c:	08007da5 	.word	0x08007da5
 8007d10:	08007da5 	.word	0x08007da5
 8007d14:	08007da5 	.word	0x08007da5
 8007d18:	08007da5 	.word	0x08007da5
 8007d1c:	08007da5 	.word	0x08007da5
 8007d20:	08007da5 	.word	0x08007da5
 8007d24:	08007d97 	.word	0x08007d97
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d037      	beq.n	8007d9c <UART_SetConfig+0xa28>
 8007d2c:	e03a      	b.n	8007da4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d2e:	f7fc ff43 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8007d32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d34:	e03c      	b.n	8007db0 <UART_SetConfig+0xa3c>
 8007d36:	bf00      	nop
 8007d38:	003d0900 	.word	0x003d0900
 8007d3c:	080090c8 	.word	0x080090c8
 8007d40:	58024400 	.word	0x58024400
 8007d44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d48:	f7fc ff4c 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8007d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d4e:	e02f      	b.n	8007db0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d50:	f107 0314 	add.w	r3, r7, #20
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fd feb1 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d5e:	e027      	b.n	8007db0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d60:	f107 0308 	add.w	r3, r7, #8
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fd fffd 	bl	8005d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d6e:	e01f      	b.n	8007db0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d70:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <UART_SetConfig+0xab0>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d7c:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <UART_SetConfig+0xab0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	08db      	lsrs	r3, r3, #3
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	4a28      	ldr	r2, [pc, #160]	; (8007e28 <UART_SetConfig+0xab4>)
 8007d88:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d8e:	e00f      	b.n	8007db0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007d90:	4b25      	ldr	r3, [pc, #148]	; (8007e28 <UART_SetConfig+0xab4>)
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d94:	e00c      	b.n	8007db0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d96:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <UART_SetConfig+0xab8>)
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d9a:	e009      	b.n	8007db0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007da2:	e005      	b.n	8007db0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007dae:	bf00      	nop
    }

    if (pclk != 0U)
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d021      	beq.n	8007dfa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <UART_SetConfig+0xabc>)
 8007dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	085b      	lsrs	r3, r3, #1
 8007dce:	441a      	add	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	2b0f      	cmp	r3, #15
 8007dde:	d909      	bls.n	8007df4 <UART_SetConfig+0xa80>
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de6:	d205      	bcs.n	8007df4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	e002      	b.n	8007dfa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3738      	adds	r7, #56	; 0x38
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bdb0      	pop	{r4, r5, r7, pc}
 8007e22:	bf00      	nop
 8007e24:	58024400 	.word	0x58024400
 8007e28:	03d09000 	.word	0x03d09000
 8007e2c:	003d0900 	.word	0x003d0900
 8007e30:	080090c8 	.word	0x080090c8

08007e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01a      	beq.n	8007f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f32:	d10a      	bne.n	8007f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	605a      	str	r2, [r3, #4]
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f88:	f7f9 f8c4 	bl	8001114 <HAL_GetTick>
 8007f8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d10e      	bne.n	8007fba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f82f 	bl	800800e <UART_WaitOnFlagUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e025      	b.n	8008006 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d10e      	bne.n	8007fe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f819 	bl	800800e <UART_WaitOnFlagUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e00f      	b.n	8008006 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b09c      	sub	sp, #112	; 0x70
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800801e:	e0a9      	b.n	8008174 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	f000 80a5 	beq.w	8008174 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7f9 f873 	bl	8001114 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <UART_WaitOnFlagUntilTimeout+0x32>
 800803a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800803c:	2b00      	cmp	r3, #0
 800803e:	d140      	bne.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800804e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008054:	667b      	str	r3, [r7, #100]	; 0x64
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008060:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800806c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e6      	bne.n	8008040 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	663b      	str	r3, [r7, #96]	; 0x60
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008092:	64ba      	str	r2, [r7, #72]	; 0x48
 8008094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e069      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d051      	beq.n	8008174 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080de:	d149      	bne.n	8008174 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
 800810a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800810e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e6      	bne.n	80080ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	613b      	str	r3, [r7, #16]
   return(result);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 0301 	bic.w	r3, r3, #1
 8008132:	66bb      	str	r3, [r7, #104]	; 0x68
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800813c:	623a      	str	r2, [r7, #32]
 800813e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69f9      	ldr	r1, [r7, #28]
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	61bb      	str	r3, [r7, #24]
   return(result);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2220      	movs	r2, #32
 8008164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e010      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69da      	ldr	r2, [r3, #28]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	429a      	cmp	r2, r3
 8008190:	f43f af46 	beq.w	8008020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3770      	adds	r7, #112	; 0x70
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b0a3      	sub	sp, #140	; 0x8c
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	88fa      	ldrh	r2, [r7, #6]
 80081b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d2:	d10e      	bne.n	80081f2 <UART_Start_Receive_IT+0x52>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <UART_Start_Receive_IT+0x48>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081e6:	e02d      	b.n	8008244 <UART_Start_Receive_IT+0xa4>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	22ff      	movs	r2, #255	; 0xff
 80081ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081f0:	e028      	b.n	8008244 <UART_Start_Receive_IT+0xa4>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10d      	bne.n	8008216 <UART_Start_Receive_IT+0x76>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d104      	bne.n	800820c <UART_Start_Receive_IT+0x6c>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800820a:	e01b      	b.n	8008244 <UART_Start_Receive_IT+0xa4>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	227f      	movs	r2, #127	; 0x7f
 8008210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008214:	e016      	b.n	8008244 <UART_Start_Receive_IT+0xa4>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821e:	d10d      	bne.n	800823c <UART_Start_Receive_IT+0x9c>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <UART_Start_Receive_IT+0x92>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	227f      	movs	r2, #127	; 0x7f
 800822c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008230:	e008      	b.n	8008244 <UART_Start_Receive_IT+0xa4>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	223f      	movs	r2, #63	; 0x3f
 8008236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800823a:	e003      	b.n	8008244 <UART_Start_Receive_IT+0xa4>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2222      	movs	r2, #34	; 0x22
 8008250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3308      	adds	r3, #8
 800825a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3308      	adds	r3, #8
 8008274:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008278:	673a      	str	r2, [r7, #112]	; 0x70
 800827a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800827e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e3      	bne.n	8008254 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008294:	d153      	bne.n	800833e <UART_Start_Receive_IT+0x19e>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800829c:	88fa      	ldrh	r2, [r7, #6]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d34d      	bcc.n	800833e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082aa:	d107      	bne.n	80082bc <UART_Start_Receive_IT+0x11c>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4a4b      	ldr	r2, [pc, #300]	; (80083e4 <UART_Start_Receive_IT+0x244>)
 80082b8:	671a      	str	r2, [r3, #112]	; 0x70
 80082ba:	e002      	b.n	80082c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a4a      	ldr	r2, [pc, #296]	; (80083e8 <UART_Start_Receive_IT+0x248>)
 80082c0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d01a      	beq.n	8008308 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082f6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e4      	bne.n	80082d2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008328:	64ba      	str	r2, [r7, #72]	; 0x48
 800832a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800832e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_Start_Receive_IT+0x168>
 800833c:	e04a      	b.n	80083d4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008346:	d107      	bne.n	8008358 <UART_Start_Receive_IT+0x1b8>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a26      	ldr	r2, [pc, #152]	; (80083ec <UART_Start_Receive_IT+0x24c>)
 8008354:	671a      	str	r2, [r3, #112]	; 0x70
 8008356:	e002      	b.n	800835e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4a25      	ldr	r2, [pc, #148]	; (80083f0 <UART_Start_Receive_IT+0x250>)
 800835c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d019      	beq.n	80083a2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008382:	677b      	str	r3, [r7, #116]	; 0x74
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
 800838e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e6      	bne.n	800836e <UART_Start_Receive_IT+0x1ce>
 80083a0:	e018      	b.n	80083d4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	613b      	str	r3, [r7, #16]
   return(result);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f043 0320 	orr.w	r3, r3, #32
 80083b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c0:	623b      	str	r3, [r7, #32]
 80083c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	69f9      	ldr	r1, [r7, #28]
 80083c6:	6a3a      	ldr	r2, [r7, #32]
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e6      	bne.n	80083a2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	378c      	adds	r7, #140	; 0x8c
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	08008afd 	.word	0x08008afd
 80083e8:	08008805 	.word	0x08008805
 80083ec:	080086a3 	.word	0x080086a3
 80083f0:	08008543 	.word	0x08008543

080083f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b095      	sub	sp, #84	; 0x54
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841a:	643b      	str	r3, [r7, #64]	; 0x40
 800841c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e6      	bne.n	80083fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	61fb      	str	r3, [r7, #28]
   return(result);
 800843e:	69fa      	ldr	r2, [r7, #28]
 8008440:	4b1e      	ldr	r3, [pc, #120]	; (80084bc <UART_EndRxTransfer+0xc8>)
 8008442:	4013      	ands	r3, r2
 8008444:	64bb      	str	r3, [r7, #72]	; 0x48
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008466:	2b01      	cmp	r3, #1
 8008468:	d118      	bne.n	800849c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	60bb      	str	r3, [r7, #8]
   return(result);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0310 	bic.w	r3, r3, #16
 800847e:	647b      	str	r3, [r7, #68]	; 0x44
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	613b      	str	r3, [r7, #16]
   return(result);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084b0:	bf00      	nop
 80084b2:	3754      	adds	r7, #84	; 0x54
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	effffffe 	.word	0xeffffffe

080084c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7fe ff32 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e4:	bf00      	nop
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	60bb      	str	r3, [r7, #8]
   return(result);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	61bb      	str	r3, [r7, #24]
 8008514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6979      	ldr	r1, [r7, #20]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	613b      	str	r3, [r7, #16]
   return(result);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e6      	bne.n	80084f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7f8 fba9 	bl	8000c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853a:	bf00      	nop
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b096      	sub	sp, #88	; 0x58
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008550:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855a:	2b22      	cmp	r3, #34	; 0x22
 800855c:	f040 8095 	bne.w	800868a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800856a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800856e:	b2d9      	uxtb	r1, r3
 8008570:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008574:	b2da      	uxtb	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857a:	400a      	ands	r2, r1
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d178      	bne.n	800869a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085bc:	653b      	str	r3, [r7, #80]	; 0x50
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c6:	647b      	str	r3, [r7, #68]	; 0x44
 80085c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e6      	bne.n	80085a8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	623b      	str	r3, [r7, #32]
   return(result);
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085fa:	633a      	str	r2, [r7, #48]	; 0x30
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e5      	bne.n	80085da <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d12e      	bne.n	8008682 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	60fb      	str	r3, [r7, #12]
   return(result);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0310 	bic.w	r3, r3, #16
 800863e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	69b9      	ldr	r1, [r7, #24]
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	617b      	str	r3, [r7, #20]
   return(result);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e6      	bne.n	800862a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b10      	cmp	r3, #16
 8008668:	d103      	bne.n	8008672 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2210      	movs	r2, #16
 8008670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7fe fe6e 	bl	800735c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008680:	e00b      	b.n	800869a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f8 fabc 	bl	8000c00 <HAL_UART_RxCpltCallback>
}
 8008688:	e007      	b.n	800869a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0208 	orr.w	r2, r2, #8
 8008698:	619a      	str	r2, [r3, #24]
}
 800869a:	bf00      	nop
 800869c:	3758      	adds	r7, #88	; 0x58
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b096      	sub	sp, #88	; 0x58
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	2b22      	cmp	r3, #34	; 0x22
 80086bc:	f040 8095 	bne.w	80087ea <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80086d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80086d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086d8:	4013      	ands	r3, r2
 80086da:	b29a      	uxth	r2, r3
 80086dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e4:	1c9a      	adds	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d178      	bne.n	80087fa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800871c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008726:	643b      	str	r3, [r7, #64]	; 0x40
 8008728:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800872c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	61fb      	str	r3, [r7, #28]
   return(result);
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	64bb      	str	r3, [r7, #72]	; 0x48
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800875a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d12e      	bne.n	80087e2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	60bb      	str	r3, [r7, #8]
   return(result);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0310 	bic.w	r3, r3, #16
 800879e:	647b      	str	r3, [r7, #68]	; 0x44
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6979      	ldr	r1, [r7, #20]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	613b      	str	r3, [r7, #16]
   return(result);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f003 0310 	and.w	r3, r3, #16
 80087c6:	2b10      	cmp	r3, #16
 80087c8:	d103      	bne.n	80087d2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2210      	movs	r2, #16
 80087d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7fe fdbe 	bl	800735c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087e0:	e00b      	b.n	80087fa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7f8 fa0c 	bl	8000c00 <HAL_UART_RxCpltCallback>
}
 80087e8:	e007      	b.n	80087fa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699a      	ldr	r2, [r3, #24]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0208 	orr.w	r2, r2, #8
 80087f8:	619a      	str	r2, [r3, #24]
}
 80087fa:	bf00      	nop
 80087fc:	3758      	adds	r7, #88	; 0x58
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b0a6      	sub	sp, #152	; 0x98
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008812:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883a:	2b22      	cmp	r3, #34	; 0x22
 800883c:	f040 814d 	bne.w	8008ada <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008846:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800884a:	e0f4      	b.n	8008a36 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008856:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800885a:	b2d9      	uxtb	r1, r3
 800885c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008860:	b2da      	uxtb	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008866:	400a      	ands	r2, r1
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008892:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b00      	cmp	r3, #0
 800889c:	d053      	beq.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800889e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d011      	beq.n	80088ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80088aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2201      	movs	r2, #1
 80088bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c4:	f043 0201 	orr.w	r2, r3, #1
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d011      	beq.n	80088fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2202      	movs	r2, #2
 80088ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088f4:	f043 0204 	orr.w	r2, r3, #4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	d011      	beq.n	800892e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800890a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2204      	movs	r2, #4
 800891c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008924:	f043 0202 	orr.w	r2, r3, #2
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d006      	beq.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7fe fd05 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d171      	bne.n	8008a36 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008974:	66bb      	str	r3, [r7, #104]	; 0x68
 8008976:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800897a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e4      	bne.n	8008952 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800899a:	4b56      	ldr	r3, [pc, #344]	; (8008af4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800899c:	4013      	ands	r3, r2
 800899e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3308      	adds	r3, #8
 80089a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089a8:	657a      	str	r2, [r7, #84]	; 0x54
 80089aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d12e      	bne.n	8008a30 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	f023 0310 	bic.w	r3, r3, #16
 80089ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
 80089f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e6      	bne.n	80089d8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d103      	bne.n	8008a20 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2210      	movs	r2, #16
 8008a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7fe fc97 	bl	800735c <HAL_UARTEx_RxEventCallback>
 8008a2e:	e002      	b.n	8008a36 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7f8 f8e5 	bl	8000c00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d006      	beq.n	8008a4c <UART_RxISR_8BIT_FIFOEN+0x248>
 8008a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f47f af00 	bne.w	800884c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d045      	beq.n	8008aea <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d23e      	bcs.n	8008aea <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3308      	adds	r3, #8
 8008a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a82:	673b      	str	r3, [r7, #112]	; 0x70
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e5      	bne.n	8008a6c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008aa4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f043 0320 	orr.w	r3, r3, #32
 8008aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6979      	ldr	r1, [r7, #20]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ad8:	e007      	b.n	8008aea <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0208 	orr.w	r2, r2, #8
 8008ae8:	619a      	str	r2, [r3, #24]
}
 8008aea:	bf00      	nop
 8008aec:	3798      	adds	r7, #152	; 0x98
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	effffffe 	.word	0xeffffffe
 8008af8:	08008543 	.word	0x08008543

08008afc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b0a8      	sub	sp, #160	; 0xa0
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b0a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b32:	2b22      	cmp	r3, #34	; 0x22
 8008b34:	f040 8151 	bne.w	8008dda <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b42:	e0f8      	b.n	8008d36 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b56:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008b5a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b5e:	4013      	ands	r3, r2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6c:	1c9a      	adds	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d053      	beq.n	8008c42 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d011      	beq.n	8008bca <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bc0:	f043 0201 	orr.w	r2, r3, #1
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2202      	movs	r2, #2
 8008be8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf0:	f043 0204 	orr.w	r2, r3, #4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d011      	beq.n	8008c2a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2204      	movs	r2, #4
 8008c18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c20:	f043 0202 	orr.w	r2, r3, #2
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d006      	beq.n	8008c42 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fe fb87 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d173      	bne.n	8008d36 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c72:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e4      	bne.n	8008c4e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c96:	4b57      	ldr	r3, [pc, #348]	; (8008df4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008caa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e3      	bne.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d12e      	bne.n	8008d30 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce8:	f023 0310 	bic.w	r3, r3, #16
 8008cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e6      	bne.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d103      	bne.n	8008d20 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2210      	movs	r2, #16
 8008d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7fe fb17 	bl	800735c <HAL_UARTEx_RxEventCallback>
 8008d2e:	e002      	b.n	8008d36 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7f7 ff65 	bl	8000c00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <UART_RxISR_16BIT_FIFOEN+0x250>
 8008d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f47f aefc 	bne.w	8008b44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d52:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d56:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d045      	beq.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d64:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d23e      	bcs.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d82:	677b      	str	r3, [r7, #116]	; 0x74
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d8c:	633a      	str	r2, [r7, #48]	; 0x30
 8008d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e5      	bne.n	8008d6c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008da4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f043 0320 	orr.w	r3, r3, #32
 8008dba:	673b      	str	r3, [r7, #112]	; 0x70
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	69b9      	ldr	r1, [r7, #24]
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e6      	bne.n	8008da6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dd8:	e007      	b.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 0208 	orr.w	r2, r2, #8
 8008de8:	619a      	str	r2, [r3, #24]
}
 8008dea:	bf00      	nop
 8008dec:	37a0      	adds	r7, #160	; 0xa0
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	effffffe 	.word	0xeffffffe
 8008df8:	080086a3 	.word	0x080086a3

08008dfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d101      	bne.n	8008e4e <HAL_UARTEx_DisableFifoMode+0x16>
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e027      	b.n	8008e9e <HAL_UARTEx_DisableFifoMode+0x66>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2224      	movs	r2, #36	; 0x24
 8008e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f022 0201 	bic.w	r2, r2, #1
 8008e74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e02d      	b.n	8008f1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2224      	movs	r2, #36	; 0x24
 8008ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0201 	bic.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f850 	bl	8008fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e02d      	b.n	8008f9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2224      	movs	r2, #36	; 0x24
 8008f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f812 	bl	8008fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d108      	bne.n	8008fc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fc4:	e031      	b.n	800902a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fca:	2310      	movs	r3, #16
 8008fcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	0e5b      	lsrs	r3, r3, #25
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	0f5b      	lsrs	r3, r3, #29
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	7b3a      	ldrb	r2, [r7, #12]
 8008ff2:	4911      	ldr	r1, [pc, #68]	; (8009038 <UARTEx_SetNbDataToProcess+0x94>)
 8008ff4:	5c8a      	ldrb	r2, [r1, r2]
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ffa:	7b3a      	ldrb	r2, [r7, #12]
 8008ffc:	490f      	ldr	r1, [pc, #60]	; (800903c <UARTEx_SetNbDataToProcess+0x98>)
 8008ffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009000:	fb93 f3f2 	sdiv	r3, r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	4909      	ldr	r1, [pc, #36]	; (8009038 <UARTEx_SetNbDataToProcess+0x94>)
 8009012:	5c8a      	ldrb	r2, [r1, r2]
 8009014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009018:	7b7a      	ldrb	r2, [r7, #13]
 800901a:	4908      	ldr	r1, [pc, #32]	; (800903c <UARTEx_SetNbDataToProcess+0x98>)
 800901c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009022:	b29a      	uxth	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	080090e0 	.word	0x080090e0
 800903c:	080090e8 	.word	0x080090e8

08009040 <__libc_init_array>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	4d0d      	ldr	r5, [pc, #52]	; (8009078 <__libc_init_array+0x38>)
 8009044:	4c0d      	ldr	r4, [pc, #52]	; (800907c <__libc_init_array+0x3c>)
 8009046:	1b64      	subs	r4, r4, r5
 8009048:	10a4      	asrs	r4, r4, #2
 800904a:	2600      	movs	r6, #0
 800904c:	42a6      	cmp	r6, r4
 800904e:	d109      	bne.n	8009064 <__libc_init_array+0x24>
 8009050:	4d0b      	ldr	r5, [pc, #44]	; (8009080 <__libc_init_array+0x40>)
 8009052:	4c0c      	ldr	r4, [pc, #48]	; (8009084 <__libc_init_array+0x44>)
 8009054:	f000 f820 	bl	8009098 <_init>
 8009058:	1b64      	subs	r4, r4, r5
 800905a:	10a4      	asrs	r4, r4, #2
 800905c:	2600      	movs	r6, #0
 800905e:	42a6      	cmp	r6, r4
 8009060:	d105      	bne.n	800906e <__libc_init_array+0x2e>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	f855 3b04 	ldr.w	r3, [r5], #4
 8009068:	4798      	blx	r3
 800906a:	3601      	adds	r6, #1
 800906c:	e7ee      	b.n	800904c <__libc_init_array+0xc>
 800906e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009072:	4798      	blx	r3
 8009074:	3601      	adds	r6, #1
 8009076:	e7f2      	b.n	800905e <__libc_init_array+0x1e>
 8009078:	080090f8 	.word	0x080090f8
 800907c:	080090f8 	.word	0x080090f8
 8009080:	080090f8 	.word	0x080090f8
 8009084:	080090fc 	.word	0x080090fc

08009088 <memset>:
 8009088:	4402      	add	r2, r0
 800908a:	4603      	mov	r3, r0
 800908c:	4293      	cmp	r3, r2
 800908e:	d100      	bne.n	8009092 <memset+0xa>
 8009090:	4770      	bx	lr
 8009092:	f803 1b01 	strb.w	r1, [r3], #1
 8009096:	e7f9      	b.n	800908c <memset+0x4>

08009098 <_init>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr

080090a4 <_fini>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	bf00      	nop
 80090a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090aa:	bc08      	pop	{r3}
 80090ac:	469e      	mov	lr, r3
 80090ae:	4770      	bx	lr
