
Cicular_buffer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002620  08002620  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002620  08002620  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002620  08002620  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08002628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  24000010  08002638  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000098  08002638  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164b6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025eb  00000000  00000000  000364f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00039788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003908c  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e500  00000000  00000000  000733e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017caee  00000000  00000000  000818e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fe3d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  001fe428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080025f8 	.word	0x080025f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080025f8 	.word	0x080025f8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <buffer_init>:
#include"circular_buffer.h"

buffer_t  data_node;

void buffer_init()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	data_node.bufferlength=0;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <buffer_init+0x2c>)
 8000412:	2200      	movs	r2, #0
 8000414:	759a      	strb	r2, [r3, #22]
	data_node.head=0;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <buffer_init+0x2c>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
	data_node.tail=0;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <buffer_init+0x2c>)
 800041e:	2200      	movs	r2, #0
 8000420:	705a      	strb	r2, [r3, #1]
	memset(&data_node.data,0,sizeof(data_node.data));
 8000422:	2214      	movs	r2, #20
 8000424:	2100      	movs	r1, #0
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <buffer_init+0x30>)
 8000428:	f002 f8de 	bl	80025e8 <memset>
	data_node.flag=false;
 800042c:	4b02      	ldr	r3, [pc, #8]	; (8000438 <buffer_init+0x2c>)
 800042e:	2200      	movs	r2, #0
 8000430:	75da      	strb	r2, [r3, #23]
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	24000030 	.word	0x24000030
 800043c:	24000032 	.word	0x24000032

08000440 <write_buffer>:

void write_buffer(uint8_t user_data)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]

	if (data_node.bufferlength == SIZE_OF_BUFFER)
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <write_buffer+0x64>)
 800044c:	7d9b      	ldrb	r3, [r3, #22]
 800044e:	2b0a      	cmp	r3, #10
 8000450:	d109      	bne.n	8000466 <write_buffer+0x26>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000458:	4813      	ldr	r0, [pc, #76]	; (80004a8 <write_buffer+0x68>)
 800045a:	f000 fdd3 	bl	8001004 <HAL_GPIO_WritePin>
		data_node.flag=true;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <write_buffer+0x64>)
 8000460:	2201      	movs	r2, #1
 8000462:	75da      	strb	r2, [r3, #23]
		data_node.bufferlength++;
		data_node.head++;
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
	}

}
 8000464:	e019      	b.n	800049a <write_buffer+0x5a>
		data_node.data[data_node.bufferlength]=user_data;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <write_buffer+0x64>)
 8000468:	7d9b      	ldrb	r3, [r3, #22]
 800046a:	79fa      	ldrb	r2, [r7, #7]
 800046c:	b291      	uxth	r1, r2
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <write_buffer+0x64>)
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	4413      	add	r3, r2
 8000474:	460a      	mov	r2, r1
 8000476:	805a      	strh	r2, [r3, #2]
		data_node.bufferlength++;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <write_buffer+0x64>)
 800047a:	7d9b      	ldrb	r3, [r3, #22]
 800047c:	3301      	adds	r3, #1
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <write_buffer+0x64>)
 8000482:	759a      	strb	r2, [r3, #22]
		data_node.head++;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <write_buffer+0x64>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <write_buffer+0x64>)
 800048e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2102      	movs	r1, #2
 8000494:	4805      	ldr	r0, [pc, #20]	; (80004ac <write_buffer+0x6c>)
 8000496:	f000 fdb5 	bl	8001004 <HAL_GPIO_WritePin>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	24000030 	.word	0x24000030
 80004a8:	58020400 	.word	0x58020400
 80004ac:	58021000 	.word	0x58021000

080004b0 <read_buffer>:

void read_buffer()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	uint8_t read_data;
	if (data_node.bufferlength == 0)
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <read_buffer+0x54>)
 80004b8:	7d9b      	ldrb	r3, [r3, #22]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d105      	bne.n	80004ca <read_buffer+0x1a>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2102      	movs	r1, #2
 80004c2:	4811      	ldr	r0, [pc, #68]	; (8000508 <read_buffer+0x58>)
 80004c4:	f000 fd9e 	bl	8001004 <HAL_GPIO_WritePin>
		data_node.bufferlength--;
		data_node.tail++;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	}

}
 80004c8:	e018      	b.n	80004fc <read_buffer+0x4c>
		read_data=data_node.data[data_node.bufferlength];
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <read_buffer+0x54>)
 80004cc:	7d9b      	ldrb	r3, [r3, #22]
 80004ce:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <read_buffer+0x54>)
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	4413      	add	r3, r2
 80004d4:	885b      	ldrh	r3, [r3, #2]
 80004d6:	71fb      	strb	r3, [r7, #7]
		data_node.bufferlength--;
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <read_buffer+0x54>)
 80004da:	7d9b      	ldrb	r3, [r3, #22]
 80004dc:	3b01      	subs	r3, #1
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <read_buffer+0x54>)
 80004e2:	759a      	strb	r2, [r3, #22]
		data_node.tail++;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <read_buffer+0x54>)
 80004e6:	785b      	ldrb	r3, [r3, #1]
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <read_buffer+0x54>)
 80004ee:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <read_buffer+0x5c>)
 80004f8:	f000 fd84 	bl	8001004 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	24000030 	.word	0x24000030
 8000508:	58021000 	.word	0x58021000
 800050c:	58020400 	.word	0x58020400

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa17 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f841 	bl	80005a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <main+0x84>)
 8000520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <main+0x84>)
 8000526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <main+0x84>)
 8000530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fd7b 	bl	8001038 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fd91 	bl	800106c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800054a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000550:	bf00      	nop
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <main+0x84>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800055a:	2b00      	cmp	r3, #0
 800055c:	d104      	bne.n	8000568 <main+0x58>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	1e5a      	subs	r2, r3, #1
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	dcf4      	bgt.n	8000552 <main+0x42>
if ( timeout < 0 )
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	da01      	bge.n	8000572 <main+0x62>
{
Error_Handler();
 800056e:	f000 f945 	bl	80007fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM16_Init();
 8000572:	f000 f893 	bl	800069c <MX_TIM16_Init>
  MX_GPIO_Init();
 8000576:	f000 f8b9 	bl	80006ec <MX_GPIO_Init>
  buffer_init();
 800057a:	f7ff ff47 	bl	800040c <buffer_init>
  /* USER CODE BEGIN 2 */
  prev_time=HAL_GetTick();
 800057e:	f000 fa69 	bl	8000a54 <HAL_GetTick>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <main+0x88>)
 8000588:	801a      	strh	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim16);
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <main+0x8c>)
 800058c:	f001 fd90 	bl	80020b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x80>
 8000592:	bf00      	nop
 8000594:	58024400 	.word	0x58024400
 8000598:	2400002c 	.word	0x2400002c
 800059c:	24000048 	.word	0x24000048

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b09c      	sub	sp, #112	; 0x70
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005aa:	224c      	movs	r2, #76	; 0x4c
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f81a 	bl	80025e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2220      	movs	r2, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f814 	bl	80025e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005c0:	2004      	movs	r0, #4
 80005c2:	f000 fd67 	bl	8001094 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b32      	ldr	r3, [pc, #200]	; (8000694 <SystemClock_Config+0xf4>)
 80005cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ce:	4a31      	ldr	r2, [pc, #196]	; (8000694 <SystemClock_Config+0xf4>)
 80005d0:	f023 0301 	bic.w	r3, r3, #1
 80005d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <SystemClock_Config+0xf4>)
 80005d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <SystemClock_Config+0xf8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <SystemClock_Config+0xf8>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xf8>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005fc:	bf00      	nop
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xf8>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800060a:	d1f8      	bne.n	80005fe <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000610:	2301      	movs	r3, #1
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2340      	movs	r3, #64	; 0x40
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 22;
 8000624:	2316      	movs	r3, #22
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000634:	230c      	movs	r3, #12
 8000636:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000638:	2300      	movs	r3, #0
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fd7e 	bl	8001148 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000652:	f000 f8d3 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	233f      	movs	r3, #63	; 0x3f
 8000658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2303      	movs	r3, #3
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000662:	2308      	movs	r3, #8
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f990 	bl	80019a0 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000686:	f000 f8b9 	bl	80007fc <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3770      	adds	r7, #112	; 0x70
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	58000400 	.word	0x58000400
 8000698:	58024800 	.word	0x58024800

0800069c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <MX_TIM16_Init+0x4c>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 13800;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006a8:	f243 52e8 	movw	r2, #13800	; 0x35e8
 80006ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_TIM16_Init+0x48>)
 80006d0:	f001 fc96 	bl	8002000 <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006da:	f000 f88f 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	24000048 	.word	0x24000048
 80006e8:	40014400 	.word	0x40014400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000708:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <MX_GPIO_Init+0xc8>)
 800070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000762:	4815      	ldr	r0, [pc, #84]	; (80007b8 <MX_GPIO_Init+0xcc>)
 8000764:	f000 fc4e 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2102      	movs	r1, #2
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_GPIO_Init+0xd0>)
 800076e:	f000 fc49 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000772:	f244 0301 	movw	r3, #16385	; 0x4001
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_GPIO_Init+0xcc>)
 800078c:	f000 fa8a 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_GPIO_Init+0xd0>)
 80007a8:	f000 fa7c 	bl	8000ca4 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58020400 	.word	0x58020400
 80007bc:	58021000 	.word	0x58021000

080007c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	 static uint8_t temp=0;

	 if(data_node.flag==true)
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007ca:	7ddb      	ldrb	r3, [r3, #23]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
	 {
		 read_buffer();
 80007d0:	f7ff fe6e 	bl	80004b0 <read_buffer>
 80007d4:	e004      	b.n	80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>
	 }

	 else
	 {
		 write_buffer(temp);
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fe30 	bl	8000440 <write_buffer>
	 }

	 temp++;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007ea:	701a      	strb	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000030 	.word	0x24000030
 80007f8:	2400002e 	.word	0x2400002e

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_MspInit+0x30>)
 8000810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x30>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x30>)
 8000820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	58024400 	.word	0x58024400

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d116      	bne.n	800087c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_TIM_Base_MspInit+0x4c>)
 8000850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <HAL_TIM_Base_MspInit+0x4c>)
 8000856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_TIM_Base_MspInit+0x4c>)
 8000860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2075      	movs	r0, #117	; 0x75
 8000872:	f000 f9e2 	bl	8000c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000876:	2075      	movs	r0, #117	; 0x75
 8000878:	f000 f9f9 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40014400 	.word	0x40014400
 8000888:	58024400 	.word	0x58024400

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f8a8 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM16_IRQHandler+0x10>)
 80008e6:	f001 fc5b 	bl	80021a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	24000048 	.word	0x24000048

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800092c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff fcee 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f001 fe3d 	bl	80025a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fdf3 	bl	8000510 <main>
  bx  lr
 800092a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000930:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000934:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000938:	08002628 	.word	0x08002628
  ldr r2, =_sbss
 800093c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000940:	24000098 	.word	0x24000098

08000944 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC3_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094e:	2003      	movs	r0, #3
 8000950:	f000 f968 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000954:	f001 f9da 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8000958:	4602      	mov	r2, r0
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_Init+0x68>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	f003 030f 	and.w	r3, r3, #15
 8000964:	4913      	ldr	r1, [pc, #76]	; (80009b4 <HAL_Init+0x6c>)
 8000966:	5ccb      	ldrb	r3, [r1, r3]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_Init+0x68>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_Init+0x6c>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <HAL_Init+0x70>)
 800098a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <HAL_Init+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f814 	bl	80009c0 <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e002      	b.n	80009a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff ff31 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58024400 	.word	0x58024400
 80009b4:	08002610 	.word	0x08002610
 80009b8:	24000004 	.word	0x24000004
 80009bc:	24000000 	.word	0x24000000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e021      	b.n	8000a18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_InitTick+0x64>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f94d 	bl	8000c8a <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f917 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x68>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2400000c 	.word	0x2400000c
 8000a24:	24000000 	.word	0x24000000
 8000a28:	24000008 	.word	0x24000008

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2400000c 	.word	0x2400000c
 8000a50:	24000094 	.word	0x24000094

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	24000094 	.word	0x24000094

08000a6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetREVID+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	0c1b      	lsrs	r3, r3, #16
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	5c001000 	.word	0x5c001000

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	05fa0000 	.word	0x05fa0000

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff40 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff33 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa4 	bl	8000be0 <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cb2:	4b89      	ldr	r3, [pc, #548]	; (8000ed8 <HAL_GPIO_Init+0x234>)
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cb6:	e194      	b.n	8000fe2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8186 	beq.w	8000fdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d005      	beq.n	8000ce8 <HAL_GPIO_Init+0x44>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0201 	and.w	r2, r3, #1
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d017      	beq.n	8000d86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0203 	and.w	r2, r3, #3
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 80e0 	beq.w	8000fdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x238>)
 8000e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e22:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_GPIO_Init+0x238>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <HAL_GPIO_Init+0x238>)
 8000e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_GPIO_Init+0x23c>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <HAL_GPIO_Init+0x240>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d052      	beq.n	8000f0c <HAL_GPIO_Init+0x268>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_GPIO_Init+0x244>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d031      	beq.n	8000ed2 <HAL_GPIO_Init+0x22e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_GPIO_Init+0x248>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d02b      	beq.n	8000ece <HAL_GPIO_Init+0x22a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_GPIO_Init+0x24c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x226>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_GPIO_Init+0x250>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x222>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_GPIO_Init+0x254>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x21e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x258>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x21a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_GPIO_Init+0x25c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x216>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <HAL_GPIO_Init+0x260>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_GPIO_Init+0x264>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x20e>
 8000eae:	2309      	movs	r3, #9
 8000eb0:	e02d      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	e02b      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e029      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e027      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e025      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e023      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e021      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e01f      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e01d      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e01b      	b.n	8000f0e <HAL_GPIO_Init+0x26a>
 8000ed6:	bf00      	nop
 8000ed8:	58000080 	.word	0x58000080
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58000400 	.word	0x58000400
 8000ee4:	58020000 	.word	0x58020000
 8000ee8:	58020400 	.word	0x58020400
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58020c00 	.word	0x58020c00
 8000ef4:	58021000 	.word	0x58021000
 8000ef8:	58021400 	.word	0x58021400
 8000efc:	58021800 	.word	0x58021800
 8000f00:	58021c00 	.word	0x58021c00
 8000f04:	58022000 	.word	0x58022000
 8000f08:	58022400 	.word	0x58022400
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1e:	4938      	ldr	r1, [pc, #224]	; (8001000 <HAL_GPIO_Init+0x35c>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f47f ae63 	bne.w	8000cb8 <HAL_GPIO_Init+0x14>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	3724      	adds	r7, #36	; 0x24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58000400 	.word	0x58000400

08001004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001020:	e003      	b.n	800102a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	041a      	lsls	r2, r3, #16
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_HSEM_FastTake+0x2c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3320      	adds	r3, #32
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_HSEM_FastTake+0x30>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	58026400 	.word	0x58026400
 8001068:	80000300 	.word	0x80000300

0800106c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001076:	4906      	ldr	r1, [pc, #24]	; (8001090 <HAL_HSEM_Release+0x24>)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	58026400 	.word	0x58026400

08001094 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_PWREx_ConfigSupply+0xb0>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	2b06      	cmp	r3, #6
 80010a6:	d00a      	beq.n	80010be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <HAL_PWREx_ConfigSupply+0xb0>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d001      	beq.n	80010ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e040      	b.n	800113c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e03e      	b.n	800113c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_PWREx_ConfigSupply+0xb0>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80010c6:	491f      	ldr	r1, [pc, #124]	; (8001144 <HAL_PWREx_ConfigSupply+0xb0>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010ce:	f7ff fcc1 	bl	8000a54 <HAL_GetTick>
 80010d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010d4:	e009      	b.n	80010ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010d6:	f7ff fcbd 	bl	8000a54 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e4:	d901      	bls.n	80010ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e028      	b.n	800113c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f6:	d1ee      	bne.n	80010d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b1e      	cmp	r3, #30
 80010fc:	d008      	beq.n	8001110 <HAL_PWREx_ConfigSupply+0x7c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b2e      	cmp	r3, #46	; 0x2e
 8001102:	d005      	beq.n	8001110 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b1d      	cmp	r3, #29
 8001108:	d002      	beq.n	8001110 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b2d      	cmp	r3, #45	; 0x2d
 800110e:	d114      	bne.n	800113a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001110:	f7ff fca0 	bl	8000a54 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001116:	e009      	b.n	800112c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001118:	f7ff fc9c 	bl	8000a54 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001126:	d901      	bls.n	800112c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e007      	b.n	800113c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_PWREx_ConfigSupply+0xb0>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d1ee      	bne.n	8001118 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	58024800 	.word	0x58024800

08001148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	f000 bc1c 	b.w	8001994 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8087 	beq.w	8001278 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116a:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001174:	4b9b      	ldr	r3, [pc, #620]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	2b10      	cmp	r3, #16
 800117e:	d007      	beq.n	8001190 <HAL_RCC_OscConfig+0x48>
 8001180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001182:	2b18      	cmp	r3, #24
 8001184:	d110      	bne.n	80011a8 <HAL_RCC_OscConfig+0x60>
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10b      	bne.n	80011a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	4b94      	ldr	r3, [pc, #592]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d06c      	beq.n	8001276 <HAL_RCC_OscConfig+0x12e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d168      	bne.n	8001276 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e3f5      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b0:	d106      	bne.n	80011c0 <HAL_RCC_OscConfig+0x78>
 80011b2:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a8b      	ldr	r2, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e02e      	b.n	800121e <HAL_RCC_OscConfig+0xd6>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x9a>
 80011c8:	4b86      	ldr	r3, [pc, #536]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a85      	ldr	r2, [pc, #532]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a82      	ldr	r2, [pc, #520]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e01d      	b.n	800121e <HAL_RCC_OscConfig+0xd6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0xbe>
 80011ec:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a7c      	ldr	r2, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b7a      	ldr	r3, [pc, #488]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a79      	ldr	r2, [pc, #484]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e00b      	b.n	800121e <HAL_RCC_OscConfig+0xd6>
 8001206:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a76      	ldr	r2, [pc, #472]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a73      	ldr	r2, [pc, #460]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d013      	beq.n	800124e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fc15 	bl	8000a54 <HAL_GetTick>
 800122a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122e:	f7ff fc11 	bl	8000a54 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b64      	cmp	r3, #100	; 0x64
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e3a9      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0xe6>
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fc01 	bl	8000a54 <HAL_GetTick>
 8001252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fbfd 	bl	8000a54 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e395      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001268:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0x10e>
 8001274:	e000      	b.n	8001278 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80ca 	beq.w	800141a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800128e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001290:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <HAL_RCC_OscConfig+0x164>
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	2b18      	cmp	r3, #24
 80012a0:	d156      	bne.n	8001350 <HAL_RCC_OscConfig+0x208>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d151      	bne.n	8001350 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_OscConfig+0x17c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e367      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 0219 	bic.w	r2, r3, #25
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4944      	ldr	r1, [pc, #272]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012d6:	f7ff fbbd 	bl	8000a54 <HAL_GetTick>
 80012da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fbb9 	bl	8000a54 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e351      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	f7ff fbb6 	bl	8000a6c <HAL_GetREVID>
 8001300:	4603      	mov	r3, r0
 8001302:	f241 0203 	movw	r2, #4099	; 0x1003
 8001306:	4293      	cmp	r3, r2
 8001308:	d817      	bhi.n	800133a <HAL_RCC_OscConfig+0x1f2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	d108      	bne.n	8001324 <HAL_RCC_OscConfig+0x1dc>
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800131a:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001322:	e07a      	b.n	800141a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	031b      	lsls	r3, r3, #12
 8001332:	492c      	ldr	r1, [pc, #176]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	e06f      	b.n	800141a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	4926      	ldr	r1, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134e:	e064      	b.n	800141a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d047      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 0219 	bic.w	r2, r3, #25
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	491f      	ldr	r1, [pc, #124]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fb73 	bl	8000a54 <HAL_GetTick>
 800136e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fb6f 	bl	8000a54 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e307      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	f7ff fb6c 	bl	8000a6c <HAL_GetREVID>
 8001394:	4603      	mov	r3, r0
 8001396:	f241 0203 	movw	r2, #4099	; 0x1003
 800139a:	4293      	cmp	r3, r2
 800139c:	d817      	bhi.n	80013ce <HAL_RCC_OscConfig+0x286>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_OscConfig+0x270>
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013ae:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	6053      	str	r3, [r2, #4]
 80013b6:	e030      	b.n	800141a <HAL_RCC_OscConfig+0x2d2>
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	031b      	lsls	r3, r3, #12
 80013c6:	4907      	ldr	r1, [pc, #28]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e025      	b.n	800141a <HAL_RCC_OscConfig+0x2d2>
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	061b      	lsls	r3, r3, #24
 80013dc:	4901      	ldr	r1, [pc, #4]	; (80013e4 <HAL_RCC_OscConfig+0x29c>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e01a      	b.n	800141a <HAL_RCC_OscConfig+0x2d2>
 80013e4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e8:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a9d      	ldr	r2, [pc, #628]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb2e 	bl	8000a54 <HAL_GetTick>
 80013f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fb2a 	bl	8000a54 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e2c2      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800140e:	4b95      	ldr	r3, [pc, #596]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80a9 	beq.w	800157a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001428:	4b8e      	ldr	r3, [pc, #568]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001430:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001432:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b08      	cmp	r3, #8
 800143c:	d007      	beq.n	800144e <HAL_RCC_OscConfig+0x306>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b18      	cmp	r3, #24
 8001442:	d13a      	bne.n	80014ba <HAL_RCC_OscConfig+0x372>
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d135      	bne.n	80014ba <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <HAL_RCC_OscConfig+0x31e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b80      	cmp	r3, #128	; 0x80
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e296      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001466:	f7ff fb01 	bl	8000a6c <HAL_GetREVID>
 800146a:	4603      	mov	r3, r0
 800146c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001470:	4293      	cmp	r3, r2
 8001472:	d817      	bhi.n	80014a4 <HAL_RCC_OscConfig+0x35c>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	2b20      	cmp	r3, #32
 800147a:	d108      	bne.n	800148e <HAL_RCC_OscConfig+0x346>
 800147c:	4b79      	ldr	r3, [pc, #484]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001484:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800148a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800148c:	e075      	b.n	800157a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800148e:	4b75      	ldr	r3, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	069b      	lsls	r3, r3, #26
 800149c:	4971      	ldr	r1, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a2:	e06a      	b.n	800157a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a4:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	496c      	ldr	r1, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b8:	e05f      	b.n	800157a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d042      	beq.n	8001548 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014c2:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80014c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fac1 	bl	8000a54 <HAL_GetTick>
 80014d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014d6:	f7ff fabd 	bl	8000a54 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e255      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014f4:	f7ff faba 	bl	8000a6c <HAL_GetREVID>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80014fe:	4293      	cmp	r3, r2
 8001500:	d817      	bhi.n	8001532 <HAL_RCC_OscConfig+0x3ea>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2b20      	cmp	r3, #32
 8001508:	d108      	bne.n	800151c <HAL_RCC_OscConfig+0x3d4>
 800150a:	4b56      	ldr	r3, [pc, #344]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001512:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001514:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001518:	6053      	str	r3, [r2, #4]
 800151a:	e02e      	b.n	800157a <HAL_RCC_OscConfig+0x432>
 800151c:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	069b      	lsls	r3, r3, #26
 800152a:	494e      	ldr	r1, [pc, #312]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
 8001530:	e023      	b.n	800157a <HAL_RCC_OscConfig+0x432>
 8001532:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	061b      	lsls	r3, r3, #24
 8001540:	4948      	ldr	r1, [pc, #288]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001542:	4313      	orrs	r3, r2
 8001544:	60cb      	str	r3, [r1, #12]
 8001546:	e018      	b.n	800157a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800154e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fa7e 	bl	8000a54 <HAL_GetTick>
 8001558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800155c:	f7ff fa7a 	bl	8000a54 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e212      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d019      	beq.n	80015c2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b35      	ldr	r3, [pc, #212]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001592:	4a34      	ldr	r2, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fa5b 	bl	8000a54 <HAL_GetTick>
 800159e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa57 	bl	8000a54 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1ef      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x45a>
 80015c0:	e018      	b.n	80015f4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fa41 	bl	8000a54 <HAL_GetTick>
 80015d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fa3d 	bl	8000a54 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1d5      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d039      	beq.n	8001674 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d019      	beq.n	800163c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800160e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001612:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001614:	f7ff fa1e 	bl	8000a54 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800161c:	f7ff fa1a 	bl	8000a54 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1b2      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x4d4>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_RCC_OscConfig+0x51c>)
 8001642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001646:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001648:	f7ff fa04 	bl	8000a54 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001650:	f7ff fa00 	bl	8000a54 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d904      	bls.n	8001668 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e198      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
 8001662:	bf00      	nop
 8001664:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001668:	4ba3      	ldr	r3, [pc, #652]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ed      	bne.n	8001650 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8081 	beq.w	8001784 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001682:	4b9e      	ldr	r3, [pc, #632]	; (80018fc <HAL_RCC_OscConfig+0x7b4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a9d      	ldr	r2, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x7b4>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800168e:	f7ff f9e1 	bl	8000a54 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff f9dd 	bl	8000a54 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e175      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016a8:	4b94      	ldr	r3, [pc, #592]	; (80018fc <HAL_RCC_OscConfig+0x7b4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x582>
 80016bc:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a8d      	ldr	r2, [pc, #564]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	e02d      	b.n	8001726 <HAL_RCC_OscConfig+0x5de>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x5a4>
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a88      	ldr	r2, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	4b86      	ldr	r3, [pc, #536]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a85      	ldr	r2, [pc, #532]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	e01c      	b.n	8001726 <HAL_RCC_OscConfig+0x5de>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d10c      	bne.n	800170e <HAL_RCC_OscConfig+0x5c6>
 80016f4:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	e00b      	b.n	8001726 <HAL_RCC_OscConfig+0x5de>
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a79      	ldr	r2, [pc, #484]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	4b77      	ldr	r3, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a76      	ldr	r2, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d015      	beq.n	800175a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff f991 	bl	8000a54 <HAL_GetTick>
 8001732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f98d 	bl	8000a54 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e123      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ee      	beq.n	8001736 <HAL_RCC_OscConfig+0x5ee>
 8001758:	e014      	b.n	8001784 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff f97b 	bl	8000a54 <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff f977 	bl	8000a54 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e10d      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001778:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ee      	bne.n	8001762 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8102 	beq.w	8001992 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001796:	2b18      	cmp	r3, #24
 8001798:	f000 80bd 	beq.w	8001916 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	f040 8095 	bne.w	80018d0 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a53      	ldr	r2, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80017ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff f94f 	bl	8000a54 <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f94b 	bl	8000a54 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0e3      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	4b48      	ldr	r3, [pc, #288]	; (8001900 <HAL_RCC_OscConfig+0x7b8>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	430a      	orrs	r2, r1
 80017ec:	4942      	ldr	r1, [pc, #264]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	628b      	str	r3, [r1, #40]	; 0x28
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	3b01      	subs	r3, #1
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	b29b      	uxth	r3, r3
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	3b01      	subs	r3, #1
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	3b01      	subs	r3, #1
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001822:	4935      	ldr	r1, [pc, #212]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001824:	4313      	orrs	r3, r2
 8001826:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_RCC_OscConfig+0x7bc>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	492d      	ldr	r1, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001844:	4313      	orrs	r3, r2
 8001846:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f023 020c 	bic.w	r2, r3, #12
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4928      	ldr	r1, [pc, #160]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001856:	4313      	orrs	r3, r2
 8001858:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	f023 0202 	bic.w	r2, r3, #2
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4924      	ldr	r1, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001868:	4313      	orrs	r3, r2
 800186a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800187e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800188a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f8d4 	bl	8000a54 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f8d0 	bl	8000a54 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e068      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x768>
 80018ce:	e060      	b.n	8001992 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_RCC_OscConfig+0x7b0>)
 80018d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f8ba 	bl	8000a54 <HAL_GetTick>
 80018e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e2:	e011      	b.n	8001908 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f8b6 	bl	8000a54 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d90a      	bls.n	8001908 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04e      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
 80018f6:	bf00      	nop
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58024800 	.word	0x58024800
 8001900:	fffffc0c 	.word	0xfffffc0c
 8001904:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x854>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e7      	bne.n	80018e4 <HAL_RCC_OscConfig+0x79c>
 8001914:	e03d      	b.n	8001992 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x854>)
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_RCC_OscConfig+0x854>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	2b01      	cmp	r3, #1
 8001928:	d031      	beq.n	800198e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d12a      	bne.n	800198e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d122      	bne.n	800198e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d11a      	bne.n	800198e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d111      	bne.n	800198e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d108      	bne.n	800198e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0e1b      	lsrs	r3, r3, #24
 8001980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	58024400 	.word	0x58024400

080019a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e19c      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b8a      	ldr	r3, [pc, #552]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d910      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b87      	ldr	r3, [pc, #540]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 020f 	bic.w	r2, r3, #15
 80019ca:	4985      	ldr	r1, [pc, #532]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b83      	ldr	r3, [pc, #524]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e184      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d010      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d908      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a00:	4b78      	ldr	r3, [pc, #480]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	4975      	ldr	r1, [pc, #468]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d908      	bls.n	8001a40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	496a      	ldr	r1, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	4b64      	ldr	r3, [pc, #400]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d908      	bls.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a5c:	4b61      	ldr	r3, [pc, #388]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	495e      	ldr	r1, [pc, #376]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d010      	beq.n	8001a9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d908      	bls.n	8001a9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4953      	ldr	r1, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d010      	beq.n	8001aca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d908      	bls.n	8001aca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f023 020f 	bic.w	r2, r3, #15
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4947      	ldr	r1, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d055      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4940      	ldr	r1, [pc, #256]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af0:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d121      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0f6      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d115      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0ea      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0de      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0d6      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f023 0207 	bic.w	r2, r3, #7
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4925      	ldr	r1, [pc, #148]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7fe ff7f 	bl	8000a54 <HAL_GetTick>
 8001b56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5a:	f7fe ff7b 	bl	8000a54 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0be      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d1eb      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d208      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f023 020f 	bic.w	r2, r3, #15
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d214      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 020f 	bic.w	r2, r3, #15
 8001bc6:	4906      	ldr	r1, [pc, #24]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e086      	b.n	8001cee <HAL_RCC_ClockConfig+0x34e>
 8001be0:	52002000 	.word	0x52002000
 8001be4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d208      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c04:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	4939      	ldr	r1, [pc, #228]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d208      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	492e      	ldr	r1, [pc, #184]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d010      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d208      	bcs.n	8001c72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d208      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4917      	ldr	r1, [pc, #92]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca0:	f000 f834 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	4912      	ldr	r1, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x35c>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x358>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_RCC_ClockConfig+0x35c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x360>)
 8001cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x364>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x368>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fe6c 	bl	80009c0 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	08002610 	.word	0x08002610
 8001d00:	24000004 	.word	0x24000004
 8001d04:	24000000 	.word	0x24000000
 8001d08:	24000008 	.word	0x24000008

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d12:	4bb3      	ldr	r3, [pc, #716]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	f200 8155 	bhi.w	8001fca <HAL_RCC_GetSysClockFreq+0x2be>
 8001d20:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d26:	bf00      	nop
 8001d28:	08001d8d 	.word	0x08001d8d
 8001d2c:	08001fcb 	.word	0x08001fcb
 8001d30:	08001fcb 	.word	0x08001fcb
 8001d34:	08001fcb 	.word	0x08001fcb
 8001d38:	08001fcb 	.word	0x08001fcb
 8001d3c:	08001fcb 	.word	0x08001fcb
 8001d40:	08001fcb 	.word	0x08001fcb
 8001d44:	08001fcb 	.word	0x08001fcb
 8001d48:	08001db3 	.word	0x08001db3
 8001d4c:	08001fcb 	.word	0x08001fcb
 8001d50:	08001fcb 	.word	0x08001fcb
 8001d54:	08001fcb 	.word	0x08001fcb
 8001d58:	08001fcb 	.word	0x08001fcb
 8001d5c:	08001fcb 	.word	0x08001fcb
 8001d60:	08001fcb 	.word	0x08001fcb
 8001d64:	08001fcb 	.word	0x08001fcb
 8001d68:	08001db9 	.word	0x08001db9
 8001d6c:	08001fcb 	.word	0x08001fcb
 8001d70:	08001fcb 	.word	0x08001fcb
 8001d74:	08001fcb 	.word	0x08001fcb
 8001d78:	08001fcb 	.word	0x08001fcb
 8001d7c:	08001fcb 	.word	0x08001fcb
 8001d80:	08001fcb 	.word	0x08001fcb
 8001d84:	08001fcb 	.word	0x08001fcb
 8001d88:	08001dbf 	.word	0x08001dbf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d8c:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d98:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	4a90      	ldr	r2, [pc, #576]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001daa:	e111      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001dac:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dae:	61bb      	str	r3, [r7, #24]
    break;
 8001db0:	e10e      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001db4:	61bb      	str	r3, [r7, #24]
    break;
 8001db6:	e10b      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001db8:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001dba:	61bb      	str	r3, [r7, #24]
    break;
 8001dbc:	e108      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dc8:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001dde:	4b80      	ldr	r3, [pc, #512]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80e1 	beq.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	f000 8083 	beq.w	8001f10 <HAL_RCC_GetSysClockFreq+0x204>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f200 80a1 	bhi.w	8001f54 <HAL_RCC_GetSysClockFreq+0x248>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x114>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d056      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e1e:	e099      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d02d      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e2c:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	4a6b      	ldr	r2, [pc, #428]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e6a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e86:	e087      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e92:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001ff4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eae:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eca:	e065      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ff8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f0e:	e043      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ffc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f52:	e021      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ff8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f96:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	0a5b      	lsrs	r3, r3, #9
 8001f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
    break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fcc:	61bb      	str	r3, [r7, #24]
    break;
 8001fce:	bf00      	nop
  }

  return sysclockfreq;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	03d09000 	.word	0x03d09000
 8001fe8:	003d0900 	.word	0x003d0900
 8001fec:	017d7840 	.word	0x017d7840
 8001ff0:	46000000 	.word	0x46000000
 8001ff4:	4c742400 	.word	0x4c742400
 8001ff8:	4a742400 	.word	0x4a742400
 8001ffc:	4bbebc20 	.word	0x4bbebc20

08002000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e049      	b.n	80020a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fc08 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f000 f9f6 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e054      	b.n	8002172 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_TIM_Base_Start_IT+0xd0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d01d      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_TIM_Base_Start_IT+0xd4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <HAL_TIM_Base_Start_IT+0xd8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_TIM_Base_Start_IT+0xdc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_TIM_Base_Start_IT+0xe0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_TIM_Base_Start_IT+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_TIM_Base_Start_IT+0xe8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d115      	bne.n	800215c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_TIM_Base_Start_IT+0xec>)
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b06      	cmp	r3, #6
 8002140:	d015      	beq.n	800216e <HAL_TIM_Base_Start_IT+0xbe>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d011      	beq.n	800216e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215a:	e008      	b.n	800216e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e000      	b.n	8002170 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40010400 	.word	0x40010400
 8002194:	40001800 	.word	0x40001800
 8002198:	40014000 	.word	0x40014000
 800219c:	00010007 	.word	0x00010007

080021a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d122      	bne.n	80021fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d11b      	bne.n	80021fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0202 	mvn.w	r2, #2
 80021cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f905 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f8f7 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f908 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0204 	mvn.w	r2, #4
 8002220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2202      	movs	r2, #2
 8002226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8db 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8cd 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8de 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b08      	cmp	r3, #8
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0208 	mvn.w	r2, #8
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8b1 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8a3 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f8b4 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0210 	mvn.w	r2, #16
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2208      	movs	r2, #8
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f887 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f879 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f88a 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0201 	mvn.w	r2, #1
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fa4e 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f914 	bl	8002578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235e:	d10e      	bne.n	800237e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d107      	bne.n	800237e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f907 	bl	800258c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d10e      	bne.n	80023aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d107      	bne.n	80023aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f838 	bl	800241a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d10e      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0220 	mvn.w	r2, #32
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8c7 	bl	8002564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d00f      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <TIM_Base_SetConfig+0x120>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d01b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d017      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <TIM_Base_SetConfig+0x120>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <TIM_Base_SetConfig+0x124>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <TIM_Base_SetConfig+0x128>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <TIM_Base_SetConfig+0x12c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <TIM_Base_SetConfig+0x130>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00f      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <TIM_Base_SetConfig+0x128>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <TIM_Base_SetConfig+0x12c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <TIM_Base_SetConfig+0x130>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40010400 	.word	0x40010400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800

08002564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <__libc_init_array>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4d0d      	ldr	r5, [pc, #52]	; (80025d8 <__libc_init_array+0x38>)
 80025a4:	4c0d      	ldr	r4, [pc, #52]	; (80025dc <__libc_init_array+0x3c>)
 80025a6:	1b64      	subs	r4, r4, r5
 80025a8:	10a4      	asrs	r4, r4, #2
 80025aa:	2600      	movs	r6, #0
 80025ac:	42a6      	cmp	r6, r4
 80025ae:	d109      	bne.n	80025c4 <__libc_init_array+0x24>
 80025b0:	4d0b      	ldr	r5, [pc, #44]	; (80025e0 <__libc_init_array+0x40>)
 80025b2:	4c0c      	ldr	r4, [pc, #48]	; (80025e4 <__libc_init_array+0x44>)
 80025b4:	f000 f820 	bl	80025f8 <_init>
 80025b8:	1b64      	subs	r4, r4, r5
 80025ba:	10a4      	asrs	r4, r4, #2
 80025bc:	2600      	movs	r6, #0
 80025be:	42a6      	cmp	r6, r4
 80025c0:	d105      	bne.n	80025ce <__libc_init_array+0x2e>
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c8:	4798      	blx	r3
 80025ca:	3601      	adds	r6, #1
 80025cc:	e7ee      	b.n	80025ac <__libc_init_array+0xc>
 80025ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d2:	4798      	blx	r3
 80025d4:	3601      	adds	r6, #1
 80025d6:	e7f2      	b.n	80025be <__libc_init_array+0x1e>
 80025d8:	08002620 	.word	0x08002620
 80025dc:	08002620 	.word	0x08002620
 80025e0:	08002620 	.word	0x08002620
 80025e4:	08002624 	.word	0x08002624

080025e8 <memset>:
 80025e8:	4402      	add	r2, r0
 80025ea:	4603      	mov	r3, r0
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d100      	bne.n	80025f2 <memset+0xa>
 80025f0:	4770      	bx	lr
 80025f2:	f803 1b01 	strb.w	r1, [r3], #1
 80025f6:	e7f9      	b.n	80025ec <memset+0x4>

080025f8 <_init>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr

08002604 <_fini>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr
