
Calculator_USART_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08009ce8  08009ce8  00019ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a25c  0800a25c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a264  0800a264  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000170  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011483  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002362  00000000  00000000  00031693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000339f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c88  00000000  00000000  00034758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022395  00000000  00000000  000353e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f41c  00000000  00000000  00057775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc71b  00000000  00000000  00066b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001332ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ac  00000000  00000000  00133300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ccc 	.word	0x08009ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009ccc 	.word	0x08009ccc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <calculator>:
#include <stdio.h>
#include "calculator.h"


uint16_t calculator()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
	int ch=0,x=0,y=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
	double result;
	 printf("Enter your choice:\r\n");
 8001002:	4841      	ldr	r0, [pc, #260]	; (8001108 <calculator+0x118>)
 8001004:	f004 fa6c 	bl	80054e0 <puts>
	 printf("1. Addition\n\r2. Subtraction\n\r3. Multiplication\n\r4. Division\n\r");
 8001008:	4840      	ldr	r0, [pc, #256]	; (800110c <calculator+0x11c>)
 800100a:	f004 f9e3 	bl	80053d4 <iprintf>
	 scanf(" %d", &ch);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	483e      	ldr	r0, [pc, #248]	; (8001110 <calculator+0x120>)
 8001016:	f004 fa6b 	bl	80054f0 <iscanf>
	 printf("enter 2 no.\n\r");
 800101a:	483e      	ldr	r0, [pc, #248]	; (8001114 <calculator+0x124>)
 800101c:	f004 f9da 	bl	80053d4 <iprintf>
	 scanf("%d %d",&x,&y);
 8001020:	1d3a      	adds	r2, r7, #4
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4619      	mov	r1, r3
 8001028:	483b      	ldr	r0, [pc, #236]	; (8001118 <calculator+0x128>)
 800102a:	f004 fa61 	bl	80054f0 <iscanf>

	switch(ch)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	2b03      	cmp	r3, #3
 8001034:	d84e      	bhi.n	80010d4 <calculator+0xe4>
 8001036:	a201      	add	r2, pc, #4	; (adr r2, 800103c <calculator+0x4c>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	0800104d 	.word	0x0800104d
 8001040:	0800106f 	.word	0x0800106f
 8001044:	08001091 	.word	0x08001091
 8001048:	080010b3 	.word	0x080010b3
	{
		case 1: result=add(x,y);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f862 	bl	8001120 <add>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa50 	bl	8000504 <__aeabi_ui2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	e9c7 2304 	strd	r2, r3, [r7, #16]
				break;
 800106c:	e038      	b.n	80010e0 <calculator+0xf0>
		case 2: result=sub(x,y);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f865 	bl	8001148 <sub>
 800107e:	4603      	mov	r3, r0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa3f 	bl	8000504 <__aeabi_ui2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				break;
 800108e:	e027      	b.n	80010e0 <calculator+0xf0>
		case 3: result=mul(x,y);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f868 	bl	8001170 <mul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa2e 	bl	8000504 <__aeabi_ui2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
				break;
 80010b0:	e016      	b.n	80010e0 <calculator+0xf0>
		case 4: result=division(x,y);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f86c 	bl	800119a <division>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa1d 	bl	8000504 <__aeabi_ui2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
				break;
 80010d2:	e005      	b.n	80010e0 <calculator+0xf0>
		default: result=999;
 80010d4:	a30a      	add	r3, pc, #40	; (adr r3, 8001100 <calculator+0x110>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	e9c7 2304 	strd	r2, r3, [r7, #16]
				break;
 80010de:	bf00      	nop
	}

	printf("%0.2f\r\n\n",result);
 80010e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <calculator+0x12c>)
 80010e6:	f004 f975 	bl	80053d4 <iprintf>

	return result;
 80010ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	00000000 	.word	0x00000000
 8001104:	408f3800 	.word	0x408f3800
 8001108:	08009ce8 	.word	0x08009ce8
 800110c:	08009cfc 	.word	0x08009cfc
 8001110:	08009d3c 	.word	0x08009d3c
 8001114:	08009d40 	.word	0x08009d40
 8001118:	08009d50 	.word	0x08009d50
 800111c:	08009d58 	.word	0x08009d58

08001120 <add>:

uint16_t add(uint8_t a, uint8_t b)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	return (a+b);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	b29a      	uxth	r2, r3
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	b29b      	uxth	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <sub>:
uint16_t sub(uint8_t a, uint8_t b)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	return (a-b);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	b29a      	uxth	r2, r3
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	b29b      	uxth	r3, r3
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <mul>:
uint16_t mul(uint8_t a, uint8_t b)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	71bb      	strb	r3, [r7, #6]
	return (a*b);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	b29a      	uxth	r2, r3
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	b29b      	uxth	r3, r3
 8001188:	fb12 f303 	smulbb	r3, r2, r3
 800118c:	b29b      	uxth	r3, r3
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <division>:
uint16_t division(uint8_t a, uint8_t b)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	460a      	mov	r2, r1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71bb      	strb	r3, [r7, #6]
	if(b==0)
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <division+0x1c>
	{
		return 9999;
 80011b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80011b4:	e005      	b.n	80011c2 <division+0x28>
	}

	else
	{
		return (a/b);
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	b29b      	uxth	r3, r3
	}

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <main+0x34>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	2300      	movs	r3, #0
 80011dc:	2202      	movs	r2, #2
 80011de:	2100      	movs	r1, #0
 80011e0:	f004 f99e 	bl	8005520 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 fc24 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f80e 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 f8f6 	bl	80013dc <MX_GPIO_Init>
  MX_DMA_Init();
 80011f0:	f000 f8d4 	bl	800139c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f4:	f000 f8a8 	bl	8001348 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80011f8:	f000 f870 	bl	80012dc <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  calculator();
 80011fc:	f7ff fef8 	bl	8000ff0 <calculator>
 8001200:	e7fc      	b.n	80011fc <main+0x2c>
 8001202:	bf00      	nop
 8001204:	2000000c 	.word	0x2000000c

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fa5a 	bl	80046d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <SystemClock_Config+0xcc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <SystemClock_Config+0xcc>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <SystemClock_Config+0xcc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <SystemClock_Config+0xd0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <SystemClock_Config+0xd0>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <SystemClock_Config+0xd0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001268:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001278:	2304      	movs	r3, #4
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001284:	2307      	movs	r3, #7
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fa25 	bl	80026dc <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001298:	f000 f942 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	230f      	movs	r3, #15
 800129e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	2302      	movs	r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2105      	movs	r1, #5
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fc86 	bl	8002bcc <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012c6:	f000 f92b 	bl	8001520 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	; 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_TIM6_Init+0x64>)
 80012ec:	4a15      	ldr	r2, [pc, #84]	; (8001344 <MX_TIM6_Init+0x68>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_TIM6_Init+0x64>)
 80012f2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80012f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_TIM6_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_TIM6_Init+0x64>)
 8001300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001304:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_TIM6_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_TIM6_Init+0x64>)
 800130e:	f001 fe8b 	bl	8003028 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001318:	f000 f902 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_TIM6_Init+0x64>)
 800132a:	f002 f90d 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001334:	f000 f8f4 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000268 	.word	0x20000268
 8001344:	40001000 	.word	0x40001000

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_USART2_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001380:	f002 f972 	bl	8003668 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f8c9 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002b0 	.word	0x200002b0
 8001398:	40004400 	.word	0x40004400

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2010      	movs	r0, #16
 80013c4:	f000 fc2e 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013c8:	2010      	movs	r0, #16
 80013ca:	f000 fc47 	bl	8001c5c <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <MX_GPIO_Init+0xb4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a25      	ldr	r2, [pc, #148]	; (8001490 <MX_GPIO_Init+0xb4>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MX_GPIO_Init+0xb4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_GPIO_Init+0xb4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <MX_GPIO_Init+0xb4>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_GPIO_Init+0xb4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_GPIO_Init+0xb4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <MX_GPIO_Init+0xb4>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_GPIO_Init+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_GPIO_Init+0xb8>)
 800144e:	f001 f92b 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001452:	2301      	movs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_GPIO_Init+0xbc>)
 8001466:	f000 ff83 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800146a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0xb8>)
 8001484:	f000 ff74 	bl	8002370 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40020000 	.word	0x40020000

0800149c <__io_putchar>:

/* USER CODE BEGIN 4 */


PUTCHAR_PROTOTYPE
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014a4:	1d39      	adds	r1, r7, #4
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	2201      	movs	r2, #1
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <__io_putchar+0x20>)
 80014ae:	f002 f928 	bl	8003702 <HAL_UART_Transmit>

  return ch;
 80014b2:	687b      	ldr	r3, [r7, #4]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200002b0 	.word	0x200002b0

080014c0 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]

	  /* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <__io_getchar+0x38>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <__io_getchar+0x38>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]


  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014e0:	1df9      	adds	r1, r7, #7
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	2201      	movs	r2, #1
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <__io_getchar+0x38>)
 80014ea:	f002 f99c 	bl	8003826 <HAL_UART_Receive>

  return ch;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200002b0 	.word	0x200002b0

080014fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150e:	f000 fab1 	bl	8001a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40010000 	.word	0x40010000

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156a:	2007      	movs	r0, #7
 800156c:	f000 fb4f 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_TIM_Base_MspInit+0x48>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d115      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2036      	movs	r0, #54	; 0x36
 80015b0:	f000 fb38 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b4:	2036      	movs	r0, #54	; 0x36
 80015b6:	f000 fb51 	bl	8001c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40001000 	.word	0x40001000
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a34      	ldr	r2, [pc, #208]	; (80016bc <HAL_UART_MspInit+0xf0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d161      	bne.n	80016b2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_UART_MspInit+0xf4>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_UART_MspInit+0xf4>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_UART_MspInit+0xf4>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_UART_MspInit+0xf4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <HAL_UART_MspInit+0xf4>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_UART_MspInit+0xf4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001636:	2307      	movs	r3, #7
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4820      	ldr	r0, [pc, #128]	; (80016c4 <HAL_UART_MspInit+0xf8>)
 8001642:	f000 fe95 	bl	8002370 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_UART_MspInit+0x100>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 800164e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001652:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001666:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 8001688:	f000 faf6 	bl	8001c78 <HAL_DMA_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001692:	f7ff ff45 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 800169a:	639a      	str	r2, [r3, #56]	; 0x38
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_UART_MspInit+0xfc>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2026      	movs	r0, #38	; 0x26
 80016a8:	f000 fabc 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ac:	2026      	movs	r0, #38	; 0x26
 80016ae:	f000 fad5 	bl	8001c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	20000208 	.word	0x20000208
 80016cc:	40026088 	.word	0x40026088

080016d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2019      	movs	r0, #25
 80016e6:	f000 fa9d 	bl	8001c24 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016ea:	2019      	movs	r0, #25
 80016ec:	f000 fab6 	bl	8001c5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_InitTick+0xa4>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_InitTick+0xa4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_InitTick+0xa4>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800170c:	f107 0210 	add.w	r2, r7, #16
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fc54 	bl	8002fc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800171c:	f001 fc3e 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8001720:	4603      	mov	r3, r0
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_InitTick+0xa8>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	3b01      	subs	r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_InitTick+0xac>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_InitTick+0xb0>)
 8001738:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_InitTick+0xac>)
 800173c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001740:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_InitTick+0xac>)
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_InitTick+0xac>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_InitTick+0xac>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001754:	4809      	ldr	r0, [pc, #36]	; (800177c <HAL_InitTick+0xac>)
 8001756:	f001 fc67 	bl	8003028 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d104      	bne.n	800176a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <HAL_InitTick+0xac>)
 8001762:	f001 fcb1 	bl	80030c8 <HAL_TIM_Base_Start_IT>
 8001766:	4603      	mov	r3, r0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	431bde83 	.word	0x431bde83
 800177c:	200002f4 	.word	0x200002f4
 8001780:	40010000 	.word	0x40010000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream5_IRQHandler+0x10>)
 80017e2:	f000 fb89 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000208 	.word	0x20000208

080017f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017f6:	f001 fcd7 	bl	80031a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002f4 	.word	0x200002f4

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USART2_IRQHandler+0x10>)
 800180a:	f002 f8af 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002b0 	.word	0x200002b0

08001818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM6_DAC_IRQHandler+0x10>)
 800181e:	f001 fcc3 	bl	80031a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000268 	.word	0x20000268

0800182c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_kill>:

int _kill(int pid, int sig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001846:	f002 ff19 	bl	800467c <__errno>
 800184a:	4603      	mov	r3, r0
 800184c:	2216      	movs	r2, #22
 800184e:	601a      	str	r2, [r3, #0]
	return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_kill>
	while (1) {}		/* Make sure we hang here */
 800186e:	e7fe      	b.n	800186e <_exit+0x12>

08001870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001882:	f7ff fe1d 	bl	80014c0 <__io_getchar>
 8001886:	4601      	mov	r1, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf0      	blt.n	8001882 <_read+0x12>
	}

return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e009      	b.n	80018d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fde9 	bl	800149c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf1      	blt.n	80018bc <_write+0x12>
	}
	return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_close>:

int _close(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190a:	605a      	str	r2, [r3, #4]
	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_isatty>:

int _isatty(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	return 1;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f002 fe7e 	bl	800467c <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20020000 	.word	0x20020000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200001fc 	.word	0x200001fc
 80019b4:	20000350 	.word	0x20000350

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a06:	f7ff ffd7 	bl	80019b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f002 fe3d 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fbdf 	bl	80011d0 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a20:	0800a26c 	.word	0x0800a26c
  ldr r2, =_sbss
 8001a24:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a28:	20000350 	.word	0x20000350

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f8d8 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fe36 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fd62 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	2000033c 	.word	0x2000033c

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000033c 	.word	0x2000033c

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff4c 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c36:	f7ff ff61 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7ff ffb1 	bl	8001ba8 <NVIC_EncodePriority>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff80 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff54 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ff0a 	bl	8001a9c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e099      	b.n	8001dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	e00f      	b.n	8001cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb6:	f7ff fef1 	bl	8001a9c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d908      	bls.n	8001cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e078      	b.n	8001dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e8      	bne.n	8001cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_DMA_Init+0x158>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d107      	bne.n	8001d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f023 0307 	bic.w	r3, r3, #7
 8001d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d117      	bne.n	8001d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fa7b 	bl	8002278 <DMA_CheckFifoParam>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d96:	2301      	movs	r3, #1
 8001d98:	e016      	b.n	8001dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa32 	bl	800220c <DMA_CalcBaseAndBitshift>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	223f      	movs	r2, #63	; 0x3f
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	f010803f 	.word	0xf010803f

08001dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001de2:	f7ff fe5b 	bl	8001a9c <HAL_GetTick>
 8001de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d008      	beq.n	8001e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e052      	b.n	8001eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0216 	bic.w	r2, r2, #22
 8001e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_DMA_Abort+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0208 	bic.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e56:	e013      	b.n	8001e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e58:	f7ff fe20 	bl	8001a9c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d90c      	bls.n	8001e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e015      	b.n	8001eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e4      	bne.n	8001e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	223f      	movs	r2, #63	; 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00c      	b.n	8001eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f04:	4b92      	ldr	r3, [pc, #584]	; (8002150 <HAL_DMA_IRQHandler+0x258>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a92      	ldr	r2, [pc, #584]	; (8002154 <HAL_DMA_IRQHandler+0x25c>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2208      	movs	r2, #8
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01a      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	2208      	movs	r2, #8
 8001f52:	409a      	lsls	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2201      	movs	r2, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2201      	movs	r2, #1
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f043 0202 	orr.w	r2, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d043      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d03c      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d018      	beq.n	800203a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d024      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
 8002026:	e01f      	b.n	8002068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e016      	b.n	8002068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0208 	bic.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2220      	movs	r2, #32
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 808e 	beq.w	8002196 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8086 	beq.w	8002196 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2220      	movs	r2, #32
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d136      	bne.n	8002110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0216 	bic.w	r2, r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x1da>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0208 	bic.w	r2, r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	223f      	movs	r2, #63	; 0x3f
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002102:	2b00      	cmp	r3, #0
 8002104:	d07d      	beq.n	8002202 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
        }
        return;
 800210e:	e078      	b.n	8002202 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01c      	beq.n	8002158 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d108      	bne.n	800213e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	2b00      	cmp	r3, #0
 8002132:	d030      	beq.n	8002196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
 800213c:	e02b      	b.n	8002196 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d027      	beq.n	8002196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e022      	b.n	8002196 <HAL_DMA_IRQHandler+0x29e>
 8002150:	20000000 	.word	0x20000000
 8002154:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0210 	bic.w	r2, r2, #16
 8002174:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	2b00      	cmp	r3, #0
 800219c:	d032      	beq.n	8002204 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3301      	adds	r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d307      	bcc.n	80021de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f2      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x2ca>
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021de:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e000      	b.n	8002204 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002202:	bf00      	nop
    }
  }
}
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop

0800220c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b10      	subs	r3, #16
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <DMA_CalcBaseAndBitshift+0x64>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <DMA_CalcBaseAndBitshift+0x68>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d909      	bls.n	800224e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002242:	f023 0303 	bic.w	r3, r3, #3
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	; 0x58
 800224c:	e007      	b.n	800225e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	aaaaaaab 	.word	0xaaaaaaab
 8002274:	08009d88 	.word	0x08009d88

08002278 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11f      	bne.n	80022d2 <DMA_CheckFifoParam+0x5a>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d856      	bhi.n	8002346 <DMA_CheckFifoParam+0xce>
 8002298:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <DMA_CheckFifoParam+0x28>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022c3 	.word	0x080022c3
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	08002347 	.word	0x08002347
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d046      	beq.n	800234a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e043      	b.n	800234a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ca:	d140      	bne.n	800234e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e03d      	b.n	800234e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022da:	d121      	bne.n	8002320 <DMA_CheckFifoParam+0xa8>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d837      	bhi.n	8002352 <DMA_CheckFifoParam+0xda>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x70>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022ff 	.word	0x080022ff
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	08002311 	.word	0x08002311
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e030      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d025      	beq.n	8002356 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230e:	e022      	b.n	8002356 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800231e:	e01c      	b.n	800235a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d903      	bls.n	800232e <DMA_CheckFifoParam+0xb6>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d003      	beq.n	8002334 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800232c:	e018      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      break;
 8002332:	e015      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00e      	beq.n	800235e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e00b      	b.n	800235e <DMA_CheckFifoParam+0xe6>
      break;
 8002346:	bf00      	nop
 8002348:	e00a      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e008      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e006      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
 8002354:	e004      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 8002356:	bf00      	nop
 8002358:	e002      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;   
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800235e:	bf00      	nop
    }
  } 
  
  return status; 
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e16b      	b.n	8002664 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	f040 815a 	bne.w	800265e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d005      	beq.n	80023c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d130      	bne.n	8002424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f8:	2201      	movs	r2, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 0201 	and.w	r2, r3, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b03      	cmp	r3, #3
 800242e:	d017      	beq.n	8002460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d123      	bne.n	80024b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	69b9      	ldr	r1, [r7, #24]
 80024b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80b4 	beq.w	800265e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b60      	ldr	r3, [pc, #384]	; (800267c <HAL_GPIO_Init+0x30c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a5f      	ldr	r2, [pc, #380]	; (800267c <HAL_GPIO_Init+0x30c>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_GPIO_Init+0x30c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002512:	4a5b      	ldr	r2, [pc, #364]	; (8002680 <HAL_GPIO_Init+0x310>)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_GPIO_Init+0x314>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02b      	beq.n	8002596 <HAL_GPIO_Init+0x226>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a51      	ldr	r2, [pc, #324]	; (8002688 <HAL_GPIO_Init+0x318>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d025      	beq.n	8002592 <HAL_GPIO_Init+0x222>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a50      	ldr	r2, [pc, #320]	; (800268c <HAL_GPIO_Init+0x31c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <HAL_GPIO_Init+0x21e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <HAL_GPIO_Init+0x320>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0x21a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <HAL_GPIO_Init+0x324>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x216>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4d      	ldr	r2, [pc, #308]	; (8002698 <HAL_GPIO_Init+0x328>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x212>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4c      	ldr	r2, [pc, #304]	; (800269c <HAL_GPIO_Init+0x32c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x20e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <HAL_GPIO_Init+0x330>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x20a>
 8002576:	2307      	movs	r3, #7
 8002578:	e00e      	b.n	8002598 <HAL_GPIO_Init+0x228>
 800257a:	2308      	movs	r3, #8
 800257c:	e00c      	b.n	8002598 <HAL_GPIO_Init+0x228>
 800257e:	2306      	movs	r3, #6
 8002580:	e00a      	b.n	8002598 <HAL_GPIO_Init+0x228>
 8002582:	2305      	movs	r3, #5
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x228>
 8002586:	2304      	movs	r3, #4
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x228>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x228>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x228>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x228>
 8002596:	2300      	movs	r3, #0
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f002 0203 	and.w	r2, r2, #3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a8:	4935      	ldr	r1, [pc, #212]	; (8002680 <HAL_GPIO_Init+0x310>)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_GPIO_Init+0x334>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025da:	4a32      	ldr	r2, [pc, #200]	; (80026a4 <HAL_GPIO_Init+0x334>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_GPIO_Init+0x334>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002604:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <HAL_GPIO_Init+0x334>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_GPIO_Init+0x334>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_GPIO_Init+0x334>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_GPIO_Init+0x334>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_GPIO_Init+0x334>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3301      	adds	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	f67f ae90 	bls.w	800238c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	40013800 	.word	0x40013800
 8002684:	40020000 	.word	0x40020000
 8002688:	40020400 	.word	0x40020400
 800268c:	40020800 	.word	0x40020800
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40021000 	.word	0x40021000
 8002698:	40021400 	.word	0x40021400
 800269c:	40021800 	.word	0x40021800
 80026a0:	40021c00 	.word	0x40021c00
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e264      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	4ba3      	ldr	r3, [pc, #652]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00c      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4ba0      	ldr	r3, [pc, #640]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b99      	ldr	r3, [pc, #612]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e23f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b91      	ldr	r3, [pc, #580]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a90      	ldr	r2, [pc, #576]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a8a      	ldr	r2, [pc, #552]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b88      	ldr	r3, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a87      	ldr	r2, [pc, #540]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b84      	ldr	r3, [pc, #528]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a83      	ldr	r2, [pc, #524]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a80      	ldr	r2, [pc, #512]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f982 	bl	8001a9c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f97e 	bl	8001a9c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e204      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b76      	ldr	r3, [pc, #472]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff f96e 	bl	8001a9c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff f96a 	bl	8001a9c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1f0      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1c4      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4952      	ldr	r1, [pc, #328]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b4f      	ldr	r3, [pc, #316]	; (800298c <HAL_RCC_OscConfig+0x2b0>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7ff f923 	bl	8001a9c <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7ff f91f 	bl	8001a9c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1a5      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4940      	ldr	r1, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x2b0>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff f902 	bl	8001a9c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff f8fe 	bl	8001a9c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e184      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_RCC_OscConfig+0x2b4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7ff f8e2 	bl	8001a9c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028dc:	f7ff f8de 	bl	8001a9c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e164      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
 80028fa:	e015      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x2b4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7ff f8cb 	bl	8001a9c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff f8c7 	bl	8001a9c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e14d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a0 	beq.w	8002a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_OscConfig+0x2b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d121      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x2b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_RCC_OscConfig+0x2b8>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7ff f88d 	bl	8001a9c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	e011      	b.n	80029aa <HAL_RCC_OscConfig+0x2ce>
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	42470000 	.word	0x42470000
 8002990:	42470e80 	.word	0x42470e80
 8002994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002998:	f7ff f880 	bl	8001a9c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e106      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCC_OscConfig+0x4e4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x2f0>
 80029be:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a80      	ldr	r2, [pc, #512]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	e01c      	b.n	8002a06 <HAL_RCC_OscConfig+0x32a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_OscConfig+0x312>
 80029d4:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a7a      	ldr	r2, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a77      	ldr	r2, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x32a>
 80029ee:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a74      	ldr	r2, [pc, #464]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a71      	ldr	r2, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d015      	beq.n	8002a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7ff f845 	bl	8001a9c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7ff f841 	bl	8001a9c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0c5      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ee      	beq.n	8002a16 <HAL_RCC_OscConfig+0x33a>
 8002a38:	e014      	b.n	8002a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff f82f 	bl	8001a9c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7ff f82b 	bl	8001a9c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0af      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a55      	ldr	r2, [pc, #340]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 809b 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d05c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d141      	bne.n	8002b18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe ffff 	bl	8001a9c <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fffb 	bl	8001a9c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e081      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	019b      	lsls	r3, r3, #6
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	4937      	ldr	r1, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe ffd4 	bl	8001a9c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe ffd0 	bl	8001a9c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e056      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x41c>
 8002b16:	e04e      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe ffbd 	bl	8001a9c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe ffb9 	bl	8001a9c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e03f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x44a>
 8002b44:	e037      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e032      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d028      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d121      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d11a      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d111      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	42470060 	.word	0x42470060

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe feee 	bl	8001a9c <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe feea 	bl	8001a9c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fcac 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08009d70 	.word	0x08009d70
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	2300      	movs	r3, #0
 8002daa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f200 80bd 	bhi.w	8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dca:	e0b7      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dce:	60bb      	str	r3, [r7, #8]
       break;
 8002dd0:	e0b7      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002dd4:	60bb      	str	r3, [r7, #8]
      break;
 8002dd6:	e0b4      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04d      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	ea02 0800 	and.w	r8, r2, r0
 8002e06:	ea03 0901 	and.w	r9, r3, r1
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	014b      	lsls	r3, r1, #5
 8002e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e1c:	0142      	lsls	r2, r0, #5
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	ebb0 0008 	subs.w	r0, r0, r8
 8002e26:	eb61 0109 	sbc.w	r1, r1, r9
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	018b      	lsls	r3, r1, #6
 8002e34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e38:	0182      	lsls	r2, r0, #6
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	00d9      	lsls	r1, r3, #3
 8002e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e4e:	00d0      	lsls	r0, r2, #3
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	eb12 0208 	adds.w	r2, r2, r8
 8002e58:	eb43 0309 	adc.w	r3, r3, r9
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0259      	lsls	r1, r3, #9
 8002e66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e6a:	0250      	lsls	r0, r2, #9
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f7fd ff04 	bl	8000c88 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e04a      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	461a      	mov	r2, r3
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	ea02 0400 	and.w	r4, r2, r0
 8002ea2:	ea03 0501 	and.w	r5, r3, r1
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	014b      	lsls	r3, r1, #5
 8002eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eb8:	0142      	lsls	r2, r0, #5
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	1b00      	subs	r0, r0, r4
 8002ec0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	018b      	lsls	r3, r1, #6
 8002ece:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ed2:	0182      	lsls	r2, r0, #6
 8002ed4:	1a12      	subs	r2, r2, r0
 8002ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	00d9      	lsls	r1, r3, #3
 8002ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee8:	00d0      	lsls	r0, r2, #3
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	1912      	adds	r2, r2, r4
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	0299      	lsls	r1, r3, #10
 8002efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f02:	0290      	lsls	r0, r2, #10
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f7fd feb8 	bl	8000c88 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	60bb      	str	r3, [r7, #8]
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f3e:	60bb      	str	r3, [r7, #8]
      break;
 8002f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f42:	68bb      	ldr	r3, [r7, #8]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f78:	f7ff fff0 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0a9b      	lsrs	r3, r3, #10
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	08009d80 	.word	0x08009d80

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fa0:	f7ff ffdc 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0b5b      	lsrs	r3, r3, #13
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4903      	ldr	r1, [pc, #12]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	08009d80 	.word	0x08009d80

08002fc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RCC_GetClockConfig+0x60>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0207 	and.w	r2, r3, #7
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40023c00 	.word	0x40023c00

08003028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e041      	b.n	80030be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fa94 	bl	800157c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f000 f9ce 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e04e      	b.n	800317e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_TIM_Base_Start_IT+0xc4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d01d      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_TIM_Base_Start_IT+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <HAL_TIM_Base_Start_IT+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_TIM_Base_Start_IT+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_TIM_Base_Start_IT+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d111      	bne.n	800316c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b06      	cmp	r3, #6
 8003158:	d010      	beq.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	e007      	b.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0202 	mvn.w	r2, #2
 80031d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8ee 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8e0 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f8f1 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0204 	mvn.w	r2, #4
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8c4 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8b6 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8c7 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	d122      	bne.n	80032ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d11b      	bne.n	80032ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0208 	mvn.w	r2, #8
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f89a 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f88c 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f89d 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0210 	mvn.w	r2, #16
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2208      	movs	r2, #8
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f870 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f862 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f873 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0201 	mvn.w	r2, #1
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe f8e8 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f97e 	bl	8003654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f838 	bl	80033f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b20      	cmp	r3, #32
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0220 	mvn.w	r2, #32
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f948 	bl	8003640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a40      	ldr	r2, [pc, #256]	; (800351c <TIM_Base_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d00f      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <TIM_Base_SetConfig+0x118>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3c      	ldr	r2, [pc, #240]	; (8003524 <TIM_Base_SetConfig+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <TIM_Base_SetConfig+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <TIM_Base_SetConfig+0x124>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2f      	ldr	r2, [pc, #188]	; (800351c <TIM_Base_SetConfig+0x114>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d027      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <TIM_Base_SetConfig+0x118>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d023      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <TIM_Base_SetConfig+0x11c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <TIM_Base_SetConfig+0x120>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_Base_SetConfig+0x124>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d017      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <TIM_Base_SetConfig+0x128>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a27      	ldr	r2, [pc, #156]	; (8003534 <TIM_Base_SetConfig+0x12c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <TIM_Base_SetConfig+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a25      	ldr	r2, [pc, #148]	; (800353c <TIM_Base_SetConfig+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <TIM_Base_SetConfig+0x138>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <TIM_Base_SetConfig+0x13c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <TIM_Base_SetConfig+0x114>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0xf8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <TIM_Base_SetConfig+0x124>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d103      	bne.n	8003508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	615a      	str	r2, [r3, #20]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40010400 	.word	0x40010400
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800
 800353c:	40001800 	.word	0x40001800
 8003540:	40001c00 	.word	0x40001c00
 8003544:	40002000 	.word	0x40002000

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e05a      	b.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d01d      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10c      	bne.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40000c00 	.word	0x40000c00
 8003634:	40010400 	.word	0x40010400
 8003638:	40014000 	.word	0x40014000
 800363c:	40001800 	.word	0x40001800

08003640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e03f      	b.n	80036fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd ff9c 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fe1d 	bl	80042ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b08a      	sub	sp, #40	; 0x28
 8003706:	af02      	add	r7, sp, #8
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b20      	cmp	r3, #32
 8003720:	d17c      	bne.n	800381c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_UART_Transmit+0x2c>
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e075      	b.n	800381e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_UART_Transmit+0x3e>
 800373c:	2302      	movs	r3, #2
 800373e:	e06e      	b.n	800381e <HAL_UART_Transmit+0x11c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2221      	movs	r2, #33	; 0x21
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003756:	f7fe f9a1 	bl	8001a9c <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d108      	bne.n	8003784 <HAL_UART_Transmit+0x82>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e003      	b.n	800378c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003794:	e02a      	b.n	80037ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fb9b 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e036      	b.n	800381e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3302      	adds	r3, #2
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e007      	b.n	80037de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3301      	adds	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1cf      	bne.n	8003796 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2140      	movs	r1, #64	; 0x40
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb6b 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e006      	b.n	800381e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b08a      	sub	sp, #40	; 0x28
 800382a:	af02      	add	r7, sp, #8
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	f040 808c 	bne.w	8003960 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Receive+0x2e>
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e084      	b.n	8003962 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_UART_Receive+0x40>
 8003862:	2302      	movs	r3, #2
 8003864:	e07d      	b.n	8003962 <HAL_UART_Receive+0x13c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2222      	movs	r2, #34	; 0x22
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fe f90b 	bl	8001a9c <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389c:	d108      	bne.n	80038b0 <HAL_UART_Receive+0x8a>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e003      	b.n	80038b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038c0:	e043      	b.n	800394a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2120      	movs	r1, #32
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb05 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e042      	b.n	8003962 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	3302      	adds	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e01f      	b.n	800393c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d007      	beq.n	8003916 <HAL_UART_Receive+0xf0>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <HAL_UART_Receive+0xfe>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e008      	b.n	8003936 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003930:	b2da      	uxtb	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1b6      	bne.n	80038c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0ba      	sub	sp, #232	; 0xe8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_UART_IRQHandler+0x66>
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fbd3 	bl	8004176 <UART_Receive_IT>
      return;
 80039d0:	e256      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80de 	beq.w	8003b98 <HAL_UART_IRQHandler+0x22c>
 80039dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80d1 	beq.w	8003b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xae>
 8003a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xd2>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xf6>
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d011      	beq.n	8003a92 <HAL_UART_IRQHandler+0x126>
 8003a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0208 	orr.w	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 81ed 	beq.w	8003e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x14e>
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb5e 	bl	8004176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x17a>
 8003ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d04f      	beq.n	8003b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa66 	bl	8003fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d141      	bne.n	8003b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1d9      	bne.n	8003afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	4a7d      	ldr	r2, [pc, #500]	; (8003d48 <HAL_UART_IRQHandler+0x3dc>)
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe f9aa 	bl	8001eb4 <HAL_DMA_Abort_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00e      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f99a 	bl	8003eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e00a      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f996 	bl	8003eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e006      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f992 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b92:	e170      	b.n	8003e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	bf00      	nop
    return;
 8003b96:	e16e      	b.n	8003e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 814a 	bne.w	8003e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8143 	beq.w	8003e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 813c 	beq.w	8003e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	f040 80b4 	bne.w	8003d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8140 	beq.w	8003e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c02:	429a      	cmp	r2, r3
 8003c04:	f080 8139 	bcs.w	8003e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	f000 8088 	beq.w	8003d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1d9      	bne.n	8003c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e1      	bne.n	8003c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e3      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e3      	bne.n	8003cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe f853 	bl	8001dd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8c0 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d44:	e099      	b.n	8003e7a <HAL_UART_IRQHandler+0x50e>
 8003d46:	bf00      	nop
 8003d48:	0800407f 	.word	0x0800407f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 808b 	beq.w	8003e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8086 	beq.w	8003e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d96:	647a      	str	r2, [r7, #68]	; 0x44
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3314      	adds	r3, #20
 8003dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dce:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e3      	bne.n	8003daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0310 	bic.w	r3, r3, #16
 8003e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e14:	61fa      	str	r2, [r7, #28]
 8003e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	617b      	str	r3, [r7, #20]
   return(result);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e3      	bne.n	8003df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f848 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e34:	e023      	b.n	8003e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_UART_IRQHandler+0x4ea>
 8003e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f929 	bl	80040a6 <UART_Transmit_IT>
    return;
 8003e54:	e014      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <HAL_UART_IRQHandler+0x514>
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f969 	bl	8004146 <UART_EndTransmit_IT>
    return;
 8003e74:	e004      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
    return;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
      return;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
      return;
 8003e7e:	bf00      	nop
  }
}
 8003e80:	37e8      	adds	r7, #232	; 0xe8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop

08003e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b090      	sub	sp, #64	; 0x40
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eec:	e050      	b.n	8003f90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d04c      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003efc:	f7fd fdce 	bl	8001a9c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d241      	bcs.n	8003f90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f2c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f60:	623a      	str	r2, [r7, #32]
 8003f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e00f      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d09f      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3740      	adds	r7, #64	; 0x40
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b095      	sub	sp, #84	; 0x54
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	61fb      	str	r3, [r7, #28]
   return(result);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	d119      	bne.n	8004064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	647b      	str	r3, [r7, #68]	; 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004050:	61ba      	str	r2, [r7, #24]
 8004052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	613b      	str	r3, [r7, #16]
   return(result);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004072:	bf00      	nop
 8004074:	3754      	adds	r7, #84	; 0x54
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ff09 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b21      	cmp	r3, #33	; 0x21
 80040b8:	d13e      	bne.n	8004138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d114      	bne.n	80040ee <UART_Transmit_IT+0x48>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]
 80040ec:	e008      	b.n	8004100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6211      	str	r1, [r2, #32]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fe8e 	bl	8003e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08c      	sub	sp, #48	; 0x30
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b22      	cmp	r3, #34	; 0x22
 8004188:	f040 80ab 	bne.w	80042e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d117      	bne.n	80041c6 <UART_Receive_IT+0x50>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d113      	bne.n	80041c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
 80041c4:	e026      	b.n	8004214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d007      	beq.n	80041ea <UART_Receive_IT+0x74>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <UART_Receive_IT+0x82>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e008      	b.n	800420a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	b2da      	uxtb	r2, r3
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4619      	mov	r1, r3
 8004222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004224:	2b00      	cmp	r3, #0
 8004226:	d15a      	bne.n	80042de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0220 	bic.w	r2, r2, #32
 8004236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d135      	bne.n	80042d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	613b      	str	r3, [r7, #16]
   return(result);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	623a      	str	r2, [r7, #32]
 8004290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	69f9      	ldr	r1, [r7, #28]
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	61bb      	str	r3, [r7, #24]
   return(result);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d10a      	bne.n	80042c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fdf9 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
 80042d2:	e002      	b.n	80042da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fde1 	bl	8003e9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e002      	b.n	80042e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	; 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	b09f      	sub	sp, #124	; 0x7c
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004302:	68d9      	ldr	r1, [r3, #12]
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	ea40 0301 	orr.w	r3, r0, r1
 800430c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	431a      	orrs	r2, r3
 8004318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	431a      	orrs	r2, r3
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4313      	orrs	r3, r2
 8004324:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004330:	f021 010c 	bic.w	r1, r1, #12
 8004334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800433a:	430b      	orrs	r3, r1
 800433c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	6999      	ldr	r1, [r3, #24]
 800434c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	ea40 0301 	orr.w	r3, r0, r1
 8004354:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4bc5      	ldr	r3, [pc, #788]	; (8004670 <UART_SetConfig+0x384>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d004      	beq.n	800436a <UART_SetConfig+0x7e>
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4bc3      	ldr	r3, [pc, #780]	; (8004674 <UART_SetConfig+0x388>)
 8004366:	429a      	cmp	r2, r3
 8004368:	d103      	bne.n	8004372 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800436a:	f7fe fe17 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 800436e:	6778      	str	r0, [r7, #116]	; 0x74
 8004370:	e002      	b.n	8004378 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004372:	f7fe fdff 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004376:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	f040 80b6 	bne.w	80044f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004386:	461c      	mov	r4, r3
 8004388:	f04f 0500 	mov.w	r5, #0
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	1891      	adds	r1, r2, r2
 8004392:	6439      	str	r1, [r7, #64]	; 0x40
 8004394:	415b      	adcs	r3, r3
 8004396:	647b      	str	r3, [r7, #68]	; 0x44
 8004398:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800439c:	1912      	adds	r2, r2, r4
 800439e:	eb45 0303 	adc.w	r3, r5, r3
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	00d9      	lsls	r1, r3, #3
 80043ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b0:	00d0      	lsls	r0, r2, #3
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	1911      	adds	r1, r2, r4
 80043b8:	6639      	str	r1, [r7, #96]	; 0x60
 80043ba:	416b      	adcs	r3, r5
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80043cc:	415b      	adcs	r3, r3
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043d8:	f7fc fc56 	bl	8000c88 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4ba5      	ldr	r3, [pc, #660]	; (8004678 <UART_SetConfig+0x38c>)
 80043e2:	fba3 2302 	umull	r2, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	011e      	lsls	r6, r3, #4
 80043ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ec:	461c      	mov	r4, r3
 80043ee:	f04f 0500 	mov.w	r5, #0
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	1891      	adds	r1, r2, r2
 80043f8:	6339      	str	r1, [r7, #48]	; 0x30
 80043fa:	415b      	adcs	r3, r3
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
 80043fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004402:	1912      	adds	r2, r2, r4
 8004404:	eb45 0303 	adc.w	r3, r5, r3
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	00d9      	lsls	r1, r3, #3
 8004412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004416:	00d0      	lsls	r0, r2, #3
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	1911      	adds	r1, r2, r4
 800441e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004420:	416b      	adcs	r3, r5
 8004422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	461a      	mov	r2, r3
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	1891      	adds	r1, r2, r2
 8004430:	62b9      	str	r1, [r7, #40]	; 0x28
 8004432:	415b      	adcs	r3, r3
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800443a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800443e:	f7fc fc23 	bl	8000c88 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <UART_SetConfig+0x38c>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	; 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	3332      	adds	r3, #50	; 0x32
 800445a:	4a87      	ldr	r2, [pc, #540]	; (8004678 <UART_SetConfig+0x38c>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004468:	441e      	add	r6, r3
 800446a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800446c:	4618      	mov	r0, r3
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	1894      	adds	r4, r2, r2
 8004478:	623c      	str	r4, [r7, #32]
 800447a:	415b      	adcs	r3, r3
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004482:	1812      	adds	r2, r2, r0
 8004484:	eb41 0303 	adc.w	r3, r1, r3
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	f04f 0500 	mov.w	r5, #0
 8004490:	00dd      	lsls	r5, r3, #3
 8004492:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004496:	00d4      	lsls	r4, r2, #3
 8004498:	4622      	mov	r2, r4
 800449a:	462b      	mov	r3, r5
 800449c:	1814      	adds	r4, r2, r0
 800449e:	653c      	str	r4, [r7, #80]	; 0x50
 80044a0:	414b      	adcs	r3, r1
 80044a2:	657b      	str	r3, [r7, #84]	; 0x54
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	61b9      	str	r1, [r7, #24]
 80044b2:	415b      	adcs	r3, r3
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044be:	f7fc fbe3 	bl	8000c88 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <UART_SetConfig+0x38c>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a67      	ldr	r2, [pc, #412]	; (8004678 <UART_SetConfig+0x38c>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 0207 	and.w	r2, r3, #7
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4432      	add	r2, r6
 80044ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ee:	e0b9      	b.n	8004664 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f2:	461c      	mov	r4, r3
 80044f4:	f04f 0500 	mov.w	r5, #0
 80044f8:	4622      	mov	r2, r4
 80044fa:	462b      	mov	r3, r5
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	6139      	str	r1, [r7, #16]
 8004500:	415b      	adcs	r3, r3
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004508:	1912      	adds	r2, r2, r4
 800450a:	eb45 0303 	adc.w	r3, r5, r3
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	00d9      	lsls	r1, r3, #3
 8004518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800451c:	00d0      	lsls	r0, r2, #3
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	eb12 0804 	adds.w	r8, r2, r4
 8004526:	eb43 0905 	adc.w	r9, r3, r5
 800452a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	008b      	lsls	r3, r1, #2
 800453e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004542:	0082      	lsls	r2, r0, #2
 8004544:	4640      	mov	r0, r8
 8004546:	4649      	mov	r1, r9
 8004548:	f7fc fb9e 	bl	8000c88 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4b49      	ldr	r3, [pc, #292]	; (8004678 <UART_SetConfig+0x38c>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	011e      	lsls	r6, r3, #4
 800455a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455c:	4618      	mov	r0, r3
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	1894      	adds	r4, r2, r2
 8004568:	60bc      	str	r4, [r7, #8]
 800456a:	415b      	adcs	r3, r3
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004572:	1812      	adds	r2, r2, r0
 8004574:	eb41 0303 	adc.w	r3, r1, r3
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	f04f 0500 	mov.w	r5, #0
 8004580:	00dd      	lsls	r5, r3, #3
 8004582:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004586:	00d4      	lsls	r4, r2, #3
 8004588:	4622      	mov	r2, r4
 800458a:	462b      	mov	r3, r5
 800458c:	1814      	adds	r4, r2, r0
 800458e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004590:	414b      	adcs	r3, r1
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	008b      	lsls	r3, r1, #2
 80045a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045ac:	0082      	lsls	r2, r0, #2
 80045ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045b2:	f7fc fb69 	bl	8000c88 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <UART_SetConfig+0x38c>)
 80045bc:	fba3 1302 	umull	r1, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2164      	movs	r1, #100	; 0x64
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	3332      	adds	r3, #50	; 0x32
 80045ce:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <UART_SetConfig+0x38c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045da:	441e      	add	r6, r3
 80045dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045de:	4618      	mov	r0, r3
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	1894      	adds	r4, r2, r2
 80045ea:	603c      	str	r4, [r7, #0]
 80045ec:	415b      	adcs	r3, r3
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	1812      	adds	r2, r2, r0
 80045f6:	eb41 0303 	adc.w	r3, r1, r3
 80045fa:	f04f 0400 	mov.w	r4, #0
 80045fe:	f04f 0500 	mov.w	r5, #0
 8004602:	00dd      	lsls	r5, r3, #3
 8004604:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004608:	00d4      	lsls	r4, r2, #3
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	eb12 0a00 	adds.w	sl, r2, r0
 8004612:	eb43 0b01 	adc.w	fp, r3, r1
 8004616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	008b      	lsls	r3, r1, #2
 800462a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800462e:	0082      	lsls	r2, r0, #2
 8004630:	4650      	mov	r0, sl
 8004632:	4659      	mov	r1, fp
 8004634:	f7fc fb28 	bl	8000c88 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <UART_SetConfig+0x38c>)
 800463e:	fba3 1302 	umull	r1, r3, r3, r2
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2164      	movs	r1, #100	; 0x64
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	3332      	adds	r3, #50	; 0x32
 8004650:	4a09      	ldr	r2, [pc, #36]	; (8004678 <UART_SetConfig+0x38c>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	f003 020f 	and.w	r2, r3, #15
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4432      	add	r2, r6
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	377c      	adds	r7, #124	; 0x7c
 8004668:	46bd      	mov	sp, r7
 800466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466e:	bf00      	nop
 8004670:	40011000 	.word	0x40011000
 8004674:	40011400 	.word	0x40011400
 8004678:	51eb851f 	.word	0x51eb851f

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	; (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	2000000c 	.word	0x2000000c

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	; (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	; (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	; (80046cc <__libc_init_array+0x44>)
 800469c:	f005 fb16 	bl	8009ccc <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	0800a264 	.word	0x0800a264
 80046c4:	0800a264 	.word	0x0800a264
 80046c8:	0800a264 	.word	0x0800a264
 80046cc:	0800a268 	.word	0x0800a268

080046d0 <memset>:
 80046d0:	4402      	add	r2, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d100      	bne.n	80046da <memset+0xa>
 80046d8:	4770      	bx	lr
 80046da:	f803 1b01 	strb.w	r1, [r3], #1
 80046de:	e7f9      	b.n	80046d4 <memset+0x4>

080046e0 <__cvt>:
 80046e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	ec55 4b10 	vmov	r4, r5, d0
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	460e      	mov	r6, r1
 80046ec:	4619      	mov	r1, r3
 80046ee:	462b      	mov	r3, r5
 80046f0:	bfbb      	ittet	lt
 80046f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046f6:	461d      	movlt	r5, r3
 80046f8:	2300      	movge	r3, #0
 80046fa:	232d      	movlt	r3, #45	; 0x2d
 80046fc:	700b      	strb	r3, [r1, #0]
 80046fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004700:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004704:	4691      	mov	r9, r2
 8004706:	f023 0820 	bic.w	r8, r3, #32
 800470a:	bfbc      	itt	lt
 800470c:	4622      	movlt	r2, r4
 800470e:	4614      	movlt	r4, r2
 8004710:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004714:	d005      	beq.n	8004722 <__cvt+0x42>
 8004716:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800471a:	d100      	bne.n	800471e <__cvt+0x3e>
 800471c:	3601      	adds	r6, #1
 800471e:	2102      	movs	r1, #2
 8004720:	e000      	b.n	8004724 <__cvt+0x44>
 8004722:	2103      	movs	r1, #3
 8004724:	ab03      	add	r3, sp, #12
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	ab02      	add	r3, sp, #8
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	ec45 4b10 	vmov	d0, r4, r5
 8004730:	4653      	mov	r3, sl
 8004732:	4632      	mov	r2, r6
 8004734:	f001 ffe0 	bl	80066f8 <_dtoa_r>
 8004738:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800473c:	4607      	mov	r7, r0
 800473e:	d102      	bne.n	8004746 <__cvt+0x66>
 8004740:	f019 0f01 	tst.w	r9, #1
 8004744:	d022      	beq.n	800478c <__cvt+0xac>
 8004746:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800474a:	eb07 0906 	add.w	r9, r7, r6
 800474e:	d110      	bne.n	8004772 <__cvt+0x92>
 8004750:	783b      	ldrb	r3, [r7, #0]
 8004752:	2b30      	cmp	r3, #48	; 0x30
 8004754:	d10a      	bne.n	800476c <__cvt+0x8c>
 8004756:	2200      	movs	r2, #0
 8004758:	2300      	movs	r3, #0
 800475a:	4620      	mov	r0, r4
 800475c:	4629      	mov	r1, r5
 800475e:	f7fc f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004762:	b918      	cbnz	r0, 800476c <__cvt+0x8c>
 8004764:	f1c6 0601 	rsb	r6, r6, #1
 8004768:	f8ca 6000 	str.w	r6, [sl]
 800476c:	f8da 3000 	ldr.w	r3, [sl]
 8004770:	4499      	add	r9, r3
 8004772:	2200      	movs	r2, #0
 8004774:	2300      	movs	r3, #0
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f7fc f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800477e:	b108      	cbz	r0, 8004784 <__cvt+0xa4>
 8004780:	f8cd 900c 	str.w	r9, [sp, #12]
 8004784:	2230      	movs	r2, #48	; 0x30
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	454b      	cmp	r3, r9
 800478a:	d307      	bcc.n	800479c <__cvt+0xbc>
 800478c:	9b03      	ldr	r3, [sp, #12]
 800478e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004790:	1bdb      	subs	r3, r3, r7
 8004792:	4638      	mov	r0, r7
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	b004      	add	sp, #16
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	1c59      	adds	r1, r3, #1
 800479e:	9103      	str	r1, [sp, #12]
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e7f0      	b.n	8004786 <__cvt+0xa6>

080047a4 <__exponent>:
 80047a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047a6:	4603      	mov	r3, r0
 80047a8:	2900      	cmp	r1, #0
 80047aa:	bfb8      	it	lt
 80047ac:	4249      	neglt	r1, r1
 80047ae:	f803 2b02 	strb.w	r2, [r3], #2
 80047b2:	bfb4      	ite	lt
 80047b4:	222d      	movlt	r2, #45	; 0x2d
 80047b6:	222b      	movge	r2, #43	; 0x2b
 80047b8:	2909      	cmp	r1, #9
 80047ba:	7042      	strb	r2, [r0, #1]
 80047bc:	dd2a      	ble.n	8004814 <__exponent+0x70>
 80047be:	f10d 0407 	add.w	r4, sp, #7
 80047c2:	46a4      	mov	ip, r4
 80047c4:	270a      	movs	r7, #10
 80047c6:	46a6      	mov	lr, r4
 80047c8:	460a      	mov	r2, r1
 80047ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80047ce:	fb07 1516 	mls	r5, r7, r6, r1
 80047d2:	3530      	adds	r5, #48	; 0x30
 80047d4:	2a63      	cmp	r2, #99	; 0x63
 80047d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80047da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047de:	4631      	mov	r1, r6
 80047e0:	dcf1      	bgt.n	80047c6 <__exponent+0x22>
 80047e2:	3130      	adds	r1, #48	; 0x30
 80047e4:	f1ae 0502 	sub.w	r5, lr, #2
 80047e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047ec:	1c44      	adds	r4, r0, #1
 80047ee:	4629      	mov	r1, r5
 80047f0:	4561      	cmp	r1, ip
 80047f2:	d30a      	bcc.n	800480a <__exponent+0x66>
 80047f4:	f10d 0209 	add.w	r2, sp, #9
 80047f8:	eba2 020e 	sub.w	r2, r2, lr
 80047fc:	4565      	cmp	r5, ip
 80047fe:	bf88      	it	hi
 8004800:	2200      	movhi	r2, #0
 8004802:	4413      	add	r3, r2
 8004804:	1a18      	subs	r0, r3, r0
 8004806:	b003      	add	sp, #12
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004812:	e7ed      	b.n	80047f0 <__exponent+0x4c>
 8004814:	2330      	movs	r3, #48	; 0x30
 8004816:	3130      	adds	r1, #48	; 0x30
 8004818:	7083      	strb	r3, [r0, #2]
 800481a:	70c1      	strb	r1, [r0, #3]
 800481c:	1d03      	adds	r3, r0, #4
 800481e:	e7f1      	b.n	8004804 <__exponent+0x60>

08004820 <_printf_float>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	ed2d 8b02 	vpush	{d8}
 8004828:	b08d      	sub	sp, #52	; 0x34
 800482a:	460c      	mov	r4, r1
 800482c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004830:	4616      	mov	r6, r2
 8004832:	461f      	mov	r7, r3
 8004834:	4605      	mov	r5, r0
 8004836:	f003 faa1 	bl	8007d7c <_localeconv_r>
 800483a:	f8d0 a000 	ldr.w	sl, [r0]
 800483e:	4650      	mov	r0, sl
 8004840:	f7fb fcc6 	bl	80001d0 <strlen>
 8004844:	2300      	movs	r3, #0
 8004846:	930a      	str	r3, [sp, #40]	; 0x28
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	f8d8 3000 	ldr.w	r3, [r8]
 8004850:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004854:	3307      	adds	r3, #7
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	f103 0208 	add.w	r2, r3, #8
 800485e:	f8c8 2000 	str.w	r2, [r8]
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800486a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800486e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004872:	9307      	str	r3, [sp, #28]
 8004874:	f8cd 8018 	str.w	r8, [sp, #24]
 8004878:	ee08 0a10 	vmov	s16, r0
 800487c:	4b9f      	ldr	r3, [pc, #636]	; (8004afc <_printf_float+0x2dc>)
 800487e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	f7fc f951 	bl	8000b2c <__aeabi_dcmpun>
 800488a:	bb88      	cbnz	r0, 80048f0 <_printf_float+0xd0>
 800488c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004890:	4b9a      	ldr	r3, [pc, #616]	; (8004afc <_printf_float+0x2dc>)
 8004892:	f04f 32ff 	mov.w	r2, #4294967295
 8004896:	f7fc f92b 	bl	8000af0 <__aeabi_dcmple>
 800489a:	bb48      	cbnz	r0, 80048f0 <_printf_float+0xd0>
 800489c:	2200      	movs	r2, #0
 800489e:	2300      	movs	r3, #0
 80048a0:	4640      	mov	r0, r8
 80048a2:	4649      	mov	r1, r9
 80048a4:	f7fc f91a 	bl	8000adc <__aeabi_dcmplt>
 80048a8:	b110      	cbz	r0, 80048b0 <_printf_float+0x90>
 80048aa:	232d      	movs	r3, #45	; 0x2d
 80048ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b0:	4b93      	ldr	r3, [pc, #588]	; (8004b00 <_printf_float+0x2e0>)
 80048b2:	4894      	ldr	r0, [pc, #592]	; (8004b04 <_printf_float+0x2e4>)
 80048b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048b8:	bf94      	ite	ls
 80048ba:	4698      	movls	r8, r3
 80048bc:	4680      	movhi	r8, r0
 80048be:	2303      	movs	r3, #3
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	9b05      	ldr	r3, [sp, #20]
 80048c4:	f023 0204 	bic.w	r2, r3, #4
 80048c8:	6022      	str	r2, [r4, #0]
 80048ca:	f04f 0900 	mov.w	r9, #0
 80048ce:	9700      	str	r7, [sp, #0]
 80048d0:	4633      	mov	r3, r6
 80048d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80048d4:	4621      	mov	r1, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f9d8 	bl	8004c8c <_printf_common>
 80048dc:	3001      	adds	r0, #1
 80048de:	f040 8090 	bne.w	8004a02 <_printf_float+0x1e2>
 80048e2:	f04f 30ff 	mov.w	r0, #4294967295
 80048e6:	b00d      	add	sp, #52	; 0x34
 80048e8:	ecbd 8b02 	vpop	{d8}
 80048ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	4640      	mov	r0, r8
 80048f6:	4649      	mov	r1, r9
 80048f8:	f7fc f918 	bl	8000b2c <__aeabi_dcmpun>
 80048fc:	b140      	cbz	r0, 8004910 <_printf_float+0xf0>
 80048fe:	464b      	mov	r3, r9
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfbc      	itt	lt
 8004904:	232d      	movlt	r3, #45	; 0x2d
 8004906:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800490a:	487f      	ldr	r0, [pc, #508]	; (8004b08 <_printf_float+0x2e8>)
 800490c:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <_printf_float+0x2ec>)
 800490e:	e7d1      	b.n	80048b4 <_printf_float+0x94>
 8004910:	6863      	ldr	r3, [r4, #4]
 8004912:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004916:	9206      	str	r2, [sp, #24]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	d13f      	bne.n	800499c <_printf_float+0x17c>
 800491c:	2306      	movs	r3, #6
 800491e:	6063      	str	r3, [r4, #4]
 8004920:	9b05      	ldr	r3, [sp, #20]
 8004922:	6861      	ldr	r1, [r4, #4]
 8004924:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004928:	2300      	movs	r3, #0
 800492a:	9303      	str	r3, [sp, #12]
 800492c:	ab0a      	add	r3, sp, #40	; 0x28
 800492e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004932:	ab09      	add	r3, sp, #36	; 0x24
 8004934:	ec49 8b10 	vmov	d0, r8, r9
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004940:	4628      	mov	r0, r5
 8004942:	f7ff fecd 	bl	80046e0 <__cvt>
 8004946:	9b06      	ldr	r3, [sp, #24]
 8004948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800494a:	2b47      	cmp	r3, #71	; 0x47
 800494c:	4680      	mov	r8, r0
 800494e:	d108      	bne.n	8004962 <_printf_float+0x142>
 8004950:	1cc8      	adds	r0, r1, #3
 8004952:	db02      	blt.n	800495a <_printf_float+0x13a>
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	4299      	cmp	r1, r3
 8004958:	dd41      	ble.n	80049de <_printf_float+0x1be>
 800495a:	f1ab 0b02 	sub.w	fp, fp, #2
 800495e:	fa5f fb8b 	uxtb.w	fp, fp
 8004962:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004966:	d820      	bhi.n	80049aa <_printf_float+0x18a>
 8004968:	3901      	subs	r1, #1
 800496a:	465a      	mov	r2, fp
 800496c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004970:	9109      	str	r1, [sp, #36]	; 0x24
 8004972:	f7ff ff17 	bl	80047a4 <__exponent>
 8004976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004978:	1813      	adds	r3, r2, r0
 800497a:	2a01      	cmp	r2, #1
 800497c:	4681      	mov	r9, r0
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	dc02      	bgt.n	8004988 <_printf_float+0x168>
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	07d2      	lsls	r2, r2, #31
 8004986:	d501      	bpl.n	800498c <_printf_float+0x16c>
 8004988:	3301      	adds	r3, #1
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004990:	2b00      	cmp	r3, #0
 8004992:	d09c      	beq.n	80048ce <_printf_float+0xae>
 8004994:	232d      	movs	r3, #45	; 0x2d
 8004996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499a:	e798      	b.n	80048ce <_printf_float+0xae>
 800499c:	9a06      	ldr	r2, [sp, #24]
 800499e:	2a47      	cmp	r2, #71	; 0x47
 80049a0:	d1be      	bne.n	8004920 <_printf_float+0x100>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1bc      	bne.n	8004920 <_printf_float+0x100>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e7b9      	b.n	800491e <_printf_float+0xfe>
 80049aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049ae:	d118      	bne.n	80049e2 <_printf_float+0x1c2>
 80049b0:	2900      	cmp	r1, #0
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	dd0b      	ble.n	80049ce <_printf_float+0x1ae>
 80049b6:	6121      	str	r1, [r4, #16]
 80049b8:	b913      	cbnz	r3, 80049c0 <_printf_float+0x1a0>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	07d0      	lsls	r0, r2, #31
 80049be:	d502      	bpl.n	80049c6 <_printf_float+0x1a6>
 80049c0:	3301      	adds	r3, #1
 80049c2:	440b      	add	r3, r1
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80049c8:	f04f 0900 	mov.w	r9, #0
 80049cc:	e7de      	b.n	800498c <_printf_float+0x16c>
 80049ce:	b913      	cbnz	r3, 80049d6 <_printf_float+0x1b6>
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	07d2      	lsls	r2, r2, #31
 80049d4:	d501      	bpl.n	80049da <_printf_float+0x1ba>
 80049d6:	3302      	adds	r3, #2
 80049d8:	e7f4      	b.n	80049c4 <_printf_float+0x1a4>
 80049da:	2301      	movs	r3, #1
 80049dc:	e7f2      	b.n	80049c4 <_printf_float+0x1a4>
 80049de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e4:	4299      	cmp	r1, r3
 80049e6:	db05      	blt.n	80049f4 <_printf_float+0x1d4>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	6121      	str	r1, [r4, #16]
 80049ec:	07d8      	lsls	r0, r3, #31
 80049ee:	d5ea      	bpl.n	80049c6 <_printf_float+0x1a6>
 80049f0:	1c4b      	adds	r3, r1, #1
 80049f2:	e7e7      	b.n	80049c4 <_printf_float+0x1a4>
 80049f4:	2900      	cmp	r1, #0
 80049f6:	bfd4      	ite	le
 80049f8:	f1c1 0202 	rsble	r2, r1, #2
 80049fc:	2201      	movgt	r2, #1
 80049fe:	4413      	add	r3, r2
 8004a00:	e7e0      	b.n	80049c4 <_printf_float+0x1a4>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	055a      	lsls	r2, r3, #21
 8004a06:	d407      	bmi.n	8004a18 <_printf_float+0x1f8>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	d12c      	bne.n	8004a70 <_printf_float+0x250>
 8004a16:	e764      	b.n	80048e2 <_printf_float+0xc2>
 8004a18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a1c:	f240 80e0 	bls.w	8004be0 <_printf_float+0x3c0>
 8004a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a24:	2200      	movs	r2, #0
 8004a26:	2300      	movs	r3, #0
 8004a28:	f7fc f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d034      	beq.n	8004a9a <_printf_float+0x27a>
 8004a30:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <_printf_float+0x2f0>)
 8004a32:	2301      	movs	r3, #1
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f af51 	beq.w	80048e2 <_printf_float+0xc2>
 8004a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a44:	429a      	cmp	r2, r3
 8004a46:	db02      	blt.n	8004a4e <_printf_float+0x22e>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	07d8      	lsls	r0, r3, #31
 8004a4c:	d510      	bpl.n	8004a70 <_printf_float+0x250>
 8004a4e:	ee18 3a10 	vmov	r3, s16
 8004a52:	4652      	mov	r2, sl
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f af41 	beq.w	80048e2 <_printf_float+0xc2>
 8004a60:	f04f 0800 	mov.w	r8, #0
 8004a64:	f104 091a 	add.w	r9, r4, #26
 8004a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	4543      	cmp	r3, r8
 8004a6e:	dc09      	bgt.n	8004a84 <_printf_float+0x264>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	079b      	lsls	r3, r3, #30
 8004a74:	f100 8105 	bmi.w	8004c82 <_printf_float+0x462>
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a7c:	4298      	cmp	r0, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	4618      	movlt	r0, r3
 8004a82:	e730      	b.n	80048e6 <_printf_float+0xc6>
 8004a84:	2301      	movs	r3, #1
 8004a86:	464a      	mov	r2, r9
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f af27 	beq.w	80048e2 <_printf_float+0xc2>
 8004a94:	f108 0801 	add.w	r8, r8, #1
 8004a98:	e7e6      	b.n	8004a68 <_printf_float+0x248>
 8004a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	dc39      	bgt.n	8004b14 <_printf_float+0x2f4>
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	; (8004b10 <_printf_float+0x2f0>)
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f43f af19 	beq.w	80048e2 <_printf_float+0xc2>
 8004ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d102      	bne.n	8004abe <_printf_float+0x29e>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	07d9      	lsls	r1, r3, #31
 8004abc:	d5d8      	bpl.n	8004a70 <_printf_float+0x250>
 8004abe:	ee18 3a10 	vmov	r3, s16
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	f43f af09 	beq.w	80048e2 <_printf_float+0xc2>
 8004ad0:	f04f 0900 	mov.w	r9, #0
 8004ad4:	f104 0a1a 	add.w	sl, r4, #26
 8004ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ada:	425b      	negs	r3, r3
 8004adc:	454b      	cmp	r3, r9
 8004ade:	dc01      	bgt.n	8004ae4 <_printf_float+0x2c4>
 8004ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae2:	e792      	b.n	8004a0a <_printf_float+0x1ea>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4628      	mov	r0, r5
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f aef7 	beq.w	80048e2 <_printf_float+0xc2>
 8004af4:	f109 0901 	add.w	r9, r9, #1
 8004af8:	e7ee      	b.n	8004ad8 <_printf_float+0x2b8>
 8004afa:	bf00      	nop
 8004afc:	7fefffff 	.word	0x7fefffff
 8004b00:	08009d94 	.word	0x08009d94
 8004b04:	08009d98 	.word	0x08009d98
 8004b08:	08009da0 	.word	0x08009da0
 8004b0c:	08009d9c 	.word	0x08009d9c
 8004b10:	0800a209 	.word	0x0800a209
 8004b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	bfa8      	it	ge
 8004b1c:	461a      	movge	r2, r3
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	4691      	mov	r9, r2
 8004b22:	dc37      	bgt.n	8004b94 <_printf_float+0x374>
 8004b24:	f04f 0b00 	mov.w	fp, #0
 8004b28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b2c:	f104 021a 	add.w	r2, r4, #26
 8004b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b32:	9305      	str	r3, [sp, #20]
 8004b34:	eba3 0309 	sub.w	r3, r3, r9
 8004b38:	455b      	cmp	r3, fp
 8004b3a:	dc33      	bgt.n	8004ba4 <_printf_float+0x384>
 8004b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b40:	429a      	cmp	r2, r3
 8004b42:	db3b      	blt.n	8004bbc <_printf_float+0x39c>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	07da      	lsls	r2, r3, #31
 8004b48:	d438      	bmi.n	8004bbc <_printf_float+0x39c>
 8004b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b4c:	9b05      	ldr	r3, [sp, #20]
 8004b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	eba2 0901 	sub.w	r9, r2, r1
 8004b56:	4599      	cmp	r9, r3
 8004b58:	bfa8      	it	ge
 8004b5a:	4699      	movge	r9, r3
 8004b5c:	f1b9 0f00 	cmp.w	r9, #0
 8004b60:	dc35      	bgt.n	8004bce <_printf_float+0x3ae>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b6a:	f104 0a1a 	add.w	sl, r4, #26
 8004b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	eba3 0309 	sub.w	r3, r3, r9
 8004b78:	4543      	cmp	r3, r8
 8004b7a:	f77f af79 	ble.w	8004a70 <_printf_float+0x250>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4652      	mov	r2, sl
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f43f aeaa 	beq.w	80048e2 <_printf_float+0xc2>
 8004b8e:	f108 0801 	add.w	r8, r8, #1
 8004b92:	e7ec      	b.n	8004b6e <_printf_float+0x34e>
 8004b94:	4613      	mov	r3, r2
 8004b96:	4631      	mov	r1, r6
 8004b98:	4642      	mov	r2, r8
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d1c0      	bne.n	8004b24 <_printf_float+0x304>
 8004ba2:	e69e      	b.n	80048e2 <_printf_float+0xc2>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	9205      	str	r2, [sp, #20]
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f ae97 	beq.w	80048e2 <_printf_float+0xc2>
 8004bb4:	9a05      	ldr	r2, [sp, #20]
 8004bb6:	f10b 0b01 	add.w	fp, fp, #1
 8004bba:	e7b9      	b.n	8004b30 <_printf_float+0x310>
 8004bbc:	ee18 3a10 	vmov	r3, s16
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b8      	blx	r7
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d1be      	bne.n	8004b4a <_printf_float+0x32a>
 8004bcc:	e689      	b.n	80048e2 <_printf_float+0xc2>
 8004bce:	9a05      	ldr	r2, [sp, #20]
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	4442      	add	r2, r8
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d1c1      	bne.n	8004b62 <_printf_float+0x342>
 8004bde:	e680      	b.n	80048e2 <_printf_float+0xc2>
 8004be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004be2:	2a01      	cmp	r2, #1
 8004be4:	dc01      	bgt.n	8004bea <_printf_float+0x3ca>
 8004be6:	07db      	lsls	r3, r3, #31
 8004be8:	d538      	bpl.n	8004c5c <_printf_float+0x43c>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4642      	mov	r2, r8
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f ae74 	beq.w	80048e2 <_printf_float+0xc2>
 8004bfa:	ee18 3a10 	vmov	r3, s16
 8004bfe:	4652      	mov	r2, sl
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	f43f ae6b 	beq.w	80048e2 <_printf_float+0xc2>
 8004c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c10:	2200      	movs	r2, #0
 8004c12:	2300      	movs	r3, #0
 8004c14:	f7fb ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c18:	b9d8      	cbnz	r0, 8004c52 <_printf_float+0x432>
 8004c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1c:	f108 0201 	add.w	r2, r8, #1
 8004c20:	3b01      	subs	r3, #1
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d10e      	bne.n	8004c4a <_printf_float+0x42a>
 8004c2c:	e659      	b.n	80048e2 <_printf_float+0xc2>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4652      	mov	r2, sl
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f ae52 	beq.w	80048e2 <_printf_float+0xc2>
 8004c3e:	f108 0801 	add.w	r8, r8, #1
 8004c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c44:	3b01      	subs	r3, #1
 8004c46:	4543      	cmp	r3, r8
 8004c48:	dcf1      	bgt.n	8004c2e <_printf_float+0x40e>
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c50:	e6dc      	b.n	8004a0c <_printf_float+0x1ec>
 8004c52:	f04f 0800 	mov.w	r8, #0
 8004c56:	f104 0a1a 	add.w	sl, r4, #26
 8004c5a:	e7f2      	b.n	8004c42 <_printf_float+0x422>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4642      	mov	r2, r8
 8004c60:	e7df      	b.n	8004c22 <_printf_float+0x402>
 8004c62:	2301      	movs	r3, #1
 8004c64:	464a      	mov	r2, r9
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f43f ae38 	beq.w	80048e2 <_printf_float+0xc2>
 8004c72:	f108 0801 	add.w	r8, r8, #1
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c7a:	1a5b      	subs	r3, r3, r1
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dcf0      	bgt.n	8004c62 <_printf_float+0x442>
 8004c80:	e6fa      	b.n	8004a78 <_printf_float+0x258>
 8004c82:	f04f 0800 	mov.w	r8, #0
 8004c86:	f104 0919 	add.w	r9, r4, #25
 8004c8a:	e7f4      	b.n	8004c76 <_printf_float+0x456>

08004c8c <_printf_common>:
 8004c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	4616      	mov	r6, r2
 8004c92:	4699      	mov	r9, r3
 8004c94:	688a      	ldr	r2, [r1, #8]
 8004c96:	690b      	ldr	r3, [r1, #16]
 8004c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	bfb8      	it	lt
 8004ca0:	4613      	movlt	r3, r2
 8004ca2:	6033      	str	r3, [r6, #0]
 8004ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca8:	4607      	mov	r7, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	b10a      	cbz	r2, 8004cb2 <_printf_common+0x26>
 8004cae:	3301      	adds	r3, #1
 8004cb0:	6033      	str	r3, [r6, #0]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	0699      	lsls	r1, r3, #26
 8004cb6:	bf42      	ittt	mi
 8004cb8:	6833      	ldrmi	r3, [r6, #0]
 8004cba:	3302      	addmi	r3, #2
 8004cbc:	6033      	strmi	r3, [r6, #0]
 8004cbe:	6825      	ldr	r5, [r4, #0]
 8004cc0:	f015 0506 	ands.w	r5, r5, #6
 8004cc4:	d106      	bne.n	8004cd4 <_printf_common+0x48>
 8004cc6:	f104 0a19 	add.w	sl, r4, #25
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	6832      	ldr	r2, [r6, #0]
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dc26      	bgt.n	8004d22 <_printf_common+0x96>
 8004cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd8:	1e13      	subs	r3, r2, #0
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	bf18      	it	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	0692      	lsls	r2, r2, #26
 8004ce2:	d42b      	bmi.n	8004d3c <_printf_common+0xb0>
 8004ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d01e      	beq.n	8004d30 <_printf_common+0xa4>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	68e5      	ldr	r5, [r4, #12]
 8004cf6:	6832      	ldr	r2, [r6, #0]
 8004cf8:	f003 0306 	and.w	r3, r3, #6
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	bf08      	it	eq
 8004d00:	1aad      	subeq	r5, r5, r2
 8004d02:	68a3      	ldr	r3, [r4, #8]
 8004d04:	6922      	ldr	r2, [r4, #16]
 8004d06:	bf0c      	ite	eq
 8004d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d0c:	2500      	movne	r5, #0
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	bfc4      	itt	gt
 8004d12:	1a9b      	subgt	r3, r3, r2
 8004d14:	18ed      	addgt	r5, r5, r3
 8004d16:	2600      	movs	r6, #0
 8004d18:	341a      	adds	r4, #26
 8004d1a:	42b5      	cmp	r5, r6
 8004d1c:	d11a      	bne.n	8004d54 <_printf_common+0xc8>
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e008      	b.n	8004d34 <_printf_common+0xa8>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4652      	mov	r2, sl
 8004d26:	4649      	mov	r1, r9
 8004d28:	4638      	mov	r0, r7
 8004d2a:	47c0      	blx	r8
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d103      	bne.n	8004d38 <_printf_common+0xac>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d38:	3501      	adds	r5, #1
 8004d3a:	e7c6      	b.n	8004cca <_printf_common+0x3e>
 8004d3c:	18e1      	adds	r1, r4, r3
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	2030      	movs	r0, #48	; 0x30
 8004d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d46:	4422      	add	r2, r4
 8004d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d50:	3302      	adds	r3, #2
 8004d52:	e7c7      	b.n	8004ce4 <_printf_common+0x58>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4622      	mov	r2, r4
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c0      	blx	r8
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d0e6      	beq.n	8004d30 <_printf_common+0xa4>
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7d9      	b.n	8004d1a <_printf_common+0x8e>
	...

08004d68 <_printf_i>:
 8004d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	4691      	mov	r9, r2
 8004d70:	7e27      	ldrb	r7, [r4, #24]
 8004d72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d74:	2f78      	cmp	r7, #120	; 0x78
 8004d76:	4680      	mov	r8, r0
 8004d78:	469a      	mov	sl, r3
 8004d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d7e:	d807      	bhi.n	8004d90 <_printf_i+0x28>
 8004d80:	2f62      	cmp	r7, #98	; 0x62
 8004d82:	d80a      	bhi.n	8004d9a <_printf_i+0x32>
 8004d84:	2f00      	cmp	r7, #0
 8004d86:	f000 80d8 	beq.w	8004f3a <_printf_i+0x1d2>
 8004d8a:	2f58      	cmp	r7, #88	; 0x58
 8004d8c:	f000 80a3 	beq.w	8004ed6 <_printf_i+0x16e>
 8004d90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d98:	e03a      	b.n	8004e10 <_printf_i+0xa8>
 8004d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d9e:	2b15      	cmp	r3, #21
 8004da0:	d8f6      	bhi.n	8004d90 <_printf_i+0x28>
 8004da2:	a001      	add	r0, pc, #4	; (adr r0, 8004da8 <_printf_i+0x40>)
 8004da4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e15 	.word	0x08004e15
 8004db0:	08004d91 	.word	0x08004d91
 8004db4:	08004d91 	.word	0x08004d91
 8004db8:	08004d91 	.word	0x08004d91
 8004dbc:	08004d91 	.word	0x08004d91
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d91 	.word	0x08004d91
 8004dc8:	08004d91 	.word	0x08004d91
 8004dcc:	08004d91 	.word	0x08004d91
 8004dd0:	08004d91 	.word	0x08004d91
 8004dd4:	08004f21 	.word	0x08004f21
 8004dd8:	08004e45 	.word	0x08004e45
 8004ddc:	08004f03 	.word	0x08004f03
 8004de0:	08004d91 	.word	0x08004d91
 8004de4:	08004d91 	.word	0x08004d91
 8004de8:	08004f43 	.word	0x08004f43
 8004dec:	08004d91 	.word	0x08004d91
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004d91 	.word	0x08004d91
 8004df8:	08004d91 	.word	0x08004d91
 8004dfc:	08004f0b 	.word	0x08004f0b
 8004e00:	680b      	ldr	r3, [r1, #0]
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	600a      	str	r2, [r1, #0]
 8004e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0a3      	b.n	8004f5c <_printf_i+0x1f4>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	6808      	ldr	r0, [r1, #0]
 8004e18:	062e      	lsls	r6, r5, #24
 8004e1a:	f100 0304 	add.w	r3, r0, #4
 8004e1e:	d50a      	bpl.n	8004e36 <_printf_i+0xce>
 8004e20:	6805      	ldr	r5, [r0, #0]
 8004e22:	600b      	str	r3, [r1, #0]
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	da03      	bge.n	8004e30 <_printf_i+0xc8>
 8004e28:	232d      	movs	r3, #45	; 0x2d
 8004e2a:	426d      	negs	r5, r5
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e30:	485e      	ldr	r0, [pc, #376]	; (8004fac <_printf_i+0x244>)
 8004e32:	230a      	movs	r3, #10
 8004e34:	e019      	b.n	8004e6a <_printf_i+0x102>
 8004e36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e3a:	6805      	ldr	r5, [r0, #0]
 8004e3c:	600b      	str	r3, [r1, #0]
 8004e3e:	bf18      	it	ne
 8004e40:	b22d      	sxthne	r5, r5
 8004e42:	e7ef      	b.n	8004e24 <_printf_i+0xbc>
 8004e44:	680b      	ldr	r3, [r1, #0]
 8004e46:	6825      	ldr	r5, [r4, #0]
 8004e48:	1d18      	adds	r0, r3, #4
 8004e4a:	6008      	str	r0, [r1, #0]
 8004e4c:	0628      	lsls	r0, r5, #24
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0xec>
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <_printf_i+0xf2>
 8004e54:	0669      	lsls	r1, r5, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0xe8>
 8004e58:	881d      	ldrh	r5, [r3, #0]
 8004e5a:	4854      	ldr	r0, [pc, #336]	; (8004fac <_printf_i+0x244>)
 8004e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e5e:	bf0c      	ite	eq
 8004e60:	2308      	moveq	r3, #8
 8004e62:	230a      	movne	r3, #10
 8004e64:	2100      	movs	r1, #0
 8004e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e6a:	6866      	ldr	r6, [r4, #4]
 8004e6c:	60a6      	str	r6, [r4, #8]
 8004e6e:	2e00      	cmp	r6, #0
 8004e70:	bfa2      	ittt	ge
 8004e72:	6821      	ldrge	r1, [r4, #0]
 8004e74:	f021 0104 	bicge.w	r1, r1, #4
 8004e78:	6021      	strge	r1, [r4, #0]
 8004e7a:	b90d      	cbnz	r5, 8004e80 <_printf_i+0x118>
 8004e7c:	2e00      	cmp	r6, #0
 8004e7e:	d04d      	beq.n	8004f1c <_printf_i+0x1b4>
 8004e80:	4616      	mov	r6, r2
 8004e82:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e86:	fb03 5711 	mls	r7, r3, r1, r5
 8004e8a:	5dc7      	ldrb	r7, [r0, r7]
 8004e8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e90:	462f      	mov	r7, r5
 8004e92:	42bb      	cmp	r3, r7
 8004e94:	460d      	mov	r5, r1
 8004e96:	d9f4      	bls.n	8004e82 <_printf_i+0x11a>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d10b      	bne.n	8004eb4 <_printf_i+0x14c>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	07df      	lsls	r7, r3, #31
 8004ea0:	d508      	bpl.n	8004eb4 <_printf_i+0x14c>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	6861      	ldr	r1, [r4, #4]
 8004ea6:	4299      	cmp	r1, r3
 8004ea8:	bfde      	ittt	le
 8004eaa:	2330      	movle	r3, #48	; 0x30
 8004eac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004eb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004eb4:	1b92      	subs	r2, r2, r6
 8004eb6:	6122      	str	r2, [r4, #16]
 8004eb8:	f8cd a000 	str.w	sl, [sp]
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	aa03      	add	r2, sp, #12
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	f7ff fee2 	bl	8004c8c <_printf_common>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d14c      	bne.n	8004f66 <_printf_i+0x1fe>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	b004      	add	sp, #16
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	4835      	ldr	r0, [pc, #212]	; (8004fac <_printf_i+0x244>)
 8004ed8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	680e      	ldr	r6, [r1, #0]
 8004ee0:	061f      	lsls	r7, r3, #24
 8004ee2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ee6:	600e      	str	r6, [r1, #0]
 8004ee8:	d514      	bpl.n	8004f14 <_printf_i+0x1ac>
 8004eea:	07d9      	lsls	r1, r3, #31
 8004eec:	bf44      	itt	mi
 8004eee:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef2:	6023      	strmi	r3, [r4, #0]
 8004ef4:	b91d      	cbnz	r5, 8004efe <_printf_i+0x196>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f023 0320 	bic.w	r3, r3, #32
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	2310      	movs	r3, #16
 8004f00:	e7b0      	b.n	8004e64 <_printf_i+0xfc>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f043 0320 	orr.w	r3, r3, #32
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	2378      	movs	r3, #120	; 0x78
 8004f0c:	4828      	ldr	r0, [pc, #160]	; (8004fb0 <_printf_i+0x248>)
 8004f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f12:	e7e3      	b.n	8004edc <_printf_i+0x174>
 8004f14:	065e      	lsls	r6, r3, #25
 8004f16:	bf48      	it	mi
 8004f18:	b2ad      	uxthmi	r5, r5
 8004f1a:	e7e6      	b.n	8004eea <_printf_i+0x182>
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	e7bb      	b.n	8004e98 <_printf_i+0x130>
 8004f20:	680b      	ldr	r3, [r1, #0]
 8004f22:	6826      	ldr	r6, [r4, #0]
 8004f24:	6960      	ldr	r0, [r4, #20]
 8004f26:	1d1d      	adds	r5, r3, #4
 8004f28:	600d      	str	r5, [r1, #0]
 8004f2a:	0635      	lsls	r5, r6, #24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0x1cc>
 8004f30:	6018      	str	r0, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0x1d2>
 8004f34:	0671      	lsls	r1, r6, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0x1c8>
 8004f38:	8018      	strh	r0, [r3, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	4616      	mov	r6, r2
 8004f40:	e7ba      	b.n	8004eb8 <_printf_i+0x150>
 8004f42:	680b      	ldr	r3, [r1, #0]
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	600a      	str	r2, [r1, #0]
 8004f48:	681e      	ldr	r6, [r3, #0]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7fb f946 	bl	80001e0 <memchr>
 8004f54:	b108      	cbz	r0, 8004f5a <_printf_i+0x1f2>
 8004f56:	1b80      	subs	r0, r0, r6
 8004f58:	6060      	str	r0, [r4, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f64:	e7a8      	b.n	8004eb8 <_printf_i+0x150>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	4632      	mov	r2, r6
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	47d0      	blx	sl
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0ab      	beq.n	8004ecc <_printf_i+0x164>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	d413      	bmi.n	8004fa2 <_printf_i+0x23a>
 8004f7a:	68e0      	ldr	r0, [r4, #12]
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	bfb8      	it	lt
 8004f82:	4618      	movlt	r0, r3
 8004f84:	e7a4      	b.n	8004ed0 <_printf_i+0x168>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d09b      	beq.n	8004ecc <_printf_i+0x164>
 8004f94:	3501      	adds	r5, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	dcf2      	bgt.n	8004f86 <_printf_i+0x21e>
 8004fa0:	e7eb      	b.n	8004f7a <_printf_i+0x212>
 8004fa2:	2500      	movs	r5, #0
 8004fa4:	f104 0619 	add.w	r6, r4, #25
 8004fa8:	e7f5      	b.n	8004f96 <_printf_i+0x22e>
 8004faa:	bf00      	nop
 8004fac:	08009da4 	.word	0x08009da4
 8004fb0:	08009db5 	.word	0x08009db5

08004fb4 <_scanf_float>:
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	4617      	mov	r7, r2
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	688b      	ldr	r3, [r1, #8]
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004fc6:	bf83      	ittte	hi
 8004fc8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fcc:	195b      	addhi	r3, r3, r5
 8004fce:	9302      	strhi	r3, [sp, #8]
 8004fd0:	2300      	movls	r3, #0
 8004fd2:	bf86      	itte	hi
 8004fd4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fd8:	608b      	strhi	r3, [r1, #8]
 8004fda:	9302      	strls	r3, [sp, #8]
 8004fdc:	680b      	ldr	r3, [r1, #0]
 8004fde:	468b      	mov	fp, r1
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fe6:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fee:	4680      	mov	r8, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	465e      	mov	r6, fp
 8004ff4:	46aa      	mov	sl, r5
 8004ff6:	46a9      	mov	r9, r5
 8004ff8:	9501      	str	r5, [sp, #4]
 8004ffa:	68a2      	ldr	r2, [r4, #8]
 8004ffc:	b152      	cbz	r2, 8005014 <_scanf_float+0x60>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b4e      	cmp	r3, #78	; 0x4e
 8005004:	d864      	bhi.n	80050d0 <_scanf_float+0x11c>
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d83c      	bhi.n	8005084 <_scanf_float+0xd0>
 800500a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800500e:	b2c8      	uxtb	r0, r1
 8005010:	280e      	cmp	r0, #14
 8005012:	d93a      	bls.n	800508a <_scanf_float+0xd6>
 8005014:	f1b9 0f00 	cmp.w	r9, #0
 8005018:	d003      	beq.n	8005022 <_scanf_float+0x6e>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005026:	f1ba 0f01 	cmp.w	sl, #1
 800502a:	f200 8113 	bhi.w	8005254 <_scanf_float+0x2a0>
 800502e:	455e      	cmp	r6, fp
 8005030:	f200 8105 	bhi.w	800523e <_scanf_float+0x28a>
 8005034:	2501      	movs	r5, #1
 8005036:	4628      	mov	r0, r5
 8005038:	b007      	add	sp, #28
 800503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005042:	2a0d      	cmp	r2, #13
 8005044:	d8e6      	bhi.n	8005014 <_scanf_float+0x60>
 8005046:	a101      	add	r1, pc, #4	; (adr r1, 800504c <_scanf_float+0x98>)
 8005048:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800504c:	0800518b 	.word	0x0800518b
 8005050:	08005015 	.word	0x08005015
 8005054:	08005015 	.word	0x08005015
 8005058:	08005015 	.word	0x08005015
 800505c:	080051eb 	.word	0x080051eb
 8005060:	080051c3 	.word	0x080051c3
 8005064:	08005015 	.word	0x08005015
 8005068:	08005015 	.word	0x08005015
 800506c:	08005199 	.word	0x08005199
 8005070:	08005015 	.word	0x08005015
 8005074:	08005015 	.word	0x08005015
 8005078:	08005015 	.word	0x08005015
 800507c:	08005015 	.word	0x08005015
 8005080:	08005151 	.word	0x08005151
 8005084:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005088:	e7db      	b.n	8005042 <_scanf_float+0x8e>
 800508a:	290e      	cmp	r1, #14
 800508c:	d8c2      	bhi.n	8005014 <_scanf_float+0x60>
 800508e:	a001      	add	r0, pc, #4	; (adr r0, 8005094 <_scanf_float+0xe0>)
 8005090:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005094:	08005143 	.word	0x08005143
 8005098:	08005015 	.word	0x08005015
 800509c:	08005143 	.word	0x08005143
 80050a0:	080051d7 	.word	0x080051d7
 80050a4:	08005015 	.word	0x08005015
 80050a8:	080050f1 	.word	0x080050f1
 80050ac:	0800512d 	.word	0x0800512d
 80050b0:	0800512d 	.word	0x0800512d
 80050b4:	0800512d 	.word	0x0800512d
 80050b8:	0800512d 	.word	0x0800512d
 80050bc:	0800512d 	.word	0x0800512d
 80050c0:	0800512d 	.word	0x0800512d
 80050c4:	0800512d 	.word	0x0800512d
 80050c8:	0800512d 	.word	0x0800512d
 80050cc:	0800512d 	.word	0x0800512d
 80050d0:	2b6e      	cmp	r3, #110	; 0x6e
 80050d2:	d809      	bhi.n	80050e8 <_scanf_float+0x134>
 80050d4:	2b60      	cmp	r3, #96	; 0x60
 80050d6:	d8b2      	bhi.n	800503e <_scanf_float+0x8a>
 80050d8:	2b54      	cmp	r3, #84	; 0x54
 80050da:	d077      	beq.n	80051cc <_scanf_float+0x218>
 80050dc:	2b59      	cmp	r3, #89	; 0x59
 80050de:	d199      	bne.n	8005014 <_scanf_float+0x60>
 80050e0:	2d07      	cmp	r5, #7
 80050e2:	d197      	bne.n	8005014 <_scanf_float+0x60>
 80050e4:	2508      	movs	r5, #8
 80050e6:	e029      	b.n	800513c <_scanf_float+0x188>
 80050e8:	2b74      	cmp	r3, #116	; 0x74
 80050ea:	d06f      	beq.n	80051cc <_scanf_float+0x218>
 80050ec:	2b79      	cmp	r3, #121	; 0x79
 80050ee:	e7f6      	b.n	80050de <_scanf_float+0x12a>
 80050f0:	6821      	ldr	r1, [r4, #0]
 80050f2:	05c8      	lsls	r0, r1, #23
 80050f4:	d51a      	bpl.n	800512c <_scanf_float+0x178>
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050fc:	6021      	str	r1, [r4, #0]
 80050fe:	f109 0901 	add.w	r9, r9, #1
 8005102:	b11b      	cbz	r3, 800510c <_scanf_float+0x158>
 8005104:	3b01      	subs	r3, #1
 8005106:	3201      	adds	r2, #1
 8005108:	9302      	str	r3, [sp, #8]
 800510a:	60a2      	str	r2, [r4, #8]
 800510c:	68a3      	ldr	r3, [r4, #8]
 800510e:	3b01      	subs	r3, #1
 8005110:	60a3      	str	r3, [r4, #8]
 8005112:	6923      	ldr	r3, [r4, #16]
 8005114:	3301      	adds	r3, #1
 8005116:	6123      	str	r3, [r4, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	f340 8084 	ble.w	800522c <_scanf_float+0x278>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	e766      	b.n	8004ffa <_scanf_float+0x46>
 800512c:	eb1a 0f05 	cmn.w	sl, r5
 8005130:	f47f af70 	bne.w	8005014 <_scanf_float+0x60>
 8005134:	6822      	ldr	r2, [r4, #0]
 8005136:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800513a:	6022      	str	r2, [r4, #0]
 800513c:	f806 3b01 	strb.w	r3, [r6], #1
 8005140:	e7e4      	b.n	800510c <_scanf_float+0x158>
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	0610      	lsls	r0, r2, #24
 8005146:	f57f af65 	bpl.w	8005014 <_scanf_float+0x60>
 800514a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800514e:	e7f4      	b.n	800513a <_scanf_float+0x186>
 8005150:	f1ba 0f00 	cmp.w	sl, #0
 8005154:	d10e      	bne.n	8005174 <_scanf_float+0x1c0>
 8005156:	f1b9 0f00 	cmp.w	r9, #0
 800515a:	d10e      	bne.n	800517a <_scanf_float+0x1c6>
 800515c:	6822      	ldr	r2, [r4, #0]
 800515e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005162:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005166:	d108      	bne.n	800517a <_scanf_float+0x1c6>
 8005168:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800516c:	6022      	str	r2, [r4, #0]
 800516e:	f04f 0a01 	mov.w	sl, #1
 8005172:	e7e3      	b.n	800513c <_scanf_float+0x188>
 8005174:	f1ba 0f02 	cmp.w	sl, #2
 8005178:	d055      	beq.n	8005226 <_scanf_float+0x272>
 800517a:	2d01      	cmp	r5, #1
 800517c:	d002      	beq.n	8005184 <_scanf_float+0x1d0>
 800517e:	2d04      	cmp	r5, #4
 8005180:	f47f af48 	bne.w	8005014 <_scanf_float+0x60>
 8005184:	3501      	adds	r5, #1
 8005186:	b2ed      	uxtb	r5, r5
 8005188:	e7d8      	b.n	800513c <_scanf_float+0x188>
 800518a:	f1ba 0f01 	cmp.w	sl, #1
 800518e:	f47f af41 	bne.w	8005014 <_scanf_float+0x60>
 8005192:	f04f 0a02 	mov.w	sl, #2
 8005196:	e7d1      	b.n	800513c <_scanf_float+0x188>
 8005198:	b97d      	cbnz	r5, 80051ba <_scanf_float+0x206>
 800519a:	f1b9 0f00 	cmp.w	r9, #0
 800519e:	f47f af3c 	bne.w	800501a <_scanf_float+0x66>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80051a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051ac:	f47f af39 	bne.w	8005022 <_scanf_float+0x6e>
 80051b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051b4:	6022      	str	r2, [r4, #0]
 80051b6:	2501      	movs	r5, #1
 80051b8:	e7c0      	b.n	800513c <_scanf_float+0x188>
 80051ba:	2d03      	cmp	r5, #3
 80051bc:	d0e2      	beq.n	8005184 <_scanf_float+0x1d0>
 80051be:	2d05      	cmp	r5, #5
 80051c0:	e7de      	b.n	8005180 <_scanf_float+0x1cc>
 80051c2:	2d02      	cmp	r5, #2
 80051c4:	f47f af26 	bne.w	8005014 <_scanf_float+0x60>
 80051c8:	2503      	movs	r5, #3
 80051ca:	e7b7      	b.n	800513c <_scanf_float+0x188>
 80051cc:	2d06      	cmp	r5, #6
 80051ce:	f47f af21 	bne.w	8005014 <_scanf_float+0x60>
 80051d2:	2507      	movs	r5, #7
 80051d4:	e7b2      	b.n	800513c <_scanf_float+0x188>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	0591      	lsls	r1, r2, #22
 80051da:	f57f af1b 	bpl.w	8005014 <_scanf_float+0x60>
 80051de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80051e8:	e7a8      	b.n	800513c <_scanf_float+0x188>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051f4:	d006      	beq.n	8005204 <_scanf_float+0x250>
 80051f6:	0550      	lsls	r0, r2, #21
 80051f8:	f57f af0c 	bpl.w	8005014 <_scanf_float+0x60>
 80051fc:	f1b9 0f00 	cmp.w	r9, #0
 8005200:	f43f af0f 	beq.w	8005022 <_scanf_float+0x6e>
 8005204:	0591      	lsls	r1, r2, #22
 8005206:	bf58      	it	pl
 8005208:	9901      	ldrpl	r1, [sp, #4]
 800520a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800520e:	bf58      	it	pl
 8005210:	eba9 0101 	subpl.w	r1, r9, r1
 8005214:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005218:	bf58      	it	pl
 800521a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	f04f 0900 	mov.w	r9, #0
 8005224:	e78a      	b.n	800513c <_scanf_float+0x188>
 8005226:	f04f 0a03 	mov.w	sl, #3
 800522a:	e787      	b.n	800513c <_scanf_float+0x188>
 800522c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005230:	4639      	mov	r1, r7
 8005232:	4640      	mov	r0, r8
 8005234:	4798      	blx	r3
 8005236:	2800      	cmp	r0, #0
 8005238:	f43f aedf 	beq.w	8004ffa <_scanf_float+0x46>
 800523c:	e6ea      	b.n	8005014 <_scanf_float+0x60>
 800523e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005246:	463a      	mov	r2, r7
 8005248:	4640      	mov	r0, r8
 800524a:	4798      	blx	r3
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	3b01      	subs	r3, #1
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	e6ec      	b.n	800502e <_scanf_float+0x7a>
 8005254:	1e6b      	subs	r3, r5, #1
 8005256:	2b06      	cmp	r3, #6
 8005258:	d825      	bhi.n	80052a6 <_scanf_float+0x2f2>
 800525a:	2d02      	cmp	r5, #2
 800525c:	d836      	bhi.n	80052cc <_scanf_float+0x318>
 800525e:	455e      	cmp	r6, fp
 8005260:	f67f aee8 	bls.w	8005034 <_scanf_float+0x80>
 8005264:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005268:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800526c:	463a      	mov	r2, r7
 800526e:	4640      	mov	r0, r8
 8005270:	4798      	blx	r3
 8005272:	6923      	ldr	r3, [r4, #16]
 8005274:	3b01      	subs	r3, #1
 8005276:	6123      	str	r3, [r4, #16]
 8005278:	e7f1      	b.n	800525e <_scanf_float+0x2aa>
 800527a:	9802      	ldr	r0, [sp, #8]
 800527c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005280:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005284:	9002      	str	r0, [sp, #8]
 8005286:	463a      	mov	r2, r7
 8005288:	4640      	mov	r0, r8
 800528a:	4798      	blx	r3
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	3b01      	subs	r3, #1
 8005290:	6123      	str	r3, [r4, #16]
 8005292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005296:	fa5f fa8a 	uxtb.w	sl, sl
 800529a:	f1ba 0f02 	cmp.w	sl, #2
 800529e:	d1ec      	bne.n	800527a <_scanf_float+0x2c6>
 80052a0:	3d03      	subs	r5, #3
 80052a2:	b2ed      	uxtb	r5, r5
 80052a4:	1b76      	subs	r6, r6, r5
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	05da      	lsls	r2, r3, #23
 80052aa:	d52f      	bpl.n	800530c <_scanf_float+0x358>
 80052ac:	055b      	lsls	r3, r3, #21
 80052ae:	d510      	bpl.n	80052d2 <_scanf_float+0x31e>
 80052b0:	455e      	cmp	r6, fp
 80052b2:	f67f aebf 	bls.w	8005034 <_scanf_float+0x80>
 80052b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052be:	463a      	mov	r2, r7
 80052c0:	4640      	mov	r0, r8
 80052c2:	4798      	blx	r3
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	e7f1      	b.n	80052b0 <_scanf_float+0x2fc>
 80052cc:	46aa      	mov	sl, r5
 80052ce:	9602      	str	r6, [sp, #8]
 80052d0:	e7df      	b.n	8005292 <_scanf_float+0x2de>
 80052d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	2965      	cmp	r1, #101	; 0x65
 80052da:	f103 33ff 	add.w	r3, r3, #4294967295
 80052de:	f106 35ff 	add.w	r5, r6, #4294967295
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	d00c      	beq.n	8005300 <_scanf_float+0x34c>
 80052e6:	2945      	cmp	r1, #69	; 0x45
 80052e8:	d00a      	beq.n	8005300 <_scanf_float+0x34c>
 80052ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ee:	463a      	mov	r2, r7
 80052f0:	4640      	mov	r0, r8
 80052f2:	4798      	blx	r3
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	1eb5      	subs	r5, r6, #2
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005304:	463a      	mov	r2, r7
 8005306:	4640      	mov	r0, r8
 8005308:	4798      	blx	r3
 800530a:	462e      	mov	r6, r5
 800530c:	6825      	ldr	r5, [r4, #0]
 800530e:	f015 0510 	ands.w	r5, r5, #16
 8005312:	d158      	bne.n	80053c6 <_scanf_float+0x412>
 8005314:	7035      	strb	r5, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d11c      	bne.n	800535c <_scanf_float+0x3a8>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	454b      	cmp	r3, r9
 8005326:	eba3 0209 	sub.w	r2, r3, r9
 800532a:	d124      	bne.n	8005376 <_scanf_float+0x3c2>
 800532c:	2200      	movs	r2, #0
 800532e:	4659      	mov	r1, fp
 8005330:	4640      	mov	r0, r8
 8005332:	f001 f807 	bl	8006344 <_strtod_r>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	6821      	ldr	r1, [r4, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f011 0f02 	tst.w	r1, #2
 8005340:	ec57 6b10 	vmov	r6, r7, d0
 8005344:	f103 0204 	add.w	r2, r3, #4
 8005348:	d020      	beq.n	800538c <_scanf_float+0x3d8>
 800534a:	9903      	ldr	r1, [sp, #12]
 800534c:	600a      	str	r2, [r1, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	e9c3 6700 	strd	r6, r7, [r3]
 8005354:	68e3      	ldr	r3, [r4, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60e3      	str	r3, [r4, #12]
 800535a:	e66c      	b.n	8005036 <_scanf_float+0x82>
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0e4      	beq.n	800532c <_scanf_float+0x378>
 8005362:	9905      	ldr	r1, [sp, #20]
 8005364:	230a      	movs	r3, #10
 8005366:	462a      	mov	r2, r5
 8005368:	3101      	adds	r1, #1
 800536a:	4640      	mov	r0, r8
 800536c:	f001 f874 	bl	8006458 <_strtol_r>
 8005370:	9b04      	ldr	r3, [sp, #16]
 8005372:	9e05      	ldr	r6, [sp, #20]
 8005374:	1ac2      	subs	r2, r0, r3
 8005376:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800537a:	429e      	cmp	r6, r3
 800537c:	bf28      	it	cs
 800537e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005382:	4912      	ldr	r1, [pc, #72]	; (80053cc <_scanf_float+0x418>)
 8005384:	4630      	mov	r0, r6
 8005386:	f000 f997 	bl	80056b8 <siprintf>
 800538a:	e7cf      	b.n	800532c <_scanf_float+0x378>
 800538c:	f011 0f04 	tst.w	r1, #4
 8005390:	9903      	ldr	r1, [sp, #12]
 8005392:	600a      	str	r2, [r1, #0]
 8005394:	d1db      	bne.n	800534e <_scanf_float+0x39a>
 8005396:	f8d3 8000 	ldr.w	r8, [r3]
 800539a:	ee10 2a10 	vmov	r2, s0
 800539e:	ee10 0a10 	vmov	r0, s0
 80053a2:	463b      	mov	r3, r7
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fb fbc1 	bl	8000b2c <__aeabi_dcmpun>
 80053aa:	b128      	cbz	r0, 80053b8 <_scanf_float+0x404>
 80053ac:	4808      	ldr	r0, [pc, #32]	; (80053d0 <_scanf_float+0x41c>)
 80053ae:	f000 f97d 	bl	80056ac <nanf>
 80053b2:	ed88 0a00 	vstr	s0, [r8]
 80053b6:	e7cd      	b.n	8005354 <_scanf_float+0x3a0>
 80053b8:	4630      	mov	r0, r6
 80053ba:	4639      	mov	r1, r7
 80053bc:	f7fb fc14 	bl	8000be8 <__aeabi_d2f>
 80053c0:	f8c8 0000 	str.w	r0, [r8]
 80053c4:	e7c6      	b.n	8005354 <_scanf_float+0x3a0>
 80053c6:	2500      	movs	r5, #0
 80053c8:	e635      	b.n	8005036 <_scanf_float+0x82>
 80053ca:	bf00      	nop
 80053cc:	08009dc6 	.word	0x08009dc6
 80053d0:	0800a25b 	.word	0x0800a25b

080053d4 <iprintf>:
 80053d4:	b40f      	push	{r0, r1, r2, r3}
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <iprintf+0x2c>)
 80053d8:	b513      	push	{r0, r1, r4, lr}
 80053da:	681c      	ldr	r4, [r3, #0]
 80053dc:	b124      	cbz	r4, 80053e8 <iprintf+0x14>
 80053de:	69a3      	ldr	r3, [r4, #24]
 80053e0:	b913      	cbnz	r3, 80053e8 <iprintf+0x14>
 80053e2:	4620      	mov	r0, r4
 80053e4:	f002 f8a0 	bl	8007528 <__sinit>
 80053e8:	ab05      	add	r3, sp, #20
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	68a1      	ldr	r1, [r4, #8]
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	4620      	mov	r0, r4
 80053f2:	f003 fc51 	bl	8008c98 <_vfiprintf_r>
 80053f6:	b002      	add	sp, #8
 80053f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fc:	b004      	add	sp, #16
 80053fe:	4770      	bx	lr
 8005400:	2000000c 	.word	0x2000000c

08005404 <_puts_r>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	460e      	mov	r6, r1
 8005408:	4605      	mov	r5, r0
 800540a:	b118      	cbz	r0, 8005414 <_puts_r+0x10>
 800540c:	6983      	ldr	r3, [r0, #24]
 800540e:	b90b      	cbnz	r3, 8005414 <_puts_r+0x10>
 8005410:	f002 f88a 	bl	8007528 <__sinit>
 8005414:	69ab      	ldr	r3, [r5, #24]
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	b913      	cbnz	r3, 8005420 <_puts_r+0x1c>
 800541a:	4628      	mov	r0, r5
 800541c:	f002 f884 	bl	8007528 <__sinit>
 8005420:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <_puts_r+0xd0>)
 8005422:	429c      	cmp	r4, r3
 8005424:	d120      	bne.n	8005468 <_puts_r+0x64>
 8005426:	686c      	ldr	r4, [r5, #4]
 8005428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800542a:	07db      	lsls	r3, r3, #31
 800542c:	d405      	bmi.n	800543a <_puts_r+0x36>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	0598      	lsls	r0, r3, #22
 8005432:	d402      	bmi.n	800543a <_puts_r+0x36>
 8005434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005436:	f002 fca6 	bl	8007d86 <__retarget_lock_acquire_recursive>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	0719      	lsls	r1, r3, #28
 800543e:	d51d      	bpl.n	800547c <_puts_r+0x78>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	b1db      	cbz	r3, 800547c <_puts_r+0x78>
 8005444:	3e01      	subs	r6, #1
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800544c:	3b01      	subs	r3, #1
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	bb39      	cbnz	r1, 80054a2 <_puts_r+0x9e>
 8005452:	2b00      	cmp	r3, #0
 8005454:	da38      	bge.n	80054c8 <_puts_r+0xc4>
 8005456:	4622      	mov	r2, r4
 8005458:	210a      	movs	r1, #10
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fffe 	bl	800645c <__swbuf_r>
 8005460:	3001      	adds	r0, #1
 8005462:	d011      	beq.n	8005488 <_puts_r+0x84>
 8005464:	250a      	movs	r5, #10
 8005466:	e011      	b.n	800548c <_puts_r+0x88>
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <_puts_r+0xd4>)
 800546a:	429c      	cmp	r4, r3
 800546c:	d101      	bne.n	8005472 <_puts_r+0x6e>
 800546e:	68ac      	ldr	r4, [r5, #8]
 8005470:	e7da      	b.n	8005428 <_puts_r+0x24>
 8005472:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <_puts_r+0xd8>)
 8005474:	429c      	cmp	r4, r3
 8005476:	bf08      	it	eq
 8005478:	68ec      	ldreq	r4, [r5, #12]
 800547a:	e7d5      	b.n	8005428 <_puts_r+0x24>
 800547c:	4621      	mov	r1, r4
 800547e:	4628      	mov	r0, r5
 8005480:	f001 f83e 	bl	8006500 <__swsetup_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	d0dd      	beq.n	8005444 <_puts_r+0x40>
 8005488:	f04f 35ff 	mov.w	r5, #4294967295
 800548c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800548e:	07da      	lsls	r2, r3, #31
 8005490:	d405      	bmi.n	800549e <_puts_r+0x9a>
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	059b      	lsls	r3, r3, #22
 8005496:	d402      	bmi.n	800549e <_puts_r+0x9a>
 8005498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549a:	f002 fc75 	bl	8007d88 <__retarget_lock_release_recursive>
 800549e:	4628      	mov	r0, r5
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	da04      	bge.n	80054b0 <_puts_r+0xac>
 80054a6:	69a2      	ldr	r2, [r4, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	dc06      	bgt.n	80054ba <_puts_r+0xb6>
 80054ac:	290a      	cmp	r1, #10
 80054ae:	d004      	beq.n	80054ba <_puts_r+0xb6>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	7019      	strb	r1, [r3, #0]
 80054b8:	e7c5      	b.n	8005446 <_puts_r+0x42>
 80054ba:	4622      	mov	r2, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 ffcd 	bl	800645c <__swbuf_r>
 80054c2:	3001      	adds	r0, #1
 80054c4:	d1bf      	bne.n	8005446 <_puts_r+0x42>
 80054c6:	e7df      	b.n	8005488 <_puts_r+0x84>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	250a      	movs	r5, #10
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	6022      	str	r2, [r4, #0]
 80054d0:	701d      	strb	r5, [r3, #0]
 80054d2:	e7db      	b.n	800548c <_puts_r+0x88>
 80054d4:	08009fd8 	.word	0x08009fd8
 80054d8:	08009ff8 	.word	0x08009ff8
 80054dc:	08009fb8 	.word	0x08009fb8

080054e0 <puts>:
 80054e0:	4b02      	ldr	r3, [pc, #8]	; (80054ec <puts+0xc>)
 80054e2:	4601      	mov	r1, r0
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f7ff bf8d 	b.w	8005404 <_puts_r>
 80054ea:	bf00      	nop
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <iscanf>:
 80054f0:	b40f      	push	{r0, r1, r2, r3}
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <iscanf+0x2c>)
 80054f4:	b513      	push	{r0, r1, r4, lr}
 80054f6:	681c      	ldr	r4, [r3, #0]
 80054f8:	b124      	cbz	r4, 8005504 <iscanf+0x14>
 80054fa:	69a3      	ldr	r3, [r4, #24]
 80054fc:	b913      	cbnz	r3, 8005504 <iscanf+0x14>
 80054fe:	4620      	mov	r0, r4
 8005500:	f002 f812 	bl	8007528 <__sinit>
 8005504:	ab05      	add	r3, sp, #20
 8005506:	9a04      	ldr	r2, [sp, #16]
 8005508:	6861      	ldr	r1, [r4, #4]
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	4620      	mov	r0, r4
 800550e:	f003 fe97 	bl	8009240 <_vfiscanf_r>
 8005512:	b002      	add	sp, #8
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005518:	b004      	add	sp, #16
 800551a:	4770      	bx	lr
 800551c:	2000000c 	.word	0x2000000c

08005520 <setvbuf>:
 8005520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005524:	461d      	mov	r5, r3
 8005526:	4b5d      	ldr	r3, [pc, #372]	; (800569c <setvbuf+0x17c>)
 8005528:	681f      	ldr	r7, [r3, #0]
 800552a:	4604      	mov	r4, r0
 800552c:	460e      	mov	r6, r1
 800552e:	4690      	mov	r8, r2
 8005530:	b127      	cbz	r7, 800553c <setvbuf+0x1c>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	b913      	cbnz	r3, 800553c <setvbuf+0x1c>
 8005536:	4638      	mov	r0, r7
 8005538:	f001 fff6 	bl	8007528 <__sinit>
 800553c:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <setvbuf+0x180>)
 800553e:	429c      	cmp	r4, r3
 8005540:	d167      	bne.n	8005612 <setvbuf+0xf2>
 8005542:	687c      	ldr	r4, [r7, #4]
 8005544:	f1b8 0f02 	cmp.w	r8, #2
 8005548:	d006      	beq.n	8005558 <setvbuf+0x38>
 800554a:	f1b8 0f01 	cmp.w	r8, #1
 800554e:	f200 809f 	bhi.w	8005690 <setvbuf+0x170>
 8005552:	2d00      	cmp	r5, #0
 8005554:	f2c0 809c 	blt.w	8005690 <setvbuf+0x170>
 8005558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800555a:	07db      	lsls	r3, r3, #31
 800555c:	d405      	bmi.n	800556a <setvbuf+0x4a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	0598      	lsls	r0, r3, #22
 8005562:	d402      	bmi.n	800556a <setvbuf+0x4a>
 8005564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005566:	f002 fc0e 	bl	8007d86 <__retarget_lock_acquire_recursive>
 800556a:	4621      	mov	r1, r4
 800556c:	4638      	mov	r0, r7
 800556e:	f001 ff35 	bl	80073dc <_fflush_r>
 8005572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005574:	b141      	cbz	r1, 8005588 <setvbuf+0x68>
 8005576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800557a:	4299      	cmp	r1, r3
 800557c:	d002      	beq.n	8005584 <setvbuf+0x64>
 800557e:	4638      	mov	r0, r7
 8005580:	f003 f95a 	bl	8008838 <_free_r>
 8005584:	2300      	movs	r3, #0
 8005586:	6363      	str	r3, [r4, #52]	; 0x34
 8005588:	2300      	movs	r3, #0
 800558a:	61a3      	str	r3, [r4, #24]
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	0619      	lsls	r1, r3, #24
 8005592:	d503      	bpl.n	800559c <setvbuf+0x7c>
 8005594:	6921      	ldr	r1, [r4, #16]
 8005596:	4638      	mov	r0, r7
 8005598:	f003 f94e 	bl	8008838 <_free_r>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	f1b8 0f02 	cmp.w	r8, #2
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	d06c      	beq.n	8005688 <setvbuf+0x168>
 80055ae:	ab01      	add	r3, sp, #4
 80055b0:	466a      	mov	r2, sp
 80055b2:	4621      	mov	r1, r4
 80055b4:	4638      	mov	r0, r7
 80055b6:	f002 fbe8 	bl	8007d8a <__swhatbuf_r>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	4318      	orrs	r0, r3
 80055be:	81a0      	strh	r0, [r4, #12]
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	d130      	bne.n	8005626 <setvbuf+0x106>
 80055c4:	9d00      	ldr	r5, [sp, #0]
 80055c6:	4628      	mov	r0, r5
 80055c8:	f002 fc44 	bl	8007e54 <malloc>
 80055cc:	4606      	mov	r6, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d155      	bne.n	800567e <setvbuf+0x15e>
 80055d2:	f8dd 9000 	ldr.w	r9, [sp]
 80055d6:	45a9      	cmp	r9, r5
 80055d8:	d14a      	bne.n	8005670 <setvbuf+0x150>
 80055da:	f04f 35ff 	mov.w	r5, #4294967295
 80055de:	2200      	movs	r2, #0
 80055e0:	60a2      	str	r2, [r4, #8]
 80055e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	6122      	str	r2, [r4, #16]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f0:	6162      	str	r2, [r4, #20]
 80055f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	07d2      	lsls	r2, r2, #31
 80055fa:	81a3      	strh	r3, [r4, #12]
 80055fc:	d405      	bmi.n	800560a <setvbuf+0xea>
 80055fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005602:	d102      	bne.n	800560a <setvbuf+0xea>
 8005604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005606:	f002 fbbf 	bl	8007d88 <__retarget_lock_release_recursive>
 800560a:	4628      	mov	r0, r5
 800560c:	b003      	add	sp, #12
 800560e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <setvbuf+0x184>)
 8005614:	429c      	cmp	r4, r3
 8005616:	d101      	bne.n	800561c <setvbuf+0xfc>
 8005618:	68bc      	ldr	r4, [r7, #8]
 800561a:	e793      	b.n	8005544 <setvbuf+0x24>
 800561c:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <setvbuf+0x188>)
 800561e:	429c      	cmp	r4, r3
 8005620:	bf08      	it	eq
 8005622:	68fc      	ldreq	r4, [r7, #12]
 8005624:	e78e      	b.n	8005544 <setvbuf+0x24>
 8005626:	2e00      	cmp	r6, #0
 8005628:	d0cd      	beq.n	80055c6 <setvbuf+0xa6>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	b913      	cbnz	r3, 8005634 <setvbuf+0x114>
 800562e:	4638      	mov	r0, r7
 8005630:	f001 ff7a 	bl	8007528 <__sinit>
 8005634:	f1b8 0f01 	cmp.w	r8, #1
 8005638:	bf08      	it	eq
 800563a:	89a3      	ldrheq	r3, [r4, #12]
 800563c:	6026      	str	r6, [r4, #0]
 800563e:	bf04      	itt	eq
 8005640:	f043 0301 	orreq.w	r3, r3, #1
 8005644:	81a3      	strheq	r3, [r4, #12]
 8005646:	89a2      	ldrh	r2, [r4, #12]
 8005648:	f012 0308 	ands.w	r3, r2, #8
 800564c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005650:	d01c      	beq.n	800568c <setvbuf+0x16c>
 8005652:	07d3      	lsls	r3, r2, #31
 8005654:	bf41      	itttt	mi
 8005656:	2300      	movmi	r3, #0
 8005658:	426d      	negmi	r5, r5
 800565a:	60a3      	strmi	r3, [r4, #8]
 800565c:	61a5      	strmi	r5, [r4, #24]
 800565e:	bf58      	it	pl
 8005660:	60a5      	strpl	r5, [r4, #8]
 8005662:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005664:	f015 0501 	ands.w	r5, r5, #1
 8005668:	d115      	bne.n	8005696 <setvbuf+0x176>
 800566a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800566e:	e7c8      	b.n	8005602 <setvbuf+0xe2>
 8005670:	4648      	mov	r0, r9
 8005672:	f002 fbef 	bl	8007e54 <malloc>
 8005676:	4606      	mov	r6, r0
 8005678:	2800      	cmp	r0, #0
 800567a:	d0ae      	beq.n	80055da <setvbuf+0xba>
 800567c:	464d      	mov	r5, r9
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	e7d0      	b.n	800562a <setvbuf+0x10a>
 8005688:	2500      	movs	r5, #0
 800568a:	e7a8      	b.n	80055de <setvbuf+0xbe>
 800568c:	60a3      	str	r3, [r4, #8]
 800568e:	e7e8      	b.n	8005662 <setvbuf+0x142>
 8005690:	f04f 35ff 	mov.w	r5, #4294967295
 8005694:	e7b9      	b.n	800560a <setvbuf+0xea>
 8005696:	2500      	movs	r5, #0
 8005698:	e7b7      	b.n	800560a <setvbuf+0xea>
 800569a:	bf00      	nop
 800569c:	2000000c 	.word	0x2000000c
 80056a0:	08009fd8 	.word	0x08009fd8
 80056a4:	08009ff8 	.word	0x08009ff8
 80056a8:	08009fb8 	.word	0x08009fb8

080056ac <nanf>:
 80056ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80056b4 <nanf+0x8>
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	7fc00000 	.word	0x7fc00000

080056b8 <siprintf>:
 80056b8:	b40e      	push	{r1, r2, r3}
 80056ba:	b500      	push	{lr}
 80056bc:	b09c      	sub	sp, #112	; 0x70
 80056be:	ab1d      	add	r3, sp, #116	; 0x74
 80056c0:	9002      	str	r0, [sp, #8]
 80056c2:	9006      	str	r0, [sp, #24]
 80056c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056c8:	4809      	ldr	r0, [pc, #36]	; (80056f0 <siprintf+0x38>)
 80056ca:	9107      	str	r1, [sp, #28]
 80056cc:	9104      	str	r1, [sp, #16]
 80056ce:	4909      	ldr	r1, [pc, #36]	; (80056f4 <siprintf+0x3c>)
 80056d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d4:	9105      	str	r1, [sp, #20]
 80056d6:	6800      	ldr	r0, [r0, #0]
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	a902      	add	r1, sp, #8
 80056dc:	f003 f9b2 	bl	8008a44 <_svfiprintf_r>
 80056e0:	9b02      	ldr	r3, [sp, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	b01c      	add	sp, #112	; 0x70
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b003      	add	sp, #12
 80056ee:	4770      	bx	lr
 80056f0:	2000000c 	.word	0x2000000c
 80056f4:	ffff0208 	.word	0xffff0208

080056f8 <sulp>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4604      	mov	r4, r0
 80056fc:	460d      	mov	r5, r1
 80056fe:	ec45 4b10 	vmov	d0, r4, r5
 8005702:	4616      	mov	r6, r2
 8005704:	f002 ff3a 	bl	800857c <__ulp>
 8005708:	ec51 0b10 	vmov	r0, r1, d0
 800570c:	b17e      	cbz	r6, 800572e <sulp+0x36>
 800570e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005716:	2b00      	cmp	r3, #0
 8005718:	dd09      	ble.n	800572e <sulp+0x36>
 800571a:	051b      	lsls	r3, r3, #20
 800571c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005720:	2400      	movs	r4, #0
 8005722:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	f7fa ff65 	bl	80005f8 <__aeabi_dmul>
 800572e:	bd70      	pop	{r4, r5, r6, pc}

08005730 <_strtod_l>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	b0a3      	sub	sp, #140	; 0x8c
 8005736:	461f      	mov	r7, r3
 8005738:	2300      	movs	r3, #0
 800573a:	931e      	str	r3, [sp, #120]	; 0x78
 800573c:	4ba4      	ldr	r3, [pc, #656]	; (80059d0 <_strtod_l+0x2a0>)
 800573e:	9219      	str	r2, [sp, #100]	; 0x64
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	4604      	mov	r4, r0
 8005746:	4618      	mov	r0, r3
 8005748:	4688      	mov	r8, r1
 800574a:	f7fa fd41 	bl	80001d0 <strlen>
 800574e:	f04f 0a00 	mov.w	sl, #0
 8005752:	4605      	mov	r5, r0
 8005754:	f04f 0b00 	mov.w	fp, #0
 8005758:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800575c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	2a2b      	cmp	r2, #43	; 0x2b
 8005762:	d04c      	beq.n	80057fe <_strtod_l+0xce>
 8005764:	d839      	bhi.n	80057da <_strtod_l+0xaa>
 8005766:	2a0d      	cmp	r2, #13
 8005768:	d832      	bhi.n	80057d0 <_strtod_l+0xa0>
 800576a:	2a08      	cmp	r2, #8
 800576c:	d832      	bhi.n	80057d4 <_strtod_l+0xa4>
 800576e:	2a00      	cmp	r2, #0
 8005770:	d03c      	beq.n	80057ec <_strtod_l+0xbc>
 8005772:	2300      	movs	r3, #0
 8005774:	930e      	str	r3, [sp, #56]	; 0x38
 8005776:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005778:	7833      	ldrb	r3, [r6, #0]
 800577a:	2b30      	cmp	r3, #48	; 0x30
 800577c:	f040 80b4 	bne.w	80058e8 <_strtod_l+0x1b8>
 8005780:	7873      	ldrb	r3, [r6, #1]
 8005782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005786:	2b58      	cmp	r3, #88	; 0x58
 8005788:	d16c      	bne.n	8005864 <_strtod_l+0x134>
 800578a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	ab1e      	add	r3, sp, #120	; 0x78
 8005790:	9702      	str	r7, [sp, #8]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4a8f      	ldr	r2, [pc, #572]	; (80059d4 <_strtod_l+0x2a4>)
 8005796:	ab1f      	add	r3, sp, #124	; 0x7c
 8005798:	a91d      	add	r1, sp, #116	; 0x74
 800579a:	4620      	mov	r0, r4
 800579c:	f001 ffe6 	bl	800776c <__gethex>
 80057a0:	f010 0707 	ands.w	r7, r0, #7
 80057a4:	4605      	mov	r5, r0
 80057a6:	d005      	beq.n	80057b4 <_strtod_l+0x84>
 80057a8:	2f06      	cmp	r7, #6
 80057aa:	d12a      	bne.n	8005802 <_strtod_l+0xd2>
 80057ac:	3601      	adds	r6, #1
 80057ae:	2300      	movs	r3, #0
 80057b0:	961d      	str	r6, [sp, #116]	; 0x74
 80057b2:	930e      	str	r3, [sp, #56]	; 0x38
 80057b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 8596 	bne.w	80062e8 <_strtod_l+0xbb8>
 80057bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057be:	b1db      	cbz	r3, 80057f8 <_strtod_l+0xc8>
 80057c0:	4652      	mov	r2, sl
 80057c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057c6:	ec43 2b10 	vmov	d0, r2, r3
 80057ca:	b023      	add	sp, #140	; 0x8c
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	2a20      	cmp	r2, #32
 80057d2:	d1ce      	bne.n	8005772 <_strtod_l+0x42>
 80057d4:	3301      	adds	r3, #1
 80057d6:	931d      	str	r3, [sp, #116]	; 0x74
 80057d8:	e7c0      	b.n	800575c <_strtod_l+0x2c>
 80057da:	2a2d      	cmp	r2, #45	; 0x2d
 80057dc:	d1c9      	bne.n	8005772 <_strtod_l+0x42>
 80057de:	2201      	movs	r2, #1
 80057e0:	920e      	str	r2, [sp, #56]	; 0x38
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	921d      	str	r2, [sp, #116]	; 0x74
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1c4      	bne.n	8005776 <_strtod_l+0x46>
 80057ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 8576 	bne.w	80062e4 <_strtod_l+0xbb4>
 80057f8:	4652      	mov	r2, sl
 80057fa:	465b      	mov	r3, fp
 80057fc:	e7e3      	b.n	80057c6 <_strtod_l+0x96>
 80057fe:	2200      	movs	r2, #0
 8005800:	e7ee      	b.n	80057e0 <_strtod_l+0xb0>
 8005802:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005804:	b13a      	cbz	r2, 8005816 <_strtod_l+0xe6>
 8005806:	2135      	movs	r1, #53	; 0x35
 8005808:	a820      	add	r0, sp, #128	; 0x80
 800580a:	f002 ffc2 	bl	8008792 <__copybits>
 800580e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005810:	4620      	mov	r0, r4
 8005812:	f002 fb87 	bl	8007f24 <_Bfree>
 8005816:	3f01      	subs	r7, #1
 8005818:	2f05      	cmp	r7, #5
 800581a:	d807      	bhi.n	800582c <_strtod_l+0xfc>
 800581c:	e8df f007 	tbb	[pc, r7]
 8005820:	1d180b0e 	.word	0x1d180b0e
 8005824:	030e      	.short	0x030e
 8005826:	f04f 0b00 	mov.w	fp, #0
 800582a:	46da      	mov	sl, fp
 800582c:	0728      	lsls	r0, r5, #28
 800582e:	d5c1      	bpl.n	80057b4 <_strtod_l+0x84>
 8005830:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005834:	e7be      	b.n	80057b4 <_strtod_l+0x84>
 8005836:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800583a:	e7f7      	b.n	800582c <_strtod_l+0xfc>
 800583c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005840:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800584a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800584e:	e7ed      	b.n	800582c <_strtod_l+0xfc>
 8005850:	f8df b184 	ldr.w	fp, [pc, #388]	; 80059d8 <_strtod_l+0x2a8>
 8005854:	f04f 0a00 	mov.w	sl, #0
 8005858:	e7e8      	b.n	800582c <_strtod_l+0xfc>
 800585a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800585e:	f04f 3aff 	mov.w	sl, #4294967295
 8005862:	e7e3      	b.n	800582c <_strtod_l+0xfc>
 8005864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	921d      	str	r2, [sp, #116]	; 0x74
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d0f9      	beq.n	8005864 <_strtod_l+0x134>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d09f      	beq.n	80057b4 <_strtod_l+0x84>
 8005874:	2301      	movs	r3, #1
 8005876:	f04f 0900 	mov.w	r9, #0
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800587e:	930a      	str	r3, [sp, #40]	; 0x28
 8005880:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005884:	464f      	mov	r7, r9
 8005886:	220a      	movs	r2, #10
 8005888:	981d      	ldr	r0, [sp, #116]	; 0x74
 800588a:	7806      	ldrb	r6, [r0, #0]
 800588c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005890:	b2d9      	uxtb	r1, r3
 8005892:	2909      	cmp	r1, #9
 8005894:	d92a      	bls.n	80058ec <_strtod_l+0x1bc>
 8005896:	9907      	ldr	r1, [sp, #28]
 8005898:	462a      	mov	r2, r5
 800589a:	f003 ff6e 	bl	800977a <strncmp>
 800589e:	b398      	cbz	r0, 8005908 <_strtod_l+0x1d8>
 80058a0:	2000      	movs	r0, #0
 80058a2:	4633      	mov	r3, r6
 80058a4:	463d      	mov	r5, r7
 80058a6:	9007      	str	r0, [sp, #28]
 80058a8:	4602      	mov	r2, r0
 80058aa:	2b65      	cmp	r3, #101	; 0x65
 80058ac:	d001      	beq.n	80058b2 <_strtod_l+0x182>
 80058ae:	2b45      	cmp	r3, #69	; 0x45
 80058b0:	d118      	bne.n	80058e4 <_strtod_l+0x1b4>
 80058b2:	b91d      	cbnz	r5, 80058bc <_strtod_l+0x18c>
 80058b4:	9b04      	ldr	r3, [sp, #16]
 80058b6:	4303      	orrs	r3, r0
 80058b8:	d098      	beq.n	80057ec <_strtod_l+0xbc>
 80058ba:	2500      	movs	r5, #0
 80058bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80058c0:	f108 0301 	add.w	r3, r8, #1
 80058c4:	931d      	str	r3, [sp, #116]	; 0x74
 80058c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80058ca:	2b2b      	cmp	r3, #43	; 0x2b
 80058cc:	d075      	beq.n	80059ba <_strtod_l+0x28a>
 80058ce:	2b2d      	cmp	r3, #45	; 0x2d
 80058d0:	d07b      	beq.n	80059ca <_strtod_l+0x29a>
 80058d2:	f04f 0c00 	mov.w	ip, #0
 80058d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80058da:	2909      	cmp	r1, #9
 80058dc:	f240 8082 	bls.w	80059e4 <_strtod_l+0x2b4>
 80058e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80058e4:	2600      	movs	r6, #0
 80058e6:	e09d      	b.n	8005a24 <_strtod_l+0x2f4>
 80058e8:	2300      	movs	r3, #0
 80058ea:	e7c4      	b.n	8005876 <_strtod_l+0x146>
 80058ec:	2f08      	cmp	r7, #8
 80058ee:	bfd8      	it	le
 80058f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80058f2:	f100 0001 	add.w	r0, r0, #1
 80058f6:	bfda      	itte	le
 80058f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80058fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80058fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005902:	3701      	adds	r7, #1
 8005904:	901d      	str	r0, [sp, #116]	; 0x74
 8005906:	e7bf      	b.n	8005888 <_strtod_l+0x158>
 8005908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800590a:	195a      	adds	r2, r3, r5
 800590c:	921d      	str	r2, [sp, #116]	; 0x74
 800590e:	5d5b      	ldrb	r3, [r3, r5]
 8005910:	2f00      	cmp	r7, #0
 8005912:	d037      	beq.n	8005984 <_strtod_l+0x254>
 8005914:	9007      	str	r0, [sp, #28]
 8005916:	463d      	mov	r5, r7
 8005918:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800591c:	2a09      	cmp	r2, #9
 800591e:	d912      	bls.n	8005946 <_strtod_l+0x216>
 8005920:	2201      	movs	r2, #1
 8005922:	e7c2      	b.n	80058aa <_strtod_l+0x17a>
 8005924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	921d      	str	r2, [sp, #116]	; 0x74
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	3001      	adds	r0, #1
 800592e:	2b30      	cmp	r3, #48	; 0x30
 8005930:	d0f8      	beq.n	8005924 <_strtod_l+0x1f4>
 8005932:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005936:	2a08      	cmp	r2, #8
 8005938:	f200 84db 	bhi.w	80062f2 <_strtod_l+0xbc2>
 800593c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800593e:	9007      	str	r0, [sp, #28]
 8005940:	2000      	movs	r0, #0
 8005942:	920a      	str	r2, [sp, #40]	; 0x28
 8005944:	4605      	mov	r5, r0
 8005946:	3b30      	subs	r3, #48	; 0x30
 8005948:	f100 0201 	add.w	r2, r0, #1
 800594c:	d014      	beq.n	8005978 <_strtod_l+0x248>
 800594e:	9907      	ldr	r1, [sp, #28]
 8005950:	4411      	add	r1, r2
 8005952:	9107      	str	r1, [sp, #28]
 8005954:	462a      	mov	r2, r5
 8005956:	eb00 0e05 	add.w	lr, r0, r5
 800595a:	210a      	movs	r1, #10
 800595c:	4572      	cmp	r2, lr
 800595e:	d113      	bne.n	8005988 <_strtod_l+0x258>
 8005960:	182a      	adds	r2, r5, r0
 8005962:	2a08      	cmp	r2, #8
 8005964:	f105 0501 	add.w	r5, r5, #1
 8005968:	4405      	add	r5, r0
 800596a:	dc1c      	bgt.n	80059a6 <_strtod_l+0x276>
 800596c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800596e:	220a      	movs	r2, #10
 8005970:	fb02 3301 	mla	r3, r2, r1, r3
 8005974:	9309      	str	r3, [sp, #36]	; 0x24
 8005976:	2200      	movs	r2, #0
 8005978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800597a:	1c59      	adds	r1, r3, #1
 800597c:	911d      	str	r1, [sp, #116]	; 0x74
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	4610      	mov	r0, r2
 8005982:	e7c9      	b.n	8005918 <_strtod_l+0x1e8>
 8005984:	4638      	mov	r0, r7
 8005986:	e7d2      	b.n	800592e <_strtod_l+0x1fe>
 8005988:	2a08      	cmp	r2, #8
 800598a:	dc04      	bgt.n	8005996 <_strtod_l+0x266>
 800598c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800598e:	434e      	muls	r6, r1
 8005990:	9609      	str	r6, [sp, #36]	; 0x24
 8005992:	3201      	adds	r2, #1
 8005994:	e7e2      	b.n	800595c <_strtod_l+0x22c>
 8005996:	f102 0c01 	add.w	ip, r2, #1
 800599a:	f1bc 0f10 	cmp.w	ip, #16
 800599e:	bfd8      	it	le
 80059a0:	fb01 f909 	mulle.w	r9, r1, r9
 80059a4:	e7f5      	b.n	8005992 <_strtod_l+0x262>
 80059a6:	2d10      	cmp	r5, #16
 80059a8:	bfdc      	itt	le
 80059aa:	220a      	movle	r2, #10
 80059ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80059b0:	e7e1      	b.n	8005976 <_strtod_l+0x246>
 80059b2:	2300      	movs	r3, #0
 80059b4:	9307      	str	r3, [sp, #28]
 80059b6:	2201      	movs	r2, #1
 80059b8:	e77c      	b.n	80058b4 <_strtod_l+0x184>
 80059ba:	f04f 0c00 	mov.w	ip, #0
 80059be:	f108 0302 	add.w	r3, r8, #2
 80059c2:	931d      	str	r3, [sp, #116]	; 0x74
 80059c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80059c8:	e785      	b.n	80058d6 <_strtod_l+0x1a6>
 80059ca:	f04f 0c01 	mov.w	ip, #1
 80059ce:	e7f6      	b.n	80059be <_strtod_l+0x28e>
 80059d0:	0800a084 	.word	0x0800a084
 80059d4:	08009dcc 	.word	0x08009dcc
 80059d8:	7ff00000 	.word	0x7ff00000
 80059dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	911d      	str	r1, [sp, #116]	; 0x74
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d0f9      	beq.n	80059dc <_strtod_l+0x2ac>
 80059e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80059ec:	2908      	cmp	r1, #8
 80059ee:	f63f af79 	bhi.w	80058e4 <_strtod_l+0x1b4>
 80059f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80059f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	911d      	str	r1, [sp, #116]	; 0x74
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005a06:	2e09      	cmp	r6, #9
 8005a08:	d937      	bls.n	8005a7a <_strtod_l+0x34a>
 8005a0a:	9e08      	ldr	r6, [sp, #32]
 8005a0c:	1b89      	subs	r1, r1, r6
 8005a0e:	2908      	cmp	r1, #8
 8005a10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005a14:	dc02      	bgt.n	8005a1c <_strtod_l+0x2ec>
 8005a16:	4576      	cmp	r6, lr
 8005a18:	bfa8      	it	ge
 8005a1a:	4676      	movge	r6, lr
 8005a1c:	f1bc 0f00 	cmp.w	ip, #0
 8005a20:	d000      	beq.n	8005a24 <_strtod_l+0x2f4>
 8005a22:	4276      	negs	r6, r6
 8005a24:	2d00      	cmp	r5, #0
 8005a26:	d14f      	bne.n	8005ac8 <_strtod_l+0x398>
 8005a28:	9904      	ldr	r1, [sp, #16]
 8005a2a:	4301      	orrs	r1, r0
 8005a2c:	f47f aec2 	bne.w	80057b4 <_strtod_l+0x84>
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	f47f aedb 	bne.w	80057ec <_strtod_l+0xbc>
 8005a36:	2b69      	cmp	r3, #105	; 0x69
 8005a38:	d027      	beq.n	8005a8a <_strtod_l+0x35a>
 8005a3a:	dc24      	bgt.n	8005a86 <_strtod_l+0x356>
 8005a3c:	2b49      	cmp	r3, #73	; 0x49
 8005a3e:	d024      	beq.n	8005a8a <_strtod_l+0x35a>
 8005a40:	2b4e      	cmp	r3, #78	; 0x4e
 8005a42:	f47f aed3 	bne.w	80057ec <_strtod_l+0xbc>
 8005a46:	499e      	ldr	r1, [pc, #632]	; (8005cc0 <_strtod_l+0x590>)
 8005a48:	a81d      	add	r0, sp, #116	; 0x74
 8005a4a:	f002 f8e7 	bl	8007c1c <__match>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f43f aecc 	beq.w	80057ec <_strtod_l+0xbc>
 8005a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b28      	cmp	r3, #40	; 0x28
 8005a5a:	d12d      	bne.n	8005ab8 <_strtod_l+0x388>
 8005a5c:	4999      	ldr	r1, [pc, #612]	; (8005cc4 <_strtod_l+0x594>)
 8005a5e:	aa20      	add	r2, sp, #128	; 0x80
 8005a60:	a81d      	add	r0, sp, #116	; 0x74
 8005a62:	f002 f8ef 	bl	8007c44 <__hexnan>
 8005a66:	2805      	cmp	r0, #5
 8005a68:	d126      	bne.n	8005ab8 <_strtod_l+0x388>
 8005a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005a70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005a74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005a78:	e69c      	b.n	80057b4 <_strtod_l+0x84>
 8005a7a:	210a      	movs	r1, #10
 8005a7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005a80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a84:	e7b9      	b.n	80059fa <_strtod_l+0x2ca>
 8005a86:	2b6e      	cmp	r3, #110	; 0x6e
 8005a88:	e7db      	b.n	8005a42 <_strtod_l+0x312>
 8005a8a:	498f      	ldr	r1, [pc, #572]	; (8005cc8 <_strtod_l+0x598>)
 8005a8c:	a81d      	add	r0, sp, #116	; 0x74
 8005a8e:	f002 f8c5 	bl	8007c1c <__match>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	f43f aeaa 	beq.w	80057ec <_strtod_l+0xbc>
 8005a98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a9a:	498c      	ldr	r1, [pc, #560]	; (8005ccc <_strtod_l+0x59c>)
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	a81d      	add	r0, sp, #116	; 0x74
 8005aa0:	931d      	str	r3, [sp, #116]	; 0x74
 8005aa2:	f002 f8bb 	bl	8007c1c <__match>
 8005aa6:	b910      	cbnz	r0, 8005aae <_strtod_l+0x37e>
 8005aa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aaa:	3301      	adds	r3, #1
 8005aac:	931d      	str	r3, [sp, #116]	; 0x74
 8005aae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005cdc <_strtod_l+0x5ac>
 8005ab2:	f04f 0a00 	mov.w	sl, #0
 8005ab6:	e67d      	b.n	80057b4 <_strtod_l+0x84>
 8005ab8:	4885      	ldr	r0, [pc, #532]	; (8005cd0 <_strtod_l+0x5a0>)
 8005aba:	f003 fdc9 	bl	8009650 <nan>
 8005abe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005ac2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005ac6:	e675      	b.n	80057b4 <_strtod_l+0x84>
 8005ac8:	9b07      	ldr	r3, [sp, #28]
 8005aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005acc:	1af3      	subs	r3, r6, r3
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	bf08      	it	eq
 8005ad2:	462f      	moveq	r7, r5
 8005ad4:	2d10      	cmp	r5, #16
 8005ad6:	9308      	str	r3, [sp, #32]
 8005ad8:	46a8      	mov	r8, r5
 8005ada:	bfa8      	it	ge
 8005adc:	f04f 0810 	movge.w	r8, #16
 8005ae0:	f7fa fd10 	bl	8000504 <__aeabi_ui2d>
 8005ae4:	2d09      	cmp	r5, #9
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	468b      	mov	fp, r1
 8005aea:	dd13      	ble.n	8005b14 <_strtod_l+0x3e4>
 8005aec:	4b79      	ldr	r3, [pc, #484]	; (8005cd4 <_strtod_l+0x5a4>)
 8005aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005af2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005af6:	f7fa fd7f 	bl	80005f8 <__aeabi_dmul>
 8005afa:	4682      	mov	sl, r0
 8005afc:	4648      	mov	r0, r9
 8005afe:	468b      	mov	fp, r1
 8005b00:	f7fa fd00 	bl	8000504 <__aeabi_ui2d>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4650      	mov	r0, sl
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	f7fa fbbe 	bl	800028c <__adddf3>
 8005b10:	4682      	mov	sl, r0
 8005b12:	468b      	mov	fp, r1
 8005b14:	2d0f      	cmp	r5, #15
 8005b16:	dc38      	bgt.n	8005b8a <_strtod_l+0x45a>
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f43f ae4a 	beq.w	80057b4 <_strtod_l+0x84>
 8005b20:	dd24      	ble.n	8005b6c <_strtod_l+0x43c>
 8005b22:	2b16      	cmp	r3, #22
 8005b24:	dc0b      	bgt.n	8005b3e <_strtod_l+0x40e>
 8005b26:	4d6b      	ldr	r5, [pc, #428]	; (8005cd4 <_strtod_l+0x5a4>)
 8005b28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005b2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005b30:	4652      	mov	r2, sl
 8005b32:	465b      	mov	r3, fp
 8005b34:	f7fa fd60 	bl	80005f8 <__aeabi_dmul>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	468b      	mov	fp, r1
 8005b3c:	e63a      	b.n	80057b4 <_strtod_l+0x84>
 8005b3e:	9a08      	ldr	r2, [sp, #32]
 8005b40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005b44:	4293      	cmp	r3, r2
 8005b46:	db20      	blt.n	8005b8a <_strtod_l+0x45a>
 8005b48:	4c62      	ldr	r4, [pc, #392]	; (8005cd4 <_strtod_l+0x5a4>)
 8005b4a:	f1c5 050f 	rsb	r5, r5, #15
 8005b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b52:	4652      	mov	r2, sl
 8005b54:	465b      	mov	r3, fp
 8005b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5a:	f7fa fd4d 	bl	80005f8 <__aeabi_dmul>
 8005b5e:	9b08      	ldr	r3, [sp, #32]
 8005b60:	1b5d      	subs	r5, r3, r5
 8005b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b6a:	e7e3      	b.n	8005b34 <_strtod_l+0x404>
 8005b6c:	9b08      	ldr	r3, [sp, #32]
 8005b6e:	3316      	adds	r3, #22
 8005b70:	db0b      	blt.n	8005b8a <_strtod_l+0x45a>
 8005b72:	9b07      	ldr	r3, [sp, #28]
 8005b74:	4a57      	ldr	r2, [pc, #348]	; (8005cd4 <_strtod_l+0x5a4>)
 8005b76:	1b9e      	subs	r6, r3, r6
 8005b78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b80:	4650      	mov	r0, sl
 8005b82:	4659      	mov	r1, fp
 8005b84:	f7fa fe62 	bl	800084c <__aeabi_ddiv>
 8005b88:	e7d6      	b.n	8005b38 <_strtod_l+0x408>
 8005b8a:	9b08      	ldr	r3, [sp, #32]
 8005b8c:	eba5 0808 	sub.w	r8, r5, r8
 8005b90:	4498      	add	r8, r3
 8005b92:	f1b8 0f00 	cmp.w	r8, #0
 8005b96:	dd71      	ble.n	8005c7c <_strtod_l+0x54c>
 8005b98:	f018 030f 	ands.w	r3, r8, #15
 8005b9c:	d00a      	beq.n	8005bb4 <_strtod_l+0x484>
 8005b9e:	494d      	ldr	r1, [pc, #308]	; (8005cd4 <_strtod_l+0x5a4>)
 8005ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bac:	f7fa fd24 	bl	80005f8 <__aeabi_dmul>
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	468b      	mov	fp, r1
 8005bb4:	f038 080f 	bics.w	r8, r8, #15
 8005bb8:	d04d      	beq.n	8005c56 <_strtod_l+0x526>
 8005bba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005bbe:	dd22      	ble.n	8005c06 <_strtod_l+0x4d6>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	462e      	mov	r6, r5
 8005bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8005bc6:	9507      	str	r5, [sp, #28]
 8005bc8:	2322      	movs	r3, #34	; 0x22
 8005bca:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005cdc <_strtod_l+0x5ac>
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	f04f 0a00 	mov.w	sl, #0
 8005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f43f adec 	beq.w	80057b4 <_strtod_l+0x84>
 8005bdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005bde:	4620      	mov	r0, r4
 8005be0:	f002 f9a0 	bl	8007f24 <_Bfree>
 8005be4:	9907      	ldr	r1, [sp, #28]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f002 f99c 	bl	8007f24 <_Bfree>
 8005bec:	4631      	mov	r1, r6
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f002 f998 	bl	8007f24 <_Bfree>
 8005bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f002 f994 	bl	8007f24 <_Bfree>
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f002 f990 	bl	8007f24 <_Bfree>
 8005c04:	e5d6      	b.n	80057b4 <_strtod_l+0x84>
 8005c06:	2300      	movs	r3, #0
 8005c08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	4659      	mov	r1, fp
 8005c10:	4699      	mov	r9, r3
 8005c12:	f1b8 0f01 	cmp.w	r8, #1
 8005c16:	dc21      	bgt.n	8005c5c <_strtod_l+0x52c>
 8005c18:	b10b      	cbz	r3, 8005c1e <_strtod_l+0x4ee>
 8005c1a:	4682      	mov	sl, r0
 8005c1c:	468b      	mov	fp, r1
 8005c1e:	4b2e      	ldr	r3, [pc, #184]	; (8005cd8 <_strtod_l+0x5a8>)
 8005c20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005c24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005c28:	4652      	mov	r2, sl
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005c30:	f7fa fce2 	bl	80005f8 <__aeabi_dmul>
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <_strtod_l+0x5ac>)
 8005c36:	460a      	mov	r2, r1
 8005c38:	400b      	ands	r3, r1
 8005c3a:	4929      	ldr	r1, [pc, #164]	; (8005ce0 <_strtod_l+0x5b0>)
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	4682      	mov	sl, r0
 8005c40:	d8be      	bhi.n	8005bc0 <_strtod_l+0x490>
 8005c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c46:	428b      	cmp	r3, r1
 8005c48:	bf86      	itte	hi
 8005c4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005ce4 <_strtod_l+0x5b4>
 8005c4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005c56:	2300      	movs	r3, #0
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	e081      	b.n	8005d60 <_strtod_l+0x630>
 8005c5c:	f018 0f01 	tst.w	r8, #1
 8005c60:	d007      	beq.n	8005c72 <_strtod_l+0x542>
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <_strtod_l+0x5a8>)
 8005c64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fcc4 	bl	80005f8 <__aeabi_dmul>
 8005c70:	2301      	movs	r3, #1
 8005c72:	f109 0901 	add.w	r9, r9, #1
 8005c76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c7a:	e7ca      	b.n	8005c12 <_strtod_l+0x4e2>
 8005c7c:	d0eb      	beq.n	8005c56 <_strtod_l+0x526>
 8005c7e:	f1c8 0800 	rsb	r8, r8, #0
 8005c82:	f018 020f 	ands.w	r2, r8, #15
 8005c86:	d00a      	beq.n	8005c9e <_strtod_l+0x56e>
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <_strtod_l+0x5a4>)
 8005c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c8e:	4650      	mov	r0, sl
 8005c90:	4659      	mov	r1, fp
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa fdd9 	bl	800084c <__aeabi_ddiv>
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	468b      	mov	fp, r1
 8005c9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ca2:	d0d8      	beq.n	8005c56 <_strtod_l+0x526>
 8005ca4:	f1b8 0f1f 	cmp.w	r8, #31
 8005ca8:	dd1e      	ble.n	8005ce8 <_strtod_l+0x5b8>
 8005caa:	2500      	movs	r5, #0
 8005cac:	462e      	mov	r6, r5
 8005cae:	9509      	str	r5, [sp, #36]	; 0x24
 8005cb0:	9507      	str	r5, [sp, #28]
 8005cb2:	2322      	movs	r3, #34	; 0x22
 8005cb4:	f04f 0a00 	mov.w	sl, #0
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	e789      	b.n	8005bd4 <_strtod_l+0x4a4>
 8005cc0:	08009da1 	.word	0x08009da1
 8005cc4:	08009de0 	.word	0x08009de0
 8005cc8:	08009d99 	.word	0x08009d99
 8005ccc:	08009f24 	.word	0x08009f24
 8005cd0:	0800a25b 	.word	0x0800a25b
 8005cd4:	0800a120 	.word	0x0800a120
 8005cd8:	0800a0f8 	.word	0x0800a0f8
 8005cdc:	7ff00000 	.word	0x7ff00000
 8005ce0:	7ca00000 	.word	0x7ca00000
 8005ce4:	7fefffff 	.word	0x7fefffff
 8005ce8:	f018 0310 	ands.w	r3, r8, #16
 8005cec:	bf18      	it	ne
 8005cee:	236a      	movne	r3, #106	; 0x6a
 8005cf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80060a8 <_strtod_l+0x978>
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f018 0f01 	tst.w	r8, #1
 8005d00:	d004      	beq.n	8005d0c <_strtod_l+0x5dc>
 8005d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d06:	f7fa fc77 	bl	80005f8 <__aeabi_dmul>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005d10:	f109 0908 	add.w	r9, r9, #8
 8005d14:	d1f2      	bne.n	8005cfc <_strtod_l+0x5cc>
 8005d16:	b10b      	cbz	r3, 8005d1c <_strtod_l+0x5ec>
 8005d18:	4682      	mov	sl, r0
 8005d1a:	468b      	mov	fp, r1
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	b1bb      	cbz	r3, 8005d50 <_strtod_l+0x620>
 8005d20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005d24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	dd10      	ble.n	8005d50 <_strtod_l+0x620>
 8005d2e:	2b1f      	cmp	r3, #31
 8005d30:	f340 8128 	ble.w	8005f84 <_strtod_l+0x854>
 8005d34:	2b34      	cmp	r3, #52	; 0x34
 8005d36:	bfde      	ittt	le
 8005d38:	3b20      	suble	r3, #32
 8005d3a:	f04f 32ff 	movle.w	r2, #4294967295
 8005d3e:	fa02 f303 	lslle.w	r3, r2, r3
 8005d42:	f04f 0a00 	mov.w	sl, #0
 8005d46:	bfcc      	ite	gt
 8005d48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005d4c:	ea03 0b01 	andle.w	fp, r3, r1
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4650      	mov	r0, sl
 8005d56:	4659      	mov	r1, fp
 8005d58:	f7fa feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1a4      	bne.n	8005caa <_strtod_l+0x57a>
 8005d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d66:	462b      	mov	r3, r5
 8005d68:	463a      	mov	r2, r7
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f002 f946 	bl	8007ffc <__s2b>
 8005d70:	9009      	str	r0, [sp, #36]	; 0x24
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f43f af24 	beq.w	8005bc0 <_strtod_l+0x490>
 8005d78:	9b07      	ldr	r3, [sp, #28]
 8005d7a:	1b9e      	subs	r6, r3, r6
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb4      	ite	lt
 8005d82:	4633      	movlt	r3, r6
 8005d84:	2300      	movge	r3, #0
 8005d86:	9310      	str	r3, [sp, #64]	; 0x40
 8005d88:	9b08      	ldr	r3, [sp, #32]
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d90:	9318      	str	r3, [sp, #96]	; 0x60
 8005d92:	462e      	mov	r6, r5
 8005d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d96:	4620      	mov	r0, r4
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	f002 f883 	bl	8007ea4 <_Balloc>
 8005d9e:	9007      	str	r0, [sp, #28]
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f43f af11 	beq.w	8005bc8 <_strtod_l+0x498>
 8005da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	3202      	adds	r2, #2
 8005dac:	f103 010c 	add.w	r1, r3, #12
 8005db0:	0092      	lsls	r2, r2, #2
 8005db2:	300c      	adds	r0, #12
 8005db4:	f002 f868 	bl	8007e88 <memcpy>
 8005db8:	ec4b ab10 	vmov	d0, sl, fp
 8005dbc:	aa20      	add	r2, sp, #128	; 0x80
 8005dbe:	a91f      	add	r1, sp, #124	; 0x7c
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005dc6:	f002 fc55 	bl	8008674 <__d2b>
 8005dca:	901e      	str	r0, [sp, #120]	; 0x78
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f43f aefb 	beq.w	8005bc8 <_strtod_l+0x498>
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f002 f9ab 	bl	8008130 <__i2b>
 8005dda:	4606      	mov	r6, r0
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f43f aef3 	beq.w	8005bc8 <_strtod_l+0x498>
 8005de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005de4:	9904      	ldr	r1, [sp, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfab      	itete	ge
 8005dea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005dec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005dee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005df0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005df4:	bfac      	ite	ge
 8005df6:	eb03 0902 	addge.w	r9, r3, r2
 8005dfa:	1ad7      	sublt	r7, r2, r3
 8005dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dfe:	eba3 0801 	sub.w	r8, r3, r1
 8005e02:	4490      	add	r8, r2
 8005e04:	4ba3      	ldr	r3, [pc, #652]	; (8006094 <_strtod_l+0x964>)
 8005e06:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e0a:	4598      	cmp	r8, r3
 8005e0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005e10:	f280 80cc 	bge.w	8005fac <_strtod_l+0x87c>
 8005e14:	eba3 0308 	sub.w	r3, r3, r8
 8005e18:	2b1f      	cmp	r3, #31
 8005e1a:	eba2 0203 	sub.w	r2, r2, r3
 8005e1e:	f04f 0101 	mov.w	r1, #1
 8005e22:	f300 80b6 	bgt.w	8005f92 <_strtod_l+0x862>
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005e30:	eb09 0802 	add.w	r8, r9, r2
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	45c1      	cmp	r9, r8
 8005e38:	4417      	add	r7, r2
 8005e3a:	441f      	add	r7, r3
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	bfa8      	it	ge
 8005e40:	4643      	movge	r3, r8
 8005e42:	42bb      	cmp	r3, r7
 8005e44:	bfa8      	it	ge
 8005e46:	463b      	movge	r3, r7
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bfc2      	ittt	gt
 8005e4c:	eba8 0803 	subgt.w	r8, r8, r3
 8005e50:	1aff      	subgt	r7, r7, r3
 8005e52:	eba9 0903 	subgt.w	r9, r9, r3
 8005e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd17      	ble.n	8005e8c <_strtod_l+0x75c>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4620      	mov	r0, r4
 8005e62:	f002 fa21 	bl	80082a8 <__pow5mult>
 8005e66:	4606      	mov	r6, r0
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f43f aead 	beq.w	8005bc8 <_strtod_l+0x498>
 8005e6e:	4601      	mov	r1, r0
 8005e70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e72:	4620      	mov	r0, r4
 8005e74:	f002 f972 	bl	800815c <__multiply>
 8005e78:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f43f aea4 	beq.w	8005bc8 <_strtod_l+0x498>
 8005e80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e82:	4620      	mov	r0, r4
 8005e84:	f002 f84e 	bl	8007f24 <_Bfree>
 8005e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8a:	931e      	str	r3, [sp, #120]	; 0x78
 8005e8c:	f1b8 0f00 	cmp.w	r8, #0
 8005e90:	f300 8091 	bgt.w	8005fb6 <_strtod_l+0x886>
 8005e94:	9b08      	ldr	r3, [sp, #32]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dd08      	ble.n	8005eac <_strtod_l+0x77c>
 8005e9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e9c:	9907      	ldr	r1, [sp, #28]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f002 fa02 	bl	80082a8 <__pow5mult>
 8005ea4:	9007      	str	r0, [sp, #28]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f43f ae8e 	beq.w	8005bc8 <_strtod_l+0x498>
 8005eac:	2f00      	cmp	r7, #0
 8005eae:	dd08      	ble.n	8005ec2 <_strtod_l+0x792>
 8005eb0:	9907      	ldr	r1, [sp, #28]
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f002 fa51 	bl	800835c <__lshift>
 8005eba:	9007      	str	r0, [sp, #28]
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f43f ae83 	beq.w	8005bc8 <_strtod_l+0x498>
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	dd08      	ble.n	8005eda <_strtod_l+0x7aa>
 8005ec8:	4631      	mov	r1, r6
 8005eca:	464a      	mov	r2, r9
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f002 fa45 	bl	800835c <__lshift>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f43f ae77 	beq.w	8005bc8 <_strtod_l+0x498>
 8005eda:	9a07      	ldr	r2, [sp, #28]
 8005edc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f002 fac4 	bl	800846c <__mdiff>
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f43f ae6e 	beq.w	8005bc8 <_strtod_l+0x498>
 8005eec:	68c3      	ldr	r3, [r0, #12]
 8005eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60c3      	str	r3, [r0, #12]
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	f002 fa9d 	bl	8008434 <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	da65      	bge.n	8005fca <_strtod_l+0x89a>
 8005efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f00:	ea53 030a 	orrs.w	r3, r3, sl
 8005f04:	f040 8087 	bne.w	8006016 <_strtod_l+0x8e6>
 8005f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8082 	bne.w	8006016 <_strtod_l+0x8e6>
 8005f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f16:	0d1b      	lsrs	r3, r3, #20
 8005f18:	051b      	lsls	r3, r3, #20
 8005f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005f1e:	d97a      	bls.n	8006016 <_strtod_l+0x8e6>
 8005f20:	696b      	ldr	r3, [r5, #20]
 8005f22:	b913      	cbnz	r3, 8005f2a <_strtod_l+0x7fa>
 8005f24:	692b      	ldr	r3, [r5, #16]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	dd75      	ble.n	8006016 <_strtod_l+0x8e6>
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f002 fa14 	bl	800835c <__lshift>
 8005f34:	4631      	mov	r1, r6
 8005f36:	4605      	mov	r5, r0
 8005f38:	f002 fa7c 	bl	8008434 <__mcmp>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	dd6a      	ble.n	8006016 <_strtod_l+0x8e6>
 8005f40:	9904      	ldr	r1, [sp, #16]
 8005f42:	4a55      	ldr	r2, [pc, #340]	; (8006098 <_strtod_l+0x968>)
 8005f44:	465b      	mov	r3, fp
 8005f46:	2900      	cmp	r1, #0
 8005f48:	f000 8085 	beq.w	8006056 <_strtod_l+0x926>
 8005f4c:	ea02 010b 	and.w	r1, r2, fp
 8005f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005f54:	dc7f      	bgt.n	8006056 <_strtod_l+0x926>
 8005f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005f5a:	f77f aeaa 	ble.w	8005cb2 <_strtod_l+0x582>
 8005f5e:	4a4f      	ldr	r2, [pc, #316]	; (800609c <_strtod_l+0x96c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005f66:	4650      	mov	r0, sl
 8005f68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	f7fa fb43 	bl	80005f8 <__aeabi_dmul>
 8005f72:	460b      	mov	r3, r1
 8005f74:	4303      	orrs	r3, r0
 8005f76:	bf08      	it	eq
 8005f78:	2322      	moveq	r3, #34	; 0x22
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	468b      	mov	fp, r1
 8005f7e:	bf08      	it	eq
 8005f80:	6023      	streq	r3, [r4, #0]
 8005f82:	e62b      	b.n	8005bdc <_strtod_l+0x4ac>
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8005f90:	e6de      	b.n	8005d50 <_strtod_l+0x620>
 8005f92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005f96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005f9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005f9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005fa2:	fa01 f308 	lsl.w	r3, r1, r8
 8005fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa8:	9111      	str	r1, [sp, #68]	; 0x44
 8005faa:	e741      	b.n	8005e30 <_strtod_l+0x700>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8005fb4:	e73c      	b.n	8005e30 <_strtod_l+0x700>
 8005fb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f002 f9ce 	bl	800835c <__lshift>
 8005fc0:	901e      	str	r0, [sp, #120]	; 0x78
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f47f af66 	bne.w	8005e94 <_strtod_l+0x764>
 8005fc8:	e5fe      	b.n	8005bc8 <_strtod_l+0x498>
 8005fca:	465f      	mov	r7, fp
 8005fcc:	d16e      	bne.n	80060ac <_strtod_l+0x97c>
 8005fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fd4:	b342      	cbz	r2, 8006028 <_strtod_l+0x8f8>
 8005fd6:	4a32      	ldr	r2, [pc, #200]	; (80060a0 <_strtod_l+0x970>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d128      	bne.n	800602e <_strtod_l+0x8fe>
 8005fdc:	9b04      	ldr	r3, [sp, #16]
 8005fde:	4650      	mov	r0, sl
 8005fe0:	b1eb      	cbz	r3, 800601e <_strtod_l+0x8ee>
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <_strtod_l+0x968>)
 8005fe4:	403a      	ands	r2, r7
 8005fe6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005fea:	f04f 31ff 	mov.w	r1, #4294967295
 8005fee:	d819      	bhi.n	8006024 <_strtod_l+0x8f4>
 8005ff0:	0d12      	lsrs	r2, r2, #20
 8005ff2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	d117      	bne.n	800602e <_strtod_l+0x8fe>
 8005ffe:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <_strtod_l+0x974>)
 8006000:	429f      	cmp	r7, r3
 8006002:	d102      	bne.n	800600a <_strtod_l+0x8da>
 8006004:	3001      	adds	r0, #1
 8006006:	f43f addf 	beq.w	8005bc8 <_strtod_l+0x498>
 800600a:	4b23      	ldr	r3, [pc, #140]	; (8006098 <_strtod_l+0x968>)
 800600c:	403b      	ands	r3, r7
 800600e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006012:	f04f 0a00 	mov.w	sl, #0
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1a0      	bne.n	8005f5e <_strtod_l+0x82e>
 800601c:	e5de      	b.n	8005bdc <_strtod_l+0x4ac>
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	e7ea      	b.n	8005ffa <_strtod_l+0x8ca>
 8006024:	460b      	mov	r3, r1
 8006026:	e7e8      	b.n	8005ffa <_strtod_l+0x8ca>
 8006028:	ea53 030a 	orrs.w	r3, r3, sl
 800602c:	d088      	beq.n	8005f40 <_strtod_l+0x810>
 800602e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006030:	b1db      	cbz	r3, 800606a <_strtod_l+0x93a>
 8006032:	423b      	tst	r3, r7
 8006034:	d0ef      	beq.n	8006016 <_strtod_l+0x8e6>
 8006036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006038:	9a04      	ldr	r2, [sp, #16]
 800603a:	4650      	mov	r0, sl
 800603c:	4659      	mov	r1, fp
 800603e:	b1c3      	cbz	r3, 8006072 <_strtod_l+0x942>
 8006040:	f7ff fb5a 	bl	80056f8 <sulp>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800604c:	f7fa f91e 	bl	800028c <__adddf3>
 8006050:	4682      	mov	sl, r0
 8006052:	468b      	mov	fp, r1
 8006054:	e7df      	b.n	8006016 <_strtod_l+0x8e6>
 8006056:	4013      	ands	r3, r2
 8006058:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800605c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006060:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006064:	f04f 3aff 	mov.w	sl, #4294967295
 8006068:	e7d5      	b.n	8006016 <_strtod_l+0x8e6>
 800606a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800606c:	ea13 0f0a 	tst.w	r3, sl
 8006070:	e7e0      	b.n	8006034 <_strtod_l+0x904>
 8006072:	f7ff fb41 	bl	80056f8 <sulp>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800607e:	f7fa f903 	bl	8000288 <__aeabi_dsub>
 8006082:	2200      	movs	r2, #0
 8006084:	2300      	movs	r3, #0
 8006086:	4682      	mov	sl, r0
 8006088:	468b      	mov	fp, r1
 800608a:	f7fa fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800608e:	2800      	cmp	r0, #0
 8006090:	d0c1      	beq.n	8006016 <_strtod_l+0x8e6>
 8006092:	e60e      	b.n	8005cb2 <_strtod_l+0x582>
 8006094:	fffffc02 	.word	0xfffffc02
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	39500000 	.word	0x39500000
 80060a0:	000fffff 	.word	0x000fffff
 80060a4:	7fefffff 	.word	0x7fefffff
 80060a8:	08009df8 	.word	0x08009df8
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	f002 fb3c 	bl	800872c <__ratio>
 80060b4:	ec59 8b10 	vmov	r8, r9, d0
 80060b8:	ee10 0a10 	vmov	r0, s0
 80060bc:	2200      	movs	r2, #0
 80060be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa fd14 	bl	8000af0 <__aeabi_dcmple>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d07c      	beq.n	80061c6 <_strtod_l+0xa96>
 80060cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d04c      	beq.n	800616c <_strtod_l+0xa3c>
 80060d2:	4b95      	ldr	r3, [pc, #596]	; (8006328 <_strtod_l+0xbf8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80060da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006328 <_strtod_l+0xbf8>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	4b92      	ldr	r3, [pc, #584]	; (800632c <_strtod_l+0xbfc>)
 80060e4:	403b      	ands	r3, r7
 80060e6:	9311      	str	r3, [sp, #68]	; 0x44
 80060e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060ea:	4b91      	ldr	r3, [pc, #580]	; (8006330 <_strtod_l+0xc00>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	f040 80b2 	bne.w	8006256 <_strtod_l+0xb26>
 80060f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80060fe:	ec4b ab10 	vmov	d0, sl, fp
 8006102:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006106:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800610a:	f002 fa37 	bl	800857c <__ulp>
 800610e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006112:	ec53 2b10 	vmov	r2, r3, d0
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	4652      	mov	r2, sl
 800611c:	465b      	mov	r3, fp
 800611e:	f7fa f8b5 	bl	800028c <__adddf3>
 8006122:	460b      	mov	r3, r1
 8006124:	4981      	ldr	r1, [pc, #516]	; (800632c <_strtod_l+0xbfc>)
 8006126:	4a83      	ldr	r2, [pc, #524]	; (8006334 <_strtod_l+0xc04>)
 8006128:	4019      	ands	r1, r3
 800612a:	4291      	cmp	r1, r2
 800612c:	4682      	mov	sl, r0
 800612e:	d95e      	bls.n	80061ee <_strtod_l+0xabe>
 8006130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006132:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006136:	4293      	cmp	r3, r2
 8006138:	d103      	bne.n	8006142 <_strtod_l+0xa12>
 800613a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613c:	3301      	adds	r3, #1
 800613e:	f43f ad43 	beq.w	8005bc8 <_strtod_l+0x498>
 8006142:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006340 <_strtod_l+0xc10>
 8006146:	f04f 3aff 	mov.w	sl, #4294967295
 800614a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800614c:	4620      	mov	r0, r4
 800614e:	f001 fee9 	bl	8007f24 <_Bfree>
 8006152:	9907      	ldr	r1, [sp, #28]
 8006154:	4620      	mov	r0, r4
 8006156:	f001 fee5 	bl	8007f24 <_Bfree>
 800615a:	4631      	mov	r1, r6
 800615c:	4620      	mov	r0, r4
 800615e:	f001 fee1 	bl	8007f24 <_Bfree>
 8006162:	4629      	mov	r1, r5
 8006164:	4620      	mov	r0, r4
 8006166:	f001 fedd 	bl	8007f24 <_Bfree>
 800616a:	e613      	b.n	8005d94 <_strtod_l+0x664>
 800616c:	f1ba 0f00 	cmp.w	sl, #0
 8006170:	d11b      	bne.n	80061aa <_strtod_l+0xa7a>
 8006172:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006176:	b9f3      	cbnz	r3, 80061b6 <_strtod_l+0xa86>
 8006178:	4b6b      	ldr	r3, [pc, #428]	; (8006328 <_strtod_l+0xbf8>)
 800617a:	2200      	movs	r2, #0
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa fcac 	bl	8000adc <__aeabi_dcmplt>
 8006184:	b9d0      	cbnz	r0, 80061bc <_strtod_l+0xa8c>
 8006186:	4640      	mov	r0, r8
 8006188:	4649      	mov	r1, r9
 800618a:	4b6b      	ldr	r3, [pc, #428]	; (8006338 <_strtod_l+0xc08>)
 800618c:	2200      	movs	r2, #0
 800618e:	f7fa fa33 	bl	80005f8 <__aeabi_dmul>
 8006192:	4680      	mov	r8, r0
 8006194:	4689      	mov	r9, r1
 8006196:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800619a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800619e:	931b      	str	r3, [sp, #108]	; 0x6c
 80061a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80061a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80061a8:	e79b      	b.n	80060e2 <_strtod_l+0x9b2>
 80061aa:	f1ba 0f01 	cmp.w	sl, #1
 80061ae:	d102      	bne.n	80061b6 <_strtod_l+0xa86>
 80061b0:	2f00      	cmp	r7, #0
 80061b2:	f43f ad7e 	beq.w	8005cb2 <_strtod_l+0x582>
 80061b6:	4b61      	ldr	r3, [pc, #388]	; (800633c <_strtod_l+0xc0c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	e78c      	b.n	80060d6 <_strtod_l+0x9a6>
 80061bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006338 <_strtod_l+0xc08>
 80061c0:	f04f 0800 	mov.w	r8, #0
 80061c4:	e7e7      	b.n	8006196 <_strtod_l+0xa66>
 80061c6:	4b5c      	ldr	r3, [pc, #368]	; (8006338 <_strtod_l+0xc08>)
 80061c8:	4640      	mov	r0, r8
 80061ca:	4649      	mov	r1, r9
 80061cc:	2200      	movs	r2, #0
 80061ce:	f7fa fa13 	bl	80005f8 <__aeabi_dmul>
 80061d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d4:	4680      	mov	r8, r0
 80061d6:	4689      	mov	r9, r1
 80061d8:	b933      	cbnz	r3, 80061e8 <_strtod_l+0xab8>
 80061da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061de:	9012      	str	r0, [sp, #72]	; 0x48
 80061e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80061e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80061e6:	e7dd      	b.n	80061a4 <_strtod_l+0xa74>
 80061e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80061ec:	e7f9      	b.n	80061e2 <_strtod_l+0xab2>
 80061ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1a8      	bne.n	800614a <_strtod_l+0xa1a>
 80061f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80061fe:	0d1b      	lsrs	r3, r3, #20
 8006200:	051b      	lsls	r3, r3, #20
 8006202:	429a      	cmp	r2, r3
 8006204:	d1a1      	bne.n	800614a <_strtod_l+0xa1a>
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7fa fd55 	bl	8000cb8 <__aeabi_d2lz>
 800620e:	f7fa f9c5 	bl	800059c <__aeabi_l2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7fa f835 	bl	8000288 <__aeabi_dsub>
 800621e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006224:	ea43 030a 	orr.w	r3, r3, sl
 8006228:	4313      	orrs	r3, r2
 800622a:	4680      	mov	r8, r0
 800622c:	4689      	mov	r9, r1
 800622e:	d053      	beq.n	80062d8 <_strtod_l+0xba8>
 8006230:	a335      	add	r3, pc, #212	; (adr r3, 8006308 <_strtod_l+0xbd8>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa fc51 	bl	8000adc <__aeabi_dcmplt>
 800623a:	2800      	cmp	r0, #0
 800623c:	f47f acce 	bne.w	8005bdc <_strtod_l+0x4ac>
 8006240:	a333      	add	r3, pc, #204	; (adr r3, 8006310 <_strtod_l+0xbe0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800624e:	2800      	cmp	r0, #0
 8006250:	f43f af7b 	beq.w	800614a <_strtod_l+0xa1a>
 8006254:	e4c2      	b.n	8005bdc <_strtod_l+0x4ac>
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	b333      	cbz	r3, 80062a8 <_strtod_l+0xb78>
 800625a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800625c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006260:	d822      	bhi.n	80062a8 <_strtod_l+0xb78>
 8006262:	a32d      	add	r3, pc, #180	; (adr r3, 8006318 <_strtod_l+0xbe8>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa fc40 	bl	8000af0 <__aeabi_dcmple>
 8006270:	b1a0      	cbz	r0, 800629c <_strtod_l+0xb6c>
 8006272:	4649      	mov	r1, r9
 8006274:	4640      	mov	r0, r8
 8006276:	f7fa fc97 	bl	8000ba8 <__aeabi_d2uiz>
 800627a:	2801      	cmp	r0, #1
 800627c:	bf38      	it	cc
 800627e:	2001      	movcc	r0, #1
 8006280:	f7fa f940 	bl	8000504 <__aeabi_ui2d>
 8006284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006286:	4680      	mov	r8, r0
 8006288:	4689      	mov	r9, r1
 800628a:	bb13      	cbnz	r3, 80062d2 <_strtod_l+0xba2>
 800628c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006290:	9014      	str	r0, [sp, #80]	; 0x50
 8006292:	9315      	str	r3, [sp, #84]	; 0x54
 8006294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006298:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800629c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800629e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	930d      	str	r3, [sp, #52]	; 0x34
 80062a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80062b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062b4:	f002 f962 	bl	800857c <__ulp>
 80062b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062bc:	ec53 2b10 	vmov	r2, r3, d0
 80062c0:	f7fa f99a 	bl	80005f8 <__aeabi_dmul>
 80062c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062c8:	f7f9 ffe0 	bl	800028c <__adddf3>
 80062cc:	4682      	mov	sl, r0
 80062ce:	468b      	mov	fp, r1
 80062d0:	e78f      	b.n	80061f2 <_strtod_l+0xac2>
 80062d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80062d6:	e7dd      	b.n	8006294 <_strtod_l+0xb64>
 80062d8:	a311      	add	r3, pc, #68	; (adr r3, 8006320 <_strtod_l+0xbf0>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7fa fbfd 	bl	8000adc <__aeabi_dcmplt>
 80062e2:	e7b4      	b.n	800624e <_strtod_l+0xb1e>
 80062e4:	2300      	movs	r3, #0
 80062e6:	930e      	str	r3, [sp, #56]	; 0x38
 80062e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80062ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	f7ff ba65 	b.w	80057bc <_strtod_l+0x8c>
 80062f2:	2b65      	cmp	r3, #101	; 0x65
 80062f4:	f43f ab5d 	beq.w	80059b2 <_strtod_l+0x282>
 80062f8:	2b45      	cmp	r3, #69	; 0x45
 80062fa:	f43f ab5a 	beq.w	80059b2 <_strtod_l+0x282>
 80062fe:	2201      	movs	r2, #1
 8006300:	f7ff bb92 	b.w	8005a28 <_strtod_l+0x2f8>
 8006304:	f3af 8000 	nop.w
 8006308:	94a03595 	.word	0x94a03595
 800630c:	3fdfffff 	.word	0x3fdfffff
 8006310:	35afe535 	.word	0x35afe535
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	ffc00000 	.word	0xffc00000
 800631c:	41dfffff 	.word	0x41dfffff
 8006320:	94a03595 	.word	0x94a03595
 8006324:	3fcfffff 	.word	0x3fcfffff
 8006328:	3ff00000 	.word	0x3ff00000
 800632c:	7ff00000 	.word	0x7ff00000
 8006330:	7fe00000 	.word	0x7fe00000
 8006334:	7c9fffff 	.word	0x7c9fffff
 8006338:	3fe00000 	.word	0x3fe00000
 800633c:	bff00000 	.word	0xbff00000
 8006340:	7fefffff 	.word	0x7fefffff

08006344 <_strtod_r>:
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <_strtod_r+0x8>)
 8006346:	f7ff b9f3 	b.w	8005730 <_strtod_l>
 800634a:	bf00      	nop
 800634c:	20000074 	.word	0x20000074

08006350 <_strtol_l.isra.0>:
 8006350:	2b01      	cmp	r3, #1
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	d001      	beq.n	800635c <_strtol_l.isra.0+0xc>
 8006358:	2b24      	cmp	r3, #36	; 0x24
 800635a:	d906      	bls.n	800636a <_strtol_l.isra.0+0x1a>
 800635c:	f7fe f98e 	bl	800467c <__errno>
 8006360:	2316      	movs	r3, #22
 8006362:	6003      	str	r3, [r0, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	4f3a      	ldr	r7, [pc, #232]	; (8006454 <_strtol_l.isra.0+0x104>)
 800636c:	468e      	mov	lr, r1
 800636e:	4676      	mov	r6, lr
 8006370:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006374:	5de5      	ldrb	r5, [r4, r7]
 8006376:	f015 0508 	ands.w	r5, r5, #8
 800637a:	d1f8      	bne.n	800636e <_strtol_l.isra.0+0x1e>
 800637c:	2c2d      	cmp	r4, #45	; 0x2d
 800637e:	d134      	bne.n	80063ea <_strtol_l.isra.0+0x9a>
 8006380:	f89e 4000 	ldrb.w	r4, [lr]
 8006384:	f04f 0801 	mov.w	r8, #1
 8006388:	f106 0e02 	add.w	lr, r6, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <_strtol_l.isra.0+0xfa>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d10c      	bne.n	80063ae <_strtol_l.isra.0+0x5e>
 8006394:	2c30      	cmp	r4, #48	; 0x30
 8006396:	d10a      	bne.n	80063ae <_strtol_l.isra.0+0x5e>
 8006398:	f89e 4000 	ldrb.w	r4, [lr]
 800639c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80063a0:	2c58      	cmp	r4, #88	; 0x58
 80063a2:	d14d      	bne.n	8006440 <_strtol_l.isra.0+0xf0>
 80063a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80063a8:	2310      	movs	r3, #16
 80063aa:	f10e 0e02 	add.w	lr, lr, #2
 80063ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80063b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063b6:	2600      	movs	r6, #0
 80063b8:	fbbc f9f3 	udiv	r9, ip, r3
 80063bc:	4635      	mov	r5, r6
 80063be:	fb03 ca19 	mls	sl, r3, r9, ip
 80063c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80063c6:	2f09      	cmp	r7, #9
 80063c8:	d818      	bhi.n	80063fc <_strtol_l.isra.0+0xac>
 80063ca:	463c      	mov	r4, r7
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	dd24      	ble.n	800641a <_strtol_l.isra.0+0xca>
 80063d0:	2e00      	cmp	r6, #0
 80063d2:	db1f      	blt.n	8006414 <_strtol_l.isra.0+0xc4>
 80063d4:	45a9      	cmp	r9, r5
 80063d6:	d31d      	bcc.n	8006414 <_strtol_l.isra.0+0xc4>
 80063d8:	d101      	bne.n	80063de <_strtol_l.isra.0+0x8e>
 80063da:	45a2      	cmp	sl, r4
 80063dc:	db1a      	blt.n	8006414 <_strtol_l.isra.0+0xc4>
 80063de:	fb05 4503 	mla	r5, r5, r3, r4
 80063e2:	2601      	movs	r6, #1
 80063e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80063e8:	e7eb      	b.n	80063c2 <_strtol_l.isra.0+0x72>
 80063ea:	2c2b      	cmp	r4, #43	; 0x2b
 80063ec:	bf08      	it	eq
 80063ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80063f2:	46a8      	mov	r8, r5
 80063f4:	bf08      	it	eq
 80063f6:	f106 0e02 	addeq.w	lr, r6, #2
 80063fa:	e7c7      	b.n	800638c <_strtol_l.isra.0+0x3c>
 80063fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006400:	2f19      	cmp	r7, #25
 8006402:	d801      	bhi.n	8006408 <_strtol_l.isra.0+0xb8>
 8006404:	3c37      	subs	r4, #55	; 0x37
 8006406:	e7e1      	b.n	80063cc <_strtol_l.isra.0+0x7c>
 8006408:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800640c:	2f19      	cmp	r7, #25
 800640e:	d804      	bhi.n	800641a <_strtol_l.isra.0+0xca>
 8006410:	3c57      	subs	r4, #87	; 0x57
 8006412:	e7db      	b.n	80063cc <_strtol_l.isra.0+0x7c>
 8006414:	f04f 36ff 	mov.w	r6, #4294967295
 8006418:	e7e4      	b.n	80063e4 <_strtol_l.isra.0+0x94>
 800641a:	2e00      	cmp	r6, #0
 800641c:	da05      	bge.n	800642a <_strtol_l.isra.0+0xda>
 800641e:	2322      	movs	r3, #34	; 0x22
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	4665      	mov	r5, ip
 8006424:	b942      	cbnz	r2, 8006438 <_strtol_l.isra.0+0xe8>
 8006426:	4628      	mov	r0, r5
 8006428:	e79d      	b.n	8006366 <_strtol_l.isra.0+0x16>
 800642a:	f1b8 0f00 	cmp.w	r8, #0
 800642e:	d000      	beq.n	8006432 <_strtol_l.isra.0+0xe2>
 8006430:	426d      	negs	r5, r5
 8006432:	2a00      	cmp	r2, #0
 8006434:	d0f7      	beq.n	8006426 <_strtol_l.isra.0+0xd6>
 8006436:	b10e      	cbz	r6, 800643c <_strtol_l.isra.0+0xec>
 8006438:	f10e 31ff 	add.w	r1, lr, #4294967295
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	e7f2      	b.n	8006426 <_strtol_l.isra.0+0xd6>
 8006440:	2430      	movs	r4, #48	; 0x30
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1b3      	bne.n	80063ae <_strtol_l.isra.0+0x5e>
 8006446:	2308      	movs	r3, #8
 8006448:	e7b1      	b.n	80063ae <_strtol_l.isra.0+0x5e>
 800644a:	2c30      	cmp	r4, #48	; 0x30
 800644c:	d0a4      	beq.n	8006398 <_strtol_l.isra.0+0x48>
 800644e:	230a      	movs	r3, #10
 8006450:	e7ad      	b.n	80063ae <_strtol_l.isra.0+0x5e>
 8006452:	bf00      	nop
 8006454:	08009e21 	.word	0x08009e21

08006458 <_strtol_r>:
 8006458:	f7ff bf7a 	b.w	8006350 <_strtol_l.isra.0>

0800645c <__swbuf_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	460e      	mov	r6, r1
 8006460:	4614      	mov	r4, r2
 8006462:	4605      	mov	r5, r0
 8006464:	b118      	cbz	r0, 800646e <__swbuf_r+0x12>
 8006466:	6983      	ldr	r3, [r0, #24]
 8006468:	b90b      	cbnz	r3, 800646e <__swbuf_r+0x12>
 800646a:	f001 f85d 	bl	8007528 <__sinit>
 800646e:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <__swbuf_r+0x98>)
 8006470:	429c      	cmp	r4, r3
 8006472:	d12b      	bne.n	80064cc <__swbuf_r+0x70>
 8006474:	686c      	ldr	r4, [r5, #4]
 8006476:	69a3      	ldr	r3, [r4, #24]
 8006478:	60a3      	str	r3, [r4, #8]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	071a      	lsls	r2, r3, #28
 800647e:	d52f      	bpl.n	80064e0 <__swbuf_r+0x84>
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	b36b      	cbz	r3, 80064e0 <__swbuf_r+0x84>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1ac0      	subs	r0, r0, r3
 800648a:	6963      	ldr	r3, [r4, #20]
 800648c:	b2f6      	uxtb	r6, r6
 800648e:	4283      	cmp	r3, r0
 8006490:	4637      	mov	r7, r6
 8006492:	dc04      	bgt.n	800649e <__swbuf_r+0x42>
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	f000 ffa0 	bl	80073dc <_fflush_r>
 800649c:	bb30      	cbnz	r0, 80064ec <__swbuf_r+0x90>
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	60a3      	str	r3, [r4, #8]
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	6022      	str	r2, [r4, #0]
 80064aa:	701e      	strb	r6, [r3, #0]
 80064ac:	6963      	ldr	r3, [r4, #20]
 80064ae:	3001      	adds	r0, #1
 80064b0:	4283      	cmp	r3, r0
 80064b2:	d004      	beq.n	80064be <__swbuf_r+0x62>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	07db      	lsls	r3, r3, #31
 80064b8:	d506      	bpl.n	80064c8 <__swbuf_r+0x6c>
 80064ba:	2e0a      	cmp	r6, #10
 80064bc:	d104      	bne.n	80064c8 <__swbuf_r+0x6c>
 80064be:	4621      	mov	r1, r4
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 ff8b 	bl	80073dc <_fflush_r>
 80064c6:	b988      	cbnz	r0, 80064ec <__swbuf_r+0x90>
 80064c8:	4638      	mov	r0, r7
 80064ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <__swbuf_r+0x9c>)
 80064ce:	429c      	cmp	r4, r3
 80064d0:	d101      	bne.n	80064d6 <__swbuf_r+0x7a>
 80064d2:	68ac      	ldr	r4, [r5, #8]
 80064d4:	e7cf      	b.n	8006476 <__swbuf_r+0x1a>
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <__swbuf_r+0xa0>)
 80064d8:	429c      	cmp	r4, r3
 80064da:	bf08      	it	eq
 80064dc:	68ec      	ldreq	r4, [r5, #12]
 80064de:	e7ca      	b.n	8006476 <__swbuf_r+0x1a>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 f80c 	bl	8006500 <__swsetup_r>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d0cb      	beq.n	8006484 <__swbuf_r+0x28>
 80064ec:	f04f 37ff 	mov.w	r7, #4294967295
 80064f0:	e7ea      	b.n	80064c8 <__swbuf_r+0x6c>
 80064f2:	bf00      	nop
 80064f4:	08009fd8 	.word	0x08009fd8
 80064f8:	08009ff8 	.word	0x08009ff8
 80064fc:	08009fb8 	.word	0x08009fb8

08006500 <__swsetup_r>:
 8006500:	4b32      	ldr	r3, [pc, #200]	; (80065cc <__swsetup_r+0xcc>)
 8006502:	b570      	push	{r4, r5, r6, lr}
 8006504:	681d      	ldr	r5, [r3, #0]
 8006506:	4606      	mov	r6, r0
 8006508:	460c      	mov	r4, r1
 800650a:	b125      	cbz	r5, 8006516 <__swsetup_r+0x16>
 800650c:	69ab      	ldr	r3, [r5, #24]
 800650e:	b913      	cbnz	r3, 8006516 <__swsetup_r+0x16>
 8006510:	4628      	mov	r0, r5
 8006512:	f001 f809 	bl	8007528 <__sinit>
 8006516:	4b2e      	ldr	r3, [pc, #184]	; (80065d0 <__swsetup_r+0xd0>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d10f      	bne.n	800653c <__swsetup_r+0x3c>
 800651c:	686c      	ldr	r4, [r5, #4]
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006524:	0719      	lsls	r1, r3, #28
 8006526:	d42c      	bmi.n	8006582 <__swsetup_r+0x82>
 8006528:	06dd      	lsls	r5, r3, #27
 800652a:	d411      	bmi.n	8006550 <__swsetup_r+0x50>
 800652c:	2309      	movs	r3, #9
 800652e:	6033      	str	r3, [r6, #0]
 8006530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	e03e      	b.n	80065ba <__swsetup_r+0xba>
 800653c:	4b25      	ldr	r3, [pc, #148]	; (80065d4 <__swsetup_r+0xd4>)
 800653e:	429c      	cmp	r4, r3
 8006540:	d101      	bne.n	8006546 <__swsetup_r+0x46>
 8006542:	68ac      	ldr	r4, [r5, #8]
 8006544:	e7eb      	b.n	800651e <__swsetup_r+0x1e>
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <__swsetup_r+0xd8>)
 8006548:	429c      	cmp	r4, r3
 800654a:	bf08      	it	eq
 800654c:	68ec      	ldreq	r4, [r5, #12]
 800654e:	e7e6      	b.n	800651e <__swsetup_r+0x1e>
 8006550:	0758      	lsls	r0, r3, #29
 8006552:	d512      	bpl.n	800657a <__swsetup_r+0x7a>
 8006554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006556:	b141      	cbz	r1, 800656a <__swsetup_r+0x6a>
 8006558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800655c:	4299      	cmp	r1, r3
 800655e:	d002      	beq.n	8006566 <__swsetup_r+0x66>
 8006560:	4630      	mov	r0, r6
 8006562:	f002 f969 	bl	8008838 <_free_r>
 8006566:	2300      	movs	r3, #0
 8006568:	6363      	str	r3, [r4, #52]	; 0x34
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	2300      	movs	r3, #0
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	b94b      	cbnz	r3, 800659a <__swsetup_r+0x9a>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800658c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006590:	d003      	beq.n	800659a <__swsetup_r+0x9a>
 8006592:	4621      	mov	r1, r4
 8006594:	4630      	mov	r0, r6
 8006596:	f001 fc1d 	bl	8007dd4 <__smakebuf_r>
 800659a:	89a0      	ldrh	r0, [r4, #12]
 800659c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065a0:	f010 0301 	ands.w	r3, r0, #1
 80065a4:	d00a      	beq.n	80065bc <__swsetup_r+0xbc>
 80065a6:	2300      	movs	r3, #0
 80065a8:	60a3      	str	r3, [r4, #8]
 80065aa:	6963      	ldr	r3, [r4, #20]
 80065ac:	425b      	negs	r3, r3
 80065ae:	61a3      	str	r3, [r4, #24]
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	b943      	cbnz	r3, 80065c6 <__swsetup_r+0xc6>
 80065b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065b8:	d1ba      	bne.n	8006530 <__swsetup_r+0x30>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	0781      	lsls	r1, r0, #30
 80065be:	bf58      	it	pl
 80065c0:	6963      	ldrpl	r3, [r4, #20]
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	e7f4      	b.n	80065b0 <__swsetup_r+0xb0>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e7f7      	b.n	80065ba <__swsetup_r+0xba>
 80065ca:	bf00      	nop
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	08009fd8 	.word	0x08009fd8
 80065d4:	08009ff8 	.word	0x08009ff8
 80065d8:	08009fb8 	.word	0x08009fb8

080065dc <quorem>:
 80065dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	6903      	ldr	r3, [r0, #16]
 80065e2:	690c      	ldr	r4, [r1, #16]
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	4607      	mov	r7, r0
 80065e8:	f2c0 8081 	blt.w	80066ee <quorem+0x112>
 80065ec:	3c01      	subs	r4, #1
 80065ee:	f101 0814 	add.w	r8, r1, #20
 80065f2:	f100 0514 	add.w	r5, r0, #20
 80065f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006604:	3301      	adds	r3, #1
 8006606:	429a      	cmp	r2, r3
 8006608:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800660c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006610:	fbb2 f6f3 	udiv	r6, r2, r3
 8006614:	d331      	bcc.n	800667a <quorem+0x9e>
 8006616:	f04f 0e00 	mov.w	lr, #0
 800661a:	4640      	mov	r0, r8
 800661c:	46ac      	mov	ip, r5
 800661e:	46f2      	mov	sl, lr
 8006620:	f850 2b04 	ldr.w	r2, [r0], #4
 8006624:	b293      	uxth	r3, r2
 8006626:	fb06 e303 	mla	r3, r6, r3, lr
 800662a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800662e:	b29b      	uxth	r3, r3
 8006630:	ebaa 0303 	sub.w	r3, sl, r3
 8006634:	0c12      	lsrs	r2, r2, #16
 8006636:	f8dc a000 	ldr.w	sl, [ip]
 800663a:	fb06 e202 	mla	r2, r6, r2, lr
 800663e:	fa13 f38a 	uxtah	r3, r3, sl
 8006642:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006646:	fa1f fa82 	uxth.w	sl, r2
 800664a:	f8dc 2000 	ldr.w	r2, [ip]
 800664e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800665c:	4581      	cmp	r9, r0
 800665e:	f84c 3b04 	str.w	r3, [ip], #4
 8006662:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006666:	d2db      	bcs.n	8006620 <quorem+0x44>
 8006668:	f855 300b 	ldr.w	r3, [r5, fp]
 800666c:	b92b      	cbnz	r3, 800667a <quorem+0x9e>
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	3b04      	subs	r3, #4
 8006672:	429d      	cmp	r5, r3
 8006674:	461a      	mov	r2, r3
 8006676:	d32e      	bcc.n	80066d6 <quorem+0xfa>
 8006678:	613c      	str	r4, [r7, #16]
 800667a:	4638      	mov	r0, r7
 800667c:	f001 feda 	bl	8008434 <__mcmp>
 8006680:	2800      	cmp	r0, #0
 8006682:	db24      	blt.n	80066ce <quorem+0xf2>
 8006684:	3601      	adds	r6, #1
 8006686:	4628      	mov	r0, r5
 8006688:	f04f 0c00 	mov.w	ip, #0
 800668c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006690:	f8d0 e000 	ldr.w	lr, [r0]
 8006694:	b293      	uxth	r3, r2
 8006696:	ebac 0303 	sub.w	r3, ip, r3
 800669a:	0c12      	lsrs	r2, r2, #16
 800669c:	fa13 f38e 	uxtah	r3, r3, lr
 80066a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ae:	45c1      	cmp	r9, r8
 80066b0:	f840 3b04 	str.w	r3, [r0], #4
 80066b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066b8:	d2e8      	bcs.n	800668c <quorem+0xb0>
 80066ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066c2:	b922      	cbnz	r2, 80066ce <quorem+0xf2>
 80066c4:	3b04      	subs	r3, #4
 80066c6:	429d      	cmp	r5, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	d30a      	bcc.n	80066e2 <quorem+0x106>
 80066cc:	613c      	str	r4, [r7, #16]
 80066ce:	4630      	mov	r0, r6
 80066d0:	b003      	add	sp, #12
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	3b04      	subs	r3, #4
 80066da:	2a00      	cmp	r2, #0
 80066dc:	d1cc      	bne.n	8006678 <quorem+0x9c>
 80066de:	3c01      	subs	r4, #1
 80066e0:	e7c7      	b.n	8006672 <quorem+0x96>
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	d1f0      	bne.n	80066cc <quorem+0xf0>
 80066ea:	3c01      	subs	r4, #1
 80066ec:	e7eb      	b.n	80066c6 <quorem+0xea>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e7ee      	b.n	80066d0 <quorem+0xf4>
 80066f2:	0000      	movs	r0, r0
 80066f4:	0000      	movs	r0, r0
	...

080066f8 <_dtoa_r>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	ed2d 8b02 	vpush	{d8}
 8006700:	ec57 6b10 	vmov	r6, r7, d0
 8006704:	b095      	sub	sp, #84	; 0x54
 8006706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800670c:	9105      	str	r1, [sp, #20]
 800670e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006712:	4604      	mov	r4, r0
 8006714:	9209      	str	r2, [sp, #36]	; 0x24
 8006716:	930f      	str	r3, [sp, #60]	; 0x3c
 8006718:	b975      	cbnz	r5, 8006738 <_dtoa_r+0x40>
 800671a:	2010      	movs	r0, #16
 800671c:	f001 fb9a 	bl	8007e54 <malloc>
 8006720:	4602      	mov	r2, r0
 8006722:	6260      	str	r0, [r4, #36]	; 0x24
 8006724:	b920      	cbnz	r0, 8006730 <_dtoa_r+0x38>
 8006726:	4bb2      	ldr	r3, [pc, #712]	; (80069f0 <_dtoa_r+0x2f8>)
 8006728:	21ea      	movs	r1, #234	; 0xea
 800672a:	48b2      	ldr	r0, [pc, #712]	; (80069f4 <_dtoa_r+0x2fc>)
 800672c:	f003 f9a8 	bl	8009a80 <__assert_func>
 8006730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006734:	6005      	str	r5, [r0, #0]
 8006736:	60c5      	str	r5, [r0, #12]
 8006738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	b151      	cbz	r1, 8006754 <_dtoa_r+0x5c>
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	604a      	str	r2, [r1, #4]
 8006742:	2301      	movs	r3, #1
 8006744:	4093      	lsls	r3, r2
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	4620      	mov	r0, r4
 800674a:	f001 fbeb 	bl	8007f24 <_Bfree>
 800674e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	1e3b      	subs	r3, r7, #0
 8006756:	bfb9      	ittee	lt
 8006758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800675c:	9303      	strlt	r3, [sp, #12]
 800675e:	2300      	movge	r3, #0
 8006760:	f8c8 3000 	strge.w	r3, [r8]
 8006764:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006768:	4ba3      	ldr	r3, [pc, #652]	; (80069f8 <_dtoa_r+0x300>)
 800676a:	bfbc      	itt	lt
 800676c:	2201      	movlt	r2, #1
 800676e:	f8c8 2000 	strlt.w	r2, [r8]
 8006772:	ea33 0309 	bics.w	r3, r3, r9
 8006776:	d11b      	bne.n	80067b0 <_dtoa_r+0xb8>
 8006778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800677a:	f242 730f 	movw	r3, #9999	; 0x270f
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006784:	4333      	orrs	r3, r6
 8006786:	f000 857a 	beq.w	800727e <_dtoa_r+0xb86>
 800678a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800678c:	b963      	cbnz	r3, 80067a8 <_dtoa_r+0xb0>
 800678e:	4b9b      	ldr	r3, [pc, #620]	; (80069fc <_dtoa_r+0x304>)
 8006790:	e024      	b.n	80067dc <_dtoa_r+0xe4>
 8006792:	4b9b      	ldr	r3, [pc, #620]	; (8006a00 <_dtoa_r+0x308>)
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	9800      	ldr	r0, [sp, #0]
 800679e:	b015      	add	sp, #84	; 0x54
 80067a0:	ecbd 8b02 	vpop	{d8}
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	4b94      	ldr	r3, [pc, #592]	; (80069fc <_dtoa_r+0x304>)
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	3303      	adds	r3, #3
 80067ae:	e7f3      	b.n	8006798 <_dtoa_r+0xa0>
 80067b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	ec51 0b17 	vmov	r0, r1, d7
 80067ba:	2300      	movs	r3, #0
 80067bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80067c0:	f7fa f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c4:	4680      	mov	r8, r0
 80067c6:	b158      	cbz	r0, 80067e0 <_dtoa_r+0xe8>
 80067c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067ca:	2301      	movs	r3, #1
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8551 	beq.w	8007278 <_dtoa_r+0xb80>
 80067d6:	488b      	ldr	r0, [pc, #556]	; (8006a04 <_dtoa_r+0x30c>)
 80067d8:	6018      	str	r0, [r3, #0]
 80067da:	1e43      	subs	r3, r0, #1
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	e7dd      	b.n	800679c <_dtoa_r+0xa4>
 80067e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80067e4:	aa12      	add	r2, sp, #72	; 0x48
 80067e6:	a913      	add	r1, sp, #76	; 0x4c
 80067e8:	4620      	mov	r0, r4
 80067ea:	f001 ff43 	bl	8008674 <__d2b>
 80067ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067f2:	4683      	mov	fp, r0
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	d07c      	beq.n	80068f2 <_dtoa_r+0x1fa>
 80067f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80067fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006802:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006806:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800680a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800680e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006812:	4b7d      	ldr	r3, [pc, #500]	; (8006a08 <_dtoa_r+0x310>)
 8006814:	2200      	movs	r2, #0
 8006816:	4630      	mov	r0, r6
 8006818:	4639      	mov	r1, r7
 800681a:	f7f9 fd35 	bl	8000288 <__aeabi_dsub>
 800681e:	a36e      	add	r3, pc, #440	; (adr r3, 80069d8 <_dtoa_r+0x2e0>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fee8 	bl	80005f8 <__aeabi_dmul>
 8006828:	a36d      	add	r3, pc, #436	; (adr r3, 80069e0 <_dtoa_r+0x2e8>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f7f9 fd2d 	bl	800028c <__adddf3>
 8006832:	4606      	mov	r6, r0
 8006834:	4628      	mov	r0, r5
 8006836:	460f      	mov	r7, r1
 8006838:	f7f9 fe74 	bl	8000524 <__aeabi_i2d>
 800683c:	a36a      	add	r3, pc, #424	; (adr r3, 80069e8 <_dtoa_r+0x2f0>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f7f9 fed9 	bl	80005f8 <__aeabi_dmul>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4630      	mov	r0, r6
 800684c:	4639      	mov	r1, r7
 800684e:	f7f9 fd1d 	bl	800028c <__adddf3>
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	f7fa f97f 	bl	8000b58 <__aeabi_d2iz>
 800685a:	2200      	movs	r2, #0
 800685c:	4682      	mov	sl, r0
 800685e:	2300      	movs	r3, #0
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f93a 	bl	8000adc <__aeabi_dcmplt>
 8006868:	b148      	cbz	r0, 800687e <_dtoa_r+0x186>
 800686a:	4650      	mov	r0, sl
 800686c:	f7f9 fe5a 	bl	8000524 <__aeabi_i2d>
 8006870:	4632      	mov	r2, r6
 8006872:	463b      	mov	r3, r7
 8006874:	f7fa f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8006878:	b908      	cbnz	r0, 800687e <_dtoa_r+0x186>
 800687a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800687e:	f1ba 0f16 	cmp.w	sl, #22
 8006882:	d854      	bhi.n	800692e <_dtoa_r+0x236>
 8006884:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <_dtoa_r+0x314>)
 8006886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006892:	f7fa f923 	bl	8000adc <__aeabi_dcmplt>
 8006896:	2800      	cmp	r0, #0
 8006898:	d04b      	beq.n	8006932 <_dtoa_r+0x23a>
 800689a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689e:	2300      	movs	r3, #0
 80068a0:	930e      	str	r3, [sp, #56]	; 0x38
 80068a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068a4:	1b5d      	subs	r5, r3, r5
 80068a6:	1e6b      	subs	r3, r5, #1
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	bf43      	ittte	mi
 80068ac:	2300      	movmi	r3, #0
 80068ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80068b2:	9304      	strmi	r3, [sp, #16]
 80068b4:	f04f 0800 	movpl.w	r8, #0
 80068b8:	f1ba 0f00 	cmp.w	sl, #0
 80068bc:	db3b      	blt.n	8006936 <_dtoa_r+0x23e>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80068c4:	4453      	add	r3, sl
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	2300      	movs	r3, #0
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	9b05      	ldr	r3, [sp, #20]
 80068ce:	2b09      	cmp	r3, #9
 80068d0:	d869      	bhi.n	80069a6 <_dtoa_r+0x2ae>
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	bfc4      	itt	gt
 80068d6:	3b04      	subgt	r3, #4
 80068d8:	9305      	strgt	r3, [sp, #20]
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	f1a3 0302 	sub.w	r3, r3, #2
 80068e0:	bfcc      	ite	gt
 80068e2:	2500      	movgt	r5, #0
 80068e4:	2501      	movle	r5, #1
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d869      	bhi.n	80069be <_dtoa_r+0x2c6>
 80068ea:	e8df f003 	tbb	[pc, r3]
 80068ee:	4e2c      	.short	0x4e2c
 80068f0:	5a4c      	.short	0x5a4c
 80068f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80068f6:	441d      	add	r5, r3
 80068f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	bfc1      	itttt	gt
 8006900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006904:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006908:	fa09 f303 	lslgt.w	r3, r9, r3
 800690c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006910:	bfda      	itte	le
 8006912:	f1c3 0320 	rsble	r3, r3, #32
 8006916:	fa06 f003 	lslle.w	r0, r6, r3
 800691a:	4318      	orrgt	r0, r3
 800691c:	f7f9 fdf2 	bl	8000504 <__aeabi_ui2d>
 8006920:	2301      	movs	r3, #1
 8006922:	4606      	mov	r6, r0
 8006924:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006928:	3d01      	subs	r5, #1
 800692a:	9310      	str	r3, [sp, #64]	; 0x40
 800692c:	e771      	b.n	8006812 <_dtoa_r+0x11a>
 800692e:	2301      	movs	r3, #1
 8006930:	e7b6      	b.n	80068a0 <_dtoa_r+0x1a8>
 8006932:	900e      	str	r0, [sp, #56]	; 0x38
 8006934:	e7b5      	b.n	80068a2 <_dtoa_r+0x1aa>
 8006936:	f1ca 0300 	rsb	r3, sl, #0
 800693a:	9306      	str	r3, [sp, #24]
 800693c:	2300      	movs	r3, #0
 800693e:	eba8 080a 	sub.w	r8, r8, sl
 8006942:	930d      	str	r3, [sp, #52]	; 0x34
 8006944:	e7c2      	b.n	80068cc <_dtoa_r+0x1d4>
 8006946:	2300      	movs	r3, #0
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	dc39      	bgt.n	80069c4 <_dtoa_r+0x2cc>
 8006950:	f04f 0901 	mov.w	r9, #1
 8006954:	f8cd 9004 	str.w	r9, [sp, #4]
 8006958:	464b      	mov	r3, r9
 800695a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800695e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006960:	2200      	movs	r2, #0
 8006962:	6042      	str	r2, [r0, #4]
 8006964:	2204      	movs	r2, #4
 8006966:	f102 0614 	add.w	r6, r2, #20
 800696a:	429e      	cmp	r6, r3
 800696c:	6841      	ldr	r1, [r0, #4]
 800696e:	d92f      	bls.n	80069d0 <_dtoa_r+0x2d8>
 8006970:	4620      	mov	r0, r4
 8006972:	f001 fa97 	bl	8007ea4 <_Balloc>
 8006976:	9000      	str	r0, [sp, #0]
 8006978:	2800      	cmp	r0, #0
 800697a:	d14b      	bne.n	8006a14 <_dtoa_r+0x31c>
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <_dtoa_r+0x318>)
 800697e:	4602      	mov	r2, r0
 8006980:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006984:	e6d1      	b.n	800672a <_dtoa_r+0x32>
 8006986:	2301      	movs	r3, #1
 8006988:	e7de      	b.n	8006948 <_dtoa_r+0x250>
 800698a:	2300      	movs	r3, #0
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	eb0a 0903 	add.w	r9, sl, r3
 8006994:	f109 0301 	add.w	r3, r9, #1
 8006998:	2b01      	cmp	r3, #1
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	bfb8      	it	lt
 800699e:	2301      	movlt	r3, #1
 80069a0:	e7dd      	b.n	800695e <_dtoa_r+0x266>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e7f2      	b.n	800698c <_dtoa_r+0x294>
 80069a6:	2501      	movs	r5, #1
 80069a8:	2300      	movs	r3, #0
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	9508      	str	r5, [sp, #32]
 80069ae:	f04f 39ff 	mov.w	r9, #4294967295
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80069b8:	2312      	movs	r3, #18
 80069ba:	9209      	str	r2, [sp, #36]	; 0x24
 80069bc:	e7cf      	b.n	800695e <_dtoa_r+0x266>
 80069be:	2301      	movs	r3, #1
 80069c0:	9308      	str	r3, [sp, #32]
 80069c2:	e7f4      	b.n	80069ae <_dtoa_r+0x2b6>
 80069c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80069cc:	464b      	mov	r3, r9
 80069ce:	e7c6      	b.n	800695e <_dtoa_r+0x266>
 80069d0:	3101      	adds	r1, #1
 80069d2:	6041      	str	r1, [r0, #4]
 80069d4:	0052      	lsls	r2, r2, #1
 80069d6:	e7c6      	b.n	8006966 <_dtoa_r+0x26e>
 80069d8:	636f4361 	.word	0x636f4361
 80069dc:	3fd287a7 	.word	0x3fd287a7
 80069e0:	8b60c8b3 	.word	0x8b60c8b3
 80069e4:	3fc68a28 	.word	0x3fc68a28
 80069e8:	509f79fb 	.word	0x509f79fb
 80069ec:	3fd34413 	.word	0x3fd34413
 80069f0:	08009f2e 	.word	0x08009f2e
 80069f4:	08009f45 	.word	0x08009f45
 80069f8:	7ff00000 	.word	0x7ff00000
 80069fc:	08009f2a 	.word	0x08009f2a
 8006a00:	08009f21 	.word	0x08009f21
 8006a04:	0800a20a 	.word	0x0800a20a
 8006a08:	3ff80000 	.word	0x3ff80000
 8006a0c:	0800a120 	.word	0x0800a120
 8006a10:	08009fa4 	.word	0x08009fa4
 8006a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a16:	9a00      	ldr	r2, [sp, #0]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	2b0e      	cmp	r3, #14
 8006a1e:	f200 80ad 	bhi.w	8006b7c <_dtoa_r+0x484>
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	f000 80aa 	beq.w	8006b7c <_dtoa_r+0x484>
 8006a28:	f1ba 0f00 	cmp.w	sl, #0
 8006a2c:	dd36      	ble.n	8006a9c <_dtoa_r+0x3a4>
 8006a2e:	4ac3      	ldr	r2, [pc, #780]	; (8006d3c <_dtoa_r+0x644>)
 8006a30:	f00a 030f 	and.w	r3, sl, #15
 8006a34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a38:	ed93 7b00 	vldr	d7, [r3]
 8006a3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006a44:	eeb0 8a47 	vmov.f32	s16, s14
 8006a48:	eef0 8a67 	vmov.f32	s17, s15
 8006a4c:	d016      	beq.n	8006a7c <_dtoa_r+0x384>
 8006a4e:	4bbc      	ldr	r3, [pc, #752]	; (8006d40 <_dtoa_r+0x648>)
 8006a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a58:	f7f9 fef8 	bl	800084c <__aeabi_ddiv>
 8006a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a60:	f007 070f 	and.w	r7, r7, #15
 8006a64:	2503      	movs	r5, #3
 8006a66:	4eb6      	ldr	r6, [pc, #728]	; (8006d40 <_dtoa_r+0x648>)
 8006a68:	b957      	cbnz	r7, 8006a80 <_dtoa_r+0x388>
 8006a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6e:	ec53 2b18 	vmov	r2, r3, d8
 8006a72:	f7f9 feeb 	bl	800084c <__aeabi_ddiv>
 8006a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a7a:	e029      	b.n	8006ad0 <_dtoa_r+0x3d8>
 8006a7c:	2502      	movs	r5, #2
 8006a7e:	e7f2      	b.n	8006a66 <_dtoa_r+0x36e>
 8006a80:	07f9      	lsls	r1, r7, #31
 8006a82:	d508      	bpl.n	8006a96 <_dtoa_r+0x39e>
 8006a84:	ec51 0b18 	vmov	r0, r1, d8
 8006a88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a8c:	f7f9 fdb4 	bl	80005f8 <__aeabi_dmul>
 8006a90:	ec41 0b18 	vmov	d8, r0, r1
 8006a94:	3501      	adds	r5, #1
 8006a96:	107f      	asrs	r7, r7, #1
 8006a98:	3608      	adds	r6, #8
 8006a9a:	e7e5      	b.n	8006a68 <_dtoa_r+0x370>
 8006a9c:	f000 80a6 	beq.w	8006bec <_dtoa_r+0x4f4>
 8006aa0:	f1ca 0600 	rsb	r6, sl, #0
 8006aa4:	4ba5      	ldr	r3, [pc, #660]	; (8006d3c <_dtoa_r+0x644>)
 8006aa6:	4fa6      	ldr	r7, [pc, #664]	; (8006d40 <_dtoa_r+0x648>)
 8006aa8:	f006 020f 	and.w	r2, r6, #15
 8006aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac0:	1136      	asrs	r6, r6, #4
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2502      	movs	r5, #2
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	f040 8085 	bne.w	8006bd6 <_dtoa_r+0x4de>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1d2      	bne.n	8006a76 <_dtoa_r+0x37e>
 8006ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 808c 	beq.w	8006bf0 <_dtoa_r+0x4f8>
 8006ad8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006adc:	4b99      	ldr	r3, [pc, #612]	; (8006d44 <_dtoa_r+0x64c>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7f9 fffa 	bl	8000adc <__aeabi_dcmplt>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f000 8081 	beq.w	8006bf0 <_dtoa_r+0x4f8>
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d07d      	beq.n	8006bf0 <_dtoa_r+0x4f8>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	dd3c      	ble.n	8006b74 <_dtoa_r+0x47c>
 8006afa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006afe:	9307      	str	r3, [sp, #28]
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b91      	ldr	r3, [pc, #580]	; (8006d48 <_dtoa_r+0x650>)
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 fd76 	bl	80005f8 <__aeabi_dmul>
 8006b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b10:	3501      	adds	r5, #1
 8006b12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006b16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7f9 fd02 	bl	8000524 <__aeabi_i2d>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 fd68 	bl	80005f8 <__aeabi_dmul>
 8006b28:	4b88      	ldr	r3, [pc, #544]	; (8006d4c <_dtoa_r+0x654>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f7f9 fbae 	bl	800028c <__adddf3>
 8006b30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b38:	9303      	str	r3, [sp, #12]
 8006b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d15c      	bne.n	8006bfa <_dtoa_r+0x502>
 8006b40:	4b83      	ldr	r3, [pc, #524]	; (8006d50 <_dtoa_r+0x658>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 fb9e 	bl	8000288 <__aeabi_dsub>
 8006b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	f7f9 ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	f040 8296 	bne.w	800708a <_dtoa_r+0x992>
 8006b5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b62:	4630      	mov	r0, r6
 8006b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7f9 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f040 8288 	bne.w	8007084 <_dtoa_r+0x98c>
 8006b74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f2c0 8158 	blt.w	8006e34 <_dtoa_r+0x73c>
 8006b84:	f1ba 0f0e 	cmp.w	sl, #14
 8006b88:	f300 8154 	bgt.w	8006e34 <_dtoa_r+0x73c>
 8006b8c:	4b6b      	ldr	r3, [pc, #428]	; (8006d3c <_dtoa_r+0x644>)
 8006b8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f280 80e3 	bge.w	8006d64 <_dtoa_r+0x66c>
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f300 80df 	bgt.w	8006d64 <_dtoa_r+0x66c>
 8006ba6:	f040 826d 	bne.w	8007084 <_dtoa_r+0x98c>
 8006baa:	4b69      	ldr	r3, [pc, #420]	; (8006d50 <_dtoa_r+0x658>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 fd21 	bl	80005f8 <__aeabi_dmul>
 8006bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bba:	f7f9 ffa3 	bl	8000b04 <__aeabi_dcmpge>
 8006bbe:	9e01      	ldr	r6, [sp, #4]
 8006bc0:	4637      	mov	r7, r6
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f040 8243 	bne.w	800704e <_dtoa_r+0x956>
 8006bc8:	9d00      	ldr	r5, [sp, #0]
 8006bca:	2331      	movs	r3, #49	; 0x31
 8006bcc:	f805 3b01 	strb.w	r3, [r5], #1
 8006bd0:	f10a 0a01 	add.w	sl, sl, #1
 8006bd4:	e23f      	b.n	8007056 <_dtoa_r+0x95e>
 8006bd6:	07f2      	lsls	r2, r6, #31
 8006bd8:	d505      	bpl.n	8006be6 <_dtoa_r+0x4ee>
 8006bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bde:	f7f9 fd0b 	bl	80005f8 <__aeabi_dmul>
 8006be2:	3501      	adds	r5, #1
 8006be4:	2301      	movs	r3, #1
 8006be6:	1076      	asrs	r6, r6, #1
 8006be8:	3708      	adds	r7, #8
 8006bea:	e76c      	b.n	8006ac6 <_dtoa_r+0x3ce>
 8006bec:	2502      	movs	r5, #2
 8006bee:	e76f      	b.n	8006ad0 <_dtoa_r+0x3d8>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bf8:	e78d      	b.n	8006b16 <_dtoa_r+0x41e>
 8006bfa:	9900      	ldr	r1, [sp, #0]
 8006bfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c00:	4b4e      	ldr	r3, [pc, #312]	; (8006d3c <_dtoa_r+0x644>)
 8006c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c06:	4401      	add	r1, r0
 8006c08:	9102      	str	r1, [sp, #8]
 8006c0a:	9908      	ldr	r1, [sp, #32]
 8006c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c10:	eef0 8a67 	vmov.f32	s17, s15
 8006c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	d045      	beq.n	8006cac <_dtoa_r+0x5b4>
 8006c20:	494c      	ldr	r1, [pc, #304]	; (8006d54 <_dtoa_r+0x65c>)
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7f9 fe12 	bl	800084c <__aeabi_ddiv>
 8006c28:	ec53 2b18 	vmov	r2, r3, d8
 8006c2c:	f7f9 fb2c 	bl	8000288 <__aeabi_dsub>
 8006c30:	9d00      	ldr	r5, [sp, #0]
 8006c32:	ec41 0b18 	vmov	d8, r0, r1
 8006c36:	4639      	mov	r1, r7
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7f9 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8006c3e:	900c      	str	r0, [sp, #48]	; 0x30
 8006c40:	f7f9 fc70 	bl	8000524 <__aeabi_i2d>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fb1c 	bl	8000288 <__aeabi_dsub>
 8006c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c52:	3330      	adds	r3, #48	; 0x30
 8006c54:	f805 3b01 	strb.w	r3, [r5], #1
 8006c58:	ec53 2b18 	vmov	r2, r3, d8
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	f7f9 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d165      	bne.n	8006d34 <_dtoa_r+0x63c>
 8006c68:	4632      	mov	r2, r6
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	4935      	ldr	r1, [pc, #212]	; (8006d44 <_dtoa_r+0x64c>)
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f7f9 fb0a 	bl	8000288 <__aeabi_dsub>
 8006c74:	ec53 2b18 	vmov	r2, r3, d8
 8006c78:	f7f9 ff30 	bl	8000adc <__aeabi_dcmplt>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	f040 80b9 	bne.w	8006df4 <_dtoa_r+0x6fc>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	429d      	cmp	r5, r3
 8006c86:	f43f af75 	beq.w	8006b74 <_dtoa_r+0x47c>
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <_dtoa_r+0x650>)
 8006c8c:	ec51 0b18 	vmov	r0, r1, d8
 8006c90:	2200      	movs	r2, #0
 8006c92:	f7f9 fcb1 	bl	80005f8 <__aeabi_dmul>
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <_dtoa_r+0x650>)
 8006c98:	ec41 0b18 	vmov	d8, r0, r1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fca9 	bl	80005f8 <__aeabi_dmul>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	e7c4      	b.n	8006c36 <_dtoa_r+0x53e>
 8006cac:	ec51 0b17 	vmov	r0, r1, d7
 8006cb0:	f7f9 fca2 	bl	80005f8 <__aeabi_dmul>
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	9d00      	ldr	r5, [sp, #0]
 8006cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8006cba:	ec41 0b18 	vmov	d8, r0, r1
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7f9 ff49 	bl	8000b58 <__aeabi_d2iz>
 8006cc6:	9011      	str	r0, [sp, #68]	; 0x44
 8006cc8:	f7f9 fc2c 	bl	8000524 <__aeabi_i2d>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f7f9 fad8 	bl	8000288 <__aeabi_dsub>
 8006cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cda:	3330      	adds	r3, #48	; 0x30
 8006cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8006ce0:	9b02      	ldr	r3, [sp, #8]
 8006ce2:	429d      	cmp	r5, r3
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	460f      	mov	r7, r1
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	d134      	bne.n	8006d58 <_dtoa_r+0x660>
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <_dtoa_r+0x65c>)
 8006cf0:	ec51 0b18 	vmov	r0, r1, d8
 8006cf4:	f7f9 faca 	bl	800028c <__adddf3>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f7f9 ff0a 	bl	8000b18 <__aeabi_dcmpgt>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d175      	bne.n	8006df4 <_dtoa_r+0x6fc>
 8006d08:	ec53 2b18 	vmov	r2, r3, d8
 8006d0c:	4911      	ldr	r1, [pc, #68]	; (8006d54 <_dtoa_r+0x65c>)
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f7f9 faba 	bl	8000288 <__aeabi_dsub>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fede 	bl	8000adc <__aeabi_dcmplt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f43f af27 	beq.w	8006b74 <_dtoa_r+0x47c>
 8006d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d28:	1e6b      	subs	r3, r5, #1
 8006d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d0f8      	beq.n	8006d26 <_dtoa_r+0x62e>
 8006d34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d38:	e04a      	b.n	8006dd0 <_dtoa_r+0x6d8>
 8006d3a:	bf00      	nop
 8006d3c:	0800a120 	.word	0x0800a120
 8006d40:	0800a0f8 	.word	0x0800a0f8
 8006d44:	3ff00000 	.word	0x3ff00000
 8006d48:	40240000 	.word	0x40240000
 8006d4c:	401c0000 	.word	0x401c0000
 8006d50:	40140000 	.word	0x40140000
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	4baf      	ldr	r3, [pc, #700]	; (8007018 <_dtoa_r+0x920>)
 8006d5a:	f7f9 fc4d 	bl	80005f8 <__aeabi_dmul>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	460f      	mov	r7, r1
 8006d62:	e7ac      	b.n	8006cbe <_dtoa_r+0x5c6>
 8006d64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d68:	9d00      	ldr	r5, [sp, #0]
 8006d6a:	4642      	mov	r2, r8
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fd6b 	bl	800084c <__aeabi_ddiv>
 8006d76:	f7f9 feef 	bl	8000b58 <__aeabi_d2iz>
 8006d7a:	9002      	str	r0, [sp, #8]
 8006d7c:	f7f9 fbd2 	bl	8000524 <__aeabi_i2d>
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	f7f9 fc38 	bl	80005f8 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	4639      	mov	r1, r7
 8006d90:	f7f9 fa7a 	bl	8000288 <__aeabi_dsub>
 8006d94:	9e02      	ldr	r6, [sp, #8]
 8006d96:	9f01      	ldr	r7, [sp, #4]
 8006d98:	3630      	adds	r6, #48	; 0x30
 8006d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8006d9e:	9e00      	ldr	r6, [sp, #0]
 8006da0:	1bae      	subs	r6, r5, r6
 8006da2:	42b7      	cmp	r7, r6
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	d137      	bne.n	8006e1a <_dtoa_r+0x722>
 8006daa:	f7f9 fa6f 	bl	800028c <__adddf3>
 8006dae:	4642      	mov	r2, r8
 8006db0:	464b      	mov	r3, r9
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	f7f9 feaf 	bl	8000b18 <__aeabi_dcmpgt>
 8006dba:	b9c8      	cbnz	r0, 8006df0 <_dtoa_r+0x6f8>
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dc8:	b110      	cbz	r0, 8006dd0 <_dtoa_r+0x6d8>
 8006dca:	9b02      	ldr	r3, [sp, #8]
 8006dcc:	07d9      	lsls	r1, r3, #31
 8006dce:	d40f      	bmi.n	8006df0 <_dtoa_r+0x6f8>
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	f001 f8a6 	bl	8007f24 <_Bfree>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	702b      	strb	r3, [r5, #0]
 8006ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dde:	f10a 0001 	add.w	r0, sl, #1
 8006de2:	6018      	str	r0, [r3, #0]
 8006de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f43f acd8 	beq.w	800679c <_dtoa_r+0xa4>
 8006dec:	601d      	str	r5, [r3, #0]
 8006dee:	e4d5      	b.n	800679c <_dtoa_r+0xa4>
 8006df0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006df4:	462b      	mov	r3, r5
 8006df6:	461d      	mov	r5, r3
 8006df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dfc:	2a39      	cmp	r2, #57	; 0x39
 8006dfe:	d108      	bne.n	8006e12 <_dtoa_r+0x71a>
 8006e00:	9a00      	ldr	r2, [sp, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d1f7      	bne.n	8006df6 <_dtoa_r+0x6fe>
 8006e06:	9a07      	ldr	r2, [sp, #28]
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	9207      	str	r2, [sp, #28]
 8006e0e:	2230      	movs	r2, #48	; 0x30
 8006e10:	700a      	strb	r2, [r1, #0]
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	3201      	adds	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e78c      	b.n	8006d34 <_dtoa_r+0x63c>
 8006e1a:	4b7f      	ldr	r3, [pc, #508]	; (8007018 <_dtoa_r+0x920>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f7f9 fbeb 	bl	80005f8 <__aeabi_dmul>
 8006e22:	2200      	movs	r2, #0
 8006e24:	2300      	movs	r3, #0
 8006e26:	4606      	mov	r6, r0
 8006e28:	460f      	mov	r7, r1
 8006e2a:	f7f9 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d09b      	beq.n	8006d6a <_dtoa_r+0x672>
 8006e32:	e7cd      	b.n	8006dd0 <_dtoa_r+0x6d8>
 8006e34:	9a08      	ldr	r2, [sp, #32]
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	f000 80c4 	beq.w	8006fc4 <_dtoa_r+0x8cc>
 8006e3c:	9a05      	ldr	r2, [sp, #20]
 8006e3e:	2a01      	cmp	r2, #1
 8006e40:	f300 80a8 	bgt.w	8006f94 <_dtoa_r+0x89c>
 8006e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	f000 80a0 	beq.w	8006f8c <_dtoa_r+0x894>
 8006e4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e50:	9e06      	ldr	r6, [sp, #24]
 8006e52:	4645      	mov	r5, r8
 8006e54:	9a04      	ldr	r2, [sp, #16]
 8006e56:	2101      	movs	r1, #1
 8006e58:	441a      	add	r2, r3
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4498      	add	r8, r3
 8006e5e:	9204      	str	r2, [sp, #16]
 8006e60:	f001 f966 	bl	8008130 <__i2b>
 8006e64:	4607      	mov	r7, r0
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	dd0b      	ble.n	8006e82 <_dtoa_r+0x78a>
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dd08      	ble.n	8006e82 <_dtoa_r+0x78a>
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	9a04      	ldr	r2, [sp, #16]
 8006e74:	bfa8      	it	ge
 8006e76:	462b      	movge	r3, r5
 8006e78:	eba8 0803 	sub.w	r8, r8, r3
 8006e7c:	1aed      	subs	r5, r5, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	b1fb      	cbz	r3, 8006ec6 <_dtoa_r+0x7ce>
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 809f 	beq.w	8006fcc <_dtoa_r+0x8d4>
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	dd11      	ble.n	8006eb6 <_dtoa_r+0x7be>
 8006e92:	4639      	mov	r1, r7
 8006e94:	4632      	mov	r2, r6
 8006e96:	4620      	mov	r0, r4
 8006e98:	f001 fa06 	bl	80082a8 <__pow5mult>
 8006e9c:	465a      	mov	r2, fp
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f001 f95a 	bl	800815c <__multiply>
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	9007      	str	r0, [sp, #28]
 8006eac:	4620      	mov	r0, r4
 8006eae:	f001 f839 	bl	8007f24 <_Bfree>
 8006eb2:	9b07      	ldr	r3, [sp, #28]
 8006eb4:	469b      	mov	fp, r3
 8006eb6:	9b06      	ldr	r3, [sp, #24]
 8006eb8:	1b9a      	subs	r2, r3, r6
 8006eba:	d004      	beq.n	8006ec6 <_dtoa_r+0x7ce>
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f001 f9f2 	bl	80082a8 <__pow5mult>
 8006ec4:	4683      	mov	fp, r0
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f001 f931 	bl	8008130 <__i2b>
 8006ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	dd7c      	ble.n	8006fd0 <_dtoa_r+0x8d8>
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4601      	mov	r1, r0
 8006eda:	4620      	mov	r0, r4
 8006edc:	f001 f9e4 	bl	80082a8 <__pow5mult>
 8006ee0:	9b05      	ldr	r3, [sp, #20]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	dd76      	ble.n	8006fd6 <_dtoa_r+0x8de>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9306      	str	r3, [sp, #24]
 8006eec:	6933      	ldr	r3, [r6, #16]
 8006eee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ef2:	6918      	ldr	r0, [r3, #16]
 8006ef4:	f001 f8cc 	bl	8008090 <__hi0bits>
 8006ef8:	f1c0 0020 	rsb	r0, r0, #32
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	4418      	add	r0, r3
 8006f00:	f010 001f 	ands.w	r0, r0, #31
 8006f04:	f000 8086 	beq.w	8007014 <_dtoa_r+0x91c>
 8006f08:	f1c0 0320 	rsb	r3, r0, #32
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	dd7f      	ble.n	8007010 <_dtoa_r+0x918>
 8006f10:	f1c0 001c 	rsb	r0, r0, #28
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	4403      	add	r3, r0
 8006f18:	4480      	add	r8, r0
 8006f1a:	4405      	add	r5, r0
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	f1b8 0f00 	cmp.w	r8, #0
 8006f22:	dd05      	ble.n	8006f30 <_dtoa_r+0x838>
 8006f24:	4659      	mov	r1, fp
 8006f26:	4642      	mov	r2, r8
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f001 fa17 	bl	800835c <__lshift>
 8006f2e:	4683      	mov	fp, r0
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dd05      	ble.n	8006f42 <_dtoa_r+0x84a>
 8006f36:	4631      	mov	r1, r6
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f001 fa0e 	bl	800835c <__lshift>
 8006f40:	4606      	mov	r6, r0
 8006f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d069      	beq.n	800701c <_dtoa_r+0x924>
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f001 fa72 	bl	8008434 <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	da63      	bge.n	800701c <_dtoa_r+0x924>
 8006f54:	2300      	movs	r3, #0
 8006f56:	4659      	mov	r1, fp
 8006f58:	220a      	movs	r2, #10
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f001 f804 	bl	8007f68 <__multadd>
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f66:	4683      	mov	fp, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 818f 	beq.w	800728c <_dtoa_r+0xb94>
 8006f6e:	4639      	mov	r1, r7
 8006f70:	2300      	movs	r3, #0
 8006f72:	220a      	movs	r2, #10
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fff7 	bl	8007f68 <__multadd>
 8006f7a:	f1b9 0f00 	cmp.w	r9, #0
 8006f7e:	4607      	mov	r7, r0
 8006f80:	f300 808e 	bgt.w	80070a0 <_dtoa_r+0x9a8>
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	dc50      	bgt.n	800702c <_dtoa_r+0x934>
 8006f8a:	e089      	b.n	80070a0 <_dtoa_r+0x9a8>
 8006f8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f92:	e75d      	b.n	8006e50 <_dtoa_r+0x758>
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	1e5e      	subs	r6, r3, #1
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	42b3      	cmp	r3, r6
 8006f9c:	bfbf      	itttt	lt
 8006f9e:	9b06      	ldrlt	r3, [sp, #24]
 8006fa0:	9606      	strlt	r6, [sp, #24]
 8006fa2:	1af2      	sublt	r2, r6, r3
 8006fa4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006fa6:	bfb6      	itet	lt
 8006fa8:	189b      	addlt	r3, r3, r2
 8006faa:	1b9e      	subge	r6, r3, r6
 8006fac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	bfb8      	it	lt
 8006fb2:	2600      	movlt	r6, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfb5      	itete	lt
 8006fb8:	eba8 0503 	sublt.w	r5, r8, r3
 8006fbc:	9b01      	ldrge	r3, [sp, #4]
 8006fbe:	2300      	movlt	r3, #0
 8006fc0:	4645      	movge	r5, r8
 8006fc2:	e747      	b.n	8006e54 <_dtoa_r+0x75c>
 8006fc4:	9e06      	ldr	r6, [sp, #24]
 8006fc6:	9f08      	ldr	r7, [sp, #32]
 8006fc8:	4645      	mov	r5, r8
 8006fca:	e74c      	b.n	8006e66 <_dtoa_r+0x76e>
 8006fcc:	9a06      	ldr	r2, [sp, #24]
 8006fce:	e775      	b.n	8006ebc <_dtoa_r+0x7c4>
 8006fd0:	9b05      	ldr	r3, [sp, #20]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	dc18      	bgt.n	8007008 <_dtoa_r+0x910>
 8006fd6:	9b02      	ldr	r3, [sp, #8]
 8006fd8:	b9b3      	cbnz	r3, 8007008 <_dtoa_r+0x910>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fe0:	b9a3      	cbnz	r3, 800700c <_dtoa_r+0x914>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	051b      	lsls	r3, r3, #20
 8006fec:	b12b      	cbz	r3, 8006ffa <_dtoa_r+0x902>
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	f108 0801 	add.w	r8, r8, #1
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	9306      	str	r3, [sp, #24]
 8006ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f47f af74 	bne.w	8006eec <_dtoa_r+0x7f4>
 8007004:	2001      	movs	r0, #1
 8007006:	e779      	b.n	8006efc <_dtoa_r+0x804>
 8007008:	2300      	movs	r3, #0
 800700a:	e7f6      	b.n	8006ffa <_dtoa_r+0x902>
 800700c:	9b02      	ldr	r3, [sp, #8]
 800700e:	e7f4      	b.n	8006ffa <_dtoa_r+0x902>
 8007010:	d085      	beq.n	8006f1e <_dtoa_r+0x826>
 8007012:	4618      	mov	r0, r3
 8007014:	301c      	adds	r0, #28
 8007016:	e77d      	b.n	8006f14 <_dtoa_r+0x81c>
 8007018:	40240000 	.word	0x40240000
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dc38      	bgt.n	8007094 <_dtoa_r+0x99c>
 8007022:	9b05      	ldr	r3, [sp, #20]
 8007024:	2b02      	cmp	r3, #2
 8007026:	dd35      	ble.n	8007094 <_dtoa_r+0x99c>
 8007028:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800702c:	f1b9 0f00 	cmp.w	r9, #0
 8007030:	d10d      	bne.n	800704e <_dtoa_r+0x956>
 8007032:	4631      	mov	r1, r6
 8007034:	464b      	mov	r3, r9
 8007036:	2205      	movs	r2, #5
 8007038:	4620      	mov	r0, r4
 800703a:	f000 ff95 	bl	8007f68 <__multadd>
 800703e:	4601      	mov	r1, r0
 8007040:	4606      	mov	r6, r0
 8007042:	4658      	mov	r0, fp
 8007044:	f001 f9f6 	bl	8008434 <__mcmp>
 8007048:	2800      	cmp	r0, #0
 800704a:	f73f adbd 	bgt.w	8006bc8 <_dtoa_r+0x4d0>
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	9d00      	ldr	r5, [sp, #0]
 8007052:	ea6f 0a03 	mvn.w	sl, r3
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	4631      	mov	r1, r6
 800705c:	4620      	mov	r0, r4
 800705e:	f000 ff61 	bl	8007f24 <_Bfree>
 8007062:	2f00      	cmp	r7, #0
 8007064:	f43f aeb4 	beq.w	8006dd0 <_dtoa_r+0x6d8>
 8007068:	f1b8 0f00 	cmp.w	r8, #0
 800706c:	d005      	beq.n	800707a <_dtoa_r+0x982>
 800706e:	45b8      	cmp	r8, r7
 8007070:	d003      	beq.n	800707a <_dtoa_r+0x982>
 8007072:	4641      	mov	r1, r8
 8007074:	4620      	mov	r0, r4
 8007076:	f000 ff55 	bl	8007f24 <_Bfree>
 800707a:	4639      	mov	r1, r7
 800707c:	4620      	mov	r0, r4
 800707e:	f000 ff51 	bl	8007f24 <_Bfree>
 8007082:	e6a5      	b.n	8006dd0 <_dtoa_r+0x6d8>
 8007084:	2600      	movs	r6, #0
 8007086:	4637      	mov	r7, r6
 8007088:	e7e1      	b.n	800704e <_dtoa_r+0x956>
 800708a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800708c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007090:	4637      	mov	r7, r6
 8007092:	e599      	b.n	8006bc8 <_dtoa_r+0x4d0>
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 80fd 	beq.w	800729a <_dtoa_r+0xba2>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	dd05      	ble.n	80070b0 <_dtoa_r+0x9b8>
 80070a4:	4639      	mov	r1, r7
 80070a6:	462a      	mov	r2, r5
 80070a8:	4620      	mov	r0, r4
 80070aa:	f001 f957 	bl	800835c <__lshift>
 80070ae:	4607      	mov	r7, r0
 80070b0:	9b06      	ldr	r3, [sp, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d05c      	beq.n	8007170 <_dtoa_r+0xa78>
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fef3 	bl	8007ea4 <_Balloc>
 80070be:	4605      	mov	r5, r0
 80070c0:	b928      	cbnz	r0, 80070ce <_dtoa_r+0x9d6>
 80070c2:	4b80      	ldr	r3, [pc, #512]	; (80072c4 <_dtoa_r+0xbcc>)
 80070c4:	4602      	mov	r2, r0
 80070c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070ca:	f7ff bb2e 	b.w	800672a <_dtoa_r+0x32>
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	3202      	adds	r2, #2
 80070d2:	0092      	lsls	r2, r2, #2
 80070d4:	f107 010c 	add.w	r1, r7, #12
 80070d8:	300c      	adds	r0, #12
 80070da:	f000 fed5 	bl	8007e88 <memcpy>
 80070de:	2201      	movs	r2, #1
 80070e0:	4629      	mov	r1, r5
 80070e2:	4620      	mov	r0, r4
 80070e4:	f001 f93a 	bl	800835c <__lshift>
 80070e8:	9b00      	ldr	r3, [sp, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	9b00      	ldr	r3, [sp, #0]
 80070f0:	444b      	add	r3, r9
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	46b8      	mov	r8, r7
 80070fc:	9306      	str	r3, [sp, #24]
 80070fe:	4607      	mov	r7, r0
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	4631      	mov	r1, r6
 8007104:	3b01      	subs	r3, #1
 8007106:	4658      	mov	r0, fp
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	f7ff fa67 	bl	80065dc <quorem>
 800710e:	4603      	mov	r3, r0
 8007110:	3330      	adds	r3, #48	; 0x30
 8007112:	9004      	str	r0, [sp, #16]
 8007114:	4641      	mov	r1, r8
 8007116:	4658      	mov	r0, fp
 8007118:	9308      	str	r3, [sp, #32]
 800711a:	f001 f98b 	bl	8008434 <__mcmp>
 800711e:	463a      	mov	r2, r7
 8007120:	4681      	mov	r9, r0
 8007122:	4631      	mov	r1, r6
 8007124:	4620      	mov	r0, r4
 8007126:	f001 f9a1 	bl	800846c <__mdiff>
 800712a:	68c2      	ldr	r2, [r0, #12]
 800712c:	9b08      	ldr	r3, [sp, #32]
 800712e:	4605      	mov	r5, r0
 8007130:	bb02      	cbnz	r2, 8007174 <_dtoa_r+0xa7c>
 8007132:	4601      	mov	r1, r0
 8007134:	4658      	mov	r0, fp
 8007136:	f001 f97d 	bl	8008434 <__mcmp>
 800713a:	9b08      	ldr	r3, [sp, #32]
 800713c:	4602      	mov	r2, r0
 800713e:	4629      	mov	r1, r5
 8007140:	4620      	mov	r0, r4
 8007142:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007146:	f000 feed 	bl	8007f24 <_Bfree>
 800714a:	9b05      	ldr	r3, [sp, #20]
 800714c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714e:	9d01      	ldr	r5, [sp, #4]
 8007150:	ea43 0102 	orr.w	r1, r3, r2
 8007154:	9b06      	ldr	r3, [sp, #24]
 8007156:	430b      	orrs	r3, r1
 8007158:	9b08      	ldr	r3, [sp, #32]
 800715a:	d10d      	bne.n	8007178 <_dtoa_r+0xa80>
 800715c:	2b39      	cmp	r3, #57	; 0x39
 800715e:	d029      	beq.n	80071b4 <_dtoa_r+0xabc>
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	dd01      	ble.n	800716a <_dtoa_r+0xa72>
 8007166:	9b04      	ldr	r3, [sp, #16]
 8007168:	3331      	adds	r3, #49	; 0x31
 800716a:	9a02      	ldr	r2, [sp, #8]
 800716c:	7013      	strb	r3, [r2, #0]
 800716e:	e774      	b.n	800705a <_dtoa_r+0x962>
 8007170:	4638      	mov	r0, r7
 8007172:	e7b9      	b.n	80070e8 <_dtoa_r+0x9f0>
 8007174:	2201      	movs	r2, #1
 8007176:	e7e2      	b.n	800713e <_dtoa_r+0xa46>
 8007178:	f1b9 0f00 	cmp.w	r9, #0
 800717c:	db06      	blt.n	800718c <_dtoa_r+0xa94>
 800717e:	9905      	ldr	r1, [sp, #20]
 8007180:	ea41 0909 	orr.w	r9, r1, r9
 8007184:	9906      	ldr	r1, [sp, #24]
 8007186:	ea59 0101 	orrs.w	r1, r9, r1
 800718a:	d120      	bne.n	80071ce <_dtoa_r+0xad6>
 800718c:	2a00      	cmp	r2, #0
 800718e:	ddec      	ble.n	800716a <_dtoa_r+0xa72>
 8007190:	4659      	mov	r1, fp
 8007192:	2201      	movs	r2, #1
 8007194:	4620      	mov	r0, r4
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f001 f8e0 	bl	800835c <__lshift>
 800719c:	4631      	mov	r1, r6
 800719e:	4683      	mov	fp, r0
 80071a0:	f001 f948 	bl	8008434 <__mcmp>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	dc02      	bgt.n	80071b0 <_dtoa_r+0xab8>
 80071aa:	d1de      	bne.n	800716a <_dtoa_r+0xa72>
 80071ac:	07da      	lsls	r2, r3, #31
 80071ae:	d5dc      	bpl.n	800716a <_dtoa_r+0xa72>
 80071b0:	2b39      	cmp	r3, #57	; 0x39
 80071b2:	d1d8      	bne.n	8007166 <_dtoa_r+0xa6e>
 80071b4:	9a02      	ldr	r2, [sp, #8]
 80071b6:	2339      	movs	r3, #57	; 0x39
 80071b8:	7013      	strb	r3, [r2, #0]
 80071ba:	462b      	mov	r3, r5
 80071bc:	461d      	mov	r5, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071c4:	2a39      	cmp	r2, #57	; 0x39
 80071c6:	d050      	beq.n	800726a <_dtoa_r+0xb72>
 80071c8:	3201      	adds	r2, #1
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e745      	b.n	800705a <_dtoa_r+0x962>
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	dd03      	ble.n	80071da <_dtoa_r+0xae2>
 80071d2:	2b39      	cmp	r3, #57	; 0x39
 80071d4:	d0ee      	beq.n	80071b4 <_dtoa_r+0xabc>
 80071d6:	3301      	adds	r3, #1
 80071d8:	e7c7      	b.n	800716a <_dtoa_r+0xa72>
 80071da:	9a01      	ldr	r2, [sp, #4]
 80071dc:	9907      	ldr	r1, [sp, #28]
 80071de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071e2:	428a      	cmp	r2, r1
 80071e4:	d02a      	beq.n	800723c <_dtoa_r+0xb44>
 80071e6:	4659      	mov	r1, fp
 80071e8:	2300      	movs	r3, #0
 80071ea:	220a      	movs	r2, #10
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 febb 	bl	8007f68 <__multadd>
 80071f2:	45b8      	cmp	r8, r7
 80071f4:	4683      	mov	fp, r0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	f04f 020a 	mov.w	r2, #10
 80071fe:	4641      	mov	r1, r8
 8007200:	4620      	mov	r0, r4
 8007202:	d107      	bne.n	8007214 <_dtoa_r+0xb1c>
 8007204:	f000 feb0 	bl	8007f68 <__multadd>
 8007208:	4680      	mov	r8, r0
 800720a:	4607      	mov	r7, r0
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	3301      	adds	r3, #1
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	e775      	b.n	8007100 <_dtoa_r+0xa08>
 8007214:	f000 fea8 	bl	8007f68 <__multadd>
 8007218:	4639      	mov	r1, r7
 800721a:	4680      	mov	r8, r0
 800721c:	2300      	movs	r3, #0
 800721e:	220a      	movs	r2, #10
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fea1 	bl	8007f68 <__multadd>
 8007226:	4607      	mov	r7, r0
 8007228:	e7f0      	b.n	800720c <_dtoa_r+0xb14>
 800722a:	f1b9 0f00 	cmp.w	r9, #0
 800722e:	9a00      	ldr	r2, [sp, #0]
 8007230:	bfcc      	ite	gt
 8007232:	464d      	movgt	r5, r9
 8007234:	2501      	movle	r5, #1
 8007236:	4415      	add	r5, r2
 8007238:	f04f 0800 	mov.w	r8, #0
 800723c:	4659      	mov	r1, fp
 800723e:	2201      	movs	r2, #1
 8007240:	4620      	mov	r0, r4
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	f001 f88a 	bl	800835c <__lshift>
 8007248:	4631      	mov	r1, r6
 800724a:	4683      	mov	fp, r0
 800724c:	f001 f8f2 	bl	8008434 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	dcb2      	bgt.n	80071ba <_dtoa_r+0xac2>
 8007254:	d102      	bne.n	800725c <_dtoa_r+0xb64>
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	07db      	lsls	r3, r3, #31
 800725a:	d4ae      	bmi.n	80071ba <_dtoa_r+0xac2>
 800725c:	462b      	mov	r3, r5
 800725e:	461d      	mov	r5, r3
 8007260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007264:	2a30      	cmp	r2, #48	; 0x30
 8007266:	d0fa      	beq.n	800725e <_dtoa_r+0xb66>
 8007268:	e6f7      	b.n	800705a <_dtoa_r+0x962>
 800726a:	9a00      	ldr	r2, [sp, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d1a5      	bne.n	80071bc <_dtoa_r+0xac4>
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	2331      	movs	r3, #49	; 0x31
 8007276:	e779      	b.n	800716c <_dtoa_r+0xa74>
 8007278:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <_dtoa_r+0xbd0>)
 800727a:	f7ff baaf 	b.w	80067dc <_dtoa_r+0xe4>
 800727e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007280:	2b00      	cmp	r3, #0
 8007282:	f47f aa86 	bne.w	8006792 <_dtoa_r+0x9a>
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <_dtoa_r+0xbd4>)
 8007288:	f7ff baa8 	b.w	80067dc <_dtoa_r+0xe4>
 800728c:	f1b9 0f00 	cmp.w	r9, #0
 8007290:	dc03      	bgt.n	800729a <_dtoa_r+0xba2>
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f73f aec9 	bgt.w	800702c <_dtoa_r+0x934>
 800729a:	9d00      	ldr	r5, [sp, #0]
 800729c:	4631      	mov	r1, r6
 800729e:	4658      	mov	r0, fp
 80072a0:	f7ff f99c 	bl	80065dc <quorem>
 80072a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072a8:	f805 3b01 	strb.w	r3, [r5], #1
 80072ac:	9a00      	ldr	r2, [sp, #0]
 80072ae:	1aaa      	subs	r2, r5, r2
 80072b0:	4591      	cmp	r9, r2
 80072b2:	ddba      	ble.n	800722a <_dtoa_r+0xb32>
 80072b4:	4659      	mov	r1, fp
 80072b6:	2300      	movs	r3, #0
 80072b8:	220a      	movs	r2, #10
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fe54 	bl	8007f68 <__multadd>
 80072c0:	4683      	mov	fp, r0
 80072c2:	e7eb      	b.n	800729c <_dtoa_r+0xba4>
 80072c4:	08009fa4 	.word	0x08009fa4
 80072c8:	0800a209 	.word	0x0800a209
 80072cc:	08009f21 	.word	0x08009f21

080072d0 <__sflush_r>:
 80072d0:	898a      	ldrh	r2, [r1, #12]
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	0710      	lsls	r0, r2, #28
 80072da:	460c      	mov	r4, r1
 80072dc:	d458      	bmi.n	8007390 <__sflush_r+0xc0>
 80072de:	684b      	ldr	r3, [r1, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc05      	bgt.n	80072f0 <__sflush_r+0x20>
 80072e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dc02      	bgt.n	80072f0 <__sflush_r+0x20>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d0f9      	beq.n	80072ea <__sflush_r+0x1a>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072fc:	682f      	ldr	r7, [r5, #0]
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	d032      	beq.n	8007368 <__sflush_r+0x98>
 8007302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	075a      	lsls	r2, r3, #29
 8007308:	d505      	bpl.n	8007316 <__sflush_r+0x46>
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	1ac0      	subs	r0, r0, r3
 800730e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007310:	b10b      	cbz	r3, 8007316 <__sflush_r+0x46>
 8007312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007314:	1ac0      	subs	r0, r0, r3
 8007316:	2300      	movs	r3, #0
 8007318:	4602      	mov	r2, r0
 800731a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800731c:	6a21      	ldr	r1, [r4, #32]
 800731e:	4628      	mov	r0, r5
 8007320:	47b0      	blx	r6
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	d106      	bne.n	8007336 <__sflush_r+0x66>
 8007328:	6829      	ldr	r1, [r5, #0]
 800732a:	291d      	cmp	r1, #29
 800732c:	d82c      	bhi.n	8007388 <__sflush_r+0xb8>
 800732e:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <__sflush_r+0x108>)
 8007330:	40ca      	lsrs	r2, r1
 8007332:	07d6      	lsls	r6, r2, #31
 8007334:	d528      	bpl.n	8007388 <__sflush_r+0xb8>
 8007336:	2200      	movs	r2, #0
 8007338:	6062      	str	r2, [r4, #4]
 800733a:	04d9      	lsls	r1, r3, #19
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	d504      	bpl.n	800734c <__sflush_r+0x7c>
 8007342:	1c42      	adds	r2, r0, #1
 8007344:	d101      	bne.n	800734a <__sflush_r+0x7a>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b903      	cbnz	r3, 800734c <__sflush_r+0x7c>
 800734a:	6560      	str	r0, [r4, #84]	; 0x54
 800734c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800734e:	602f      	str	r7, [r5, #0]
 8007350:	2900      	cmp	r1, #0
 8007352:	d0ca      	beq.n	80072ea <__sflush_r+0x1a>
 8007354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007358:	4299      	cmp	r1, r3
 800735a:	d002      	beq.n	8007362 <__sflush_r+0x92>
 800735c:	4628      	mov	r0, r5
 800735e:	f001 fa6b 	bl	8008838 <_free_r>
 8007362:	2000      	movs	r0, #0
 8007364:	6360      	str	r0, [r4, #52]	; 0x34
 8007366:	e7c1      	b.n	80072ec <__sflush_r+0x1c>
 8007368:	6a21      	ldr	r1, [r4, #32]
 800736a:	2301      	movs	r3, #1
 800736c:	4628      	mov	r0, r5
 800736e:	47b0      	blx	r6
 8007370:	1c41      	adds	r1, r0, #1
 8007372:	d1c7      	bne.n	8007304 <__sflush_r+0x34>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c4      	beq.n	8007304 <__sflush_r+0x34>
 800737a:	2b1d      	cmp	r3, #29
 800737c:	d001      	beq.n	8007382 <__sflush_r+0xb2>
 800737e:	2b16      	cmp	r3, #22
 8007380:	d101      	bne.n	8007386 <__sflush_r+0xb6>
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	e7b1      	b.n	80072ea <__sflush_r+0x1a>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	e7ad      	b.n	80072ec <__sflush_r+0x1c>
 8007390:	690f      	ldr	r7, [r1, #16]
 8007392:	2f00      	cmp	r7, #0
 8007394:	d0a9      	beq.n	80072ea <__sflush_r+0x1a>
 8007396:	0793      	lsls	r3, r2, #30
 8007398:	680e      	ldr	r6, [r1, #0]
 800739a:	bf08      	it	eq
 800739c:	694b      	ldreq	r3, [r1, #20]
 800739e:	600f      	str	r7, [r1, #0]
 80073a0:	bf18      	it	ne
 80073a2:	2300      	movne	r3, #0
 80073a4:	eba6 0807 	sub.w	r8, r6, r7
 80073a8:	608b      	str	r3, [r1, #8]
 80073aa:	f1b8 0f00 	cmp.w	r8, #0
 80073ae:	dd9c      	ble.n	80072ea <__sflush_r+0x1a>
 80073b0:	6a21      	ldr	r1, [r4, #32]
 80073b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073b4:	4643      	mov	r3, r8
 80073b6:	463a      	mov	r2, r7
 80073b8:	4628      	mov	r0, r5
 80073ba:	47b0      	blx	r6
 80073bc:	2800      	cmp	r0, #0
 80073be:	dc06      	bgt.n	80073ce <__sflush_r+0xfe>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	e78e      	b.n	80072ec <__sflush_r+0x1c>
 80073ce:	4407      	add	r7, r0
 80073d0:	eba8 0800 	sub.w	r8, r8, r0
 80073d4:	e7e9      	b.n	80073aa <__sflush_r+0xda>
 80073d6:	bf00      	nop
 80073d8:	20400001 	.word	0x20400001

080073dc <_fflush_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b913      	cbnz	r3, 80073ec <_fflush_r+0x10>
 80073e6:	2500      	movs	r5, #0
 80073e8:	4628      	mov	r0, r5
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	b118      	cbz	r0, 80073f6 <_fflush_r+0x1a>
 80073ee:	6983      	ldr	r3, [r0, #24]
 80073f0:	b90b      	cbnz	r3, 80073f6 <_fflush_r+0x1a>
 80073f2:	f000 f899 	bl	8007528 <__sinit>
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <_fflush_r+0x6c>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d11b      	bne.n	8007434 <_fflush_r+0x58>
 80073fc:	686c      	ldr	r4, [r5, #4]
 80073fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0ef      	beq.n	80073e6 <_fflush_r+0xa>
 8007406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d404      	bmi.n	8007416 <_fflush_r+0x3a>
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_fflush_r+0x3a>
 8007410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007412:	f000 fcb8 	bl	8007d86 <__retarget_lock_acquire_recursive>
 8007416:	4628      	mov	r0, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7ff ff59 	bl	80072d0 <__sflush_r>
 800741e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007420:	07da      	lsls	r2, r3, #31
 8007422:	4605      	mov	r5, r0
 8007424:	d4e0      	bmi.n	80073e8 <_fflush_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d4dd      	bmi.n	80073e8 <_fflush_r+0xc>
 800742c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742e:	f000 fcab 	bl	8007d88 <__retarget_lock_release_recursive>
 8007432:	e7d9      	b.n	80073e8 <_fflush_r+0xc>
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <_fflush_r+0x70>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d101      	bne.n	800743e <_fflush_r+0x62>
 800743a:	68ac      	ldr	r4, [r5, #8]
 800743c:	e7df      	b.n	80073fe <_fflush_r+0x22>
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <_fflush_r+0x74>)
 8007440:	429c      	cmp	r4, r3
 8007442:	bf08      	it	eq
 8007444:	68ec      	ldreq	r4, [r5, #12]
 8007446:	e7da      	b.n	80073fe <_fflush_r+0x22>
 8007448:	08009fd8 	.word	0x08009fd8
 800744c:	08009ff8 	.word	0x08009ff8
 8007450:	08009fb8 	.word	0x08009fb8

08007454 <fflush>:
 8007454:	4601      	mov	r1, r0
 8007456:	b920      	cbnz	r0, 8007462 <fflush+0xe>
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <fflush+0x18>)
 800745a:	4905      	ldr	r1, [pc, #20]	; (8007470 <fflush+0x1c>)
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	f000 b8fe 	b.w	800765e <_fwalk_reent>
 8007462:	4b04      	ldr	r3, [pc, #16]	; (8007474 <fflush+0x20>)
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f7ff bfb9 	b.w	80073dc <_fflush_r>
 800746a:	bf00      	nop
 800746c:	08009d90 	.word	0x08009d90
 8007470:	080073dd 	.word	0x080073dd
 8007474:	2000000c 	.word	0x2000000c

08007478 <std>:
 8007478:	2300      	movs	r3, #0
 800747a:	b510      	push	{r4, lr}
 800747c:	4604      	mov	r4, r0
 800747e:	e9c0 3300 	strd	r3, r3, [r0]
 8007482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007486:	6083      	str	r3, [r0, #8]
 8007488:	8181      	strh	r1, [r0, #12]
 800748a:	6643      	str	r3, [r0, #100]	; 0x64
 800748c:	81c2      	strh	r2, [r0, #14]
 800748e:	6183      	str	r3, [r0, #24]
 8007490:	4619      	mov	r1, r3
 8007492:	2208      	movs	r2, #8
 8007494:	305c      	adds	r0, #92	; 0x5c
 8007496:	f7fd f91b 	bl	80046d0 <memset>
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <std+0x38>)
 800749c:	6263      	str	r3, [r4, #36]	; 0x24
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <std+0x3c>)
 80074a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <std+0x40>)
 80074a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074a6:	4b05      	ldr	r3, [pc, #20]	; (80074bc <std+0x44>)
 80074a8:	6224      	str	r4, [r4, #32]
 80074aa:	6323      	str	r3, [r4, #48]	; 0x30
 80074ac:	bd10      	pop	{r4, pc}
 80074ae:	bf00      	nop
 80074b0:	080096f5 	.word	0x080096f5
 80074b4:	08009717 	.word	0x08009717
 80074b8:	0800974f 	.word	0x0800974f
 80074bc:	08009773 	.word	0x08009773

080074c0 <_cleanup_r>:
 80074c0:	4901      	ldr	r1, [pc, #4]	; (80074c8 <_cleanup_r+0x8>)
 80074c2:	f000 b8cc 	b.w	800765e <_fwalk_reent>
 80074c6:	bf00      	nop
 80074c8:	080073dd 	.word	0x080073dd

080074cc <__sfmoreglue>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	1e4a      	subs	r2, r1, #1
 80074d0:	2568      	movs	r5, #104	; 0x68
 80074d2:	4355      	muls	r5, r2
 80074d4:	460e      	mov	r6, r1
 80074d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074da:	f001 f9fd 	bl	80088d8 <_malloc_r>
 80074de:	4604      	mov	r4, r0
 80074e0:	b140      	cbz	r0, 80074f4 <__sfmoreglue+0x28>
 80074e2:	2100      	movs	r1, #0
 80074e4:	e9c0 1600 	strd	r1, r6, [r0]
 80074e8:	300c      	adds	r0, #12
 80074ea:	60a0      	str	r0, [r4, #8]
 80074ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074f0:	f7fd f8ee 	bl	80046d0 <memset>
 80074f4:	4620      	mov	r0, r4
 80074f6:	bd70      	pop	{r4, r5, r6, pc}

080074f8 <__sfp_lock_acquire>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__sfp_lock_acquire+0x8>)
 80074fa:	f000 bc44 	b.w	8007d86 <__retarget_lock_acquire_recursive>
 80074fe:	bf00      	nop
 8007500:	20000348 	.word	0x20000348

08007504 <__sfp_lock_release>:
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <__sfp_lock_release+0x8>)
 8007506:	f000 bc3f 	b.w	8007d88 <__retarget_lock_release_recursive>
 800750a:	bf00      	nop
 800750c:	20000348 	.word	0x20000348

08007510 <__sinit_lock_acquire>:
 8007510:	4801      	ldr	r0, [pc, #4]	; (8007518 <__sinit_lock_acquire+0x8>)
 8007512:	f000 bc38 	b.w	8007d86 <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	20000343 	.word	0x20000343

0800751c <__sinit_lock_release>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__sinit_lock_release+0x8>)
 800751e:	f000 bc33 	b.w	8007d88 <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	20000343 	.word	0x20000343

08007528 <__sinit>:
 8007528:	b510      	push	{r4, lr}
 800752a:	4604      	mov	r4, r0
 800752c:	f7ff fff0 	bl	8007510 <__sinit_lock_acquire>
 8007530:	69a3      	ldr	r3, [r4, #24]
 8007532:	b11b      	cbz	r3, 800753c <__sinit+0x14>
 8007534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007538:	f7ff bff0 	b.w	800751c <__sinit_lock_release>
 800753c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007540:	6523      	str	r3, [r4, #80]	; 0x50
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <__sinit+0x68>)
 8007544:	4a13      	ldr	r2, [pc, #76]	; (8007594 <__sinit+0x6c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	62a2      	str	r2, [r4, #40]	; 0x28
 800754a:	42a3      	cmp	r3, r4
 800754c:	bf04      	itt	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	61a3      	streq	r3, [r4, #24]
 8007552:	4620      	mov	r0, r4
 8007554:	f000 f820 	bl	8007598 <__sfp>
 8007558:	6060      	str	r0, [r4, #4]
 800755a:	4620      	mov	r0, r4
 800755c:	f000 f81c 	bl	8007598 <__sfp>
 8007560:	60a0      	str	r0, [r4, #8]
 8007562:	4620      	mov	r0, r4
 8007564:	f000 f818 	bl	8007598 <__sfp>
 8007568:	2200      	movs	r2, #0
 800756a:	60e0      	str	r0, [r4, #12]
 800756c:	2104      	movs	r1, #4
 800756e:	6860      	ldr	r0, [r4, #4]
 8007570:	f7ff ff82 	bl	8007478 <std>
 8007574:	68a0      	ldr	r0, [r4, #8]
 8007576:	2201      	movs	r2, #1
 8007578:	2109      	movs	r1, #9
 800757a:	f7ff ff7d 	bl	8007478 <std>
 800757e:	68e0      	ldr	r0, [r4, #12]
 8007580:	2202      	movs	r2, #2
 8007582:	2112      	movs	r1, #18
 8007584:	f7ff ff78 	bl	8007478 <std>
 8007588:	2301      	movs	r3, #1
 800758a:	61a3      	str	r3, [r4, #24]
 800758c:	e7d2      	b.n	8007534 <__sinit+0xc>
 800758e:	bf00      	nop
 8007590:	08009d90 	.word	0x08009d90
 8007594:	080074c1 	.word	0x080074c1

08007598 <__sfp>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	4607      	mov	r7, r0
 800759c:	f7ff ffac 	bl	80074f8 <__sfp_lock_acquire>
 80075a0:	4b1e      	ldr	r3, [pc, #120]	; (800761c <__sfp+0x84>)
 80075a2:	681e      	ldr	r6, [r3, #0]
 80075a4:	69b3      	ldr	r3, [r6, #24]
 80075a6:	b913      	cbnz	r3, 80075ae <__sfp+0x16>
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ffbd 	bl	8007528 <__sinit>
 80075ae:	3648      	adds	r6, #72	; 0x48
 80075b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	d503      	bpl.n	80075c0 <__sfp+0x28>
 80075b8:	6833      	ldr	r3, [r6, #0]
 80075ba:	b30b      	cbz	r3, 8007600 <__sfp+0x68>
 80075bc:	6836      	ldr	r6, [r6, #0]
 80075be:	e7f7      	b.n	80075b0 <__sfp+0x18>
 80075c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075c4:	b9d5      	cbnz	r5, 80075fc <__sfp+0x64>
 80075c6:	4b16      	ldr	r3, [pc, #88]	; (8007620 <__sfp+0x88>)
 80075c8:	60e3      	str	r3, [r4, #12]
 80075ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ce:	6665      	str	r5, [r4, #100]	; 0x64
 80075d0:	f000 fbd8 	bl	8007d84 <__retarget_lock_init_recursive>
 80075d4:	f7ff ff96 	bl	8007504 <__sfp_lock_release>
 80075d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075e0:	6025      	str	r5, [r4, #0]
 80075e2:	61a5      	str	r5, [r4, #24]
 80075e4:	2208      	movs	r2, #8
 80075e6:	4629      	mov	r1, r5
 80075e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075ec:	f7fd f870 	bl	80046d0 <memset>
 80075f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075f8:	4620      	mov	r0, r4
 80075fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075fc:	3468      	adds	r4, #104	; 0x68
 80075fe:	e7d9      	b.n	80075b4 <__sfp+0x1c>
 8007600:	2104      	movs	r1, #4
 8007602:	4638      	mov	r0, r7
 8007604:	f7ff ff62 	bl	80074cc <__sfmoreglue>
 8007608:	4604      	mov	r4, r0
 800760a:	6030      	str	r0, [r6, #0]
 800760c:	2800      	cmp	r0, #0
 800760e:	d1d5      	bne.n	80075bc <__sfp+0x24>
 8007610:	f7ff ff78 	bl	8007504 <__sfp_lock_release>
 8007614:	230c      	movs	r3, #12
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	e7ee      	b.n	80075f8 <__sfp+0x60>
 800761a:	bf00      	nop
 800761c:	08009d90 	.word	0x08009d90
 8007620:	ffff0001 	.word	0xffff0001

08007624 <_fwalk>:
 8007624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007628:	460f      	mov	r7, r1
 800762a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800762e:	2600      	movs	r6, #0
 8007630:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8007634:	f1b8 0801 	subs.w	r8, r8, #1
 8007638:	d505      	bpl.n	8007646 <_fwalk+0x22>
 800763a:	6824      	ldr	r4, [r4, #0]
 800763c:	2c00      	cmp	r4, #0
 800763e:	d1f7      	bne.n	8007630 <_fwalk+0xc>
 8007640:	4630      	mov	r0, r6
 8007642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d906      	bls.n	800765a <_fwalk+0x36>
 800764c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007650:	3301      	adds	r3, #1
 8007652:	d002      	beq.n	800765a <_fwalk+0x36>
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	4306      	orrs	r6, r0
 800765a:	3568      	adds	r5, #104	; 0x68
 800765c:	e7ea      	b.n	8007634 <_fwalk+0x10>

0800765e <_fwalk_reent>:
 800765e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007662:	4606      	mov	r6, r0
 8007664:	4688      	mov	r8, r1
 8007666:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800766a:	2700      	movs	r7, #0
 800766c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007670:	f1b9 0901 	subs.w	r9, r9, #1
 8007674:	d505      	bpl.n	8007682 <_fwalk_reent+0x24>
 8007676:	6824      	ldr	r4, [r4, #0]
 8007678:	2c00      	cmp	r4, #0
 800767a:	d1f7      	bne.n	800766c <_fwalk_reent+0xe>
 800767c:	4638      	mov	r0, r7
 800767e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d907      	bls.n	8007698 <_fwalk_reent+0x3a>
 8007688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800768c:	3301      	adds	r3, #1
 800768e:	d003      	beq.n	8007698 <_fwalk_reent+0x3a>
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	47c0      	blx	r8
 8007696:	4307      	orrs	r7, r0
 8007698:	3568      	adds	r5, #104	; 0x68
 800769a:	e7e9      	b.n	8007670 <_fwalk_reent+0x12>

0800769c <rshift>:
 800769c:	6903      	ldr	r3, [r0, #16]
 800769e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80076a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80076aa:	f100 0414 	add.w	r4, r0, #20
 80076ae:	dd45      	ble.n	800773c <rshift+0xa0>
 80076b0:	f011 011f 	ands.w	r1, r1, #31
 80076b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80076b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80076bc:	d10c      	bne.n	80076d8 <rshift+0x3c>
 80076be:	f100 0710 	add.w	r7, r0, #16
 80076c2:	4629      	mov	r1, r5
 80076c4:	42b1      	cmp	r1, r6
 80076c6:	d334      	bcc.n	8007732 <rshift+0x96>
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	1eea      	subs	r2, r5, #3
 80076ce:	4296      	cmp	r6, r2
 80076d0:	bf38      	it	cc
 80076d2:	2300      	movcc	r3, #0
 80076d4:	4423      	add	r3, r4
 80076d6:	e015      	b.n	8007704 <rshift+0x68>
 80076d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80076dc:	f1c1 0820 	rsb	r8, r1, #32
 80076e0:	40cf      	lsrs	r7, r1
 80076e2:	f105 0e04 	add.w	lr, r5, #4
 80076e6:	46a1      	mov	r9, r4
 80076e8:	4576      	cmp	r6, lr
 80076ea:	46f4      	mov	ip, lr
 80076ec:	d815      	bhi.n	800771a <rshift+0x7e>
 80076ee:	1a9b      	subs	r3, r3, r2
 80076f0:	009a      	lsls	r2, r3, #2
 80076f2:	3a04      	subs	r2, #4
 80076f4:	3501      	adds	r5, #1
 80076f6:	42ae      	cmp	r6, r5
 80076f8:	bf38      	it	cc
 80076fa:	2200      	movcc	r2, #0
 80076fc:	18a3      	adds	r3, r4, r2
 80076fe:	50a7      	str	r7, [r4, r2]
 8007700:	b107      	cbz	r7, 8007704 <rshift+0x68>
 8007702:	3304      	adds	r3, #4
 8007704:	1b1a      	subs	r2, r3, r4
 8007706:	42a3      	cmp	r3, r4
 8007708:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800770c:	bf08      	it	eq
 800770e:	2300      	moveq	r3, #0
 8007710:	6102      	str	r2, [r0, #16]
 8007712:	bf08      	it	eq
 8007714:	6143      	streq	r3, [r0, #20]
 8007716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800771a:	f8dc c000 	ldr.w	ip, [ip]
 800771e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007722:	ea4c 0707 	orr.w	r7, ip, r7
 8007726:	f849 7b04 	str.w	r7, [r9], #4
 800772a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800772e:	40cf      	lsrs	r7, r1
 8007730:	e7da      	b.n	80076e8 <rshift+0x4c>
 8007732:	f851 cb04 	ldr.w	ip, [r1], #4
 8007736:	f847 cf04 	str.w	ip, [r7, #4]!
 800773a:	e7c3      	b.n	80076c4 <rshift+0x28>
 800773c:	4623      	mov	r3, r4
 800773e:	e7e1      	b.n	8007704 <rshift+0x68>

08007740 <__hexdig_fun>:
 8007740:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007744:	2b09      	cmp	r3, #9
 8007746:	d802      	bhi.n	800774e <__hexdig_fun+0xe>
 8007748:	3820      	subs	r0, #32
 800774a:	b2c0      	uxtb	r0, r0
 800774c:	4770      	bx	lr
 800774e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007752:	2b05      	cmp	r3, #5
 8007754:	d801      	bhi.n	800775a <__hexdig_fun+0x1a>
 8007756:	3847      	subs	r0, #71	; 0x47
 8007758:	e7f7      	b.n	800774a <__hexdig_fun+0xa>
 800775a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800775e:	2b05      	cmp	r3, #5
 8007760:	d801      	bhi.n	8007766 <__hexdig_fun+0x26>
 8007762:	3827      	subs	r0, #39	; 0x27
 8007764:	e7f1      	b.n	800774a <__hexdig_fun+0xa>
 8007766:	2000      	movs	r0, #0
 8007768:	4770      	bx	lr
	...

0800776c <__gethex>:
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	ed2d 8b02 	vpush	{d8}
 8007774:	b089      	sub	sp, #36	; 0x24
 8007776:	ee08 0a10 	vmov	s16, r0
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	4bbc      	ldr	r3, [pc, #752]	; (8007a70 <__gethex+0x304>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	4618      	mov	r0, r3
 8007784:	468b      	mov	fp, r1
 8007786:	4690      	mov	r8, r2
 8007788:	f7f8 fd22 	bl	80001d0 <strlen>
 800778c:	9b01      	ldr	r3, [sp, #4]
 800778e:	f8db 2000 	ldr.w	r2, [fp]
 8007792:	4403      	add	r3, r0
 8007794:	4682      	mov	sl, r0
 8007796:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	1c93      	adds	r3, r2, #2
 800779e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80077a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80077a6:	32fe      	adds	r2, #254	; 0xfe
 80077a8:	18d1      	adds	r1, r2, r3
 80077aa:	461f      	mov	r7, r3
 80077ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80077b0:	9100      	str	r1, [sp, #0]
 80077b2:	2830      	cmp	r0, #48	; 0x30
 80077b4:	d0f8      	beq.n	80077a8 <__gethex+0x3c>
 80077b6:	f7ff ffc3 	bl	8007740 <__hexdig_fun>
 80077ba:	4604      	mov	r4, r0
 80077bc:	2800      	cmp	r0, #0
 80077be:	d13a      	bne.n	8007836 <__gethex+0xca>
 80077c0:	9901      	ldr	r1, [sp, #4]
 80077c2:	4652      	mov	r2, sl
 80077c4:	4638      	mov	r0, r7
 80077c6:	f001 ffd8 	bl	800977a <strncmp>
 80077ca:	4605      	mov	r5, r0
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d168      	bne.n	80078a2 <__gethex+0x136>
 80077d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80077d4:	eb07 060a 	add.w	r6, r7, sl
 80077d8:	f7ff ffb2 	bl	8007740 <__hexdig_fun>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d062      	beq.n	80078a6 <__gethex+0x13a>
 80077e0:	4633      	mov	r3, r6
 80077e2:	7818      	ldrb	r0, [r3, #0]
 80077e4:	2830      	cmp	r0, #48	; 0x30
 80077e6:	461f      	mov	r7, r3
 80077e8:	f103 0301 	add.w	r3, r3, #1
 80077ec:	d0f9      	beq.n	80077e2 <__gethex+0x76>
 80077ee:	f7ff ffa7 	bl	8007740 <__hexdig_fun>
 80077f2:	2301      	movs	r3, #1
 80077f4:	fab0 f480 	clz	r4, r0
 80077f8:	0964      	lsrs	r4, r4, #5
 80077fa:	4635      	mov	r5, r6
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	463a      	mov	r2, r7
 8007800:	4616      	mov	r6, r2
 8007802:	3201      	adds	r2, #1
 8007804:	7830      	ldrb	r0, [r6, #0]
 8007806:	f7ff ff9b 	bl	8007740 <__hexdig_fun>
 800780a:	2800      	cmp	r0, #0
 800780c:	d1f8      	bne.n	8007800 <__gethex+0x94>
 800780e:	9901      	ldr	r1, [sp, #4]
 8007810:	4652      	mov	r2, sl
 8007812:	4630      	mov	r0, r6
 8007814:	f001 ffb1 	bl	800977a <strncmp>
 8007818:	b980      	cbnz	r0, 800783c <__gethex+0xd0>
 800781a:	b94d      	cbnz	r5, 8007830 <__gethex+0xc4>
 800781c:	eb06 050a 	add.w	r5, r6, sl
 8007820:	462a      	mov	r2, r5
 8007822:	4616      	mov	r6, r2
 8007824:	3201      	adds	r2, #1
 8007826:	7830      	ldrb	r0, [r6, #0]
 8007828:	f7ff ff8a 	bl	8007740 <__hexdig_fun>
 800782c:	2800      	cmp	r0, #0
 800782e:	d1f8      	bne.n	8007822 <__gethex+0xb6>
 8007830:	1bad      	subs	r5, r5, r6
 8007832:	00ad      	lsls	r5, r5, #2
 8007834:	e004      	b.n	8007840 <__gethex+0xd4>
 8007836:	2400      	movs	r4, #0
 8007838:	4625      	mov	r5, r4
 800783a:	e7e0      	b.n	80077fe <__gethex+0x92>
 800783c:	2d00      	cmp	r5, #0
 800783e:	d1f7      	bne.n	8007830 <__gethex+0xc4>
 8007840:	7833      	ldrb	r3, [r6, #0]
 8007842:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007846:	2b50      	cmp	r3, #80	; 0x50
 8007848:	d13b      	bne.n	80078c2 <__gethex+0x156>
 800784a:	7873      	ldrb	r3, [r6, #1]
 800784c:	2b2b      	cmp	r3, #43	; 0x2b
 800784e:	d02c      	beq.n	80078aa <__gethex+0x13e>
 8007850:	2b2d      	cmp	r3, #45	; 0x2d
 8007852:	d02e      	beq.n	80078b2 <__gethex+0x146>
 8007854:	1c71      	adds	r1, r6, #1
 8007856:	f04f 0900 	mov.w	r9, #0
 800785a:	7808      	ldrb	r0, [r1, #0]
 800785c:	f7ff ff70 	bl	8007740 <__hexdig_fun>
 8007860:	1e43      	subs	r3, r0, #1
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b18      	cmp	r3, #24
 8007866:	d82c      	bhi.n	80078c2 <__gethex+0x156>
 8007868:	f1a0 0210 	sub.w	r2, r0, #16
 800786c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007870:	f7ff ff66 	bl	8007740 <__hexdig_fun>
 8007874:	1e43      	subs	r3, r0, #1
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b18      	cmp	r3, #24
 800787a:	d91d      	bls.n	80078b8 <__gethex+0x14c>
 800787c:	f1b9 0f00 	cmp.w	r9, #0
 8007880:	d000      	beq.n	8007884 <__gethex+0x118>
 8007882:	4252      	negs	r2, r2
 8007884:	4415      	add	r5, r2
 8007886:	f8cb 1000 	str.w	r1, [fp]
 800788a:	b1e4      	cbz	r4, 80078c6 <__gethex+0x15a>
 800788c:	9b00      	ldr	r3, [sp, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2700      	movne	r7, #0
 8007894:	2706      	moveq	r7, #6
 8007896:	4638      	mov	r0, r7
 8007898:	b009      	add	sp, #36	; 0x24
 800789a:	ecbd 8b02 	vpop	{d8}
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	463e      	mov	r6, r7
 80078a4:	4625      	mov	r5, r4
 80078a6:	2401      	movs	r4, #1
 80078a8:	e7ca      	b.n	8007840 <__gethex+0xd4>
 80078aa:	f04f 0900 	mov.w	r9, #0
 80078ae:	1cb1      	adds	r1, r6, #2
 80078b0:	e7d3      	b.n	800785a <__gethex+0xee>
 80078b2:	f04f 0901 	mov.w	r9, #1
 80078b6:	e7fa      	b.n	80078ae <__gethex+0x142>
 80078b8:	230a      	movs	r3, #10
 80078ba:	fb03 0202 	mla	r2, r3, r2, r0
 80078be:	3a10      	subs	r2, #16
 80078c0:	e7d4      	b.n	800786c <__gethex+0x100>
 80078c2:	4631      	mov	r1, r6
 80078c4:	e7df      	b.n	8007886 <__gethex+0x11a>
 80078c6:	1bf3      	subs	r3, r6, r7
 80078c8:	3b01      	subs	r3, #1
 80078ca:	4621      	mov	r1, r4
 80078cc:	2b07      	cmp	r3, #7
 80078ce:	dc0b      	bgt.n	80078e8 <__gethex+0x17c>
 80078d0:	ee18 0a10 	vmov	r0, s16
 80078d4:	f000 fae6 	bl	8007ea4 <_Balloc>
 80078d8:	4604      	mov	r4, r0
 80078da:	b940      	cbnz	r0, 80078ee <__gethex+0x182>
 80078dc:	4b65      	ldr	r3, [pc, #404]	; (8007a74 <__gethex+0x308>)
 80078de:	4602      	mov	r2, r0
 80078e0:	21de      	movs	r1, #222	; 0xde
 80078e2:	4865      	ldr	r0, [pc, #404]	; (8007a78 <__gethex+0x30c>)
 80078e4:	f002 f8cc 	bl	8009a80 <__assert_func>
 80078e8:	3101      	adds	r1, #1
 80078ea:	105b      	asrs	r3, r3, #1
 80078ec:	e7ee      	b.n	80078cc <__gethex+0x160>
 80078ee:	f100 0914 	add.w	r9, r0, #20
 80078f2:	f04f 0b00 	mov.w	fp, #0
 80078f6:	f1ca 0301 	rsb	r3, sl, #1
 80078fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80078fe:	f8cd b000 	str.w	fp, [sp]
 8007902:	9306      	str	r3, [sp, #24]
 8007904:	42b7      	cmp	r7, r6
 8007906:	d340      	bcc.n	800798a <__gethex+0x21e>
 8007908:	9802      	ldr	r0, [sp, #8]
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	f840 3b04 	str.w	r3, [r0], #4
 8007910:	eba0 0009 	sub.w	r0, r0, r9
 8007914:	1080      	asrs	r0, r0, #2
 8007916:	0146      	lsls	r6, r0, #5
 8007918:	6120      	str	r0, [r4, #16]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fbb8 	bl	8008090 <__hi0bits>
 8007920:	1a30      	subs	r0, r6, r0
 8007922:	f8d8 6000 	ldr.w	r6, [r8]
 8007926:	42b0      	cmp	r0, r6
 8007928:	dd63      	ble.n	80079f2 <__gethex+0x286>
 800792a:	1b87      	subs	r7, r0, r6
 800792c:	4639      	mov	r1, r7
 800792e:	4620      	mov	r0, r4
 8007930:	f000 ff52 	bl	80087d8 <__any_on>
 8007934:	4682      	mov	sl, r0
 8007936:	b1a8      	cbz	r0, 8007964 <__gethex+0x1f8>
 8007938:	1e7b      	subs	r3, r7, #1
 800793a:	1159      	asrs	r1, r3, #5
 800793c:	f003 021f 	and.w	r2, r3, #31
 8007940:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007944:	f04f 0a01 	mov.w	sl, #1
 8007948:	fa0a f202 	lsl.w	r2, sl, r2
 800794c:	420a      	tst	r2, r1
 800794e:	d009      	beq.n	8007964 <__gethex+0x1f8>
 8007950:	4553      	cmp	r3, sl
 8007952:	dd05      	ble.n	8007960 <__gethex+0x1f4>
 8007954:	1eb9      	subs	r1, r7, #2
 8007956:	4620      	mov	r0, r4
 8007958:	f000 ff3e 	bl	80087d8 <__any_on>
 800795c:	2800      	cmp	r0, #0
 800795e:	d145      	bne.n	80079ec <__gethex+0x280>
 8007960:	f04f 0a02 	mov.w	sl, #2
 8007964:	4639      	mov	r1, r7
 8007966:	4620      	mov	r0, r4
 8007968:	f7ff fe98 	bl	800769c <rshift>
 800796c:	443d      	add	r5, r7
 800796e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007972:	42ab      	cmp	r3, r5
 8007974:	da4c      	bge.n	8007a10 <__gethex+0x2a4>
 8007976:	ee18 0a10 	vmov	r0, s16
 800797a:	4621      	mov	r1, r4
 800797c:	f000 fad2 	bl	8007f24 <_Bfree>
 8007980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007982:	2300      	movs	r3, #0
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	27a3      	movs	r7, #163	; 0xa3
 8007988:	e785      	b.n	8007896 <__gethex+0x12a>
 800798a:	1e73      	subs	r3, r6, #1
 800798c:	9a05      	ldr	r2, [sp, #20]
 800798e:	9303      	str	r3, [sp, #12]
 8007990:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007994:	4293      	cmp	r3, r2
 8007996:	d019      	beq.n	80079cc <__gethex+0x260>
 8007998:	f1bb 0f20 	cmp.w	fp, #32
 800799c:	d107      	bne.n	80079ae <__gethex+0x242>
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	f843 2b04 	str.w	r2, [r3], #4
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	2300      	movs	r3, #0
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	469b      	mov	fp, r3
 80079ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80079b2:	f7ff fec5 	bl	8007740 <__hexdig_fun>
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	f000 000f 	and.w	r0, r0, #15
 80079bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80079c0:	4303      	orrs	r3, r0
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f10b 0b04 	add.w	fp, fp, #4
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	e00d      	b.n	80079e8 <__gethex+0x27c>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	9a06      	ldr	r2, [sp, #24]
 80079d0:	4413      	add	r3, r2
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	d3e0      	bcc.n	8007998 <__gethex+0x22c>
 80079d6:	4618      	mov	r0, r3
 80079d8:	9901      	ldr	r1, [sp, #4]
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	4652      	mov	r2, sl
 80079de:	f001 fecc 	bl	800977a <strncmp>
 80079e2:	9b07      	ldr	r3, [sp, #28]
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1d7      	bne.n	8007998 <__gethex+0x22c>
 80079e8:	461e      	mov	r6, r3
 80079ea:	e78b      	b.n	8007904 <__gethex+0x198>
 80079ec:	f04f 0a03 	mov.w	sl, #3
 80079f0:	e7b8      	b.n	8007964 <__gethex+0x1f8>
 80079f2:	da0a      	bge.n	8007a0a <__gethex+0x29e>
 80079f4:	1a37      	subs	r7, r6, r0
 80079f6:	4621      	mov	r1, r4
 80079f8:	ee18 0a10 	vmov	r0, s16
 80079fc:	463a      	mov	r2, r7
 80079fe:	f000 fcad 	bl	800835c <__lshift>
 8007a02:	1bed      	subs	r5, r5, r7
 8007a04:	4604      	mov	r4, r0
 8007a06:	f100 0914 	add.w	r9, r0, #20
 8007a0a:	f04f 0a00 	mov.w	sl, #0
 8007a0e:	e7ae      	b.n	800796e <__gethex+0x202>
 8007a10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a14:	42a8      	cmp	r0, r5
 8007a16:	dd72      	ble.n	8007afe <__gethex+0x392>
 8007a18:	1b45      	subs	r5, r0, r5
 8007a1a:	42ae      	cmp	r6, r5
 8007a1c:	dc36      	bgt.n	8007a8c <__gethex+0x320>
 8007a1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d02a      	beq.n	8007a7c <__gethex+0x310>
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d02c      	beq.n	8007a84 <__gethex+0x318>
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d115      	bne.n	8007a5a <__gethex+0x2ee>
 8007a2e:	42ae      	cmp	r6, r5
 8007a30:	d113      	bne.n	8007a5a <__gethex+0x2ee>
 8007a32:	2e01      	cmp	r6, #1
 8007a34:	d10b      	bne.n	8007a4e <__gethex+0x2e2>
 8007a36:	9a04      	ldr	r2, [sp, #16]
 8007a38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	2301      	movs	r3, #1
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	f8c9 3000 	str.w	r3, [r9]
 8007a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a48:	2762      	movs	r7, #98	; 0x62
 8007a4a:	601c      	str	r4, [r3, #0]
 8007a4c:	e723      	b.n	8007896 <__gethex+0x12a>
 8007a4e:	1e71      	subs	r1, r6, #1
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 fec1 	bl	80087d8 <__any_on>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d1ed      	bne.n	8007a36 <__gethex+0x2ca>
 8007a5a:	ee18 0a10 	vmov	r0, s16
 8007a5e:	4621      	mov	r1, r4
 8007a60:	f000 fa60 	bl	8007f24 <_Bfree>
 8007a64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a66:	2300      	movs	r3, #0
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	2750      	movs	r7, #80	; 0x50
 8007a6c:	e713      	b.n	8007896 <__gethex+0x12a>
 8007a6e:	bf00      	nop
 8007a70:	0800a084 	.word	0x0800a084
 8007a74:	08009fa4 	.word	0x08009fa4
 8007a78:	0800a018 	.word	0x0800a018
 8007a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1eb      	bne.n	8007a5a <__gethex+0x2ee>
 8007a82:	e7d8      	b.n	8007a36 <__gethex+0x2ca>
 8007a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1d5      	bne.n	8007a36 <__gethex+0x2ca>
 8007a8a:	e7e6      	b.n	8007a5a <__gethex+0x2ee>
 8007a8c:	1e6f      	subs	r7, r5, #1
 8007a8e:	f1ba 0f00 	cmp.w	sl, #0
 8007a92:	d131      	bne.n	8007af8 <__gethex+0x38c>
 8007a94:	b127      	cbz	r7, 8007aa0 <__gethex+0x334>
 8007a96:	4639      	mov	r1, r7
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 fe9d 	bl	80087d8 <__any_on>
 8007a9e:	4682      	mov	sl, r0
 8007aa0:	117b      	asrs	r3, r7, #5
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007aa8:	f007 071f 	and.w	r7, r7, #31
 8007aac:	fa01 f707 	lsl.w	r7, r1, r7
 8007ab0:	421f      	tst	r7, r3
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bf18      	it	ne
 8007ab8:	f04a 0a02 	orrne.w	sl, sl, #2
 8007abc:	1b76      	subs	r6, r6, r5
 8007abe:	f7ff fded 	bl	800769c <rshift>
 8007ac2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ac6:	2702      	movs	r7, #2
 8007ac8:	f1ba 0f00 	cmp.w	sl, #0
 8007acc:	d048      	beq.n	8007b60 <__gethex+0x3f4>
 8007ace:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d015      	beq.n	8007b02 <__gethex+0x396>
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d017      	beq.n	8007b0a <__gethex+0x39e>
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d109      	bne.n	8007af2 <__gethex+0x386>
 8007ade:	f01a 0f02 	tst.w	sl, #2
 8007ae2:	d006      	beq.n	8007af2 <__gethex+0x386>
 8007ae4:	f8d9 0000 	ldr.w	r0, [r9]
 8007ae8:	ea4a 0a00 	orr.w	sl, sl, r0
 8007aec:	f01a 0f01 	tst.w	sl, #1
 8007af0:	d10e      	bne.n	8007b10 <__gethex+0x3a4>
 8007af2:	f047 0710 	orr.w	r7, r7, #16
 8007af6:	e033      	b.n	8007b60 <__gethex+0x3f4>
 8007af8:	f04f 0a01 	mov.w	sl, #1
 8007afc:	e7d0      	b.n	8007aa0 <__gethex+0x334>
 8007afe:	2701      	movs	r7, #1
 8007b00:	e7e2      	b.n	8007ac8 <__gethex+0x35c>
 8007b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b04:	f1c3 0301 	rsb	r3, r3, #1
 8007b08:	9315      	str	r3, [sp, #84]	; 0x54
 8007b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0f0      	beq.n	8007af2 <__gethex+0x386>
 8007b10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b14:	f104 0314 	add.w	r3, r4, #20
 8007b18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b20:	f04f 0c00 	mov.w	ip, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b2e:	d01c      	beq.n	8007b6a <__gethex+0x3fe>
 8007b30:	3201      	adds	r2, #1
 8007b32:	6002      	str	r2, [r0, #0]
 8007b34:	2f02      	cmp	r7, #2
 8007b36:	f104 0314 	add.w	r3, r4, #20
 8007b3a:	d13f      	bne.n	8007bbc <__gethex+0x450>
 8007b3c:	f8d8 2000 	ldr.w	r2, [r8]
 8007b40:	3a01      	subs	r2, #1
 8007b42:	42b2      	cmp	r2, r6
 8007b44:	d10a      	bne.n	8007b5c <__gethex+0x3f0>
 8007b46:	1171      	asrs	r1, r6, #5
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b4e:	f006 061f 	and.w	r6, r6, #31
 8007b52:	fa02 f606 	lsl.w	r6, r2, r6
 8007b56:	421e      	tst	r6, r3
 8007b58:	bf18      	it	ne
 8007b5a:	4617      	movne	r7, r2
 8007b5c:	f047 0720 	orr.w	r7, r7, #32
 8007b60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b62:	601c      	str	r4, [r3, #0]
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	601d      	str	r5, [r3, #0]
 8007b68:	e695      	b.n	8007896 <__gethex+0x12a>
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b70:	d8d8      	bhi.n	8007b24 <__gethex+0x3b8>
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	459b      	cmp	fp, r3
 8007b76:	db19      	blt.n	8007bac <__gethex+0x440>
 8007b78:	6861      	ldr	r1, [r4, #4]
 8007b7a:	ee18 0a10 	vmov	r0, s16
 8007b7e:	3101      	adds	r1, #1
 8007b80:	f000 f990 	bl	8007ea4 <_Balloc>
 8007b84:	4681      	mov	r9, r0
 8007b86:	b918      	cbnz	r0, 8007b90 <__gethex+0x424>
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <__gethex+0x488>)
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	2184      	movs	r1, #132	; 0x84
 8007b8e:	e6a8      	b.n	80078e2 <__gethex+0x176>
 8007b90:	6922      	ldr	r2, [r4, #16]
 8007b92:	3202      	adds	r2, #2
 8007b94:	f104 010c 	add.w	r1, r4, #12
 8007b98:	0092      	lsls	r2, r2, #2
 8007b9a:	300c      	adds	r0, #12
 8007b9c:	f000 f974 	bl	8007e88 <memcpy>
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	ee18 0a10 	vmov	r0, s16
 8007ba6:	f000 f9bd 	bl	8007f24 <_Bfree>
 8007baa:	464c      	mov	r4, r9
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bb4:	6122      	str	r2, [r4, #16]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	615a      	str	r2, [r3, #20]
 8007bba:	e7bb      	b.n	8007b34 <__gethex+0x3c8>
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	455a      	cmp	r2, fp
 8007bc0:	dd0b      	ble.n	8007bda <__gethex+0x46e>
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f7ff fd69 	bl	800769c <rshift>
 8007bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bce:	3501      	adds	r5, #1
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	f6ff aed0 	blt.w	8007976 <__gethex+0x20a>
 8007bd6:	2701      	movs	r7, #1
 8007bd8:	e7c0      	b.n	8007b5c <__gethex+0x3f0>
 8007bda:	f016 061f 	ands.w	r6, r6, #31
 8007bde:	d0fa      	beq.n	8007bd6 <__gethex+0x46a>
 8007be0:	449a      	add	sl, r3
 8007be2:	f1c6 0620 	rsb	r6, r6, #32
 8007be6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007bea:	f000 fa51 	bl	8008090 <__hi0bits>
 8007bee:	42b0      	cmp	r0, r6
 8007bf0:	dbe7      	blt.n	8007bc2 <__gethex+0x456>
 8007bf2:	e7f0      	b.n	8007bd6 <__gethex+0x46a>
 8007bf4:	08009fa4 	.word	0x08009fa4

08007bf8 <L_shift>:
 8007bf8:	f1c2 0208 	rsb	r2, r2, #8
 8007bfc:	0092      	lsls	r2, r2, #2
 8007bfe:	b570      	push	{r4, r5, r6, lr}
 8007c00:	f1c2 0620 	rsb	r6, r2, #32
 8007c04:	6843      	ldr	r3, [r0, #4]
 8007c06:	6804      	ldr	r4, [r0, #0]
 8007c08:	fa03 f506 	lsl.w	r5, r3, r6
 8007c0c:	432c      	orrs	r4, r5
 8007c0e:	40d3      	lsrs	r3, r2
 8007c10:	6004      	str	r4, [r0, #0]
 8007c12:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c16:	4288      	cmp	r0, r1
 8007c18:	d3f4      	bcc.n	8007c04 <L_shift+0xc>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}

08007c1c <__match>:
 8007c1c:	b530      	push	{r4, r5, lr}
 8007c1e:	6803      	ldr	r3, [r0, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c26:	b914      	cbnz	r4, 8007c2e <__match+0x12>
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	bd30      	pop	{r4, r5, pc}
 8007c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007c36:	2d19      	cmp	r5, #25
 8007c38:	bf98      	it	ls
 8007c3a:	3220      	addls	r2, #32
 8007c3c:	42a2      	cmp	r2, r4
 8007c3e:	d0f0      	beq.n	8007c22 <__match+0x6>
 8007c40:	2000      	movs	r0, #0
 8007c42:	e7f3      	b.n	8007c2c <__match+0x10>

08007c44 <__hexnan>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	680b      	ldr	r3, [r1, #0]
 8007c4a:	6801      	ldr	r1, [r0, #0]
 8007c4c:	115e      	asrs	r6, r3, #5
 8007c4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c52:	f013 031f 	ands.w	r3, r3, #31
 8007c56:	b087      	sub	sp, #28
 8007c58:	bf18      	it	ne
 8007c5a:	3604      	addne	r6, #4
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	1f37      	subs	r7, r6, #4
 8007c60:	4682      	mov	sl, r0
 8007c62:	4690      	mov	r8, r2
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c6a:	46b9      	mov	r9, r7
 8007c6c:	463c      	mov	r4, r7
 8007c6e:	9502      	str	r5, [sp, #8]
 8007c70:	46ab      	mov	fp, r5
 8007c72:	784a      	ldrb	r2, [r1, #1]
 8007c74:	1c4b      	adds	r3, r1, #1
 8007c76:	9303      	str	r3, [sp, #12]
 8007c78:	b342      	cbz	r2, 8007ccc <__hexnan+0x88>
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	9105      	str	r1, [sp, #20]
 8007c7e:	9204      	str	r2, [sp, #16]
 8007c80:	f7ff fd5e 	bl	8007740 <__hexdig_fun>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d14f      	bne.n	8007d28 <__hexnan+0xe4>
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	9905      	ldr	r1, [sp, #20]
 8007c8c:	2a20      	cmp	r2, #32
 8007c8e:	d818      	bhi.n	8007cc2 <__hexnan+0x7e>
 8007c90:	9b02      	ldr	r3, [sp, #8]
 8007c92:	459b      	cmp	fp, r3
 8007c94:	dd13      	ble.n	8007cbe <__hexnan+0x7a>
 8007c96:	454c      	cmp	r4, r9
 8007c98:	d206      	bcs.n	8007ca8 <__hexnan+0x64>
 8007c9a:	2d07      	cmp	r5, #7
 8007c9c:	dc04      	bgt.n	8007ca8 <__hexnan+0x64>
 8007c9e:	462a      	mov	r2, r5
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7ff ffa8 	bl	8007bf8 <L_shift>
 8007ca8:	4544      	cmp	r4, r8
 8007caa:	d950      	bls.n	8007d4e <__hexnan+0x10a>
 8007cac:	2300      	movs	r3, #0
 8007cae:	f1a4 0904 	sub.w	r9, r4, #4
 8007cb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8007cba:	464c      	mov	r4, r9
 8007cbc:	461d      	mov	r5, r3
 8007cbe:	9903      	ldr	r1, [sp, #12]
 8007cc0:	e7d7      	b.n	8007c72 <__hexnan+0x2e>
 8007cc2:	2a29      	cmp	r2, #41	; 0x29
 8007cc4:	d156      	bne.n	8007d74 <__hexnan+0x130>
 8007cc6:	3102      	adds	r1, #2
 8007cc8:	f8ca 1000 	str.w	r1, [sl]
 8007ccc:	f1bb 0f00 	cmp.w	fp, #0
 8007cd0:	d050      	beq.n	8007d74 <__hexnan+0x130>
 8007cd2:	454c      	cmp	r4, r9
 8007cd4:	d206      	bcs.n	8007ce4 <__hexnan+0xa0>
 8007cd6:	2d07      	cmp	r5, #7
 8007cd8:	dc04      	bgt.n	8007ce4 <__hexnan+0xa0>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ff8a 	bl	8007bf8 <L_shift>
 8007ce4:	4544      	cmp	r4, r8
 8007ce6:	d934      	bls.n	8007d52 <__hexnan+0x10e>
 8007ce8:	f1a8 0204 	sub.w	r2, r8, #4
 8007cec:	4623      	mov	r3, r4
 8007cee:	f853 1b04 	ldr.w	r1, [r3], #4
 8007cf2:	f842 1f04 	str.w	r1, [r2, #4]!
 8007cf6:	429f      	cmp	r7, r3
 8007cf8:	d2f9      	bcs.n	8007cee <__hexnan+0xaa>
 8007cfa:	1b3b      	subs	r3, r7, r4
 8007cfc:	f023 0303 	bic.w	r3, r3, #3
 8007d00:	3304      	adds	r3, #4
 8007d02:	3401      	adds	r4, #1
 8007d04:	3e03      	subs	r6, #3
 8007d06:	42b4      	cmp	r4, r6
 8007d08:	bf88      	it	hi
 8007d0a:	2304      	movhi	r3, #4
 8007d0c:	4443      	add	r3, r8
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f843 2b04 	str.w	r2, [r3], #4
 8007d14:	429f      	cmp	r7, r3
 8007d16:	d2fb      	bcs.n	8007d10 <__hexnan+0xcc>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	b91b      	cbnz	r3, 8007d24 <__hexnan+0xe0>
 8007d1c:	4547      	cmp	r7, r8
 8007d1e:	d127      	bne.n	8007d70 <__hexnan+0x12c>
 8007d20:	2301      	movs	r3, #1
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	2005      	movs	r0, #5
 8007d26:	e026      	b.n	8007d76 <__hexnan+0x132>
 8007d28:	3501      	adds	r5, #1
 8007d2a:	2d08      	cmp	r5, #8
 8007d2c:	f10b 0b01 	add.w	fp, fp, #1
 8007d30:	dd06      	ble.n	8007d40 <__hexnan+0xfc>
 8007d32:	4544      	cmp	r4, r8
 8007d34:	d9c3      	bls.n	8007cbe <__hexnan+0x7a>
 8007d36:	2300      	movs	r3, #0
 8007d38:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d3c:	2501      	movs	r5, #1
 8007d3e:	3c04      	subs	r4, #4
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	f000 000f 	and.w	r0, r0, #15
 8007d46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007d4a:	6022      	str	r2, [r4, #0]
 8007d4c:	e7b7      	b.n	8007cbe <__hexnan+0x7a>
 8007d4e:	2508      	movs	r5, #8
 8007d50:	e7b5      	b.n	8007cbe <__hexnan+0x7a>
 8007d52:	9b01      	ldr	r3, [sp, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0df      	beq.n	8007d18 <__hexnan+0xd4>
 8007d58:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5c:	f1c3 0320 	rsb	r3, r3, #32
 8007d60:	fa22 f303 	lsr.w	r3, r2, r3
 8007d64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d68:	401a      	ands	r2, r3
 8007d6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8007d6e:	e7d3      	b.n	8007d18 <__hexnan+0xd4>
 8007d70:	3f04      	subs	r7, #4
 8007d72:	e7d1      	b.n	8007d18 <__hexnan+0xd4>
 8007d74:	2004      	movs	r0, #4
 8007d76:	b007      	add	sp, #28
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d7c <_localeconv_r>:
 8007d7c:	4800      	ldr	r0, [pc, #0]	; (8007d80 <_localeconv_r+0x4>)
 8007d7e:	4770      	bx	lr
 8007d80:	20000164 	.word	0x20000164

08007d84 <__retarget_lock_init_recursive>:
 8007d84:	4770      	bx	lr

08007d86 <__retarget_lock_acquire_recursive>:
 8007d86:	4770      	bx	lr

08007d88 <__retarget_lock_release_recursive>:
 8007d88:	4770      	bx	lr

08007d8a <__swhatbuf_r>:
 8007d8a:	b570      	push	{r4, r5, r6, lr}
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	2900      	cmp	r1, #0
 8007d94:	b096      	sub	sp, #88	; 0x58
 8007d96:	4614      	mov	r4, r2
 8007d98:	461d      	mov	r5, r3
 8007d9a:	da07      	bge.n	8007dac <__swhatbuf_r+0x22>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	89b3      	ldrh	r3, [r6, #12]
 8007da2:	061a      	lsls	r2, r3, #24
 8007da4:	d410      	bmi.n	8007dc8 <__swhatbuf_r+0x3e>
 8007da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007daa:	e00e      	b.n	8007dca <__swhatbuf_r+0x40>
 8007dac:	466a      	mov	r2, sp
 8007dae:	f001 fea7 	bl	8009b00 <_fstat_r>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	dbf2      	blt.n	8007d9c <__swhatbuf_r+0x12>
 8007db6:	9a01      	ldr	r2, [sp, #4]
 8007db8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dc0:	425a      	negs	r2, r3
 8007dc2:	415a      	adcs	r2, r3
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	e7ee      	b.n	8007da6 <__swhatbuf_r+0x1c>
 8007dc8:	2340      	movs	r3, #64	; 0x40
 8007dca:	2000      	movs	r0, #0
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	b016      	add	sp, #88	; 0x58
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dd4 <__smakebuf_r>:
 8007dd4:	898b      	ldrh	r3, [r1, #12]
 8007dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dd8:	079d      	lsls	r5, r3, #30
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460c      	mov	r4, r1
 8007dde:	d507      	bpl.n	8007df0 <__smakebuf_r+0x1c>
 8007de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	2301      	movs	r3, #1
 8007dea:	6163      	str	r3, [r4, #20]
 8007dec:	b002      	add	sp, #8
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	ab01      	add	r3, sp, #4
 8007df2:	466a      	mov	r2, sp
 8007df4:	f7ff ffc9 	bl	8007d8a <__swhatbuf_r>
 8007df8:	9900      	ldr	r1, [sp, #0]
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 fd6b 	bl	80088d8 <_malloc_r>
 8007e02:	b948      	cbnz	r0, 8007e18 <__smakebuf_r+0x44>
 8007e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e08:	059a      	lsls	r2, r3, #22
 8007e0a:	d4ef      	bmi.n	8007dec <__smakebuf_r+0x18>
 8007e0c:	f023 0303 	bic.w	r3, r3, #3
 8007e10:	f043 0302 	orr.w	r3, r3, #2
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	e7e3      	b.n	8007de0 <__smakebuf_r+0xc>
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <__smakebuf_r+0x7c>)
 8007e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	6020      	str	r0, [r4, #0]
 8007e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	9b00      	ldr	r3, [sp, #0]
 8007e28:	6163      	str	r3, [r4, #20]
 8007e2a:	9b01      	ldr	r3, [sp, #4]
 8007e2c:	6120      	str	r0, [r4, #16]
 8007e2e:	b15b      	cbz	r3, 8007e48 <__smakebuf_r+0x74>
 8007e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e34:	4630      	mov	r0, r6
 8007e36:	f001 fe75 	bl	8009b24 <_isatty_r>
 8007e3a:	b128      	cbz	r0, 8007e48 <__smakebuf_r+0x74>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f023 0303 	bic.w	r3, r3, #3
 8007e42:	f043 0301 	orr.w	r3, r3, #1
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	89a0      	ldrh	r0, [r4, #12]
 8007e4a:	4305      	orrs	r5, r0
 8007e4c:	81a5      	strh	r5, [r4, #12]
 8007e4e:	e7cd      	b.n	8007dec <__smakebuf_r+0x18>
 8007e50:	080074c1 	.word	0x080074c1

08007e54 <malloc>:
 8007e54:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <malloc+0xc>)
 8007e56:	4601      	mov	r1, r0
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f000 bd3d 	b.w	80088d8 <_malloc_r>
 8007e5e:	bf00      	nop
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <__ascii_mbtowc>:
 8007e64:	b082      	sub	sp, #8
 8007e66:	b901      	cbnz	r1, 8007e6a <__ascii_mbtowc+0x6>
 8007e68:	a901      	add	r1, sp, #4
 8007e6a:	b142      	cbz	r2, 8007e7e <__ascii_mbtowc+0x1a>
 8007e6c:	b14b      	cbz	r3, 8007e82 <__ascii_mbtowc+0x1e>
 8007e6e:	7813      	ldrb	r3, [r2, #0]
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	1e10      	subs	r0, r2, #0
 8007e76:	bf18      	it	ne
 8007e78:	2001      	movne	r0, #1
 8007e7a:	b002      	add	sp, #8
 8007e7c:	4770      	bx	lr
 8007e7e:	4610      	mov	r0, r2
 8007e80:	e7fb      	b.n	8007e7a <__ascii_mbtowc+0x16>
 8007e82:	f06f 0001 	mvn.w	r0, #1
 8007e86:	e7f8      	b.n	8007e7a <__ascii_mbtowc+0x16>

08007e88 <memcpy>:
 8007e88:	440a      	add	r2, r1
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e90:	d100      	bne.n	8007e94 <memcpy+0xc>
 8007e92:	4770      	bx	lr
 8007e94:	b510      	push	{r4, lr}
 8007e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9e:	4291      	cmp	r1, r2
 8007ea0:	d1f9      	bne.n	8007e96 <memcpy+0xe>
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <_Balloc>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	460d      	mov	r5, r1
 8007eac:	b976      	cbnz	r6, 8007ecc <_Balloc+0x28>
 8007eae:	2010      	movs	r0, #16
 8007eb0:	f7ff ffd0 	bl	8007e54 <malloc>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6260      	str	r0, [r4, #36]	; 0x24
 8007eb8:	b920      	cbnz	r0, 8007ec4 <_Balloc+0x20>
 8007eba:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <_Balloc+0x78>)
 8007ebc:	4818      	ldr	r0, [pc, #96]	; (8007f20 <_Balloc+0x7c>)
 8007ebe:	2166      	movs	r1, #102	; 0x66
 8007ec0:	f001 fdde 	bl	8009a80 <__assert_func>
 8007ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ec8:	6006      	str	r6, [r0, #0]
 8007eca:	60c6      	str	r6, [r0, #12]
 8007ecc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ece:	68f3      	ldr	r3, [r6, #12]
 8007ed0:	b183      	cbz	r3, 8007ef4 <_Balloc+0x50>
 8007ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007eda:	b9b8      	cbnz	r0, 8007f0c <_Balloc+0x68>
 8007edc:	2101      	movs	r1, #1
 8007ede:	fa01 f605 	lsl.w	r6, r1, r5
 8007ee2:	1d72      	adds	r2, r6, #5
 8007ee4:	0092      	lsls	r2, r2, #2
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fc97 	bl	800881a <_calloc_r>
 8007eec:	b160      	cbz	r0, 8007f08 <_Balloc+0x64>
 8007eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ef2:	e00e      	b.n	8007f12 <_Balloc+0x6e>
 8007ef4:	2221      	movs	r2, #33	; 0x21
 8007ef6:	2104      	movs	r1, #4
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fc8e 	bl	800881a <_calloc_r>
 8007efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f00:	60f0      	str	r0, [r6, #12]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e4      	bne.n	8007ed2 <_Balloc+0x2e>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	6802      	ldr	r2, [r0, #0]
 8007f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f12:	2300      	movs	r3, #0
 8007f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f18:	e7f7      	b.n	8007f0a <_Balloc+0x66>
 8007f1a:	bf00      	nop
 8007f1c:	08009f2e 	.word	0x08009f2e
 8007f20:	0800a098 	.word	0x0800a098

08007f24 <_Bfree>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f28:	4605      	mov	r5, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	b976      	cbnz	r6, 8007f4c <_Bfree+0x28>
 8007f2e:	2010      	movs	r0, #16
 8007f30:	f7ff ff90 	bl	8007e54 <malloc>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6268      	str	r0, [r5, #36]	; 0x24
 8007f38:	b920      	cbnz	r0, 8007f44 <_Bfree+0x20>
 8007f3a:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <_Bfree+0x3c>)
 8007f3c:	4809      	ldr	r0, [pc, #36]	; (8007f64 <_Bfree+0x40>)
 8007f3e:	218a      	movs	r1, #138	; 0x8a
 8007f40:	f001 fd9e 	bl	8009a80 <__assert_func>
 8007f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f48:	6006      	str	r6, [r0, #0]
 8007f4a:	60c6      	str	r6, [r0, #12]
 8007f4c:	b13c      	cbz	r4, 8007f5e <_Bfree+0x3a>
 8007f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f50:	6862      	ldr	r2, [r4, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f58:	6021      	str	r1, [r4, #0]
 8007f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	08009f2e 	.word	0x08009f2e
 8007f64:	0800a098 	.word	0x0800a098

08007f68 <__multadd>:
 8007f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6c:	690e      	ldr	r6, [r1, #16]
 8007f6e:	4607      	mov	r7, r0
 8007f70:	4698      	mov	r8, r3
 8007f72:	460c      	mov	r4, r1
 8007f74:	f101 0014 	add.w	r0, r1, #20
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6805      	ldr	r5, [r0, #0]
 8007f7c:	b2a9      	uxth	r1, r5
 8007f7e:	fb02 8101 	mla	r1, r2, r1, r8
 8007f82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f86:	0c2d      	lsrs	r5, r5, #16
 8007f88:	fb02 c505 	mla	r5, r2, r5, ip
 8007f8c:	b289      	uxth	r1, r1
 8007f8e:	3301      	adds	r3, #1
 8007f90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f94:	429e      	cmp	r6, r3
 8007f96:	f840 1b04 	str.w	r1, [r0], #4
 8007f9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007f9e:	dcec      	bgt.n	8007f7a <__multadd+0x12>
 8007fa0:	f1b8 0f00 	cmp.w	r8, #0
 8007fa4:	d022      	beq.n	8007fec <__multadd+0x84>
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	42b3      	cmp	r3, r6
 8007faa:	dc19      	bgt.n	8007fe0 <__multadd+0x78>
 8007fac:	6861      	ldr	r1, [r4, #4]
 8007fae:	4638      	mov	r0, r7
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	f7ff ff77 	bl	8007ea4 <_Balloc>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <__multadd+0x5e>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <__multadd+0x8c>)
 8007fbe:	480e      	ldr	r0, [pc, #56]	; (8007ff8 <__multadd+0x90>)
 8007fc0:	21b5      	movs	r1, #181	; 0xb5
 8007fc2:	f001 fd5d 	bl	8009a80 <__assert_func>
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	3202      	adds	r2, #2
 8007fca:	f104 010c 	add.w	r1, r4, #12
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	f7ff ff59 	bl	8007e88 <memcpy>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff ffa3 	bl	8007f24 <_Bfree>
 8007fde:	462c      	mov	r4, r5
 8007fe0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007fea:	6126      	str	r6, [r4, #16]
 8007fec:	4620      	mov	r0, r4
 8007fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08009fa4 	.word	0x08009fa4
 8007ff8:	0800a098 	.word	0x0800a098

08007ffc <__s2b>:
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	4615      	mov	r5, r2
 8008004:	461f      	mov	r7, r3
 8008006:	2209      	movs	r2, #9
 8008008:	3308      	adds	r3, #8
 800800a:	4606      	mov	r6, r0
 800800c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008010:	2100      	movs	r1, #0
 8008012:	2201      	movs	r2, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	db09      	blt.n	800802c <__s2b+0x30>
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff ff43 	bl	8007ea4 <_Balloc>
 800801e:	b940      	cbnz	r0, 8008032 <__s2b+0x36>
 8008020:	4602      	mov	r2, r0
 8008022:	4b19      	ldr	r3, [pc, #100]	; (8008088 <__s2b+0x8c>)
 8008024:	4819      	ldr	r0, [pc, #100]	; (800808c <__s2b+0x90>)
 8008026:	21ce      	movs	r1, #206	; 0xce
 8008028:	f001 fd2a 	bl	8009a80 <__assert_func>
 800802c:	0052      	lsls	r2, r2, #1
 800802e:	3101      	adds	r1, #1
 8008030:	e7f0      	b.n	8008014 <__s2b+0x18>
 8008032:	9b08      	ldr	r3, [sp, #32]
 8008034:	6143      	str	r3, [r0, #20]
 8008036:	2d09      	cmp	r5, #9
 8008038:	f04f 0301 	mov.w	r3, #1
 800803c:	6103      	str	r3, [r0, #16]
 800803e:	dd16      	ble.n	800806e <__s2b+0x72>
 8008040:	f104 0909 	add.w	r9, r4, #9
 8008044:	46c8      	mov	r8, r9
 8008046:	442c      	add	r4, r5
 8008048:	f818 3b01 	ldrb.w	r3, [r8], #1
 800804c:	4601      	mov	r1, r0
 800804e:	3b30      	subs	r3, #48	; 0x30
 8008050:	220a      	movs	r2, #10
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ff88 	bl	8007f68 <__multadd>
 8008058:	45a0      	cmp	r8, r4
 800805a:	d1f5      	bne.n	8008048 <__s2b+0x4c>
 800805c:	f1a5 0408 	sub.w	r4, r5, #8
 8008060:	444c      	add	r4, r9
 8008062:	1b2d      	subs	r5, r5, r4
 8008064:	1963      	adds	r3, r4, r5
 8008066:	42bb      	cmp	r3, r7
 8008068:	db04      	blt.n	8008074 <__s2b+0x78>
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	340a      	adds	r4, #10
 8008070:	2509      	movs	r5, #9
 8008072:	e7f6      	b.n	8008062 <__s2b+0x66>
 8008074:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008078:	4601      	mov	r1, r0
 800807a:	3b30      	subs	r3, #48	; 0x30
 800807c:	220a      	movs	r2, #10
 800807e:	4630      	mov	r0, r6
 8008080:	f7ff ff72 	bl	8007f68 <__multadd>
 8008084:	e7ee      	b.n	8008064 <__s2b+0x68>
 8008086:	bf00      	nop
 8008088:	08009fa4 	.word	0x08009fa4
 800808c:	0800a098 	.word	0x0800a098

08008090 <__hi0bits>:
 8008090:	0c03      	lsrs	r3, r0, #16
 8008092:	041b      	lsls	r3, r3, #16
 8008094:	b9d3      	cbnz	r3, 80080cc <__hi0bits+0x3c>
 8008096:	0400      	lsls	r0, r0, #16
 8008098:	2310      	movs	r3, #16
 800809a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800809e:	bf04      	itt	eq
 80080a0:	0200      	lsleq	r0, r0, #8
 80080a2:	3308      	addeq	r3, #8
 80080a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080a8:	bf04      	itt	eq
 80080aa:	0100      	lsleq	r0, r0, #4
 80080ac:	3304      	addeq	r3, #4
 80080ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080b2:	bf04      	itt	eq
 80080b4:	0080      	lsleq	r0, r0, #2
 80080b6:	3302      	addeq	r3, #2
 80080b8:	2800      	cmp	r0, #0
 80080ba:	db05      	blt.n	80080c8 <__hi0bits+0x38>
 80080bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080c0:	f103 0301 	add.w	r3, r3, #1
 80080c4:	bf08      	it	eq
 80080c6:	2320      	moveq	r3, #32
 80080c8:	4618      	mov	r0, r3
 80080ca:	4770      	bx	lr
 80080cc:	2300      	movs	r3, #0
 80080ce:	e7e4      	b.n	800809a <__hi0bits+0xa>

080080d0 <__lo0bits>:
 80080d0:	6803      	ldr	r3, [r0, #0]
 80080d2:	f013 0207 	ands.w	r2, r3, #7
 80080d6:	4601      	mov	r1, r0
 80080d8:	d00b      	beq.n	80080f2 <__lo0bits+0x22>
 80080da:	07da      	lsls	r2, r3, #31
 80080dc:	d424      	bmi.n	8008128 <__lo0bits+0x58>
 80080de:	0798      	lsls	r0, r3, #30
 80080e0:	bf49      	itett	mi
 80080e2:	085b      	lsrmi	r3, r3, #1
 80080e4:	089b      	lsrpl	r3, r3, #2
 80080e6:	2001      	movmi	r0, #1
 80080e8:	600b      	strmi	r3, [r1, #0]
 80080ea:	bf5c      	itt	pl
 80080ec:	600b      	strpl	r3, [r1, #0]
 80080ee:	2002      	movpl	r0, #2
 80080f0:	4770      	bx	lr
 80080f2:	b298      	uxth	r0, r3
 80080f4:	b9b0      	cbnz	r0, 8008124 <__lo0bits+0x54>
 80080f6:	0c1b      	lsrs	r3, r3, #16
 80080f8:	2010      	movs	r0, #16
 80080fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80080fe:	bf04      	itt	eq
 8008100:	0a1b      	lsreq	r3, r3, #8
 8008102:	3008      	addeq	r0, #8
 8008104:	071a      	lsls	r2, r3, #28
 8008106:	bf04      	itt	eq
 8008108:	091b      	lsreq	r3, r3, #4
 800810a:	3004      	addeq	r0, #4
 800810c:	079a      	lsls	r2, r3, #30
 800810e:	bf04      	itt	eq
 8008110:	089b      	lsreq	r3, r3, #2
 8008112:	3002      	addeq	r0, #2
 8008114:	07da      	lsls	r2, r3, #31
 8008116:	d403      	bmi.n	8008120 <__lo0bits+0x50>
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	f100 0001 	add.w	r0, r0, #1
 800811e:	d005      	beq.n	800812c <__lo0bits+0x5c>
 8008120:	600b      	str	r3, [r1, #0]
 8008122:	4770      	bx	lr
 8008124:	4610      	mov	r0, r2
 8008126:	e7e8      	b.n	80080fa <__lo0bits+0x2a>
 8008128:	2000      	movs	r0, #0
 800812a:	4770      	bx	lr
 800812c:	2020      	movs	r0, #32
 800812e:	4770      	bx	lr

08008130 <__i2b>:
 8008130:	b510      	push	{r4, lr}
 8008132:	460c      	mov	r4, r1
 8008134:	2101      	movs	r1, #1
 8008136:	f7ff feb5 	bl	8007ea4 <_Balloc>
 800813a:	4602      	mov	r2, r0
 800813c:	b928      	cbnz	r0, 800814a <__i2b+0x1a>
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <__i2b+0x24>)
 8008140:	4805      	ldr	r0, [pc, #20]	; (8008158 <__i2b+0x28>)
 8008142:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008146:	f001 fc9b 	bl	8009a80 <__assert_func>
 800814a:	2301      	movs	r3, #1
 800814c:	6144      	str	r4, [r0, #20]
 800814e:	6103      	str	r3, [r0, #16]
 8008150:	bd10      	pop	{r4, pc}
 8008152:	bf00      	nop
 8008154:	08009fa4 	.word	0x08009fa4
 8008158:	0800a098 	.word	0x0800a098

0800815c <__multiply>:
 800815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	4614      	mov	r4, r2
 8008162:	690a      	ldr	r2, [r1, #16]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	429a      	cmp	r2, r3
 8008168:	bfb8      	it	lt
 800816a:	460b      	movlt	r3, r1
 800816c:	460d      	mov	r5, r1
 800816e:	bfbc      	itt	lt
 8008170:	4625      	movlt	r5, r4
 8008172:	461c      	movlt	r4, r3
 8008174:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008178:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800817c:	68ab      	ldr	r3, [r5, #8]
 800817e:	6869      	ldr	r1, [r5, #4]
 8008180:	eb0a 0709 	add.w	r7, sl, r9
 8008184:	42bb      	cmp	r3, r7
 8008186:	b085      	sub	sp, #20
 8008188:	bfb8      	it	lt
 800818a:	3101      	addlt	r1, #1
 800818c:	f7ff fe8a 	bl	8007ea4 <_Balloc>
 8008190:	b930      	cbnz	r0, 80081a0 <__multiply+0x44>
 8008192:	4602      	mov	r2, r0
 8008194:	4b42      	ldr	r3, [pc, #264]	; (80082a0 <__multiply+0x144>)
 8008196:	4843      	ldr	r0, [pc, #268]	; (80082a4 <__multiply+0x148>)
 8008198:	f240 115d 	movw	r1, #349	; 0x15d
 800819c:	f001 fc70 	bl	8009a80 <__assert_func>
 80081a0:	f100 0614 	add.w	r6, r0, #20
 80081a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80081a8:	4633      	mov	r3, r6
 80081aa:	2200      	movs	r2, #0
 80081ac:	4543      	cmp	r3, r8
 80081ae:	d31e      	bcc.n	80081ee <__multiply+0x92>
 80081b0:	f105 0c14 	add.w	ip, r5, #20
 80081b4:	f104 0314 	add.w	r3, r4, #20
 80081b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80081bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80081c0:	9202      	str	r2, [sp, #8]
 80081c2:	ebac 0205 	sub.w	r2, ip, r5
 80081c6:	3a15      	subs	r2, #21
 80081c8:	f022 0203 	bic.w	r2, r2, #3
 80081cc:	3204      	adds	r2, #4
 80081ce:	f105 0115 	add.w	r1, r5, #21
 80081d2:	458c      	cmp	ip, r1
 80081d4:	bf38      	it	cc
 80081d6:	2204      	movcc	r2, #4
 80081d8:	9201      	str	r2, [sp, #4]
 80081da:	9a02      	ldr	r2, [sp, #8]
 80081dc:	9303      	str	r3, [sp, #12]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d808      	bhi.n	80081f4 <__multiply+0x98>
 80081e2:	2f00      	cmp	r7, #0
 80081e4:	dc55      	bgt.n	8008292 <__multiply+0x136>
 80081e6:	6107      	str	r7, [r0, #16]
 80081e8:	b005      	add	sp, #20
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	f843 2b04 	str.w	r2, [r3], #4
 80081f2:	e7db      	b.n	80081ac <__multiply+0x50>
 80081f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80081f8:	f1ba 0f00 	cmp.w	sl, #0
 80081fc:	d020      	beq.n	8008240 <__multiply+0xe4>
 80081fe:	f105 0e14 	add.w	lr, r5, #20
 8008202:	46b1      	mov	r9, r6
 8008204:	2200      	movs	r2, #0
 8008206:	f85e 4b04 	ldr.w	r4, [lr], #4
 800820a:	f8d9 b000 	ldr.w	fp, [r9]
 800820e:	b2a1      	uxth	r1, r4
 8008210:	fa1f fb8b 	uxth.w	fp, fp
 8008214:	fb0a b101 	mla	r1, sl, r1, fp
 8008218:	4411      	add	r1, r2
 800821a:	f8d9 2000 	ldr.w	r2, [r9]
 800821e:	0c24      	lsrs	r4, r4, #16
 8008220:	0c12      	lsrs	r2, r2, #16
 8008222:	fb0a 2404 	mla	r4, sl, r4, r2
 8008226:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800822a:	b289      	uxth	r1, r1
 800822c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008230:	45f4      	cmp	ip, lr
 8008232:	f849 1b04 	str.w	r1, [r9], #4
 8008236:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800823a:	d8e4      	bhi.n	8008206 <__multiply+0xaa>
 800823c:	9901      	ldr	r1, [sp, #4]
 800823e:	5072      	str	r2, [r6, r1]
 8008240:	9a03      	ldr	r2, [sp, #12]
 8008242:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008246:	3304      	adds	r3, #4
 8008248:	f1b9 0f00 	cmp.w	r9, #0
 800824c:	d01f      	beq.n	800828e <__multiply+0x132>
 800824e:	6834      	ldr	r4, [r6, #0]
 8008250:	f105 0114 	add.w	r1, r5, #20
 8008254:	46b6      	mov	lr, r6
 8008256:	f04f 0a00 	mov.w	sl, #0
 800825a:	880a      	ldrh	r2, [r1, #0]
 800825c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008260:	fb09 b202 	mla	r2, r9, r2, fp
 8008264:	4492      	add	sl, r2
 8008266:	b2a4      	uxth	r4, r4
 8008268:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800826c:	f84e 4b04 	str.w	r4, [lr], #4
 8008270:	f851 4b04 	ldr.w	r4, [r1], #4
 8008274:	f8be 2000 	ldrh.w	r2, [lr]
 8008278:	0c24      	lsrs	r4, r4, #16
 800827a:	fb09 2404 	mla	r4, r9, r4, r2
 800827e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008282:	458c      	cmp	ip, r1
 8008284:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008288:	d8e7      	bhi.n	800825a <__multiply+0xfe>
 800828a:	9a01      	ldr	r2, [sp, #4]
 800828c:	50b4      	str	r4, [r6, r2]
 800828e:	3604      	adds	r6, #4
 8008290:	e7a3      	b.n	80081da <__multiply+0x7e>
 8008292:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1a5      	bne.n	80081e6 <__multiply+0x8a>
 800829a:	3f01      	subs	r7, #1
 800829c:	e7a1      	b.n	80081e2 <__multiply+0x86>
 800829e:	bf00      	nop
 80082a0:	08009fa4 	.word	0x08009fa4
 80082a4:	0800a098 	.word	0x0800a098

080082a8 <__pow5mult>:
 80082a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ac:	4615      	mov	r5, r2
 80082ae:	f012 0203 	ands.w	r2, r2, #3
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	d007      	beq.n	80082c8 <__pow5mult+0x20>
 80082b8:	4c25      	ldr	r4, [pc, #148]	; (8008350 <__pow5mult+0xa8>)
 80082ba:	3a01      	subs	r2, #1
 80082bc:	2300      	movs	r3, #0
 80082be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082c2:	f7ff fe51 	bl	8007f68 <__multadd>
 80082c6:	4607      	mov	r7, r0
 80082c8:	10ad      	asrs	r5, r5, #2
 80082ca:	d03d      	beq.n	8008348 <__pow5mult+0xa0>
 80082cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082ce:	b97c      	cbnz	r4, 80082f0 <__pow5mult+0x48>
 80082d0:	2010      	movs	r0, #16
 80082d2:	f7ff fdbf 	bl	8007e54 <malloc>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6270      	str	r0, [r6, #36]	; 0x24
 80082da:	b928      	cbnz	r0, 80082e8 <__pow5mult+0x40>
 80082dc:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <__pow5mult+0xac>)
 80082de:	481e      	ldr	r0, [pc, #120]	; (8008358 <__pow5mult+0xb0>)
 80082e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082e4:	f001 fbcc 	bl	8009a80 <__assert_func>
 80082e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082ec:	6004      	str	r4, [r0, #0]
 80082ee:	60c4      	str	r4, [r0, #12]
 80082f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f8:	b94c      	cbnz	r4, 800830e <__pow5mult+0x66>
 80082fa:	f240 2171 	movw	r1, #625	; 0x271
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff ff16 	bl	8008130 <__i2b>
 8008304:	2300      	movs	r3, #0
 8008306:	f8c8 0008 	str.w	r0, [r8, #8]
 800830a:	4604      	mov	r4, r0
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	07eb      	lsls	r3, r5, #31
 8008314:	d50a      	bpl.n	800832c <__pow5mult+0x84>
 8008316:	4639      	mov	r1, r7
 8008318:	4622      	mov	r2, r4
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff ff1e 	bl	800815c <__multiply>
 8008320:	4639      	mov	r1, r7
 8008322:	4680      	mov	r8, r0
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff fdfd 	bl	8007f24 <_Bfree>
 800832a:	4647      	mov	r7, r8
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	d00b      	beq.n	8008348 <__pow5mult+0xa0>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	b938      	cbnz	r0, 8008344 <__pow5mult+0x9c>
 8008334:	4622      	mov	r2, r4
 8008336:	4621      	mov	r1, r4
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff ff0f 	bl	800815c <__multiply>
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	f8c0 9000 	str.w	r9, [r0]
 8008344:	4604      	mov	r4, r0
 8008346:	e7e4      	b.n	8008312 <__pow5mult+0x6a>
 8008348:	4638      	mov	r0, r7
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834e:	bf00      	nop
 8008350:	0800a1e8 	.word	0x0800a1e8
 8008354:	08009f2e 	.word	0x08009f2e
 8008358:	0800a098 	.word	0x0800a098

0800835c <__lshift>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	6849      	ldr	r1, [r1, #4]
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	4607      	mov	r7, r0
 800836e:	4691      	mov	r9, r2
 8008370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008374:	f108 0601 	add.w	r6, r8, #1
 8008378:	42b3      	cmp	r3, r6
 800837a:	db0b      	blt.n	8008394 <__lshift+0x38>
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff fd91 	bl	8007ea4 <_Balloc>
 8008382:	4605      	mov	r5, r0
 8008384:	b948      	cbnz	r0, 800839a <__lshift+0x3e>
 8008386:	4602      	mov	r2, r0
 8008388:	4b28      	ldr	r3, [pc, #160]	; (800842c <__lshift+0xd0>)
 800838a:	4829      	ldr	r0, [pc, #164]	; (8008430 <__lshift+0xd4>)
 800838c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008390:	f001 fb76 	bl	8009a80 <__assert_func>
 8008394:	3101      	adds	r1, #1
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	e7ee      	b.n	8008378 <__lshift+0x1c>
 800839a:	2300      	movs	r3, #0
 800839c:	f100 0114 	add.w	r1, r0, #20
 80083a0:	f100 0210 	add.w	r2, r0, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	4553      	cmp	r3, sl
 80083a8:	db33      	blt.n	8008412 <__lshift+0xb6>
 80083aa:	6920      	ldr	r0, [r4, #16]
 80083ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	f019 091f 	ands.w	r9, r9, #31
 80083b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083c0:	d02b      	beq.n	800841a <__lshift+0xbe>
 80083c2:	f1c9 0e20 	rsb	lr, r9, #32
 80083c6:	468a      	mov	sl, r1
 80083c8:	2200      	movs	r2, #0
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	fa00 f009 	lsl.w	r0, r0, r9
 80083d0:	4302      	orrs	r2, r0
 80083d2:	f84a 2b04 	str.w	r2, [sl], #4
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	459c      	cmp	ip, r3
 80083dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083e0:	d8f3      	bhi.n	80083ca <__lshift+0x6e>
 80083e2:	ebac 0304 	sub.w	r3, ip, r4
 80083e6:	3b15      	subs	r3, #21
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	3304      	adds	r3, #4
 80083ee:	f104 0015 	add.w	r0, r4, #21
 80083f2:	4584      	cmp	ip, r0
 80083f4:	bf38      	it	cc
 80083f6:	2304      	movcc	r3, #4
 80083f8:	50ca      	str	r2, [r1, r3]
 80083fa:	b10a      	cbz	r2, 8008400 <__lshift+0xa4>
 80083fc:	f108 0602 	add.w	r6, r8, #2
 8008400:	3e01      	subs	r6, #1
 8008402:	4638      	mov	r0, r7
 8008404:	612e      	str	r6, [r5, #16]
 8008406:	4621      	mov	r1, r4
 8008408:	f7ff fd8c 	bl	8007f24 <_Bfree>
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	f842 0f04 	str.w	r0, [r2, #4]!
 8008416:	3301      	adds	r3, #1
 8008418:	e7c5      	b.n	80083a6 <__lshift+0x4a>
 800841a:	3904      	subs	r1, #4
 800841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008420:	f841 2f04 	str.w	r2, [r1, #4]!
 8008424:	459c      	cmp	ip, r3
 8008426:	d8f9      	bhi.n	800841c <__lshift+0xc0>
 8008428:	e7ea      	b.n	8008400 <__lshift+0xa4>
 800842a:	bf00      	nop
 800842c:	08009fa4 	.word	0x08009fa4
 8008430:	0800a098 	.word	0x0800a098

08008434 <__mcmp>:
 8008434:	b530      	push	{r4, r5, lr}
 8008436:	6902      	ldr	r2, [r0, #16]
 8008438:	690c      	ldr	r4, [r1, #16]
 800843a:	1b12      	subs	r2, r2, r4
 800843c:	d10e      	bne.n	800845c <__mcmp+0x28>
 800843e:	f100 0314 	add.w	r3, r0, #20
 8008442:	3114      	adds	r1, #20
 8008444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800844c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008454:	42a5      	cmp	r5, r4
 8008456:	d003      	beq.n	8008460 <__mcmp+0x2c>
 8008458:	d305      	bcc.n	8008466 <__mcmp+0x32>
 800845a:	2201      	movs	r2, #1
 800845c:	4610      	mov	r0, r2
 800845e:	bd30      	pop	{r4, r5, pc}
 8008460:	4283      	cmp	r3, r0
 8008462:	d3f3      	bcc.n	800844c <__mcmp+0x18>
 8008464:	e7fa      	b.n	800845c <__mcmp+0x28>
 8008466:	f04f 32ff 	mov.w	r2, #4294967295
 800846a:	e7f7      	b.n	800845c <__mcmp+0x28>

0800846c <__mdiff>:
 800846c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	4606      	mov	r6, r0
 8008474:	4611      	mov	r1, r2
 8008476:	4620      	mov	r0, r4
 8008478:	4617      	mov	r7, r2
 800847a:	f7ff ffdb 	bl	8008434 <__mcmp>
 800847e:	1e05      	subs	r5, r0, #0
 8008480:	d110      	bne.n	80084a4 <__mdiff+0x38>
 8008482:	4629      	mov	r1, r5
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fd0d 	bl	8007ea4 <_Balloc>
 800848a:	b930      	cbnz	r0, 800849a <__mdiff+0x2e>
 800848c:	4b39      	ldr	r3, [pc, #228]	; (8008574 <__mdiff+0x108>)
 800848e:	4602      	mov	r2, r0
 8008490:	f240 2132 	movw	r1, #562	; 0x232
 8008494:	4838      	ldr	r0, [pc, #224]	; (8008578 <__mdiff+0x10c>)
 8008496:	f001 faf3 	bl	8009a80 <__assert_func>
 800849a:	2301      	movs	r3, #1
 800849c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	bfa4      	itt	ge
 80084a6:	463b      	movge	r3, r7
 80084a8:	4627      	movge	r7, r4
 80084aa:	4630      	mov	r0, r6
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	bfa6      	itte	ge
 80084b0:	461c      	movge	r4, r3
 80084b2:	2500      	movge	r5, #0
 80084b4:	2501      	movlt	r5, #1
 80084b6:	f7ff fcf5 	bl	8007ea4 <_Balloc>
 80084ba:	b920      	cbnz	r0, 80084c6 <__mdiff+0x5a>
 80084bc:	4b2d      	ldr	r3, [pc, #180]	; (8008574 <__mdiff+0x108>)
 80084be:	4602      	mov	r2, r0
 80084c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084c4:	e7e6      	b.n	8008494 <__mdiff+0x28>
 80084c6:	693e      	ldr	r6, [r7, #16]
 80084c8:	60c5      	str	r5, [r0, #12]
 80084ca:	6925      	ldr	r5, [r4, #16]
 80084cc:	f107 0114 	add.w	r1, r7, #20
 80084d0:	f104 0914 	add.w	r9, r4, #20
 80084d4:	f100 0e14 	add.w	lr, r0, #20
 80084d8:	f107 0210 	add.w	r2, r7, #16
 80084dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80084e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80084e4:	46f2      	mov	sl, lr
 80084e6:	2700      	movs	r7, #0
 80084e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80084ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084f0:	fa1f f883 	uxth.w	r8, r3
 80084f4:	fa17 f78b 	uxtah	r7, r7, fp
 80084f8:	0c1b      	lsrs	r3, r3, #16
 80084fa:	eba7 0808 	sub.w	r8, r7, r8
 80084fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008506:	fa1f f888 	uxth.w	r8, r8
 800850a:	141f      	asrs	r7, r3, #16
 800850c:	454d      	cmp	r5, r9
 800850e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008512:	f84a 3b04 	str.w	r3, [sl], #4
 8008516:	d8e7      	bhi.n	80084e8 <__mdiff+0x7c>
 8008518:	1b2b      	subs	r3, r5, r4
 800851a:	3b15      	subs	r3, #21
 800851c:	f023 0303 	bic.w	r3, r3, #3
 8008520:	3304      	adds	r3, #4
 8008522:	3415      	adds	r4, #21
 8008524:	42a5      	cmp	r5, r4
 8008526:	bf38      	it	cc
 8008528:	2304      	movcc	r3, #4
 800852a:	4419      	add	r1, r3
 800852c:	4473      	add	r3, lr
 800852e:	469e      	mov	lr, r3
 8008530:	460d      	mov	r5, r1
 8008532:	4565      	cmp	r5, ip
 8008534:	d30e      	bcc.n	8008554 <__mdiff+0xe8>
 8008536:	f10c 0203 	add.w	r2, ip, #3
 800853a:	1a52      	subs	r2, r2, r1
 800853c:	f022 0203 	bic.w	r2, r2, #3
 8008540:	3903      	subs	r1, #3
 8008542:	458c      	cmp	ip, r1
 8008544:	bf38      	it	cc
 8008546:	2200      	movcc	r2, #0
 8008548:	441a      	add	r2, r3
 800854a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800854e:	b17b      	cbz	r3, 8008570 <__mdiff+0x104>
 8008550:	6106      	str	r6, [r0, #16]
 8008552:	e7a5      	b.n	80084a0 <__mdiff+0x34>
 8008554:	f855 8b04 	ldr.w	r8, [r5], #4
 8008558:	fa17 f488 	uxtah	r4, r7, r8
 800855c:	1422      	asrs	r2, r4, #16
 800855e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008562:	b2a4      	uxth	r4, r4
 8008564:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008568:	f84e 4b04 	str.w	r4, [lr], #4
 800856c:	1417      	asrs	r7, r2, #16
 800856e:	e7e0      	b.n	8008532 <__mdiff+0xc6>
 8008570:	3e01      	subs	r6, #1
 8008572:	e7ea      	b.n	800854a <__mdiff+0xde>
 8008574:	08009fa4 	.word	0x08009fa4
 8008578:	0800a098 	.word	0x0800a098

0800857c <__ulp>:
 800857c:	b082      	sub	sp, #8
 800857e:	ed8d 0b00 	vstr	d0, [sp]
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	4912      	ldr	r1, [pc, #72]	; (80085d0 <__ulp+0x54>)
 8008586:	4019      	ands	r1, r3
 8008588:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800858c:	2900      	cmp	r1, #0
 800858e:	dd05      	ble.n	800859c <__ulp+0x20>
 8008590:	2200      	movs	r2, #0
 8008592:	460b      	mov	r3, r1
 8008594:	ec43 2b10 	vmov	d0, r2, r3
 8008598:	b002      	add	sp, #8
 800859a:	4770      	bx	lr
 800859c:	4249      	negs	r1, r1
 800859e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80085a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	da04      	bge.n	80085ba <__ulp+0x3e>
 80085b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80085b4:	fa41 f300 	asr.w	r3, r1, r0
 80085b8:	e7ec      	b.n	8008594 <__ulp+0x18>
 80085ba:	f1a0 0114 	sub.w	r1, r0, #20
 80085be:	291e      	cmp	r1, #30
 80085c0:	bfda      	itte	le
 80085c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80085c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80085ca:	2101      	movgt	r1, #1
 80085cc:	460a      	mov	r2, r1
 80085ce:	e7e1      	b.n	8008594 <__ulp+0x18>
 80085d0:	7ff00000 	.word	0x7ff00000

080085d4 <__b2d>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	6905      	ldr	r5, [r0, #16]
 80085d8:	f100 0714 	add.w	r7, r0, #20
 80085dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80085e0:	1f2e      	subs	r6, r5, #4
 80085e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff fd52 	bl	8008090 <__hi0bits>
 80085ec:	f1c0 0320 	rsb	r3, r0, #32
 80085f0:	280a      	cmp	r0, #10
 80085f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008670 <__b2d+0x9c>
 80085f6:	600b      	str	r3, [r1, #0]
 80085f8:	dc14      	bgt.n	8008624 <__b2d+0x50>
 80085fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80085fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8008602:	42b7      	cmp	r7, r6
 8008604:	ea41 030c 	orr.w	r3, r1, ip
 8008608:	bf34      	ite	cc
 800860a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800860e:	2100      	movcs	r1, #0
 8008610:	3015      	adds	r0, #21
 8008612:	fa04 f000 	lsl.w	r0, r4, r0
 8008616:	fa21 f10e 	lsr.w	r1, r1, lr
 800861a:	ea40 0201 	orr.w	r2, r0, r1
 800861e:	ec43 2b10 	vmov	d0, r2, r3
 8008622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008624:	42b7      	cmp	r7, r6
 8008626:	bf3a      	itte	cc
 8008628:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800862c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008630:	2100      	movcs	r1, #0
 8008632:	380b      	subs	r0, #11
 8008634:	d017      	beq.n	8008666 <__b2d+0x92>
 8008636:	f1c0 0c20 	rsb	ip, r0, #32
 800863a:	fa04 f500 	lsl.w	r5, r4, r0
 800863e:	42be      	cmp	r6, r7
 8008640:	fa21 f40c 	lsr.w	r4, r1, ip
 8008644:	ea45 0504 	orr.w	r5, r5, r4
 8008648:	bf8c      	ite	hi
 800864a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800864e:	2400      	movls	r4, #0
 8008650:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008654:	fa01 f000 	lsl.w	r0, r1, r0
 8008658:	fa24 f40c 	lsr.w	r4, r4, ip
 800865c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008660:	ea40 0204 	orr.w	r2, r0, r4
 8008664:	e7db      	b.n	800861e <__b2d+0x4a>
 8008666:	ea44 030c 	orr.w	r3, r4, ip
 800866a:	460a      	mov	r2, r1
 800866c:	e7d7      	b.n	800861e <__b2d+0x4a>
 800866e:	bf00      	nop
 8008670:	3ff00000 	.word	0x3ff00000

08008674 <__d2b>:
 8008674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008678:	4689      	mov	r9, r1
 800867a:	2101      	movs	r1, #1
 800867c:	ec57 6b10 	vmov	r6, r7, d0
 8008680:	4690      	mov	r8, r2
 8008682:	f7ff fc0f 	bl	8007ea4 <_Balloc>
 8008686:	4604      	mov	r4, r0
 8008688:	b930      	cbnz	r0, 8008698 <__d2b+0x24>
 800868a:	4602      	mov	r2, r0
 800868c:	4b25      	ldr	r3, [pc, #148]	; (8008724 <__d2b+0xb0>)
 800868e:	4826      	ldr	r0, [pc, #152]	; (8008728 <__d2b+0xb4>)
 8008690:	f240 310a 	movw	r1, #778	; 0x30a
 8008694:	f001 f9f4 	bl	8009a80 <__assert_func>
 8008698:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800869c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086a0:	bb35      	cbnz	r5, 80086f0 <__d2b+0x7c>
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	d028      	beq.n	80086fa <__d2b+0x86>
 80086a8:	4668      	mov	r0, sp
 80086aa:	9600      	str	r6, [sp, #0]
 80086ac:	f7ff fd10 	bl	80080d0 <__lo0bits>
 80086b0:	9900      	ldr	r1, [sp, #0]
 80086b2:	b300      	cbz	r0, 80086f6 <__d2b+0x82>
 80086b4:	9a01      	ldr	r2, [sp, #4]
 80086b6:	f1c0 0320 	rsb	r3, r0, #32
 80086ba:	fa02 f303 	lsl.w	r3, r2, r3
 80086be:	430b      	orrs	r3, r1
 80086c0:	40c2      	lsrs	r2, r0
 80086c2:	6163      	str	r3, [r4, #20]
 80086c4:	9201      	str	r2, [sp, #4]
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	61a3      	str	r3, [r4, #24]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2202      	movne	r2, #2
 80086d0:	2201      	moveq	r2, #1
 80086d2:	6122      	str	r2, [r4, #16]
 80086d4:	b1d5      	cbz	r5, 800870c <__d2b+0x98>
 80086d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086da:	4405      	add	r5, r0
 80086dc:	f8c9 5000 	str.w	r5, [r9]
 80086e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086e4:	f8c8 0000 	str.w	r0, [r8]
 80086e8:	4620      	mov	r0, r4
 80086ea:	b003      	add	sp, #12
 80086ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086f4:	e7d5      	b.n	80086a2 <__d2b+0x2e>
 80086f6:	6161      	str	r1, [r4, #20]
 80086f8:	e7e5      	b.n	80086c6 <__d2b+0x52>
 80086fa:	a801      	add	r0, sp, #4
 80086fc:	f7ff fce8 	bl	80080d0 <__lo0bits>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	6163      	str	r3, [r4, #20]
 8008704:	2201      	movs	r2, #1
 8008706:	6122      	str	r2, [r4, #16]
 8008708:	3020      	adds	r0, #32
 800870a:	e7e3      	b.n	80086d4 <__d2b+0x60>
 800870c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008710:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008714:	f8c9 0000 	str.w	r0, [r9]
 8008718:	6918      	ldr	r0, [r3, #16]
 800871a:	f7ff fcb9 	bl	8008090 <__hi0bits>
 800871e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008722:	e7df      	b.n	80086e4 <__d2b+0x70>
 8008724:	08009fa4 	.word	0x08009fa4
 8008728:	0800a098 	.word	0x0800a098

0800872c <__ratio>:
 800872c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	4688      	mov	r8, r1
 8008732:	4669      	mov	r1, sp
 8008734:	4681      	mov	r9, r0
 8008736:	f7ff ff4d 	bl	80085d4 <__b2d>
 800873a:	a901      	add	r1, sp, #4
 800873c:	4640      	mov	r0, r8
 800873e:	ec55 4b10 	vmov	r4, r5, d0
 8008742:	f7ff ff47 	bl	80085d4 <__b2d>
 8008746:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800874a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800874e:	eba3 0c02 	sub.w	ip, r3, r2
 8008752:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800875c:	ec51 0b10 	vmov	r0, r1, d0
 8008760:	2b00      	cmp	r3, #0
 8008762:	bfd6      	itet	le
 8008764:	460a      	movle	r2, r1
 8008766:	462a      	movgt	r2, r5
 8008768:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800876c:	468b      	mov	fp, r1
 800876e:	462f      	mov	r7, r5
 8008770:	bfd4      	ite	le
 8008772:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008776:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800877a:	4620      	mov	r0, r4
 800877c:	ee10 2a10 	vmov	r2, s0
 8008780:	465b      	mov	r3, fp
 8008782:	4639      	mov	r1, r7
 8008784:	f7f8 f862 	bl	800084c <__aeabi_ddiv>
 8008788:	ec41 0b10 	vmov	d0, r0, r1
 800878c:	b003      	add	sp, #12
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008792 <__copybits>:
 8008792:	3901      	subs	r1, #1
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	1149      	asrs	r1, r1, #5
 8008798:	6914      	ldr	r4, [r2, #16]
 800879a:	3101      	adds	r1, #1
 800879c:	f102 0314 	add.w	r3, r2, #20
 80087a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087a8:	1f05      	subs	r5, r0, #4
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	d30c      	bcc.n	80087c8 <__copybits+0x36>
 80087ae:	1aa3      	subs	r3, r4, r2
 80087b0:	3b11      	subs	r3, #17
 80087b2:	f023 0303 	bic.w	r3, r3, #3
 80087b6:	3211      	adds	r2, #17
 80087b8:	42a2      	cmp	r2, r4
 80087ba:	bf88      	it	hi
 80087bc:	2300      	movhi	r3, #0
 80087be:	4418      	add	r0, r3
 80087c0:	2300      	movs	r3, #0
 80087c2:	4288      	cmp	r0, r1
 80087c4:	d305      	bcc.n	80087d2 <__copybits+0x40>
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80087cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80087d0:	e7eb      	b.n	80087aa <__copybits+0x18>
 80087d2:	f840 3b04 	str.w	r3, [r0], #4
 80087d6:	e7f4      	b.n	80087c2 <__copybits+0x30>

080087d8 <__any_on>:
 80087d8:	f100 0214 	add.w	r2, r0, #20
 80087dc:	6900      	ldr	r0, [r0, #16]
 80087de:	114b      	asrs	r3, r1, #5
 80087e0:	4298      	cmp	r0, r3
 80087e2:	b510      	push	{r4, lr}
 80087e4:	db11      	blt.n	800880a <__any_on+0x32>
 80087e6:	dd0a      	ble.n	80087fe <__any_on+0x26>
 80087e8:	f011 011f 	ands.w	r1, r1, #31
 80087ec:	d007      	beq.n	80087fe <__any_on+0x26>
 80087ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087f2:	fa24 f001 	lsr.w	r0, r4, r1
 80087f6:	fa00 f101 	lsl.w	r1, r0, r1
 80087fa:	428c      	cmp	r4, r1
 80087fc:	d10b      	bne.n	8008816 <__any_on+0x3e>
 80087fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008802:	4293      	cmp	r3, r2
 8008804:	d803      	bhi.n	800880e <__any_on+0x36>
 8008806:	2000      	movs	r0, #0
 8008808:	bd10      	pop	{r4, pc}
 800880a:	4603      	mov	r3, r0
 800880c:	e7f7      	b.n	80087fe <__any_on+0x26>
 800880e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008812:	2900      	cmp	r1, #0
 8008814:	d0f5      	beq.n	8008802 <__any_on+0x2a>
 8008816:	2001      	movs	r0, #1
 8008818:	e7f6      	b.n	8008808 <__any_on+0x30>

0800881a <_calloc_r>:
 800881a:	b513      	push	{r0, r1, r4, lr}
 800881c:	434a      	muls	r2, r1
 800881e:	4611      	mov	r1, r2
 8008820:	9201      	str	r2, [sp, #4]
 8008822:	f000 f859 	bl	80088d8 <_malloc_r>
 8008826:	4604      	mov	r4, r0
 8008828:	b118      	cbz	r0, 8008832 <_calloc_r+0x18>
 800882a:	9a01      	ldr	r2, [sp, #4]
 800882c:	2100      	movs	r1, #0
 800882e:	f7fb ff4f 	bl	80046d0 <memset>
 8008832:	4620      	mov	r0, r4
 8008834:	b002      	add	sp, #8
 8008836:	bd10      	pop	{r4, pc}

08008838 <_free_r>:
 8008838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800883a:	2900      	cmp	r1, #0
 800883c:	d048      	beq.n	80088d0 <_free_r+0x98>
 800883e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008842:	9001      	str	r0, [sp, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f1a1 0404 	sub.w	r4, r1, #4
 800884a:	bfb8      	it	lt
 800884c:	18e4      	addlt	r4, r4, r3
 800884e:	f001 f9a5 	bl	8009b9c <__malloc_lock>
 8008852:	4a20      	ldr	r2, [pc, #128]	; (80088d4 <_free_r+0x9c>)
 8008854:	9801      	ldr	r0, [sp, #4]
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	4615      	mov	r5, r2
 800885a:	b933      	cbnz	r3, 800886a <_free_r+0x32>
 800885c:	6063      	str	r3, [r4, #4]
 800885e:	6014      	str	r4, [r2, #0]
 8008860:	b003      	add	sp, #12
 8008862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008866:	f001 b99f 	b.w	8009ba8 <__malloc_unlock>
 800886a:	42a3      	cmp	r3, r4
 800886c:	d90b      	bls.n	8008886 <_free_r+0x4e>
 800886e:	6821      	ldr	r1, [r4, #0]
 8008870:	1862      	adds	r2, r4, r1
 8008872:	4293      	cmp	r3, r2
 8008874:	bf04      	itt	eq
 8008876:	681a      	ldreq	r2, [r3, #0]
 8008878:	685b      	ldreq	r3, [r3, #4]
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	bf04      	itt	eq
 800887e:	1852      	addeq	r2, r2, r1
 8008880:	6022      	streq	r2, [r4, #0]
 8008882:	602c      	str	r4, [r5, #0]
 8008884:	e7ec      	b.n	8008860 <_free_r+0x28>
 8008886:	461a      	mov	r2, r3
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	b10b      	cbz	r3, 8008890 <_free_r+0x58>
 800888c:	42a3      	cmp	r3, r4
 800888e:	d9fa      	bls.n	8008886 <_free_r+0x4e>
 8008890:	6811      	ldr	r1, [r2, #0]
 8008892:	1855      	adds	r5, r2, r1
 8008894:	42a5      	cmp	r5, r4
 8008896:	d10b      	bne.n	80088b0 <_free_r+0x78>
 8008898:	6824      	ldr	r4, [r4, #0]
 800889a:	4421      	add	r1, r4
 800889c:	1854      	adds	r4, r2, r1
 800889e:	42a3      	cmp	r3, r4
 80088a0:	6011      	str	r1, [r2, #0]
 80088a2:	d1dd      	bne.n	8008860 <_free_r+0x28>
 80088a4:	681c      	ldr	r4, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	4421      	add	r1, r4
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	e7d7      	b.n	8008860 <_free_r+0x28>
 80088b0:	d902      	bls.n	80088b8 <_free_r+0x80>
 80088b2:	230c      	movs	r3, #12
 80088b4:	6003      	str	r3, [r0, #0]
 80088b6:	e7d3      	b.n	8008860 <_free_r+0x28>
 80088b8:	6825      	ldr	r5, [r4, #0]
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf04      	itt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	bf04      	itt	eq
 80088c8:	1949      	addeq	r1, r1, r5
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	6054      	str	r4, [r2, #4]
 80088ce:	e7c7      	b.n	8008860 <_free_r+0x28>
 80088d0:	b003      	add	sp, #12
 80088d2:	bd30      	pop	{r4, r5, pc}
 80088d4:	20000200 	.word	0x20000200

080088d8 <_malloc_r>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	1ccd      	adds	r5, r1, #3
 80088dc:	f025 0503 	bic.w	r5, r5, #3
 80088e0:	3508      	adds	r5, #8
 80088e2:	2d0c      	cmp	r5, #12
 80088e4:	bf38      	it	cc
 80088e6:	250c      	movcc	r5, #12
 80088e8:	2d00      	cmp	r5, #0
 80088ea:	4606      	mov	r6, r0
 80088ec:	db01      	blt.n	80088f2 <_malloc_r+0x1a>
 80088ee:	42a9      	cmp	r1, r5
 80088f0:	d903      	bls.n	80088fa <_malloc_r+0x22>
 80088f2:	230c      	movs	r3, #12
 80088f4:	6033      	str	r3, [r6, #0]
 80088f6:	2000      	movs	r0, #0
 80088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fa:	f001 f94f 	bl	8009b9c <__malloc_lock>
 80088fe:	4921      	ldr	r1, [pc, #132]	; (8008984 <_malloc_r+0xac>)
 8008900:	680a      	ldr	r2, [r1, #0]
 8008902:	4614      	mov	r4, r2
 8008904:	b99c      	cbnz	r4, 800892e <_malloc_r+0x56>
 8008906:	4f20      	ldr	r7, [pc, #128]	; (8008988 <_malloc_r+0xb0>)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	b923      	cbnz	r3, 8008916 <_malloc_r+0x3e>
 800890c:	4621      	mov	r1, r4
 800890e:	4630      	mov	r0, r6
 8008910:	f000 fea6 	bl	8009660 <_sbrk_r>
 8008914:	6038      	str	r0, [r7, #0]
 8008916:	4629      	mov	r1, r5
 8008918:	4630      	mov	r0, r6
 800891a:	f000 fea1 	bl	8009660 <_sbrk_r>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d123      	bne.n	800896a <_malloc_r+0x92>
 8008922:	230c      	movs	r3, #12
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	4630      	mov	r0, r6
 8008928:	f001 f93e 	bl	8009ba8 <__malloc_unlock>
 800892c:	e7e3      	b.n	80088f6 <_malloc_r+0x1e>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	1b5b      	subs	r3, r3, r5
 8008932:	d417      	bmi.n	8008964 <_malloc_r+0x8c>
 8008934:	2b0b      	cmp	r3, #11
 8008936:	d903      	bls.n	8008940 <_malloc_r+0x68>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	441c      	add	r4, r3
 800893c:	6025      	str	r5, [r4, #0]
 800893e:	e004      	b.n	800894a <_malloc_r+0x72>
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	42a2      	cmp	r2, r4
 8008944:	bf0c      	ite	eq
 8008946:	600b      	streq	r3, [r1, #0]
 8008948:	6053      	strne	r3, [r2, #4]
 800894a:	4630      	mov	r0, r6
 800894c:	f001 f92c 	bl	8009ba8 <__malloc_unlock>
 8008950:	f104 000b 	add.w	r0, r4, #11
 8008954:	1d23      	adds	r3, r4, #4
 8008956:	f020 0007 	bic.w	r0, r0, #7
 800895a:	1ac2      	subs	r2, r0, r3
 800895c:	d0cc      	beq.n	80088f8 <_malloc_r+0x20>
 800895e:	1a1b      	subs	r3, r3, r0
 8008960:	50a3      	str	r3, [r4, r2]
 8008962:	e7c9      	b.n	80088f8 <_malloc_r+0x20>
 8008964:	4622      	mov	r2, r4
 8008966:	6864      	ldr	r4, [r4, #4]
 8008968:	e7cc      	b.n	8008904 <_malloc_r+0x2c>
 800896a:	1cc4      	adds	r4, r0, #3
 800896c:	f024 0403 	bic.w	r4, r4, #3
 8008970:	42a0      	cmp	r0, r4
 8008972:	d0e3      	beq.n	800893c <_malloc_r+0x64>
 8008974:	1a21      	subs	r1, r4, r0
 8008976:	4630      	mov	r0, r6
 8008978:	f000 fe72 	bl	8009660 <_sbrk_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d1dd      	bne.n	800893c <_malloc_r+0x64>
 8008980:	e7cf      	b.n	8008922 <_malloc_r+0x4a>
 8008982:	bf00      	nop
 8008984:	20000200 	.word	0x20000200
 8008988:	20000204 	.word	0x20000204

0800898c <__ssputs_r>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	688e      	ldr	r6, [r1, #8]
 8008992:	429e      	cmp	r6, r3
 8008994:	4682      	mov	sl, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4690      	mov	r8, r2
 800899a:	461f      	mov	r7, r3
 800899c:	d838      	bhi.n	8008a10 <__ssputs_r+0x84>
 800899e:	898a      	ldrh	r2, [r1, #12]
 80089a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a4:	d032      	beq.n	8008a0c <__ssputs_r+0x80>
 80089a6:	6825      	ldr	r5, [r4, #0]
 80089a8:	6909      	ldr	r1, [r1, #16]
 80089aa:	eba5 0901 	sub.w	r9, r5, r1
 80089ae:	6965      	ldr	r5, [r4, #20]
 80089b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089b8:	3301      	adds	r3, #1
 80089ba:	444b      	add	r3, r9
 80089bc:	106d      	asrs	r5, r5, #1
 80089be:	429d      	cmp	r5, r3
 80089c0:	bf38      	it	cc
 80089c2:	461d      	movcc	r5, r3
 80089c4:	0553      	lsls	r3, r2, #21
 80089c6:	d531      	bpl.n	8008a2c <__ssputs_r+0xa0>
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7ff ff85 	bl	80088d8 <_malloc_r>
 80089ce:	4606      	mov	r6, r0
 80089d0:	b950      	cbnz	r0, 80089e8 <__ssputs_r+0x5c>
 80089d2:	230c      	movs	r3, #12
 80089d4:	f8ca 3000 	str.w	r3, [sl]
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e8:	6921      	ldr	r1, [r4, #16]
 80089ea:	464a      	mov	r2, r9
 80089ec:	f7ff fa4c 	bl	8007e88 <memcpy>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	6126      	str	r6, [r4, #16]
 80089fe:	6165      	str	r5, [r4, #20]
 8008a00:	444e      	add	r6, r9
 8008a02:	eba5 0509 	sub.w	r5, r5, r9
 8008a06:	6026      	str	r6, [r4, #0]
 8008a08:	60a5      	str	r5, [r4, #8]
 8008a0a:	463e      	mov	r6, r7
 8008a0c:	42be      	cmp	r6, r7
 8008a0e:	d900      	bls.n	8008a12 <__ssputs_r+0x86>
 8008a10:	463e      	mov	r6, r7
 8008a12:	4632      	mov	r2, r6
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	4641      	mov	r1, r8
 8008a18:	f001 f8a6 	bl	8009b68 <memmove>
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	1b9b      	subs	r3, r3, r6
 8008a22:	4432      	add	r2, r6
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6022      	str	r2, [r4, #0]
 8008a28:	2000      	movs	r0, #0
 8008a2a:	e7db      	b.n	80089e4 <__ssputs_r+0x58>
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	f001 f8c1 	bl	8009bb4 <_realloc_r>
 8008a32:	4606      	mov	r6, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1e1      	bne.n	80089fc <__ssputs_r+0x70>
 8008a38:	6921      	ldr	r1, [r4, #16]
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	f7ff fefc 	bl	8008838 <_free_r>
 8008a40:	e7c7      	b.n	80089d2 <__ssputs_r+0x46>
	...

08008a44 <_svfiprintf_r>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4698      	mov	r8, r3
 8008a4a:	898b      	ldrh	r3, [r1, #12]
 8008a4c:	061b      	lsls	r3, r3, #24
 8008a4e:	b09d      	sub	sp, #116	; 0x74
 8008a50:	4607      	mov	r7, r0
 8008a52:	460d      	mov	r5, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	d50e      	bpl.n	8008a76 <_svfiprintf_r+0x32>
 8008a58:	690b      	ldr	r3, [r1, #16]
 8008a5a:	b963      	cbnz	r3, 8008a76 <_svfiprintf_r+0x32>
 8008a5c:	2140      	movs	r1, #64	; 0x40
 8008a5e:	f7ff ff3b 	bl	80088d8 <_malloc_r>
 8008a62:	6028      	str	r0, [r5, #0]
 8008a64:	6128      	str	r0, [r5, #16]
 8008a66:	b920      	cbnz	r0, 8008a72 <_svfiprintf_r+0x2e>
 8008a68:	230c      	movs	r3, #12
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	e0d1      	b.n	8008c16 <_svfiprintf_r+0x1d2>
 8008a72:	2340      	movs	r3, #64	; 0x40
 8008a74:	616b      	str	r3, [r5, #20]
 8008a76:	2300      	movs	r3, #0
 8008a78:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a84:	2330      	movs	r3, #48	; 0x30
 8008a86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c30 <_svfiprintf_r+0x1ec>
 8008a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a8e:	f04f 0901 	mov.w	r9, #1
 8008a92:	4623      	mov	r3, r4
 8008a94:	469a      	mov	sl, r3
 8008a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9a:	b10a      	cbz	r2, 8008aa0 <_svfiprintf_r+0x5c>
 8008a9c:	2a25      	cmp	r2, #37	; 0x25
 8008a9e:	d1f9      	bne.n	8008a94 <_svfiprintf_r+0x50>
 8008aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa4:	d00b      	beq.n	8008abe <_svfiprintf_r+0x7a>
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4638      	mov	r0, r7
 8008aae:	f7ff ff6d 	bl	800898c <__ssputs_r>
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	f000 80aa 	beq.w	8008c0c <_svfiprintf_r+0x1c8>
 8008ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aba:	445a      	add	r2, fp
 8008abc:	9209      	str	r2, [sp, #36]	; 0x24
 8008abe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80a2 	beq.w	8008c0c <_svfiprintf_r+0x1c8>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad2:	f10a 0a01 	add.w	sl, sl, #1
 8008ad6:	9304      	str	r3, [sp, #16]
 8008ad8:	9307      	str	r3, [sp, #28]
 8008ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ade:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae0:	4654      	mov	r4, sl
 8008ae2:	2205      	movs	r2, #5
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	4851      	ldr	r0, [pc, #324]	; (8008c30 <_svfiprintf_r+0x1ec>)
 8008aea:	f7f7 fb79 	bl	80001e0 <memchr>
 8008aee:	9a04      	ldr	r2, [sp, #16]
 8008af0:	b9d8      	cbnz	r0, 8008b2a <_svfiprintf_r+0xe6>
 8008af2:	06d0      	lsls	r0, r2, #27
 8008af4:	bf44      	itt	mi
 8008af6:	2320      	movmi	r3, #32
 8008af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afc:	0711      	lsls	r1, r2, #28
 8008afe:	bf44      	itt	mi
 8008b00:	232b      	movmi	r3, #43	; 0x2b
 8008b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b06:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0c:	d015      	beq.n	8008b3a <_svfiprintf_r+0xf6>
 8008b0e:	9a07      	ldr	r2, [sp, #28]
 8008b10:	4654      	mov	r4, sl
 8008b12:	2000      	movs	r0, #0
 8008b14:	f04f 0c0a 	mov.w	ip, #10
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b1e:	3b30      	subs	r3, #48	; 0x30
 8008b20:	2b09      	cmp	r3, #9
 8008b22:	d94e      	bls.n	8008bc2 <_svfiprintf_r+0x17e>
 8008b24:	b1b0      	cbz	r0, 8008b54 <_svfiprintf_r+0x110>
 8008b26:	9207      	str	r2, [sp, #28]
 8008b28:	e014      	b.n	8008b54 <_svfiprintf_r+0x110>
 8008b2a:	eba0 0308 	sub.w	r3, r0, r8
 8008b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	46a2      	mov	sl, r4
 8008b38:	e7d2      	b.n	8008ae0 <_svfiprintf_r+0x9c>
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	1d19      	adds	r1, r3, #4
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	9103      	str	r1, [sp, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfbb      	ittet	lt
 8008b46:	425b      	neglt	r3, r3
 8008b48:	f042 0202 	orrlt.w	r2, r2, #2
 8008b4c:	9307      	strge	r3, [sp, #28]
 8008b4e:	9307      	strlt	r3, [sp, #28]
 8008b50:	bfb8      	it	lt
 8008b52:	9204      	strlt	r2, [sp, #16]
 8008b54:	7823      	ldrb	r3, [r4, #0]
 8008b56:	2b2e      	cmp	r3, #46	; 0x2e
 8008b58:	d10c      	bne.n	8008b74 <_svfiprintf_r+0x130>
 8008b5a:	7863      	ldrb	r3, [r4, #1]
 8008b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5e:	d135      	bne.n	8008bcc <_svfiprintf_r+0x188>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	1d1a      	adds	r2, r3, #4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	9203      	str	r2, [sp, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bfb8      	it	lt
 8008b6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b70:	3402      	adds	r4, #2
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c40 <_svfiprintf_r+0x1fc>
 8008b78:	7821      	ldrb	r1, [r4, #0]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	4650      	mov	r0, sl
 8008b7e:	f7f7 fb2f 	bl	80001e0 <memchr>
 8008b82:	b140      	cbz	r0, 8008b96 <_svfiprintf_r+0x152>
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	eba0 000a 	sub.w	r0, r0, sl
 8008b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b8e:	9b04      	ldr	r3, [sp, #16]
 8008b90:	4303      	orrs	r3, r0
 8008b92:	3401      	adds	r4, #1
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	4826      	ldr	r0, [pc, #152]	; (8008c34 <_svfiprintf_r+0x1f0>)
 8008b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba0:	2206      	movs	r2, #6
 8008ba2:	f7f7 fb1d 	bl	80001e0 <memchr>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d038      	beq.n	8008c1c <_svfiprintf_r+0x1d8>
 8008baa:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <_svfiprintf_r+0x1f4>)
 8008bac:	bb1b      	cbnz	r3, 8008bf6 <_svfiprintf_r+0x1b2>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	f023 0307 	bic.w	r3, r3, #7
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbc:	4433      	add	r3, r6
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	e767      	b.n	8008a92 <_svfiprintf_r+0x4e>
 8008bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	2001      	movs	r0, #1
 8008bca:	e7a5      	b.n	8008b18 <_svfiprintf_r+0xd4>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	3401      	adds	r4, #1
 8008bd0:	9305      	str	r3, [sp, #20]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	f04f 0c0a 	mov.w	ip, #10
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bde:	3a30      	subs	r2, #48	; 0x30
 8008be0:	2a09      	cmp	r2, #9
 8008be2:	d903      	bls.n	8008bec <_svfiprintf_r+0x1a8>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0c5      	beq.n	8008b74 <_svfiprintf_r+0x130>
 8008be8:	9105      	str	r1, [sp, #20]
 8008bea:	e7c3      	b.n	8008b74 <_svfiprintf_r+0x130>
 8008bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7f0      	b.n	8008bd8 <_svfiprintf_r+0x194>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <_svfiprintf_r+0x1f8>)
 8008bfe:	a904      	add	r1, sp, #16
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7fb fe0d 	bl	8004820 <_printf_float>
 8008c06:	1c42      	adds	r2, r0, #1
 8008c08:	4606      	mov	r6, r0
 8008c0a:	d1d6      	bne.n	8008bba <_svfiprintf_r+0x176>
 8008c0c:	89ab      	ldrh	r3, [r5, #12]
 8008c0e:	065b      	lsls	r3, r3, #25
 8008c10:	f53f af2c 	bmi.w	8008a6c <_svfiprintf_r+0x28>
 8008c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c16:	b01d      	add	sp, #116	; 0x74
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	ab03      	add	r3, sp, #12
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	462a      	mov	r2, r5
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <_svfiprintf_r+0x1f8>)
 8008c24:	a904      	add	r1, sp, #16
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7fc f89e 	bl	8004d68 <_printf_i>
 8008c2c:	e7eb      	b.n	8008c06 <_svfiprintf_r+0x1c2>
 8008c2e:	bf00      	nop
 8008c30:	0800a1f4 	.word	0x0800a1f4
 8008c34:	0800a1fe 	.word	0x0800a1fe
 8008c38:	08004821 	.word	0x08004821
 8008c3c:	0800898d 	.word	0x0800898d
 8008c40:	0800a1fa 	.word	0x0800a1fa

08008c44 <__sfputc_r>:
 8008c44:	6893      	ldr	r3, [r2, #8]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	b410      	push	{r4}
 8008c4c:	6093      	str	r3, [r2, #8]
 8008c4e:	da08      	bge.n	8008c62 <__sfputc_r+0x1e>
 8008c50:	6994      	ldr	r4, [r2, #24]
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	db01      	blt.n	8008c5a <__sfputc_r+0x16>
 8008c56:	290a      	cmp	r1, #10
 8008c58:	d103      	bne.n	8008c62 <__sfputc_r+0x1e>
 8008c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c5e:	f7fd bbfd 	b.w	800645c <__swbuf_r>
 8008c62:	6813      	ldr	r3, [r2, #0]
 8008c64:	1c58      	adds	r0, r3, #1
 8008c66:	6010      	str	r0, [r2, #0]
 8008c68:	7019      	strb	r1, [r3, #0]
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <__sfputs_r>:
 8008c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	4614      	mov	r4, r2
 8008c7a:	18d5      	adds	r5, r2, r3
 8008c7c:	42ac      	cmp	r4, r5
 8008c7e:	d101      	bne.n	8008c84 <__sfputs_r+0x12>
 8008c80:	2000      	movs	r0, #0
 8008c82:	e007      	b.n	8008c94 <__sfputs_r+0x22>
 8008c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c88:	463a      	mov	r2, r7
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7ff ffda 	bl	8008c44 <__sfputc_r>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d1f3      	bne.n	8008c7c <__sfputs_r+0xa>
 8008c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c98 <_vfiprintf_r>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	460d      	mov	r5, r1
 8008c9e:	b09d      	sub	sp, #116	; 0x74
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	4698      	mov	r8, r3
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	b118      	cbz	r0, 8008cb0 <_vfiprintf_r+0x18>
 8008ca8:	6983      	ldr	r3, [r0, #24]
 8008caa:	b90b      	cbnz	r3, 8008cb0 <_vfiprintf_r+0x18>
 8008cac:	f7fe fc3c 	bl	8007528 <__sinit>
 8008cb0:	4b89      	ldr	r3, [pc, #548]	; (8008ed8 <_vfiprintf_r+0x240>)
 8008cb2:	429d      	cmp	r5, r3
 8008cb4:	d11b      	bne.n	8008cee <_vfiprintf_r+0x56>
 8008cb6:	6875      	ldr	r5, [r6, #4]
 8008cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	d405      	bmi.n	8008cca <_vfiprintf_r+0x32>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_vfiprintf_r+0x32>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc6:	f7ff f85e 	bl	8007d86 <__retarget_lock_acquire_recursive>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	071b      	lsls	r3, r3, #28
 8008cce:	d501      	bpl.n	8008cd4 <_vfiprintf_r+0x3c>
 8008cd0:	692b      	ldr	r3, [r5, #16]
 8008cd2:	b9eb      	cbnz	r3, 8008d10 <_vfiprintf_r+0x78>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7fd fc12 	bl	8006500 <__swsetup_r>
 8008cdc:	b1c0      	cbz	r0, 8008d10 <_vfiprintf_r+0x78>
 8008cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce0:	07dc      	lsls	r4, r3, #31
 8008ce2:	d50e      	bpl.n	8008d02 <_vfiprintf_r+0x6a>
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	b01d      	add	sp, #116	; 0x74
 8008cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cee:	4b7b      	ldr	r3, [pc, #492]	; (8008edc <_vfiprintf_r+0x244>)
 8008cf0:	429d      	cmp	r5, r3
 8008cf2:	d101      	bne.n	8008cf8 <_vfiprintf_r+0x60>
 8008cf4:	68b5      	ldr	r5, [r6, #8]
 8008cf6:	e7df      	b.n	8008cb8 <_vfiprintf_r+0x20>
 8008cf8:	4b79      	ldr	r3, [pc, #484]	; (8008ee0 <_vfiprintf_r+0x248>)
 8008cfa:	429d      	cmp	r5, r3
 8008cfc:	bf08      	it	eq
 8008cfe:	68f5      	ldreq	r5, [r6, #12]
 8008d00:	e7da      	b.n	8008cb8 <_vfiprintf_r+0x20>
 8008d02:	89ab      	ldrh	r3, [r5, #12]
 8008d04:	0598      	lsls	r0, r3, #22
 8008d06:	d4ed      	bmi.n	8008ce4 <_vfiprintf_r+0x4c>
 8008d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d0a:	f7ff f83d 	bl	8007d88 <__retarget_lock_release_recursive>
 8008d0e:	e7e9      	b.n	8008ce4 <_vfiprintf_r+0x4c>
 8008d10:	2300      	movs	r3, #0
 8008d12:	9309      	str	r3, [sp, #36]	; 0x24
 8008d14:	2320      	movs	r3, #32
 8008d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d1e:	2330      	movs	r3, #48	; 0x30
 8008d20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ee4 <_vfiprintf_r+0x24c>
 8008d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d28:	f04f 0901 	mov.w	r9, #1
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	469a      	mov	sl, r3
 8008d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d34:	b10a      	cbz	r2, 8008d3a <_vfiprintf_r+0xa2>
 8008d36:	2a25      	cmp	r2, #37	; 0x25
 8008d38:	d1f9      	bne.n	8008d2e <_vfiprintf_r+0x96>
 8008d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d3e:	d00b      	beq.n	8008d58 <_vfiprintf_r+0xc0>
 8008d40:	465b      	mov	r3, fp
 8008d42:	4622      	mov	r2, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ff93 	bl	8008c72 <__sfputs_r>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f000 80aa 	beq.w	8008ea6 <_vfiprintf_r+0x20e>
 8008d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d54:	445a      	add	r2, fp
 8008d56:	9209      	str	r2, [sp, #36]	; 0x24
 8008d58:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 80a2 	beq.w	8008ea6 <_vfiprintf_r+0x20e>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f04f 32ff 	mov.w	r2, #4294967295
 8008d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d6c:	f10a 0a01 	add.w	sl, sl, #1
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	9307      	str	r3, [sp, #28]
 8008d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d78:	931a      	str	r3, [sp, #104]	; 0x68
 8008d7a:	4654      	mov	r4, sl
 8008d7c:	2205      	movs	r2, #5
 8008d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d82:	4858      	ldr	r0, [pc, #352]	; (8008ee4 <_vfiprintf_r+0x24c>)
 8008d84:	f7f7 fa2c 	bl	80001e0 <memchr>
 8008d88:	9a04      	ldr	r2, [sp, #16]
 8008d8a:	b9d8      	cbnz	r0, 8008dc4 <_vfiprintf_r+0x12c>
 8008d8c:	06d1      	lsls	r1, r2, #27
 8008d8e:	bf44      	itt	mi
 8008d90:	2320      	movmi	r3, #32
 8008d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d96:	0713      	lsls	r3, r2, #28
 8008d98:	bf44      	itt	mi
 8008d9a:	232b      	movmi	r3, #43	; 0x2b
 8008d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da0:	f89a 3000 	ldrb.w	r3, [sl]
 8008da4:	2b2a      	cmp	r3, #42	; 0x2a
 8008da6:	d015      	beq.n	8008dd4 <_vfiprintf_r+0x13c>
 8008da8:	9a07      	ldr	r2, [sp, #28]
 8008daa:	4654      	mov	r4, sl
 8008dac:	2000      	movs	r0, #0
 8008dae:	f04f 0c0a 	mov.w	ip, #10
 8008db2:	4621      	mov	r1, r4
 8008db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008db8:	3b30      	subs	r3, #48	; 0x30
 8008dba:	2b09      	cmp	r3, #9
 8008dbc:	d94e      	bls.n	8008e5c <_vfiprintf_r+0x1c4>
 8008dbe:	b1b0      	cbz	r0, 8008dee <_vfiprintf_r+0x156>
 8008dc0:	9207      	str	r2, [sp, #28]
 8008dc2:	e014      	b.n	8008dee <_vfiprintf_r+0x156>
 8008dc4:	eba0 0308 	sub.w	r3, r0, r8
 8008dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	46a2      	mov	sl, r4
 8008dd2:	e7d2      	b.n	8008d7a <_vfiprintf_r+0xe2>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	1d19      	adds	r1, r3, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	9103      	str	r1, [sp, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bfbb      	ittet	lt
 8008de0:	425b      	neglt	r3, r3
 8008de2:	f042 0202 	orrlt.w	r2, r2, #2
 8008de6:	9307      	strge	r3, [sp, #28]
 8008de8:	9307      	strlt	r3, [sp, #28]
 8008dea:	bfb8      	it	lt
 8008dec:	9204      	strlt	r2, [sp, #16]
 8008dee:	7823      	ldrb	r3, [r4, #0]
 8008df0:	2b2e      	cmp	r3, #46	; 0x2e
 8008df2:	d10c      	bne.n	8008e0e <_vfiprintf_r+0x176>
 8008df4:	7863      	ldrb	r3, [r4, #1]
 8008df6:	2b2a      	cmp	r3, #42	; 0x2a
 8008df8:	d135      	bne.n	8008e66 <_vfiprintf_r+0x1ce>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	1d1a      	adds	r2, r3, #4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	9203      	str	r2, [sp, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfb8      	it	lt
 8008e06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e0a:	3402      	adds	r4, #2
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ef4 <_vfiprintf_r+0x25c>
 8008e12:	7821      	ldrb	r1, [r4, #0]
 8008e14:	2203      	movs	r2, #3
 8008e16:	4650      	mov	r0, sl
 8008e18:	f7f7 f9e2 	bl	80001e0 <memchr>
 8008e1c:	b140      	cbz	r0, 8008e30 <_vfiprintf_r+0x198>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	eba0 000a 	sub.w	r0, r0, sl
 8008e24:	fa03 f000 	lsl.w	r0, r3, r0
 8008e28:	9b04      	ldr	r3, [sp, #16]
 8008e2a:	4303      	orrs	r3, r0
 8008e2c:	3401      	adds	r4, #1
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e34:	482c      	ldr	r0, [pc, #176]	; (8008ee8 <_vfiprintf_r+0x250>)
 8008e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e3a:	2206      	movs	r2, #6
 8008e3c:	f7f7 f9d0 	bl	80001e0 <memchr>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d03f      	beq.n	8008ec4 <_vfiprintf_r+0x22c>
 8008e44:	4b29      	ldr	r3, [pc, #164]	; (8008eec <_vfiprintf_r+0x254>)
 8008e46:	bb1b      	cbnz	r3, 8008e90 <_vfiprintf_r+0x1f8>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	3307      	adds	r3, #7
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	9303      	str	r3, [sp, #12]
 8008e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e56:	443b      	add	r3, r7
 8008e58:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5a:	e767      	b.n	8008d2c <_vfiprintf_r+0x94>
 8008e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e60:	460c      	mov	r4, r1
 8008e62:	2001      	movs	r0, #1
 8008e64:	e7a5      	b.n	8008db2 <_vfiprintf_r+0x11a>
 8008e66:	2300      	movs	r3, #0
 8008e68:	3401      	adds	r4, #1
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	f04f 0c0a 	mov.w	ip, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e78:	3a30      	subs	r2, #48	; 0x30
 8008e7a:	2a09      	cmp	r2, #9
 8008e7c:	d903      	bls.n	8008e86 <_vfiprintf_r+0x1ee>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0c5      	beq.n	8008e0e <_vfiprintf_r+0x176>
 8008e82:	9105      	str	r1, [sp, #20]
 8008e84:	e7c3      	b.n	8008e0e <_vfiprintf_r+0x176>
 8008e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e7f0      	b.n	8008e72 <_vfiprintf_r+0x1da>
 8008e90:	ab03      	add	r3, sp, #12
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	462a      	mov	r2, r5
 8008e96:	4b16      	ldr	r3, [pc, #88]	; (8008ef0 <_vfiprintf_r+0x258>)
 8008e98:	a904      	add	r1, sp, #16
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7fb fcc0 	bl	8004820 <_printf_float>
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	1c78      	adds	r0, r7, #1
 8008ea4:	d1d6      	bne.n	8008e54 <_vfiprintf_r+0x1bc>
 8008ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ea8:	07d9      	lsls	r1, r3, #31
 8008eaa:	d405      	bmi.n	8008eb8 <_vfiprintf_r+0x220>
 8008eac:	89ab      	ldrh	r3, [r5, #12]
 8008eae:	059a      	lsls	r2, r3, #22
 8008eb0:	d402      	bmi.n	8008eb8 <_vfiprintf_r+0x220>
 8008eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eb4:	f7fe ff68 	bl	8007d88 <__retarget_lock_release_recursive>
 8008eb8:	89ab      	ldrh	r3, [r5, #12]
 8008eba:	065b      	lsls	r3, r3, #25
 8008ebc:	f53f af12 	bmi.w	8008ce4 <_vfiprintf_r+0x4c>
 8008ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ec2:	e711      	b.n	8008ce8 <_vfiprintf_r+0x50>
 8008ec4:	ab03      	add	r3, sp, #12
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <_vfiprintf_r+0x258>)
 8008ecc:	a904      	add	r1, sp, #16
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7fb ff4a 	bl	8004d68 <_printf_i>
 8008ed4:	e7e4      	b.n	8008ea0 <_vfiprintf_r+0x208>
 8008ed6:	bf00      	nop
 8008ed8:	08009fd8 	.word	0x08009fd8
 8008edc:	08009ff8 	.word	0x08009ff8
 8008ee0:	08009fb8 	.word	0x08009fb8
 8008ee4:	0800a1f4 	.word	0x0800a1f4
 8008ee8:	0800a1fe 	.word	0x0800a1fe
 8008eec:	08004821 	.word	0x08004821
 8008ef0:	08008c73 	.word	0x08008c73
 8008ef4:	0800a1fa 	.word	0x0800a1fa

08008ef8 <__svfiscanf_r>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	461d      	mov	r5, r3
 8008efe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008f00:	07df      	lsls	r7, r3, #31
 8008f02:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008f06:	4606      	mov	r6, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	4692      	mov	sl, r2
 8008f0c:	d405      	bmi.n	8008f1a <__svfiscanf_r+0x22>
 8008f0e:	898b      	ldrh	r3, [r1, #12]
 8008f10:	0598      	lsls	r0, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <__svfiscanf_r+0x22>
 8008f14:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8008f16:	f7fe ff36 	bl	8007d86 <__retarget_lock_acquire_recursive>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8008f20:	4bae      	ldr	r3, [pc, #696]	; (80091dc <__svfiscanf_r+0x2e4>)
 8008f22:	93a0      	str	r3, [sp, #640]	; 0x280
 8008f24:	f10d 0804 	add.w	r8, sp, #4
 8008f28:	4bad      	ldr	r3, [pc, #692]	; (80091e0 <__svfiscanf_r+0x2e8>)
 8008f2a:	4fae      	ldr	r7, [pc, #696]	; (80091e4 <__svfiscanf_r+0x2ec>)
 8008f2c:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 80091e8 <__svfiscanf_r+0x2f0>
 8008f30:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008f34:	93a1      	str	r3, [sp, #644]	; 0x284
 8008f36:	9500      	str	r5, [sp, #0]
 8008f38:	f89a b000 	ldrb.w	fp, [sl]
 8008f3c:	f1bb 0f00 	cmp.w	fp, #0
 8008f40:	f000 8170 	beq.w	8009224 <__svfiscanf_r+0x32c>
 8008f44:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8008f48:	f013 0308 	ands.w	r3, r3, #8
 8008f4c:	f10a 0501 	add.w	r5, sl, #1
 8008f50:	d019      	beq.n	8008f86 <__svfiscanf_r+0x8e>
 8008f52:	6863      	ldr	r3, [r4, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	dd0f      	ble.n	8008f78 <__svfiscanf_r+0x80>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	5cba      	ldrb	r2, [r7, r2]
 8008f5e:	0711      	lsls	r1, r2, #28
 8008f60:	d401      	bmi.n	8008f66 <__svfiscanf_r+0x6e>
 8008f62:	46aa      	mov	sl, r5
 8008f64:	e7e8      	b.n	8008f38 <__svfiscanf_r+0x40>
 8008f66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f68:	3201      	adds	r2, #1
 8008f6a:	9245      	str	r2, [sp, #276]	; 0x114
 8008f6c:	6862      	ldr	r2, [r4, #4]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	3a01      	subs	r2, #1
 8008f72:	6062      	str	r2, [r4, #4]
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	e7ec      	b.n	8008f52 <__svfiscanf_r+0x5a>
 8008f78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4798      	blx	r3
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d0e9      	beq.n	8008f58 <__svfiscanf_r+0x60>
 8008f84:	e7ed      	b.n	8008f62 <__svfiscanf_r+0x6a>
 8008f86:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008f8a:	f040 8086 	bne.w	800909a <__svfiscanf_r+0x1a2>
 8008f8e:	9341      	str	r3, [sp, #260]	; 0x104
 8008f90:	9343      	str	r3, [sp, #268]	; 0x10c
 8008f92:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008f96:	2b2a      	cmp	r3, #42	; 0x2a
 8008f98:	bf02      	ittt	eq
 8008f9a:	2310      	moveq	r3, #16
 8008f9c:	9341      	streq	r3, [sp, #260]	; 0x104
 8008f9e:	f10a 0502 	addeq.w	r5, sl, #2
 8008fa2:	220a      	movs	r2, #10
 8008fa4:	46aa      	mov	sl, r5
 8008fa6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008faa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	d91e      	bls.n	8008ff0 <__svfiscanf_r+0xf8>
 8008fb2:	488d      	ldr	r0, [pc, #564]	; (80091e8 <__svfiscanf_r+0x2f0>)
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	f7f7 f913 	bl	80001e0 <memchr>
 8008fba:	b140      	cbz	r0, 8008fce <__svfiscanf_r+0xd6>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	eba0 0009 	sub.w	r0, r0, r9
 8008fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008fc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008fc8:	4318      	orrs	r0, r3
 8008fca:	9041      	str	r0, [sp, #260]	; 0x104
 8008fcc:	4655      	mov	r5, sl
 8008fce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fd2:	2b78      	cmp	r3, #120	; 0x78
 8008fd4:	d807      	bhi.n	8008fe6 <__svfiscanf_r+0xee>
 8008fd6:	2b57      	cmp	r3, #87	; 0x57
 8008fd8:	d811      	bhi.n	8008ffe <__svfiscanf_r+0x106>
 8008fda:	2b25      	cmp	r3, #37	; 0x25
 8008fdc:	d05d      	beq.n	800909a <__svfiscanf_r+0x1a2>
 8008fde:	d857      	bhi.n	8009090 <__svfiscanf_r+0x198>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80d6 	beq.w	8009192 <__svfiscanf_r+0x29a>
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	9347      	str	r3, [sp, #284]	; 0x11c
 8008fea:	230a      	movs	r3, #10
 8008fec:	9342      	str	r3, [sp, #264]	; 0x108
 8008fee:	e08b      	b.n	8009108 <__svfiscanf_r+0x210>
 8008ff0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008ff2:	fb02 1303 	mla	r3, r2, r3, r1
 8008ff6:	3b30      	subs	r3, #48	; 0x30
 8008ff8:	9343      	str	r3, [sp, #268]	; 0x10c
 8008ffa:	4655      	mov	r5, sl
 8008ffc:	e7d2      	b.n	8008fa4 <__svfiscanf_r+0xac>
 8008ffe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009002:	2a20      	cmp	r2, #32
 8009004:	d8ef      	bhi.n	8008fe6 <__svfiscanf_r+0xee>
 8009006:	a101      	add	r1, pc, #4	; (adr r1, 800900c <__svfiscanf_r+0x114>)
 8009008:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800900c:	080090f3 	.word	0x080090f3
 8009010:	08008fe7 	.word	0x08008fe7
 8009014:	08008fe7 	.word	0x08008fe7
 8009018:	08009151 	.word	0x08009151
 800901c:	08008fe7 	.word	0x08008fe7
 8009020:	08008fe7 	.word	0x08008fe7
 8009024:	08008fe7 	.word	0x08008fe7
 8009028:	08008fe7 	.word	0x08008fe7
 800902c:	08008fe7 	.word	0x08008fe7
 8009030:	08008fe7 	.word	0x08008fe7
 8009034:	08008fe7 	.word	0x08008fe7
 8009038:	08009167 	.word	0x08009167
 800903c:	0800913d 	.word	0x0800913d
 8009040:	08009097 	.word	0x08009097
 8009044:	08009097 	.word	0x08009097
 8009048:	08009097 	.word	0x08009097
 800904c:	08008fe7 	.word	0x08008fe7
 8009050:	08009141 	.word	0x08009141
 8009054:	08008fe7 	.word	0x08008fe7
 8009058:	08008fe7 	.word	0x08008fe7
 800905c:	08008fe7 	.word	0x08008fe7
 8009060:	08008fe7 	.word	0x08008fe7
 8009064:	08009177 	.word	0x08009177
 8009068:	08009149 	.word	0x08009149
 800906c:	080090eb 	.word	0x080090eb
 8009070:	08008fe7 	.word	0x08008fe7
 8009074:	08008fe7 	.word	0x08008fe7
 8009078:	08009173 	.word	0x08009173
 800907c:	08008fe7 	.word	0x08008fe7
 8009080:	0800913d 	.word	0x0800913d
 8009084:	08008fe7 	.word	0x08008fe7
 8009088:	08008fe7 	.word	0x08008fe7
 800908c:	080090f3 	.word	0x080090f3
 8009090:	3b45      	subs	r3, #69	; 0x45
 8009092:	2b02      	cmp	r3, #2
 8009094:	d8a7      	bhi.n	8008fe6 <__svfiscanf_r+0xee>
 8009096:	2305      	movs	r3, #5
 8009098:	e035      	b.n	8009106 <__svfiscanf_r+0x20e>
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd0d      	ble.n	80090bc <__svfiscanf_r+0x1c4>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	781a      	ldrb	r2, [r3, #0]
 80090a4:	455a      	cmp	r2, fp
 80090a6:	f040 80bd 	bne.w	8009224 <__svfiscanf_r+0x32c>
 80090aa:	3301      	adds	r3, #1
 80090ac:	6862      	ldr	r2, [r4, #4]
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80090b2:	3a01      	subs	r2, #1
 80090b4:	3301      	adds	r3, #1
 80090b6:	6062      	str	r2, [r4, #4]
 80090b8:	9345      	str	r3, [sp, #276]	; 0x114
 80090ba:	e752      	b.n	8008f62 <__svfiscanf_r+0x6a>
 80090bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80090be:	4621      	mov	r1, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	4798      	blx	r3
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d0eb      	beq.n	80090a0 <__svfiscanf_r+0x1a8>
 80090c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ca:	07da      	lsls	r2, r3, #31
 80090cc:	f140 80a2 	bpl.w	8009214 <__svfiscanf_r+0x31c>
 80090d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d066      	beq.n	80091a4 <__svfiscanf_r+0x2ac>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80090dc:	bf18      	it	ne
 80090de:	f04f 30ff 	movne.w	r0, #4294967295
 80090e2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80090ec:	f042 0220 	orr.w	r2, r2, #32
 80090f0:	9241      	str	r2, [sp, #260]	; 0x104
 80090f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80090f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090f8:	9241      	str	r2, [sp, #260]	; 0x104
 80090fa:	2210      	movs	r2, #16
 80090fc:	2b6f      	cmp	r3, #111	; 0x6f
 80090fe:	9242      	str	r2, [sp, #264]	; 0x108
 8009100:	bf34      	ite	cc
 8009102:	2303      	movcc	r3, #3
 8009104:	2304      	movcs	r3, #4
 8009106:	9347      	str	r3, [sp, #284]	; 0x11c
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd4d      	ble.n	80091aa <__svfiscanf_r+0x2b2>
 800910e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009110:	065b      	lsls	r3, r3, #25
 8009112:	d404      	bmi.n	800911e <__svfiscanf_r+0x226>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	5cba      	ldrb	r2, [r7, r2]
 800911a:	0710      	lsls	r0, r2, #28
 800911c:	d44c      	bmi.n	80091b8 <__svfiscanf_r+0x2c0>
 800911e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009120:	2b02      	cmp	r3, #2
 8009122:	dc63      	bgt.n	80091ec <__svfiscanf_r+0x2f4>
 8009124:	466b      	mov	r3, sp
 8009126:	4622      	mov	r2, r4
 8009128:	a941      	add	r1, sp, #260	; 0x104
 800912a:	4630      	mov	r0, r6
 800912c:	f000 f8b0 	bl	8009290 <_scanf_chars>
 8009130:	2801      	cmp	r0, #1
 8009132:	d077      	beq.n	8009224 <__svfiscanf_r+0x32c>
 8009134:	2802      	cmp	r0, #2
 8009136:	f47f af14 	bne.w	8008f62 <__svfiscanf_r+0x6a>
 800913a:	e7c5      	b.n	80090c8 <__svfiscanf_r+0x1d0>
 800913c:	220a      	movs	r2, #10
 800913e:	e7dd      	b.n	80090fc <__svfiscanf_r+0x204>
 8009140:	2300      	movs	r3, #0
 8009142:	9342      	str	r3, [sp, #264]	; 0x108
 8009144:	2303      	movs	r3, #3
 8009146:	e7de      	b.n	8009106 <__svfiscanf_r+0x20e>
 8009148:	2308      	movs	r3, #8
 800914a:	9342      	str	r3, [sp, #264]	; 0x108
 800914c:	2304      	movs	r3, #4
 800914e:	e7da      	b.n	8009106 <__svfiscanf_r+0x20e>
 8009150:	4629      	mov	r1, r5
 8009152:	4640      	mov	r0, r8
 8009154:	f000 fa94 	bl	8009680 <__sccl>
 8009158:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800915a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800915e:	9341      	str	r3, [sp, #260]	; 0x104
 8009160:	4605      	mov	r5, r0
 8009162:	2301      	movs	r3, #1
 8009164:	e7cf      	b.n	8009106 <__svfiscanf_r+0x20e>
 8009166:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916c:	9341      	str	r3, [sp, #260]	; 0x104
 800916e:	2300      	movs	r3, #0
 8009170:	e7c9      	b.n	8009106 <__svfiscanf_r+0x20e>
 8009172:	2302      	movs	r3, #2
 8009174:	e7c7      	b.n	8009106 <__svfiscanf_r+0x20e>
 8009176:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009178:	06c3      	lsls	r3, r0, #27
 800917a:	f53f aef2 	bmi.w	8008f62 <__svfiscanf_r+0x6a>
 800917e:	9b00      	ldr	r3, [sp, #0]
 8009180:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009182:	1d19      	adds	r1, r3, #4
 8009184:	9100      	str	r1, [sp, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	07c0      	lsls	r0, r0, #31
 800918a:	bf4c      	ite	mi
 800918c:	801a      	strhmi	r2, [r3, #0]
 800918e:	601a      	strpl	r2, [r3, #0]
 8009190:	e6e7      	b.n	8008f62 <__svfiscanf_r+0x6a>
 8009192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009194:	07d8      	lsls	r0, r3, #31
 8009196:	d405      	bmi.n	80091a4 <__svfiscanf_r+0x2ac>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	0599      	lsls	r1, r3, #22
 800919c:	d402      	bmi.n	80091a4 <__svfiscanf_r+0x2ac>
 800919e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091a0:	f7fe fdf2 	bl	8007d88 <__retarget_lock_release_recursive>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	e79b      	b.n	80090e2 <__svfiscanf_r+0x1ea>
 80091aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091ac:	4621      	mov	r1, r4
 80091ae:	4630      	mov	r0, r6
 80091b0:	4798      	blx	r3
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d0ab      	beq.n	800910e <__svfiscanf_r+0x216>
 80091b6:	e787      	b.n	80090c8 <__svfiscanf_r+0x1d0>
 80091b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80091ba:	3201      	adds	r2, #1
 80091bc:	9245      	str	r2, [sp, #276]	; 0x114
 80091be:	6862      	ldr	r2, [r4, #4]
 80091c0:	3a01      	subs	r2, #1
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	6062      	str	r2, [r4, #4]
 80091c6:	dd02      	ble.n	80091ce <__svfiscanf_r+0x2d6>
 80091c8:	3301      	adds	r3, #1
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	e7a2      	b.n	8009114 <__svfiscanf_r+0x21c>
 80091ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091d0:	4621      	mov	r1, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	4798      	blx	r3
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d09c      	beq.n	8009114 <__svfiscanf_r+0x21c>
 80091da:	e775      	b.n	80090c8 <__svfiscanf_r+0x1d0>
 80091dc:	08009911 	.word	0x08009911
 80091e0:	0800953d 	.word	0x0800953d
 80091e4:	08009e21 	.word	0x08009e21
 80091e8:	0800a1fa 	.word	0x0800a1fa
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	dc06      	bgt.n	80091fe <__svfiscanf_r+0x306>
 80091f0:	466b      	mov	r3, sp
 80091f2:	4622      	mov	r2, r4
 80091f4:	a941      	add	r1, sp, #260	; 0x104
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 f8a2 	bl	8009340 <_scanf_i>
 80091fc:	e798      	b.n	8009130 <__svfiscanf_r+0x238>
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <__svfiscanf_r+0x344>)
 8009200:	2b00      	cmp	r3, #0
 8009202:	f43f aeae 	beq.w	8008f62 <__svfiscanf_r+0x6a>
 8009206:	466b      	mov	r3, sp
 8009208:	4622      	mov	r2, r4
 800920a:	a941      	add	r1, sp, #260	; 0x104
 800920c:	4630      	mov	r0, r6
 800920e:	f7fb fed1 	bl	8004fb4 <_scanf_float>
 8009212:	e78d      	b.n	8009130 <__svfiscanf_r+0x238>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	0599      	lsls	r1, r3, #22
 8009218:	f53f af5a 	bmi.w	80090d0 <__svfiscanf_r+0x1d8>
 800921c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921e:	f7fe fdb3 	bl	8007d88 <__retarget_lock_release_recursive>
 8009222:	e755      	b.n	80090d0 <__svfiscanf_r+0x1d8>
 8009224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009226:	07da      	lsls	r2, r3, #31
 8009228:	d405      	bmi.n	8009236 <__svfiscanf_r+0x33e>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	059b      	lsls	r3, r3, #22
 800922e:	d402      	bmi.n	8009236 <__svfiscanf_r+0x33e>
 8009230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009232:	f7fe fda9 	bl	8007d88 <__retarget_lock_release_recursive>
 8009236:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009238:	e753      	b.n	80090e2 <__svfiscanf_r+0x1ea>
 800923a:	bf00      	nop
 800923c:	08004fb5 	.word	0x08004fb5

08009240 <_vfiscanf_r>:
 8009240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009242:	460c      	mov	r4, r1
 8009244:	4605      	mov	r5, r0
 8009246:	b138      	cbz	r0, 8009258 <_vfiscanf_r+0x18>
 8009248:	6981      	ldr	r1, [r0, #24]
 800924a:	b929      	cbnz	r1, 8009258 <_vfiscanf_r+0x18>
 800924c:	e9cd 2300 	strd	r2, r3, [sp]
 8009250:	f7fe f96a 	bl	8007528 <__sinit>
 8009254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009258:	490a      	ldr	r1, [pc, #40]	; (8009284 <_vfiscanf_r+0x44>)
 800925a:	428c      	cmp	r4, r1
 800925c:	d107      	bne.n	800926e <_vfiscanf_r+0x2e>
 800925e:	686c      	ldr	r4, [r5, #4]
 8009260:	4621      	mov	r1, r4
 8009262:	4628      	mov	r0, r5
 8009264:	b003      	add	sp, #12
 8009266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800926a:	f7ff be45 	b.w	8008ef8 <__svfiscanf_r>
 800926e:	4906      	ldr	r1, [pc, #24]	; (8009288 <_vfiscanf_r+0x48>)
 8009270:	428c      	cmp	r4, r1
 8009272:	d101      	bne.n	8009278 <_vfiscanf_r+0x38>
 8009274:	68ac      	ldr	r4, [r5, #8]
 8009276:	e7f3      	b.n	8009260 <_vfiscanf_r+0x20>
 8009278:	4904      	ldr	r1, [pc, #16]	; (800928c <_vfiscanf_r+0x4c>)
 800927a:	428c      	cmp	r4, r1
 800927c:	bf08      	it	eq
 800927e:	68ec      	ldreq	r4, [r5, #12]
 8009280:	e7ee      	b.n	8009260 <_vfiscanf_r+0x20>
 8009282:	bf00      	nop
 8009284:	08009fd8 	.word	0x08009fd8
 8009288:	08009ff8 	.word	0x08009ff8
 800928c:	08009fb8 	.word	0x08009fb8

08009290 <_scanf_chars>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	4615      	mov	r5, r2
 8009296:	688a      	ldr	r2, [r1, #8]
 8009298:	4680      	mov	r8, r0
 800929a:	460c      	mov	r4, r1
 800929c:	b932      	cbnz	r2, 80092ac <_scanf_chars+0x1c>
 800929e:	698a      	ldr	r2, [r1, #24]
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	bf0c      	ite	eq
 80092a4:	2201      	moveq	r2, #1
 80092a6:	f04f 32ff 	movne.w	r2, #4294967295
 80092aa:	608a      	str	r2, [r1, #8]
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800933c <_scanf_chars+0xac>
 80092b2:	06d1      	lsls	r1, r2, #27
 80092b4:	bf5f      	itttt	pl
 80092b6:	681a      	ldrpl	r2, [r3, #0]
 80092b8:	1d11      	addpl	r1, r2, #4
 80092ba:	6019      	strpl	r1, [r3, #0]
 80092bc:	6816      	ldrpl	r6, [r2, #0]
 80092be:	2700      	movs	r7, #0
 80092c0:	69a0      	ldr	r0, [r4, #24]
 80092c2:	b188      	cbz	r0, 80092e8 <_scanf_chars+0x58>
 80092c4:	2801      	cmp	r0, #1
 80092c6:	d107      	bne.n	80092d8 <_scanf_chars+0x48>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	6963      	ldr	r3, [r4, #20]
 80092ce:	5c9b      	ldrb	r3, [r3, r2]
 80092d0:	b953      	cbnz	r3, 80092e8 <_scanf_chars+0x58>
 80092d2:	bb27      	cbnz	r7, 800931e <_scanf_chars+0x8e>
 80092d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d8:	2802      	cmp	r0, #2
 80092da:	d120      	bne.n	800931e <_scanf_chars+0x8e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80092e4:	071b      	lsls	r3, r3, #28
 80092e6:	d41a      	bmi.n	800931e <_scanf_chars+0x8e>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	06da      	lsls	r2, r3, #27
 80092ec:	bf5e      	ittt	pl
 80092ee:	682b      	ldrpl	r3, [r5, #0]
 80092f0:	781b      	ldrbpl	r3, [r3, #0]
 80092f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80092f6:	682a      	ldr	r2, [r5, #0]
 80092f8:	686b      	ldr	r3, [r5, #4]
 80092fa:	3201      	adds	r2, #1
 80092fc:	602a      	str	r2, [r5, #0]
 80092fe:	68a2      	ldr	r2, [r4, #8]
 8009300:	3b01      	subs	r3, #1
 8009302:	3a01      	subs	r2, #1
 8009304:	606b      	str	r3, [r5, #4]
 8009306:	3701      	adds	r7, #1
 8009308:	60a2      	str	r2, [r4, #8]
 800930a:	b142      	cbz	r2, 800931e <_scanf_chars+0x8e>
 800930c:	2b00      	cmp	r3, #0
 800930e:	dcd7      	bgt.n	80092c0 <_scanf_chars+0x30>
 8009310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009314:	4629      	mov	r1, r5
 8009316:	4640      	mov	r0, r8
 8009318:	4798      	blx	r3
 800931a:	2800      	cmp	r0, #0
 800931c:	d0d0      	beq.n	80092c0 <_scanf_chars+0x30>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	f013 0310 	ands.w	r3, r3, #16
 8009324:	d105      	bne.n	8009332 <_scanf_chars+0xa2>
 8009326:	68e2      	ldr	r2, [r4, #12]
 8009328:	3201      	adds	r2, #1
 800932a:	60e2      	str	r2, [r4, #12]
 800932c:	69a2      	ldr	r2, [r4, #24]
 800932e:	b102      	cbz	r2, 8009332 <_scanf_chars+0xa2>
 8009330:	7033      	strb	r3, [r6, #0]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	441f      	add	r7, r3
 8009336:	6127      	str	r7, [r4, #16]
 8009338:	2000      	movs	r0, #0
 800933a:	e7cb      	b.n	80092d4 <_scanf_chars+0x44>
 800933c:	08009e21 	.word	0x08009e21

08009340 <_scanf_i>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	4698      	mov	r8, r3
 8009346:	4b74      	ldr	r3, [pc, #464]	; (8009518 <_scanf_i+0x1d8>)
 8009348:	460c      	mov	r4, r1
 800934a:	4682      	mov	sl, r0
 800934c:	4616      	mov	r6, r2
 800934e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009352:	b087      	sub	sp, #28
 8009354:	ab03      	add	r3, sp, #12
 8009356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800935a:	4b70      	ldr	r3, [pc, #448]	; (800951c <_scanf_i+0x1dc>)
 800935c:	69a1      	ldr	r1, [r4, #24]
 800935e:	4a70      	ldr	r2, [pc, #448]	; (8009520 <_scanf_i+0x1e0>)
 8009360:	2903      	cmp	r1, #3
 8009362:	bf18      	it	ne
 8009364:	461a      	movne	r2, r3
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	9201      	str	r2, [sp, #4]
 800936a:	1e5a      	subs	r2, r3, #1
 800936c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009370:	bf88      	it	hi
 8009372:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009376:	4627      	mov	r7, r4
 8009378:	bf82      	ittt	hi
 800937a:	eb03 0905 	addhi.w	r9, r3, r5
 800937e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009382:	60a3      	strhi	r3, [r4, #8]
 8009384:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009388:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800938c:	bf98      	it	ls
 800938e:	f04f 0900 	movls.w	r9, #0
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	463d      	mov	r5, r7
 8009396:	f04f 0b00 	mov.w	fp, #0
 800939a:	6831      	ldr	r1, [r6, #0]
 800939c:	ab03      	add	r3, sp, #12
 800939e:	7809      	ldrb	r1, [r1, #0]
 80093a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80093a4:	2202      	movs	r2, #2
 80093a6:	f7f6 ff1b 	bl	80001e0 <memchr>
 80093aa:	b328      	cbz	r0, 80093f8 <_scanf_i+0xb8>
 80093ac:	f1bb 0f01 	cmp.w	fp, #1
 80093b0:	d159      	bne.n	8009466 <_scanf_i+0x126>
 80093b2:	6862      	ldr	r2, [r4, #4]
 80093b4:	b92a      	cbnz	r2, 80093c2 <_scanf_i+0x82>
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	2308      	movs	r3, #8
 80093ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093be:	6063      	str	r3, [r4, #4]
 80093c0:	6022      	str	r2, [r4, #0]
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80093c8:	6022      	str	r2, [r4, #0]
 80093ca:	68a2      	ldr	r2, [r4, #8]
 80093cc:	1e51      	subs	r1, r2, #1
 80093ce:	60a1      	str	r1, [r4, #8]
 80093d0:	b192      	cbz	r2, 80093f8 <_scanf_i+0xb8>
 80093d2:	6832      	ldr	r2, [r6, #0]
 80093d4:	1c51      	adds	r1, r2, #1
 80093d6:	6031      	str	r1, [r6, #0]
 80093d8:	7812      	ldrb	r2, [r2, #0]
 80093da:	f805 2b01 	strb.w	r2, [r5], #1
 80093de:	6872      	ldr	r2, [r6, #4]
 80093e0:	3a01      	subs	r2, #1
 80093e2:	2a00      	cmp	r2, #0
 80093e4:	6072      	str	r2, [r6, #4]
 80093e6:	dc07      	bgt.n	80093f8 <_scanf_i+0xb8>
 80093e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80093ec:	4631      	mov	r1, r6
 80093ee:	4650      	mov	r0, sl
 80093f0:	4790      	blx	r2
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f040 8085 	bne.w	8009502 <_scanf_i+0x1c2>
 80093f8:	f10b 0b01 	add.w	fp, fp, #1
 80093fc:	f1bb 0f03 	cmp.w	fp, #3
 8009400:	d1cb      	bne.n	800939a <_scanf_i+0x5a>
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	b90b      	cbnz	r3, 800940a <_scanf_i+0xca>
 8009406:	230a      	movs	r3, #10
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	4945      	ldr	r1, [pc, #276]	; (8009524 <_scanf_i+0x1e4>)
 800940e:	6960      	ldr	r0, [r4, #20]
 8009410:	1ac9      	subs	r1, r1, r3
 8009412:	f000 f935 	bl	8009680 <__sccl>
 8009416:	f04f 0b00 	mov.w	fp, #0
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d03d      	beq.n	800949e <_scanf_i+0x15e>
 8009422:	6831      	ldr	r1, [r6, #0]
 8009424:	6960      	ldr	r0, [r4, #20]
 8009426:	f891 c000 	ldrb.w	ip, [r1]
 800942a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800942e:	2800      	cmp	r0, #0
 8009430:	d035      	beq.n	800949e <_scanf_i+0x15e>
 8009432:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009436:	d124      	bne.n	8009482 <_scanf_i+0x142>
 8009438:	0510      	lsls	r0, r2, #20
 800943a:	d522      	bpl.n	8009482 <_scanf_i+0x142>
 800943c:	f10b 0b01 	add.w	fp, fp, #1
 8009440:	f1b9 0f00 	cmp.w	r9, #0
 8009444:	d003      	beq.n	800944e <_scanf_i+0x10e>
 8009446:	3301      	adds	r3, #1
 8009448:	f109 39ff 	add.w	r9, r9, #4294967295
 800944c:	60a3      	str	r3, [r4, #8]
 800944e:	6873      	ldr	r3, [r6, #4]
 8009450:	3b01      	subs	r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	6073      	str	r3, [r6, #4]
 8009456:	dd1b      	ble.n	8009490 <_scanf_i+0x150>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	6033      	str	r3, [r6, #0]
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	3b01      	subs	r3, #1
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	e7d9      	b.n	800941a <_scanf_i+0xda>
 8009466:	f1bb 0f02 	cmp.w	fp, #2
 800946a:	d1ae      	bne.n	80093ca <_scanf_i+0x8a>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009472:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009476:	d1bf      	bne.n	80093f8 <_scanf_i+0xb8>
 8009478:	2310      	movs	r3, #16
 800947a:	6063      	str	r3, [r4, #4]
 800947c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009480:	e7a2      	b.n	80093c8 <_scanf_i+0x88>
 8009482:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009486:	6022      	str	r2, [r4, #0]
 8009488:	780b      	ldrb	r3, [r1, #0]
 800948a:	f805 3b01 	strb.w	r3, [r5], #1
 800948e:	e7de      	b.n	800944e <_scanf_i+0x10e>
 8009490:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009494:	4631      	mov	r1, r6
 8009496:	4650      	mov	r0, sl
 8009498:	4798      	blx	r3
 800949a:	2800      	cmp	r0, #0
 800949c:	d0df      	beq.n	800945e <_scanf_i+0x11e>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	05d9      	lsls	r1, r3, #23
 80094a2:	d50d      	bpl.n	80094c0 <_scanf_i+0x180>
 80094a4:	42bd      	cmp	r5, r7
 80094a6:	d909      	bls.n	80094bc <_scanf_i+0x17c>
 80094a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80094ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094b0:	4632      	mov	r2, r6
 80094b2:	4650      	mov	r0, sl
 80094b4:	4798      	blx	r3
 80094b6:	f105 39ff 	add.w	r9, r5, #4294967295
 80094ba:	464d      	mov	r5, r9
 80094bc:	42bd      	cmp	r5, r7
 80094be:	d028      	beq.n	8009512 <_scanf_i+0x1d2>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	f012 0210 	ands.w	r2, r2, #16
 80094c6:	d113      	bne.n	80094f0 <_scanf_i+0x1b0>
 80094c8:	702a      	strb	r2, [r5, #0]
 80094ca:	6863      	ldr	r3, [r4, #4]
 80094cc:	9e01      	ldr	r6, [sp, #4]
 80094ce:	4639      	mov	r1, r7
 80094d0:	4650      	mov	r0, sl
 80094d2:	47b0      	blx	r6
 80094d4:	f8d8 3000 	ldr.w	r3, [r8]
 80094d8:	6821      	ldr	r1, [r4, #0]
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	f8c8 2000 	str.w	r2, [r8]
 80094e0:	f011 0f20 	tst.w	r1, #32
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	d00f      	beq.n	8009508 <_scanf_i+0x1c8>
 80094e8:	6018      	str	r0, [r3, #0]
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60e3      	str	r3, [r4, #12]
 80094f0:	1bed      	subs	r5, r5, r7
 80094f2:	44ab      	add	fp, r5
 80094f4:	6925      	ldr	r5, [r4, #16]
 80094f6:	445d      	add	r5, fp
 80094f8:	6125      	str	r5, [r4, #16]
 80094fa:	2000      	movs	r0, #0
 80094fc:	b007      	add	sp, #28
 80094fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009502:	f04f 0b00 	mov.w	fp, #0
 8009506:	e7ca      	b.n	800949e <_scanf_i+0x15e>
 8009508:	07ca      	lsls	r2, r1, #31
 800950a:	bf4c      	ite	mi
 800950c:	8018      	strhmi	r0, [r3, #0]
 800950e:	6018      	strpl	r0, [r3, #0]
 8009510:	e7eb      	b.n	80094ea <_scanf_i+0x1aa>
 8009512:	2001      	movs	r0, #1
 8009514:	e7f2      	b.n	80094fc <_scanf_i+0x1bc>
 8009516:	bf00      	nop
 8009518:	08009d64 	.word	0x08009d64
 800951c:	08009899 	.word	0x08009899
 8009520:	08006459 	.word	0x08006459
 8009524:	0800a21e 	.word	0x0800a21e

08009528 <lflush>:
 8009528:	8983      	ldrh	r3, [r0, #12]
 800952a:	f003 0309 	and.w	r3, r3, #9
 800952e:	2b09      	cmp	r3, #9
 8009530:	d101      	bne.n	8009536 <lflush+0xe>
 8009532:	f7fd bf8f 	b.w	8007454 <fflush>
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
	...

0800953c <__srefill_r>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	460c      	mov	r4, r1
 8009540:	4605      	mov	r5, r0
 8009542:	b118      	cbz	r0, 800954c <__srefill_r+0x10>
 8009544:	6983      	ldr	r3, [r0, #24]
 8009546:	b90b      	cbnz	r3, 800954c <__srefill_r+0x10>
 8009548:	f7fd ffee 	bl	8007528 <__sinit>
 800954c:	4b3b      	ldr	r3, [pc, #236]	; (800963c <__srefill_r+0x100>)
 800954e:	429c      	cmp	r4, r3
 8009550:	d10a      	bne.n	8009568 <__srefill_r+0x2c>
 8009552:	686c      	ldr	r4, [r5, #4]
 8009554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009558:	2300      	movs	r3, #0
 800955a:	6063      	str	r3, [r4, #4]
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	069e      	lsls	r6, r3, #26
 8009560:	d50c      	bpl.n	800957c <__srefill_r+0x40>
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
 8009566:	e066      	b.n	8009636 <__srefill_r+0xfa>
 8009568:	4b35      	ldr	r3, [pc, #212]	; (8009640 <__srefill_r+0x104>)
 800956a:	429c      	cmp	r4, r3
 800956c:	d101      	bne.n	8009572 <__srefill_r+0x36>
 800956e:	68ac      	ldr	r4, [r5, #8]
 8009570:	e7f0      	b.n	8009554 <__srefill_r+0x18>
 8009572:	4b34      	ldr	r3, [pc, #208]	; (8009644 <__srefill_r+0x108>)
 8009574:	429c      	cmp	r4, r3
 8009576:	bf08      	it	eq
 8009578:	68ec      	ldreq	r4, [r5, #12]
 800957a:	e7eb      	b.n	8009554 <__srefill_r+0x18>
 800957c:	0758      	lsls	r0, r3, #29
 800957e:	d448      	bmi.n	8009612 <__srefill_r+0xd6>
 8009580:	06d9      	lsls	r1, r3, #27
 8009582:	d405      	bmi.n	8009590 <__srefill_r+0x54>
 8009584:	2309      	movs	r3, #9
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	e7e8      	b.n	8009562 <__srefill_r+0x26>
 8009590:	071a      	lsls	r2, r3, #28
 8009592:	d50b      	bpl.n	80095ac <__srefill_r+0x70>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f7fd ff20 	bl	80073dc <_fflush_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	d1e0      	bne.n	8009562 <__srefill_r+0x26>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	60a0      	str	r0, [r4, #8]
 80095a4:	f023 0308 	bic.w	r3, r3, #8
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	61a0      	str	r0, [r4, #24]
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f043 0304 	orr.w	r3, r3, #4
 80095b2:	81a3      	strh	r3, [r4, #12]
 80095b4:	6923      	ldr	r3, [r4, #16]
 80095b6:	b91b      	cbnz	r3, 80095c0 <__srefill_r+0x84>
 80095b8:	4621      	mov	r1, r4
 80095ba:	4628      	mov	r0, r5
 80095bc:	f7fe fc0a 	bl	8007dd4 <__smakebuf_r>
 80095c0:	89a6      	ldrh	r6, [r4, #12]
 80095c2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80095c6:	07b3      	lsls	r3, r6, #30
 80095c8:	d00f      	beq.n	80095ea <__srefill_r+0xae>
 80095ca:	2301      	movs	r3, #1
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	4b1e      	ldr	r3, [pc, #120]	; (8009648 <__srefill_r+0x10c>)
 80095d0:	491e      	ldr	r1, [pc, #120]	; (800964c <__srefill_r+0x110>)
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	f006 0609 	and.w	r6, r6, #9
 80095d8:	f7fe f824 	bl	8007624 <_fwalk>
 80095dc:	2e09      	cmp	r6, #9
 80095de:	81a7      	strh	r7, [r4, #12]
 80095e0:	d103      	bne.n	80095ea <__srefill_r+0xae>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7fd fe73 	bl	80072d0 <__sflush_r>
 80095ea:	6922      	ldr	r2, [r4, #16]
 80095ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095ee:	6963      	ldr	r3, [r4, #20]
 80095f0:	6a21      	ldr	r1, [r4, #32]
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b0      	blx	r6
 80095f8:	2800      	cmp	r0, #0
 80095fa:	6060      	str	r0, [r4, #4]
 80095fc:	dc1c      	bgt.n	8009638 <__srefill_r+0xfc>
 80095fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009602:	bf17      	itett	ne
 8009604:	2200      	movne	r2, #0
 8009606:	f043 0320 	orreq.w	r3, r3, #32
 800960a:	6062      	strne	r2, [r4, #4]
 800960c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009610:	e7bc      	b.n	800958c <__srefill_r+0x50>
 8009612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009614:	2900      	cmp	r1, #0
 8009616:	d0cd      	beq.n	80095b4 <__srefill_r+0x78>
 8009618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800961c:	4299      	cmp	r1, r3
 800961e:	d002      	beq.n	8009626 <__srefill_r+0xea>
 8009620:	4628      	mov	r0, r5
 8009622:	f7ff f909 	bl	8008838 <_free_r>
 8009626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009628:	6063      	str	r3, [r4, #4]
 800962a:	2000      	movs	r0, #0
 800962c:	6360      	str	r0, [r4, #52]	; 0x34
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0c0      	beq.n	80095b4 <__srefill_r+0x78>
 8009632:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009638:	2000      	movs	r0, #0
 800963a:	e7fc      	b.n	8009636 <__srefill_r+0xfa>
 800963c:	08009fd8 	.word	0x08009fd8
 8009640:	08009ff8 	.word	0x08009ff8
 8009644:	08009fb8 	.word	0x08009fb8
 8009648:	08009d90 	.word	0x08009d90
 800964c:	08009529 	.word	0x08009529

08009650 <nan>:
 8009650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009658 <nan+0x8>
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	00000000 	.word	0x00000000
 800965c:	7ff80000 	.word	0x7ff80000

08009660 <_sbrk_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	; (800967c <_sbrk_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f8 f96e 	bl	800194c <_sbrk>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_sbrk_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_sbrk_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	2000034c 	.word	0x2000034c

08009680 <__sccl>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	780b      	ldrb	r3, [r1, #0]
 8009684:	4604      	mov	r4, r0
 8009686:	2b5e      	cmp	r3, #94	; 0x5e
 8009688:	bf0b      	itete	eq
 800968a:	784b      	ldrbeq	r3, [r1, #1]
 800968c:	1c48      	addne	r0, r1, #1
 800968e:	1c88      	addeq	r0, r1, #2
 8009690:	2200      	movne	r2, #0
 8009692:	bf08      	it	eq
 8009694:	2201      	moveq	r2, #1
 8009696:	1e61      	subs	r1, r4, #1
 8009698:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800969c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80096a0:	42a9      	cmp	r1, r5
 80096a2:	d1fb      	bne.n	800969c <__sccl+0x1c>
 80096a4:	b90b      	cbnz	r3, 80096aa <__sccl+0x2a>
 80096a6:	3801      	subs	r0, #1
 80096a8:	bd70      	pop	{r4, r5, r6, pc}
 80096aa:	f082 0101 	eor.w	r1, r2, #1
 80096ae:	54e1      	strb	r1, [r4, r3]
 80096b0:	1c42      	adds	r2, r0, #1
 80096b2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80096b6:	2d2d      	cmp	r5, #45	; 0x2d
 80096b8:	f102 36ff 	add.w	r6, r2, #4294967295
 80096bc:	4610      	mov	r0, r2
 80096be:	d006      	beq.n	80096ce <__sccl+0x4e>
 80096c0:	2d5d      	cmp	r5, #93	; 0x5d
 80096c2:	d0f1      	beq.n	80096a8 <__sccl+0x28>
 80096c4:	b90d      	cbnz	r5, 80096ca <__sccl+0x4a>
 80096c6:	4630      	mov	r0, r6
 80096c8:	e7ee      	b.n	80096a8 <__sccl+0x28>
 80096ca:	462b      	mov	r3, r5
 80096cc:	e7ef      	b.n	80096ae <__sccl+0x2e>
 80096ce:	7816      	ldrb	r6, [r2, #0]
 80096d0:	2e5d      	cmp	r6, #93	; 0x5d
 80096d2:	d0fa      	beq.n	80096ca <__sccl+0x4a>
 80096d4:	42b3      	cmp	r3, r6
 80096d6:	dcf8      	bgt.n	80096ca <__sccl+0x4a>
 80096d8:	4618      	mov	r0, r3
 80096da:	3001      	adds	r0, #1
 80096dc:	4286      	cmp	r6, r0
 80096de:	5421      	strb	r1, [r4, r0]
 80096e0:	dcfb      	bgt.n	80096da <__sccl+0x5a>
 80096e2:	43d8      	mvns	r0, r3
 80096e4:	4430      	add	r0, r6
 80096e6:	1c5d      	adds	r5, r3, #1
 80096e8:	42b3      	cmp	r3, r6
 80096ea:	bfa8      	it	ge
 80096ec:	2000      	movge	r0, #0
 80096ee:	182b      	adds	r3, r5, r0
 80096f0:	3202      	adds	r2, #2
 80096f2:	e7de      	b.n	80096b2 <__sccl+0x32>

080096f4 <__sread>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	460c      	mov	r4, r1
 80096f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fc:	f000 fa80 	bl	8009c00 <_read_r>
 8009700:	2800      	cmp	r0, #0
 8009702:	bfab      	itete	ge
 8009704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009706:	89a3      	ldrhlt	r3, [r4, #12]
 8009708:	181b      	addge	r3, r3, r0
 800970a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800970e:	bfac      	ite	ge
 8009710:	6563      	strge	r3, [r4, #84]	; 0x54
 8009712:	81a3      	strhlt	r3, [r4, #12]
 8009714:	bd10      	pop	{r4, pc}

08009716 <__swrite>:
 8009716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	461f      	mov	r7, r3
 800971c:	898b      	ldrh	r3, [r1, #12]
 800971e:	05db      	lsls	r3, r3, #23
 8009720:	4605      	mov	r5, r0
 8009722:	460c      	mov	r4, r1
 8009724:	4616      	mov	r6, r2
 8009726:	d505      	bpl.n	8009734 <__swrite+0x1e>
 8009728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800972c:	2302      	movs	r3, #2
 800972e:	2200      	movs	r2, #0
 8009730:	f000 fa08 	bl	8009b44 <_lseek_r>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	4632      	mov	r2, r6
 8009742:	463b      	mov	r3, r7
 8009744:	4628      	mov	r0, r5
 8009746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974a:	f000 b987 	b.w	8009a5c <_write_r>

0800974e <__sseek>:
 800974e:	b510      	push	{r4, lr}
 8009750:	460c      	mov	r4, r1
 8009752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009756:	f000 f9f5 	bl	8009b44 <_lseek_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	bf15      	itete	ne
 8009760:	6560      	strne	r0, [r4, #84]	; 0x54
 8009762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800976a:	81a3      	strheq	r3, [r4, #12]
 800976c:	bf18      	it	ne
 800976e:	81a3      	strhne	r3, [r4, #12]
 8009770:	bd10      	pop	{r4, pc}

08009772 <__sclose>:
 8009772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009776:	f000 b9a1 	b.w	8009abc <_close_r>

0800977a <strncmp>:
 800977a:	b510      	push	{r4, lr}
 800977c:	b16a      	cbz	r2, 800979a <strncmp+0x20>
 800977e:	3901      	subs	r1, #1
 8009780:	1884      	adds	r4, r0, r2
 8009782:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009786:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800978a:	4293      	cmp	r3, r2
 800978c:	d103      	bne.n	8009796 <strncmp+0x1c>
 800978e:	42a0      	cmp	r0, r4
 8009790:	d001      	beq.n	8009796 <strncmp+0x1c>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f5      	bne.n	8009782 <strncmp+0x8>
 8009796:	1a98      	subs	r0, r3, r2
 8009798:	bd10      	pop	{r4, pc}
 800979a:	4610      	mov	r0, r2
 800979c:	e7fc      	b.n	8009798 <strncmp+0x1e>
	...

080097a0 <_strtoul_l.isra.0>:
 80097a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4e3b      	ldr	r6, [pc, #236]	; (8009894 <_strtoul_l.isra.0+0xf4>)
 80097a6:	4686      	mov	lr, r0
 80097a8:	468c      	mov	ip, r1
 80097aa:	4660      	mov	r0, ip
 80097ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80097b0:	5da5      	ldrb	r5, [r4, r6]
 80097b2:	f015 0508 	ands.w	r5, r5, #8
 80097b6:	d1f8      	bne.n	80097aa <_strtoul_l.isra.0+0xa>
 80097b8:	2c2d      	cmp	r4, #45	; 0x2d
 80097ba:	d134      	bne.n	8009826 <_strtoul_l.isra.0+0x86>
 80097bc:	f89c 4000 	ldrb.w	r4, [ip]
 80097c0:	f04f 0801 	mov.w	r8, #1
 80097c4:	f100 0c02 	add.w	ip, r0, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d05e      	beq.n	800988a <_strtoul_l.isra.0+0xea>
 80097cc:	2b10      	cmp	r3, #16
 80097ce:	d10c      	bne.n	80097ea <_strtoul_l.isra.0+0x4a>
 80097d0:	2c30      	cmp	r4, #48	; 0x30
 80097d2:	d10a      	bne.n	80097ea <_strtoul_l.isra.0+0x4a>
 80097d4:	f89c 0000 	ldrb.w	r0, [ip]
 80097d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80097dc:	2858      	cmp	r0, #88	; 0x58
 80097de:	d14f      	bne.n	8009880 <_strtoul_l.isra.0+0xe0>
 80097e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80097e4:	2310      	movs	r3, #16
 80097e6:	f10c 0c02 	add.w	ip, ip, #2
 80097ea:	f04f 37ff 	mov.w	r7, #4294967295
 80097ee:	2500      	movs	r5, #0
 80097f0:	fbb7 f7f3 	udiv	r7, r7, r3
 80097f4:	fb03 f907 	mul.w	r9, r3, r7
 80097f8:	ea6f 0909 	mvn.w	r9, r9
 80097fc:	4628      	mov	r0, r5
 80097fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009802:	2e09      	cmp	r6, #9
 8009804:	d818      	bhi.n	8009838 <_strtoul_l.isra.0+0x98>
 8009806:	4634      	mov	r4, r6
 8009808:	42a3      	cmp	r3, r4
 800980a:	dd24      	ble.n	8009856 <_strtoul_l.isra.0+0xb6>
 800980c:	2d00      	cmp	r5, #0
 800980e:	db1f      	blt.n	8009850 <_strtoul_l.isra.0+0xb0>
 8009810:	4287      	cmp	r7, r0
 8009812:	d31d      	bcc.n	8009850 <_strtoul_l.isra.0+0xb0>
 8009814:	d101      	bne.n	800981a <_strtoul_l.isra.0+0x7a>
 8009816:	45a1      	cmp	r9, r4
 8009818:	db1a      	blt.n	8009850 <_strtoul_l.isra.0+0xb0>
 800981a:	fb00 4003 	mla	r0, r0, r3, r4
 800981e:	2501      	movs	r5, #1
 8009820:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009824:	e7eb      	b.n	80097fe <_strtoul_l.isra.0+0x5e>
 8009826:	2c2b      	cmp	r4, #43	; 0x2b
 8009828:	bf08      	it	eq
 800982a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800982e:	46a8      	mov	r8, r5
 8009830:	bf08      	it	eq
 8009832:	f100 0c02 	addeq.w	ip, r0, #2
 8009836:	e7c7      	b.n	80097c8 <_strtoul_l.isra.0+0x28>
 8009838:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800983c:	2e19      	cmp	r6, #25
 800983e:	d801      	bhi.n	8009844 <_strtoul_l.isra.0+0xa4>
 8009840:	3c37      	subs	r4, #55	; 0x37
 8009842:	e7e1      	b.n	8009808 <_strtoul_l.isra.0+0x68>
 8009844:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009848:	2e19      	cmp	r6, #25
 800984a:	d804      	bhi.n	8009856 <_strtoul_l.isra.0+0xb6>
 800984c:	3c57      	subs	r4, #87	; 0x57
 800984e:	e7db      	b.n	8009808 <_strtoul_l.isra.0+0x68>
 8009850:	f04f 35ff 	mov.w	r5, #4294967295
 8009854:	e7e4      	b.n	8009820 <_strtoul_l.isra.0+0x80>
 8009856:	2d00      	cmp	r5, #0
 8009858:	da07      	bge.n	800986a <_strtoul_l.isra.0+0xca>
 800985a:	2322      	movs	r3, #34	; 0x22
 800985c:	f8ce 3000 	str.w	r3, [lr]
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	b942      	cbnz	r2, 8009878 <_strtoul_l.isra.0+0xd8>
 8009866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800986a:	f1b8 0f00 	cmp.w	r8, #0
 800986e:	d000      	beq.n	8009872 <_strtoul_l.isra.0+0xd2>
 8009870:	4240      	negs	r0, r0
 8009872:	2a00      	cmp	r2, #0
 8009874:	d0f7      	beq.n	8009866 <_strtoul_l.isra.0+0xc6>
 8009876:	b10d      	cbz	r5, 800987c <_strtoul_l.isra.0+0xdc>
 8009878:	f10c 31ff 	add.w	r1, ip, #4294967295
 800987c:	6011      	str	r1, [r2, #0]
 800987e:	e7f2      	b.n	8009866 <_strtoul_l.isra.0+0xc6>
 8009880:	2430      	movs	r4, #48	; 0x30
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1b1      	bne.n	80097ea <_strtoul_l.isra.0+0x4a>
 8009886:	2308      	movs	r3, #8
 8009888:	e7af      	b.n	80097ea <_strtoul_l.isra.0+0x4a>
 800988a:	2c30      	cmp	r4, #48	; 0x30
 800988c:	d0a2      	beq.n	80097d4 <_strtoul_l.isra.0+0x34>
 800988e:	230a      	movs	r3, #10
 8009890:	e7ab      	b.n	80097ea <_strtoul_l.isra.0+0x4a>
 8009892:	bf00      	nop
 8009894:	08009e21 	.word	0x08009e21

08009898 <_strtoul_r>:
 8009898:	f7ff bf82 	b.w	80097a0 <_strtoul_l.isra.0>

0800989c <__submore>:
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80098a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a8:	4299      	cmp	r1, r3
 80098aa:	d11d      	bne.n	80098e8 <__submore+0x4c>
 80098ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098b0:	f7ff f812 	bl	80088d8 <_malloc_r>
 80098b4:	b918      	cbnz	r0, 80098be <__submore+0x22>
 80098b6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80098c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80098c8:	6360      	str	r0, [r4, #52]	; 0x34
 80098ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80098ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80098d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80098d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80098da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80098de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80098e2:	6020      	str	r0, [r4, #0]
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7e8      	b.n	80098ba <__submore+0x1e>
 80098e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80098ea:	0077      	lsls	r7, r6, #1
 80098ec:	463a      	mov	r2, r7
 80098ee:	f000 f961 	bl	8009bb4 <_realloc_r>
 80098f2:	4605      	mov	r5, r0
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d0de      	beq.n	80098b6 <__submore+0x1a>
 80098f8:	eb00 0806 	add.w	r8, r0, r6
 80098fc:	4601      	mov	r1, r0
 80098fe:	4632      	mov	r2, r6
 8009900:	4640      	mov	r0, r8
 8009902:	f7fe fac1 	bl	8007e88 <memcpy>
 8009906:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800990a:	f8c4 8000 	str.w	r8, [r4]
 800990e:	e7e9      	b.n	80098e4 <__submore+0x48>

08009910 <_ungetc_r>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	4614      	mov	r4, r2
 8009914:	1c4a      	adds	r2, r1, #1
 8009916:	4606      	mov	r6, r0
 8009918:	460d      	mov	r5, r1
 800991a:	d103      	bne.n	8009924 <_ungetc_r+0x14>
 800991c:	f04f 35ff 	mov.w	r5, #4294967295
 8009920:	4628      	mov	r0, r5
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	b118      	cbz	r0, 800992e <_ungetc_r+0x1e>
 8009926:	6983      	ldr	r3, [r0, #24]
 8009928:	b90b      	cbnz	r3, 800992e <_ungetc_r+0x1e>
 800992a:	f7fd fdfd 	bl	8007528 <__sinit>
 800992e:	4b41      	ldr	r3, [pc, #260]	; (8009a34 <_ungetc_r+0x124>)
 8009930:	429c      	cmp	r4, r3
 8009932:	d11d      	bne.n	8009970 <_ungetc_r+0x60>
 8009934:	6874      	ldr	r4, [r6, #4]
 8009936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009938:	07db      	lsls	r3, r3, #31
 800993a:	d405      	bmi.n	8009948 <_ungetc_r+0x38>
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	0598      	lsls	r0, r3, #22
 8009940:	d402      	bmi.n	8009948 <_ungetc_r+0x38>
 8009942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009944:	f7fe fa1f 	bl	8007d86 <__retarget_lock_acquire_recursive>
 8009948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994c:	f023 0320 	bic.w	r3, r3, #32
 8009950:	0759      	lsls	r1, r3, #29
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	b29a      	uxth	r2, r3
 8009956:	d42d      	bmi.n	80099b4 <_ungetc_r+0xa4>
 8009958:	06d3      	lsls	r3, r2, #27
 800995a:	d413      	bmi.n	8009984 <_ungetc_r+0x74>
 800995c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800995e:	07dd      	lsls	r5, r3, #31
 8009960:	d4dc      	bmi.n	800991c <_ungetc_r+0xc>
 8009962:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009966:	d1d9      	bne.n	800991c <_ungetc_r+0xc>
 8009968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800996a:	f7fe fa0d 	bl	8007d88 <__retarget_lock_release_recursive>
 800996e:	e7d5      	b.n	800991c <_ungetc_r+0xc>
 8009970:	4b31      	ldr	r3, [pc, #196]	; (8009a38 <_ungetc_r+0x128>)
 8009972:	429c      	cmp	r4, r3
 8009974:	d101      	bne.n	800997a <_ungetc_r+0x6a>
 8009976:	68b4      	ldr	r4, [r6, #8]
 8009978:	e7dd      	b.n	8009936 <_ungetc_r+0x26>
 800997a:	4b30      	ldr	r3, [pc, #192]	; (8009a3c <_ungetc_r+0x12c>)
 800997c:	429c      	cmp	r4, r3
 800997e:	bf08      	it	eq
 8009980:	68f4      	ldreq	r4, [r6, #12]
 8009982:	e7d8      	b.n	8009936 <_ungetc_r+0x26>
 8009984:	0710      	lsls	r0, r2, #28
 8009986:	d511      	bpl.n	80099ac <_ungetc_r+0x9c>
 8009988:	4621      	mov	r1, r4
 800998a:	4630      	mov	r0, r6
 800998c:	f7fd fd26 	bl	80073dc <_fflush_r>
 8009990:	b130      	cbz	r0, 80099a0 <_ungetc_r+0x90>
 8009992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009994:	07d9      	lsls	r1, r3, #31
 8009996:	d4c1      	bmi.n	800991c <_ungetc_r+0xc>
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800999e:	e7e2      	b.n	8009966 <_ungetc_r+0x56>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	60a0      	str	r0, [r4, #8]
 80099a4:	f023 0308 	bic.w	r3, r3, #8
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	61a0      	str	r0, [r4, #24]
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f043 0304 	orr.w	r3, r3, #4
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b6:	6862      	ldr	r2, [r4, #4]
 80099b8:	b2ed      	uxtb	r5, r5
 80099ba:	b1d3      	cbz	r3, 80099f2 <_ungetc_r+0xe2>
 80099bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099be:	4293      	cmp	r3, r2
 80099c0:	dc05      	bgt.n	80099ce <_ungetc_r+0xbe>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4630      	mov	r0, r6
 80099c6:	f7ff ff69 	bl	800989c <__submore>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d1e1      	bne.n	8009992 <_ungetc_r+0x82>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	1e5a      	subs	r2, r3, #1
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	3301      	adds	r3, #1
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e0:	07da      	lsls	r2, r3, #31
 80099e2:	d49d      	bmi.n	8009920 <_ungetc_r+0x10>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	059b      	lsls	r3, r3, #22
 80099e8:	d49a      	bmi.n	8009920 <_ungetc_r+0x10>
 80099ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ec:	f7fe f9cc 	bl	8007d88 <__retarget_lock_release_recursive>
 80099f0:	e796      	b.n	8009920 <_ungetc_r+0x10>
 80099f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80099f4:	6920      	ldr	r0, [r4, #16]
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	f001 0101 	and.w	r1, r1, #1
 80099fc:	b160      	cbz	r0, 8009a18 <_ungetc_r+0x108>
 80099fe:	4298      	cmp	r0, r3
 8009a00:	d20a      	bcs.n	8009a18 <_ungetc_r+0x108>
 8009a02:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8009a06:	42a8      	cmp	r0, r5
 8009a08:	d106      	bne.n	8009a18 <_ungetc_r+0x108>
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	3201      	adds	r2, #1
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	6062      	str	r2, [r4, #4]
 8009a12:	2900      	cmp	r1, #0
 8009a14:	d184      	bne.n	8009920 <_ungetc_r+0x10>
 8009a16:	e7e5      	b.n	80099e4 <_ungetc_r+0xd4>
 8009a18:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a20:	6363      	str	r3, [r4, #52]	; 0x34
 8009a22:	2303      	movs	r3, #3
 8009a24:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a26:	4623      	mov	r3, r4
 8009a28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	6063      	str	r3, [r4, #4]
 8009a32:	e7ee      	b.n	8009a12 <_ungetc_r+0x102>
 8009a34:	08009fd8 	.word	0x08009fd8
 8009a38:	08009ff8 	.word	0x08009ff8
 8009a3c:	08009fb8 	.word	0x08009fb8

08009a40 <__ascii_wctomb>:
 8009a40:	b149      	cbz	r1, 8009a56 <__ascii_wctomb+0x16>
 8009a42:	2aff      	cmp	r2, #255	; 0xff
 8009a44:	bf85      	ittet	hi
 8009a46:	238a      	movhi	r3, #138	; 0x8a
 8009a48:	6003      	strhi	r3, [r0, #0]
 8009a4a:	700a      	strbls	r2, [r1, #0]
 8009a4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a50:	bf98      	it	ls
 8009a52:	2001      	movls	r0, #1
 8009a54:	4770      	bx	lr
 8009a56:	4608      	mov	r0, r1
 8009a58:	4770      	bx	lr
	...

08009a5c <_write_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	; (8009a7c <_write_r+0x20>)
 8009a60:	4604      	mov	r4, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7f7 ff1d 	bl	80018aa <_write>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_write_r+0x1e>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_write_r+0x1e>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	2000034c 	.word	0x2000034c

08009a80 <__assert_func>:
 8009a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a82:	4614      	mov	r4, r2
 8009a84:	461a      	mov	r2, r3
 8009a86:	4b09      	ldr	r3, [pc, #36]	; (8009aac <__assert_func+0x2c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	68d8      	ldr	r0, [r3, #12]
 8009a8e:	b14c      	cbz	r4, 8009aa4 <__assert_func+0x24>
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <__assert_func+0x30>)
 8009a92:	9100      	str	r1, [sp, #0]
 8009a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a98:	4906      	ldr	r1, [pc, #24]	; (8009ab4 <__assert_func+0x34>)
 8009a9a:	462b      	mov	r3, r5
 8009a9c:	f000 f81e 	bl	8009adc <fiprintf>
 8009aa0:	f000 f8c0 	bl	8009c24 <abort>
 8009aa4:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <__assert_func+0x38>)
 8009aa6:	461c      	mov	r4, r3
 8009aa8:	e7f3      	b.n	8009a92 <__assert_func+0x12>
 8009aaa:	bf00      	nop
 8009aac:	2000000c 	.word	0x2000000c
 8009ab0:	0800a220 	.word	0x0800a220
 8009ab4:	0800a22d 	.word	0x0800a22d
 8009ab8:	0800a25b 	.word	0x0800a25b

08009abc <_close_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4d06      	ldr	r5, [pc, #24]	; (8009ad8 <_close_r+0x1c>)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	f7f7 ff0b 	bl	80018e2 <_close>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_close_r+0x1a>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_close_r+0x1a>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	2000034c 	.word	0x2000034c

08009adc <fiprintf>:
 8009adc:	b40e      	push	{r1, r2, r3}
 8009ade:	b503      	push	{r0, r1, lr}
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	ab03      	add	r3, sp, #12
 8009ae4:	4805      	ldr	r0, [pc, #20]	; (8009afc <fiprintf+0x20>)
 8009ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aea:	6800      	ldr	r0, [r0, #0]
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	f7ff f8d3 	bl	8008c98 <_vfiprintf_r>
 8009af2:	b002      	add	sp, #8
 8009af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af8:	b003      	add	sp, #12
 8009afa:	4770      	bx	lr
 8009afc:	2000000c 	.word	0x2000000c

08009b00 <_fstat_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d07      	ldr	r5, [pc, #28]	; (8009b20 <_fstat_r+0x20>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	602b      	str	r3, [r5, #0]
 8009b0e:	f7f7 fef4 	bl	80018fa <_fstat>
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	d102      	bne.n	8009b1c <_fstat_r+0x1c>
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	b103      	cbz	r3, 8009b1c <_fstat_r+0x1c>
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000034c 	.word	0x2000034c

08009b24 <_isatty_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d06      	ldr	r5, [pc, #24]	; (8009b40 <_isatty_r+0x1c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	f7f7 fef3 	bl	800191a <_isatty>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_isatty_r+0x1a>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_isatty_r+0x1a>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	2000034c 	.word	0x2000034c

08009b44 <_lseek_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	; (8009b64 <_lseek_r+0x20>)
 8009b48:	4604      	mov	r4, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	602a      	str	r2, [r5, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f7 feec 	bl	8001930 <_lseek>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_lseek_r+0x1e>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_lseek_r+0x1e>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	2000034c 	.word	0x2000034c

08009b68 <memmove>:
 8009b68:	4288      	cmp	r0, r1
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	eb01 0402 	add.w	r4, r1, r2
 8009b70:	d902      	bls.n	8009b78 <memmove+0x10>
 8009b72:	4284      	cmp	r4, r0
 8009b74:	4623      	mov	r3, r4
 8009b76:	d807      	bhi.n	8009b88 <memmove+0x20>
 8009b78:	1e43      	subs	r3, r0, #1
 8009b7a:	42a1      	cmp	r1, r4
 8009b7c:	d008      	beq.n	8009b90 <memmove+0x28>
 8009b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b86:	e7f8      	b.n	8009b7a <memmove+0x12>
 8009b88:	4402      	add	r2, r0
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	428a      	cmp	r2, r1
 8009b8e:	d100      	bne.n	8009b92 <memmove+0x2a>
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b9a:	e7f7      	b.n	8009b8c <memmove+0x24>

08009b9c <__malloc_lock>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__malloc_lock+0x8>)
 8009b9e:	f7fe b8f2 	b.w	8007d86 <__retarget_lock_acquire_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20000344 	.word	0x20000344

08009ba8 <__malloc_unlock>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	; (8009bb0 <__malloc_unlock+0x8>)
 8009baa:	f7fe b8ed 	b.w	8007d88 <__retarget_lock_release_recursive>
 8009bae:	bf00      	nop
 8009bb0:	20000344 	.word	0x20000344

08009bb4 <_realloc_r>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	4614      	mov	r4, r2
 8009bba:	460e      	mov	r6, r1
 8009bbc:	b921      	cbnz	r1, 8009bc8 <_realloc_r+0x14>
 8009bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	f7fe be88 	b.w	80088d8 <_malloc_r>
 8009bc8:	b922      	cbnz	r2, 8009bd4 <_realloc_r+0x20>
 8009bca:	f7fe fe35 	bl	8008838 <_free_r>
 8009bce:	4625      	mov	r5, r4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	f000 f82d 	bl	8009c32 <_malloc_usable_size_r>
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d20f      	bcs.n	8009bfc <_realloc_r+0x48>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7fe fe7a 	bl	80088d8 <_malloc_r>
 8009be4:	4605      	mov	r5, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0f2      	beq.n	8009bd0 <_realloc_r+0x1c>
 8009bea:	4631      	mov	r1, r6
 8009bec:	4622      	mov	r2, r4
 8009bee:	f7fe f94b 	bl	8007e88 <memcpy>
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7fe fe1f 	bl	8008838 <_free_r>
 8009bfa:	e7e9      	b.n	8009bd0 <_realloc_r+0x1c>
 8009bfc:	4635      	mov	r5, r6
 8009bfe:	e7e7      	b.n	8009bd0 <_realloc_r+0x1c>

08009c00 <_read_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	; (8009c20 <_read_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f7 fe2e 	bl	8001870 <_read>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_read_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_read_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	2000034c 	.word	0x2000034c

08009c24 <abort>:
 8009c24:	b508      	push	{r3, lr}
 8009c26:	2006      	movs	r0, #6
 8009c28:	f000 f834 	bl	8009c94 <raise>
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	f7f7 fe15 	bl	800185c <_exit>

08009c32 <_malloc_usable_size_r>:
 8009c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c36:	1f18      	subs	r0, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfbc      	itt	lt
 8009c3c:	580b      	ldrlt	r3, [r1, r0]
 8009c3e:	18c0      	addlt	r0, r0, r3
 8009c40:	4770      	bx	lr

08009c42 <_raise_r>:
 8009c42:	291f      	cmp	r1, #31
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4604      	mov	r4, r0
 8009c48:	460d      	mov	r5, r1
 8009c4a:	d904      	bls.n	8009c56 <_raise_r+0x14>
 8009c4c:	2316      	movs	r3, #22
 8009c4e:	6003      	str	r3, [r0, #0]
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c58:	b112      	cbz	r2, 8009c60 <_raise_r+0x1e>
 8009c5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c5e:	b94b      	cbnz	r3, 8009c74 <_raise_r+0x32>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 f831 	bl	8009cc8 <_getpid_r>
 8009c66:	462a      	mov	r2, r5
 8009c68:	4601      	mov	r1, r0
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c70:	f000 b818 	b.w	8009ca4 <_kill_r>
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d00a      	beq.n	8009c8e <_raise_r+0x4c>
 8009c78:	1c59      	adds	r1, r3, #1
 8009c7a:	d103      	bne.n	8009c84 <_raise_r+0x42>
 8009c7c:	2316      	movs	r3, #22
 8009c7e:	6003      	str	r3, [r0, #0]
 8009c80:	2001      	movs	r0, #1
 8009c82:	e7e7      	b.n	8009c54 <_raise_r+0x12>
 8009c84:	2400      	movs	r4, #0
 8009c86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	4798      	blx	r3
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e7e0      	b.n	8009c54 <_raise_r+0x12>
	...

08009c94 <raise>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	; (8009ca0 <raise+0xc>)
 8009c96:	4601      	mov	r1, r0
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	f7ff bfd2 	b.w	8009c42 <_raise_r>
 8009c9e:	bf00      	nop
 8009ca0:	2000000c 	.word	0x2000000c

08009ca4 <_kill_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d07      	ldr	r5, [pc, #28]	; (8009cc4 <_kill_r+0x20>)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4604      	mov	r4, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	4611      	mov	r1, r2
 8009cb0:	602b      	str	r3, [r5, #0]
 8009cb2:	f7f7 fdc3 	bl	800183c <_kill>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d102      	bne.n	8009cc0 <_kill_r+0x1c>
 8009cba:	682b      	ldr	r3, [r5, #0]
 8009cbc:	b103      	cbz	r3, 8009cc0 <_kill_r+0x1c>
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	bf00      	nop
 8009cc4:	2000034c 	.word	0x2000034c

08009cc8 <_getpid_r>:
 8009cc8:	f7f7 bdb0 	b.w	800182c <_getpid>

08009ccc <_init>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr

08009cd8 <_fini>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr
