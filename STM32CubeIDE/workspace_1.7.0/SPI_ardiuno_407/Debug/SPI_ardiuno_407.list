
SPI_ardiuno_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003194  08003194  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800319c  0800319c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000016c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fcb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001700  00000000  00000000  0002806b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  00029770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005f0  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f66d  00000000  00000000  0002a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007bcb  00000000  00000000  00049a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0170  00000000  00000000  00051640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001117b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d8c  00000000  00000000  00111804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800311c 	.word	0x0800311c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800311c 	.word	0x0800311c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fb28 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f83e 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f904 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f8da 	bl	8000740 <MX_DMA_Init>
  MX_SPI1_Init();
 800058c:	f000 f8a2 	bl	80006d4 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2108      	movs	r1, #8
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0x70>)
 8000596:	f001 f96b 	bl	8001870 <HAL_GPIO_WritePin>
	  sprintf(Tx_buff,"tx data buff: %d\r\n",i);
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <main+0x74>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4913      	ldr	r1, [pc, #76]	; (80005f0 <main+0x78>)
 80005a2:	4814      	ldr	r0, [pc, #80]	; (80005f4 <main+0x7c>)
 80005a4:	f002 f98c 	bl	80028c0 <siprintf>
	  HAL_SPI_Transmit(&hspi1, Tx_buff, strlen(Tx_buff), 1000);
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <main+0x7c>)
 80005aa:	f7ff fe11 	bl	80001d0 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	490f      	ldr	r1, [pc, #60]	; (80005f4 <main+0x7c>)
 80005b8:	480f      	ldr	r0, [pc, #60]	; (80005f8 <main+0x80>)
 80005ba:	f001 fe2a 	bl	8002212 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2108      	movs	r1, #8
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x70>)
 80005c4:	f001 f954 	bl	8001870 <HAL_GPIO_WritePin>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <main+0x84>)
 80005ce:	f001 f968 	bl	80018a2 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f000 fb6d 	bl	8000cb4 <HAL_Delay>
	  i++;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <main+0x74>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b02      	ldr	r3, [pc, #8]	; (80005ec <main+0x74>)
 80005e4:	701a      	strb	r2, [r3, #0]
  {
 80005e6:	e7d3      	b.n	8000590 <main+0x18>
 80005e8:	40021000 	.word	0x40021000
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	08003134 	.word	0x08003134
 80005f4:	2000009c 	.word	0x2000009c
 80005f8:	200000b0 	.word	0x200000b0
 80005fc:	40020c00 	.word	0x40020c00

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f94e 	bl	80028b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000674:	23a8      	movs	r3, #168	; 0xa8
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f927 	bl	80018d8 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f902 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fb88 	bl	8001dc8 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f8eb 	bl	8000898 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f001 fceb 	bl	8002100 <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f8b2 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000b0 	.word	0x200000b0
 800073c:	40013000 	.word	0x40013000

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_DMA_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_DMA_Init+0x4c>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_DMA_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2038      	movs	r0, #56	; 0x38
 8000768:	f000 fba3 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800076c:	2038      	movs	r0, #56	; 0x38
 800076e:	f000 fbbc 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	203b      	movs	r0, #59	; 0x3b
 8000778:	f000 fb9b 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800077c:	203b      	movs	r0, #59	; 0x3b
 800077e:	f000 fbb4 	bl	8000eea <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a36      	ldr	r2, [pc, #216]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a28      	ldr	r2, [pc, #160]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xf8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_GPIO_Init+0xf8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_GPIO_Init+0xf8>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xf8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_GPIO_Init+0xfc>)
 800081c:	f001 f828 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000826:	481a      	ldr	r0, [pc, #104]	; (8000890 <MX_GPIO_Init+0x100>)
 8000828:	f001 f822 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800082c:	2308      	movs	r3, #8
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_GPIO_Init+0xfc>)
 8000844:	f000 fe78 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <MX_GPIO_Init+0x104>)
 800085c:	f000 fe6c 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000860:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0x100>)
 800087a:	f000 fe5d 	bl	8001538 <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40021000 	.word	0x40021000
 8000890:	40020c00 	.word	0x40020c00
 8000894:	40020000 	.word	0x40020000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a4b      	ldr	r2, [pc, #300]	; (8000a40 <HAL_SPI_MspInit+0x14c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	f040 8090 	bne.w	8000a38 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <HAL_SPI_MspInit+0x150>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_SPI_MspInit+0x150>)
 8000922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000926:	6453      	str	r3, [r2, #68]	; 0x44
 8000928:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <HAL_SPI_MspInit+0x150>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <HAL_SPI_MspInit+0x150>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <HAL_SPI_MspInit+0x150>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <HAL_SPI_MspInit+0x150>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000950:	23f0      	movs	r3, #240	; 0xf0
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000960:	2305      	movs	r3, #5
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4837      	ldr	r0, [pc, #220]	; (8000a48 <HAL_SPI_MspInit+0x154>)
 800096c:	f000 fde4 	bl	8001538 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <HAL_SPI_MspInit+0x15c>)
 8000974:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 8000978:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800097c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 800098c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000990:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80009b0:	4826      	ldr	r0, [pc, #152]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 80009b2:	f000 fab5 	bl	8000f20 <HAL_DMA_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80009bc:	f7ff ff6c 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 80009c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <HAL_SPI_MspInit+0x158>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009ce:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <HAL_SPI_MspInit+0x164>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009d4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009d8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009dc:	2240      	movs	r2, #64	; 0x40
 80009de:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 8000a0e:	f000 fa87 	bl	8000f20 <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000a18:	f7ff ff3e 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 8000a20:	649a      	str	r2, [r3, #72]	; 0x48
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <HAL_SPI_MspInit+0x160>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2023      	movs	r0, #35	; 0x23
 8000a2e:	f000 fa40 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a32:	2023      	movs	r0, #35	; 0x23
 8000a34:	f000 fa59 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40013000 	.word	0x40013000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	20000108 	.word	0x20000108
 8000a50:	40026410 	.word	0x40026410
 8000a54:	20000168 	.word	0x20000168
 8000a58:	40026458 	.word	0x40026458

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f8e4 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <SPI1_IRQHandler+0x10>)
 8000ab6:	f001 fce9 	bl	800248c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000b0 	.word	0x200000b0

08000ac4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <DMA2_Stream0_IRQHandler+0x10>)
 8000aca:	f000 faf9 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000108 	.word	0x20000108

08000ad8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <DMA2_Stream3_IRQHandler+0x10>)
 8000ade:	f000 faef 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000168 	.word	0x20000168

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f001 fe9e 	bl	800285c <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000090 	.word	0x20000090
 8000b54:	200001e0 	.word	0x200001e0

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ba6:	f7ff ffd7 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f001 fe5d 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fce3 	bl	8000578 <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bc0:	080031a4 	.word	0x080031a4
  ldr r2, =_sbss
 8000bc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bc8:	200001dc 	.word	0x200001dc

08000bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <HAL_Init+0x40>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_Init+0x40>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x40>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f94f 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe4e 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f967 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f92f 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200001c8 	.word	0x200001c8

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200001c8 	.word	0x200001c8

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff3e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff31 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff feb6 	bl	8000c9c <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e099      	b.n	8001070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5c:	e00f      	b.n	8000f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5e:	f7ff fe9d 	bl	8000c9c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d908      	bls.n	8000f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2220      	movs	r2, #32
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e078      	b.n	8001070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e8      	bne.n	8000f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_DMA_Init+0x158>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d107      	bne.n	8000fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f023 0307 	bic.w	r3, r3, #7
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4313      	orrs	r3, r2
 8001008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	2b04      	cmp	r3, #4
 8001010:	d117      	bne.n	8001042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00e      	beq.n	8001042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fa0b 	bl	8001440 <DMA_CheckFifoParam>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2240      	movs	r2, #64	; 0x40
 8001034:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800103e:	2301      	movs	r3, #1
 8001040:	e016      	b.n	8001070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f9c2 	bl	80013d4 <DMA_CalcBaseAndBitshift>
 8001050:	4603      	mov	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	223f      	movs	r2, #63	; 0x3f
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	f010803f 	.word	0xf010803f

0800107c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d004      	beq.n	800109a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00c      	b.n	80010b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2205      	movs	r2, #5
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010cc:	4b92      	ldr	r3, [pc, #584]	; (8001318 <HAL_DMA_IRQHandler+0x258>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a92      	ldr	r2, [pc, #584]	; (800131c <HAL_DMA_IRQHandler+0x25c>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0a9b      	lsrs	r3, r3, #10
 80010d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ea:	2208      	movs	r2, #8
 80010ec:	409a      	lsls	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01a      	beq.n	800112c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0204 	bic.w	r2, r2, #4
 8001112:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	2208      	movs	r2, #8
 800111a:	409a      	lsls	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001130:	2201      	movs	r2, #1
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d012      	beq.n	8001162 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114e:	2201      	movs	r2, #1
 8001150:	409a      	lsls	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	f043 0202 	orr.w	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001166:	2204      	movs	r2, #4
 8001168:	409a      	lsls	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d012      	beq.n	8001198 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00b      	beq.n	8001198 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	2204      	movs	r2, #4
 8001186:	409a      	lsls	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001190:	f043 0204 	orr.w	r2, r3, #4
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	2210      	movs	r2, #16
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d043      	beq.n	8001230 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d03c      	beq.n	8001230 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ba:	2210      	movs	r2, #16
 80011bc:	409a      	lsls	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d018      	beq.n	8001202 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d108      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d024      	beq.n	8001230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	4798      	blx	r3
 80011ee:	e01f      	b.n	8001230 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01b      	beq.n	8001230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	4798      	blx	r3
 8001200:	e016      	b.n	8001230 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0208 	bic.w	r2, r2, #8
 800121e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001234:	2220      	movs	r2, #32
 8001236:	409a      	lsls	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 808e 	beq.w	800135e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8086 	beq.w	800135e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2220      	movs	r2, #32
 8001258:	409a      	lsls	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b05      	cmp	r3, #5
 8001268:	d136      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0216 	bic.w	r2, r2, #22
 8001278:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001288:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <HAL_DMA_IRQHandler+0x1da>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0208 	bic.w	r2, r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	223f      	movs	r2, #63	; 0x3f
 80012b0:	409a      	lsls	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d07d      	beq.n	80013ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	4798      	blx	r3
        }
        return;
 80012d6:	e078      	b.n	80013ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01c      	beq.n	8001320 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d108      	bne.n	8001306 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d030      	beq.n	800135e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
 8001304:	e02b      	b.n	800135e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130a:	2b00      	cmp	r3, #0
 800130c:	d027      	beq.n	800135e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	4798      	blx	r3
 8001316:	e022      	b.n	800135e <HAL_DMA_IRQHandler+0x29e>
 8001318:	20000000 	.word	0x20000000
 800131c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10f      	bne.n	800134e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0210 	bic.w	r2, r2, #16
 800133c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	2b00      	cmp	r3, #0
 8001364:	d032      	beq.n	80013cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d022      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	429a      	cmp	r2, r3
 8001394:	d307      	bcc.n	80013a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f2      	bne.n	800138a <HAL_DMA_IRQHandler+0x2ca>
 80013a4:	e000      	b.n	80013a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
 80013c8:	e000      	b.n	80013cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80013ca:	bf00      	nop
    }
  }
}
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3b10      	subs	r3, #16
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <DMA_CalcBaseAndBitshift+0x64>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <DMA_CalcBaseAndBitshift+0x68>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d909      	bls.n	8001416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800140a:	f023 0303 	bic.w	r3, r3, #3
 800140e:	1d1a      	adds	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	659a      	str	r2, [r3, #88]	; 0x58
 8001414:	e007      	b.n	8001426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	aaaaaaab 	.word	0xaaaaaaab
 800143c:	08003158 	.word	0x08003158

08001440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11f      	bne.n	800149a <DMA_CheckFifoParam+0x5a>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d856      	bhi.n	800150e <DMA_CheckFifoParam+0xce>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <DMA_CheckFifoParam+0x28>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001479 	.word	0x08001479
 800146c:	0800148b 	.word	0x0800148b
 8001470:	08001479 	.word	0x08001479
 8001474:	0800150f 	.word	0x0800150f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d046      	beq.n	8001512 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001488:	e043      	b.n	8001512 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001492:	d140      	bne.n	8001516 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001498:	e03d      	b.n	8001516 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014a2:	d121      	bne.n	80014e8 <DMA_CheckFifoParam+0xa8>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d837      	bhi.n	800151a <DMA_CheckFifoParam+0xda>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <DMA_CheckFifoParam+0x70>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014c7 	.word	0x080014c7
 80014b8:	080014c1 	.word	0x080014c1
 80014bc:	080014d9 	.word	0x080014d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
      break;
 80014c4:	e030      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d025      	beq.n	800151e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014d6:	e022      	b.n	800151e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014e0:	d11f      	bne.n	8001522 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014e6:	e01c      	b.n	8001522 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d903      	bls.n	80014f6 <DMA_CheckFifoParam+0xb6>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d003      	beq.n	80014fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014f4:	e018      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
      break;
 80014fa:	e015      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00e      	beq.n	8001526 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
      break;
 800150c:	e00b      	b.n	8001526 <DMA_CheckFifoParam+0xe6>
      break;
 800150e:	bf00      	nop
 8001510:	e00a      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      break;
 8001512:	bf00      	nop
 8001514:	e008      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      break;
 8001516:	bf00      	nop
 8001518:	e006      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      break;
 800151a:	bf00      	nop
 800151c:	e004      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      break;
 800151e:	bf00      	nop
 8001520:	e002      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      break;   
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <DMA_CheckFifoParam+0xe8>
      break;
 8001526:	bf00      	nop
    }
  } 
  
  return status; 
 8001528:	7bfb      	ldrb	r3, [r7, #15]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e16b      	b.n	800182c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 815a 	bne.w	8001826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d005      	beq.n	800158a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	2b02      	cmp	r3, #2
 8001588:	d130      	bne.n	80015ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80b4 	beq.w	8001826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b60      	ldr	r3, [pc, #384]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a5f      	ldr	r2, [pc, #380]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <HAL_GPIO_Init+0x310>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x314>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x318>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d025      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x31c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x320>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x21a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_GPIO_Init+0x324>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x216>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_GPIO_Init+0x328>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x212>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x32c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x20e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <HAL_GPIO_Init+0x330>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x20a>
 800173e:	2307      	movs	r3, #7
 8001740:	e00e      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001742:	2308      	movs	r3, #8
 8001744:	e00c      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001746:	2306      	movs	r3, #6
 8001748:	e00a      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174a:	2305      	movs	r3, #5
 800174c:	e008      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174e:	2304      	movs	r3, #4
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175e:	2300      	movs	r3, #0
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001770:	4935      	ldr	r1, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x310>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_GPIO_Init+0x334>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_GPIO_Init+0x334>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_GPIO_Init+0x334>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_GPIO_Init+0x334>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_GPIO_Init+0x334>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_GPIO_Init+0x334>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_GPIO_Init+0x334>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_GPIO_Init+0x334>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	f67f ae90 	bls.w	8001554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40013800 	.word	0x40013800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40021000 	.word	0x40021000
 8001860:	40021400 	.word	0x40021400
 8001864:	40021800 	.word	0x40021800
 8001868:	40021c00 	.word	0x40021c00
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b4:	887a      	ldrh	r2, [r7, #2]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	041a      	lsls	r2, r3, #16
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43d9      	mvns	r1, r3
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	400b      	ands	r3, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e264      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d075      	beq.n	80019e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f6:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d00c      	beq.n	800191c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d112      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05b      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d157      	bne.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e23f      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x74>
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a8a      	ldr	r2, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a83      	ldr	r2, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a80      	ldr	r2, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f984 	bl	8000c9c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f980 	bl	8000c9c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e204      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xc0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f970 	bl	8000c9c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff f96c 	bl	8000c9c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1f0      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1c4      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4952      	ldr	r1, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f925 	bl	8000c9c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff f921 	bl	8000c9c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1a5      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4940      	ldr	r1, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f904 	bl	8000c9c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff f900 	bl	8000c9c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e184      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f8e4 	bl	8000c9c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f8e0 	bl	8000c9c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e164      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x200>
 8001af6:	e015      	b.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff f8cd 	bl	8000c9c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff f8c9 	bl	8000c9c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e14d      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a0 	beq.w	8001c72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f88f 	bl	8000c9c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e011      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
 8001b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff f882 	bl	8000c9c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e106      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b85      	ldr	r3, [pc, #532]	; (8001dbc <HAL_RCC_OscConfig+0x4e4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
 8001bba:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a80      	ldr	r2, [pc, #512]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a7a      	ldr	r2, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a77      	ldr	r2, [pc, #476]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bea:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a74      	ldr	r2, [pc, #464]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a71      	ldr	r2, [pc, #452]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f847 	bl	8000c9c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f843 	bl	8000c9c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0c5      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x33a>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f831 	bl	8000c9c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f82d 	bl	8000c9c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0af      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a55      	ldr	r2, [pc, #340]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 809b 	beq.w	8001db2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d05c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d141      	bne.n	8001d14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x4ec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff f801 	bl	8000c9c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe fffd 	bl	8000c9c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e081      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_OscConfig+0x4ec>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe ffd6 	bl	8000c9c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe ffd2 	bl	8000c9c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e056      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
 8001d12:	e04e      	b.n	8001db2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x4ec>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe ffbf 	bl	8000c9c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe ffbb 	bl	8000c9c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e03f      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x44a>
 8001d40:	e037      	b.n	8001db2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e032      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_RCC_OscConfig+0x4e8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d028      	beq.n	8001dae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d121      	bne.n	8001dae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d11a      	bne.n	8001dae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d111      	bne.n	8001dae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470060 	.word	0x42470060

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0cc      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b68      	ldr	r3, [pc, #416]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d90c      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b65      	ldr	r3, [pc, #404]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0b8      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1c:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	494d      	ldr	r1, [pc, #308]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d044      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d119      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e067      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4934      	ldr	r1, [pc, #208]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fef0 	bl	8000c9c <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7fe feec 	bl	8000c9c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d20c      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e032      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4916      	ldr	r1, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4e:	f000 f821 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490a      	ldr	r1, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fe50 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08003148 	.word	0x08003148
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6079      	str	r1, [r7, #4]
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	60f9      	str	r1, [r7, #12]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001faa:	4952      	ldr	r1, [pc, #328]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fac:	6889      	ldr	r1, [r1, #8]
 8001fae:	f001 010c 	and.w	r1, r1, #12
 8001fb2:	2908      	cmp	r1, #8
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001fb6:	2908      	cmp	r1, #8
 8001fb8:	f200 8094 	bhi.w	80020e4 <HAL_RCC_GetSysClockFreq+0x150>
 8001fbc:	2900      	cmp	r1, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x32>
 8001fc0:	2904      	cmp	r1, #4
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x38>
 8001fc4:	e08e      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fc8:	60bb      	str	r3, [r7, #8]
       break;
 8001fca:	e08e      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001fce:	60bb      	str	r3, [r7, #8]
      break;
 8001fd0:	e08b      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd2:	4948      	ldr	r1, [pc, #288]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fd4:	6849      	ldr	r1, [r1, #4]
 8001fd6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001fda:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fdc:	4945      	ldr	r1, [pc, #276]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fde:	6849      	ldr	r1, [r1, #4]
 8001fe0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fe4:	2900      	cmp	r1, #0
 8001fe6:	d024      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe8:	4942      	ldr	r1, [pc, #264]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fea:	6849      	ldr	r1, [r1, #4]
 8001fec:	0989      	lsrs	r1, r1, #6
 8001fee:	4608      	mov	r0, r1
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ff8:	f04f 0500 	mov.w	r5, #0
 8001ffc:	ea00 0204 	and.w	r2, r0, r4
 8002000:	ea01 0305 	and.w	r3, r1, r5
 8002004:	493d      	ldr	r1, [pc, #244]	; (80020fc <HAL_RCC_GetSysClockFreq+0x168>)
 8002006:	fb01 f003 	mul.w	r0, r1, r3
 800200a:	2100      	movs	r1, #0
 800200c:	fb01 f102 	mul.w	r1, r1, r2
 8002010:	1844      	adds	r4, r0, r1
 8002012:	493a      	ldr	r1, [pc, #232]	; (80020fc <HAL_RCC_GetSysClockFreq+0x168>)
 8002014:	fba2 0101 	umull	r0, r1, r2, r1
 8002018:	1863      	adds	r3, r4, r1
 800201a:	4619      	mov	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	f7fe f92c 	bl	8000280 <__aeabi_uldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4613      	mov	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e04a      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	099b      	lsrs	r3, r3, #6
 8002038:	461a      	mov	r2, r3
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	ea02 0400 	and.w	r4, r2, r0
 800204a:	ea03 0501 	and.w	r5, r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	014b      	lsls	r3, r1, #5
 800205c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002060:	0142      	lsls	r2, r0, #5
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	1b00      	subs	r0, r0, r4
 8002068:	eb61 0105 	sbc.w	r1, r1, r5
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	018b      	lsls	r3, r1, #6
 8002076:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800207a:	0182      	lsls	r2, r0, #6
 800207c:	1a12      	subs	r2, r2, r0
 800207e:	eb63 0301 	sbc.w	r3, r3, r1
 8002082:	f04f 0000 	mov.w	r0, #0
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	00d9      	lsls	r1, r3, #3
 800208c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002090:	00d0      	lsls	r0, r2, #3
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	1912      	adds	r2, r2, r4
 8002098:	eb45 0303 	adc.w	r3, r5, r3
 800209c:	f04f 0000 	mov.w	r0, #0
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	0299      	lsls	r1, r3, #10
 80020a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020aa:	0290      	lsls	r0, r2, #10
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f7fe f8e0 	bl	8000280 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	60bb      	str	r3, [r7, #8]
      break;
 80020e2:	e002      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80020e6:	60bb      	str	r3, [r7, #8]
      break;
 80020e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ea:	68bb      	ldr	r3, [r7, #8]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bdb0      	pop	{r4, r5, r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	017d7840 	.word	0x017d7840

08002100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07b      	b.n	800220a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d009      	beq.n	8002138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
 800212a:	e005      	b.n	8002138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fbce 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0104 	and.w	r1, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0210 	and.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b088      	sub	sp, #32
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_SPI_Transmit+0x22>
 8002230:	2302      	movs	r3, #2
 8002232:	e126      	b.n	8002482 <HAL_SPI_Transmit+0x270>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800223c:	f7fe fd2e 	bl	8000c9c <HAL_GetTick>
 8002240:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002252:	2302      	movs	r3, #2
 8002254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002256:	e10b      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_SPI_Transmit+0x52>
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002268:	e102      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b0:	d10f      	bne.n	80022d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d007      	beq.n	80022f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f8:	d14b      	bne.n	8002392 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_Transmit+0xf6>
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d13e      	bne.n	8002386 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800232c:	e02b      	b.n	8002386 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d112      	bne.n	8002362 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	1c9a      	adds	r2, r3, #2
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002360:	e011      	b.n	8002386 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe fc9b 	bl	8000c9c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Transmit+0x168>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Transmit+0x16e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002384:	e074      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ce      	bne.n	800232e <HAL_SPI_Transmit+0x11c>
 8002390:	e04c      	b.n	800242c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_SPI_Transmit+0x18e>
 800239a:	8afb      	ldrh	r3, [r7, #22]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d140      	bne.n	8002422 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023c6:	e02c      	b.n	8002422 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d113      	bne.n	80023fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80023fc:	e011      	b.n	8002422 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fe:	f7fe fc4d 	bl	8000c9c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d803      	bhi.n	8002416 <HAL_SPI_Transmit+0x204>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d102      	bne.n	800241c <HAL_SPI_Transmit+0x20a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002420:	e026      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1cd      	bne.n	80023c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f9d1 	bl	80027d8 <SPI_EndRxTxTransaction>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	77fb      	strb	r3, [r7, #31]
 800246c:	e000      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
  }

error:
 800246e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002480:	7ffb      	ldrb	r3, [r7, #31]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
    return;
 80024ce:	e0d7      	b.n	8002680 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_SPI_IRQHandler+0x66>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	09db      	lsrs	r3, r3, #7
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
    return;
 80024f0:	e0c6      	b.n	8002680 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_SPI_IRQHandler+0x8c>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80b4 	beq.w	8002680 <HAL_SPI_IRQHandler+0x1f4>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80ad 	beq.w	8002680 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b03      	cmp	r3, #3
 800253c:	d011      	beq.n	8002562 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	e00b      	b.n	800257a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
        return;
 8002578:	e082      	b.n	8002680 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d014      	beq.n	80025b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00c      	beq.n	80025d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f043 0208 	orr.w	r2, r3, #8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d04f      	beq.n	800267e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <HAL_SPI_IRQHandler+0x17e>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d034      	beq.n	8002674 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0203 	bic.w	r2, r2, #3
 8002618:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d011      	beq.n	8002646 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_SPI_IRQHandler+0x1fc>)
 8002628:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fd24 	bl	800107c <HAL_DMA_Abort_IT>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002652:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_SPI_IRQHandler+0x1fc>)
 8002654:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd0e 	bl	800107c <HAL_DMA_Abort_IT>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002672:	e003      	b.n	800267c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f809 	bl	800268c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800267a:	e000      	b.n	800267e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800267c:	bf00      	nop
    return;
 800267e:	bf00      	nop
  }
}
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	080026a1 	.word	0x080026a1

0800268c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ffe6 	bl	800268c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d8:	f7fe fae0 	bl	8000c9c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e8:	f7fe fad8 	bl	8000c9c <HAL_GetTick>
 80026ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	0d1b      	lsrs	r3, r3, #20
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fe:	e054      	b.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d050      	beq.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002708:	f7fe fac8 	bl	8000c9c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13d      	bne.n	800279a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800272c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002736:	d111      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002740:	d004      	beq.n	800274c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d107      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d10f      	bne.n	8002786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e017      	b.n	80027ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d19b      	bne.n	8002700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <SPI_EndRxTxTransaction+0x7c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <SPI_EndRxTxTransaction+0x80>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0d5b      	lsrs	r3, r3, #21
 80027f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002802:	d112      	bne.n	800282a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff ff5a 	bl	80026c8 <SPI_WaitFlagStateUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f043 0220 	orr.w	r2, r3, #32
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e00f      	b.n	800284a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3b01      	subs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d0f2      	beq.n	800282a <SPI_EndRxTxTransaction+0x52>
 8002844:	e000      	b.n	8002848 <SPI_EndRxTxTransaction+0x70>
        break;
 8002846:	bf00      	nop
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000
 8002858:	165e9f81 	.word	0x165e9f81

0800285c <__errno>:
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <__errno+0x8>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000000c 	.word	0x2000000c

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4d0d      	ldr	r5, [pc, #52]	; (80028a0 <__libc_init_array+0x38>)
 800286c:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 800286e:	1b64      	subs	r4, r4, r5
 8002870:	10a4      	asrs	r4, r4, #2
 8002872:	2600      	movs	r6, #0
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	4d0b      	ldr	r5, [pc, #44]	; (80028a8 <__libc_init_array+0x40>)
 800287a:	4c0c      	ldr	r4, [pc, #48]	; (80028ac <__libc_init_array+0x44>)
 800287c:	f000 fc4e 	bl	800311c <_init>
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	2600      	movs	r6, #0
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002890:	4798      	blx	r3
 8002892:	3601      	adds	r6, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f855 3b04 	ldr.w	r3, [r5], #4
 800289a:	4798      	blx	r3
 800289c:	3601      	adds	r6, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	0800319c 	.word	0x0800319c
 80028a4:	0800319c 	.word	0x0800319c
 80028a8:	0800319c 	.word	0x0800319c
 80028ac:	080031a0 	.word	0x080031a0

080028b0 <memset>:
 80028b0:	4402      	add	r2, r0
 80028b2:	4603      	mov	r3, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <memset+0xa>
 80028b8:	4770      	bx	lr
 80028ba:	f803 1b01 	strb.w	r1, [r3], #1
 80028be:	e7f9      	b.n	80028b4 <memset+0x4>

080028c0 <siprintf>:
 80028c0:	b40e      	push	{r1, r2, r3}
 80028c2:	b500      	push	{lr}
 80028c4:	b09c      	sub	sp, #112	; 0x70
 80028c6:	ab1d      	add	r3, sp, #116	; 0x74
 80028c8:	9002      	str	r0, [sp, #8]
 80028ca:	9006      	str	r0, [sp, #24]
 80028cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028d0:	4809      	ldr	r0, [pc, #36]	; (80028f8 <siprintf+0x38>)
 80028d2:	9107      	str	r1, [sp, #28]
 80028d4:	9104      	str	r1, [sp, #16]
 80028d6:	4909      	ldr	r1, [pc, #36]	; (80028fc <siprintf+0x3c>)
 80028d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80028dc:	9105      	str	r1, [sp, #20]
 80028de:	6800      	ldr	r0, [r0, #0]
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	a902      	add	r1, sp, #8
 80028e4:	f000 f868 	bl	80029b8 <_svfiprintf_r>
 80028e8:	9b02      	ldr	r3, [sp, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	b01c      	add	sp, #112	; 0x70
 80028f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028f4:	b003      	add	sp, #12
 80028f6:	4770      	bx	lr
 80028f8:	2000000c 	.word	0x2000000c
 80028fc:	ffff0208 	.word	0xffff0208

08002900 <__ssputs_r>:
 8002900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002904:	688e      	ldr	r6, [r1, #8]
 8002906:	429e      	cmp	r6, r3
 8002908:	4682      	mov	sl, r0
 800290a:	460c      	mov	r4, r1
 800290c:	4690      	mov	r8, r2
 800290e:	461f      	mov	r7, r3
 8002910:	d838      	bhi.n	8002984 <__ssputs_r+0x84>
 8002912:	898a      	ldrh	r2, [r1, #12]
 8002914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002918:	d032      	beq.n	8002980 <__ssputs_r+0x80>
 800291a:	6825      	ldr	r5, [r4, #0]
 800291c:	6909      	ldr	r1, [r1, #16]
 800291e:	eba5 0901 	sub.w	r9, r5, r1
 8002922:	6965      	ldr	r5, [r4, #20]
 8002924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800292c:	3301      	adds	r3, #1
 800292e:	444b      	add	r3, r9
 8002930:	106d      	asrs	r5, r5, #1
 8002932:	429d      	cmp	r5, r3
 8002934:	bf38      	it	cc
 8002936:	461d      	movcc	r5, r3
 8002938:	0553      	lsls	r3, r2, #21
 800293a:	d531      	bpl.n	80029a0 <__ssputs_r+0xa0>
 800293c:	4629      	mov	r1, r5
 800293e:	f000 fb47 	bl	8002fd0 <_malloc_r>
 8002942:	4606      	mov	r6, r0
 8002944:	b950      	cbnz	r0, 800295c <__ssputs_r+0x5c>
 8002946:	230c      	movs	r3, #12
 8002948:	f8ca 3000 	str.w	r3, [sl]
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295c:	6921      	ldr	r1, [r4, #16]
 800295e:	464a      	mov	r2, r9
 8002960:	f000 fabe 	bl	8002ee0 <memcpy>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800296a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296e:	81a3      	strh	r3, [r4, #12]
 8002970:	6126      	str	r6, [r4, #16]
 8002972:	6165      	str	r5, [r4, #20]
 8002974:	444e      	add	r6, r9
 8002976:	eba5 0509 	sub.w	r5, r5, r9
 800297a:	6026      	str	r6, [r4, #0]
 800297c:	60a5      	str	r5, [r4, #8]
 800297e:	463e      	mov	r6, r7
 8002980:	42be      	cmp	r6, r7
 8002982:	d900      	bls.n	8002986 <__ssputs_r+0x86>
 8002984:	463e      	mov	r6, r7
 8002986:	4632      	mov	r2, r6
 8002988:	6820      	ldr	r0, [r4, #0]
 800298a:	4641      	mov	r1, r8
 800298c:	f000 fab6 	bl	8002efc <memmove>
 8002990:	68a3      	ldr	r3, [r4, #8]
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	1b9b      	subs	r3, r3, r6
 8002996:	4432      	add	r2, r6
 8002998:	60a3      	str	r3, [r4, #8]
 800299a:	6022      	str	r2, [r4, #0]
 800299c:	2000      	movs	r0, #0
 800299e:	e7db      	b.n	8002958 <__ssputs_r+0x58>
 80029a0:	462a      	mov	r2, r5
 80029a2:	f000 fb6f 	bl	8003084 <_realloc_r>
 80029a6:	4606      	mov	r6, r0
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d1e1      	bne.n	8002970 <__ssputs_r+0x70>
 80029ac:	6921      	ldr	r1, [r4, #16]
 80029ae:	4650      	mov	r0, sl
 80029b0:	f000 fabe 	bl	8002f30 <_free_r>
 80029b4:	e7c7      	b.n	8002946 <__ssputs_r+0x46>
	...

080029b8 <_svfiprintf_r>:
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	4698      	mov	r8, r3
 80029be:	898b      	ldrh	r3, [r1, #12]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	b09d      	sub	sp, #116	; 0x74
 80029c4:	4607      	mov	r7, r0
 80029c6:	460d      	mov	r5, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	d50e      	bpl.n	80029ea <_svfiprintf_r+0x32>
 80029cc:	690b      	ldr	r3, [r1, #16]
 80029ce:	b963      	cbnz	r3, 80029ea <_svfiprintf_r+0x32>
 80029d0:	2140      	movs	r1, #64	; 0x40
 80029d2:	f000 fafd 	bl	8002fd0 <_malloc_r>
 80029d6:	6028      	str	r0, [r5, #0]
 80029d8:	6128      	str	r0, [r5, #16]
 80029da:	b920      	cbnz	r0, 80029e6 <_svfiprintf_r+0x2e>
 80029dc:	230c      	movs	r3, #12
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	e0d1      	b.n	8002b8a <_svfiprintf_r+0x1d2>
 80029e6:	2340      	movs	r3, #64	; 0x40
 80029e8:	616b      	str	r3, [r5, #20]
 80029ea:	2300      	movs	r3, #0
 80029ec:	9309      	str	r3, [sp, #36]	; 0x24
 80029ee:	2320      	movs	r3, #32
 80029f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80029f8:	2330      	movs	r3, #48	; 0x30
 80029fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ba4 <_svfiprintf_r+0x1ec>
 80029fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a02:	f04f 0901 	mov.w	r9, #1
 8002a06:	4623      	mov	r3, r4
 8002a08:	469a      	mov	sl, r3
 8002a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a0e:	b10a      	cbz	r2, 8002a14 <_svfiprintf_r+0x5c>
 8002a10:	2a25      	cmp	r2, #37	; 0x25
 8002a12:	d1f9      	bne.n	8002a08 <_svfiprintf_r+0x50>
 8002a14:	ebba 0b04 	subs.w	fp, sl, r4
 8002a18:	d00b      	beq.n	8002a32 <_svfiprintf_r+0x7a>
 8002a1a:	465b      	mov	r3, fp
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4638      	mov	r0, r7
 8002a22:	f7ff ff6d 	bl	8002900 <__ssputs_r>
 8002a26:	3001      	adds	r0, #1
 8002a28:	f000 80aa 	beq.w	8002b80 <_svfiprintf_r+0x1c8>
 8002a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a2e:	445a      	add	r2, fp
 8002a30:	9209      	str	r2, [sp, #36]	; 0x24
 8002a32:	f89a 3000 	ldrb.w	r3, [sl]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80a2 	beq.w	8002b80 <_svfiprintf_r+0x1c8>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a46:	f10a 0a01 	add.w	sl, sl, #1
 8002a4a:	9304      	str	r3, [sp, #16]
 8002a4c:	9307      	str	r3, [sp, #28]
 8002a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a52:	931a      	str	r3, [sp, #104]	; 0x68
 8002a54:	4654      	mov	r4, sl
 8002a56:	2205      	movs	r2, #5
 8002a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a5c:	4851      	ldr	r0, [pc, #324]	; (8002ba4 <_svfiprintf_r+0x1ec>)
 8002a5e:	f7fd fbbf 	bl	80001e0 <memchr>
 8002a62:	9a04      	ldr	r2, [sp, #16]
 8002a64:	b9d8      	cbnz	r0, 8002a9e <_svfiprintf_r+0xe6>
 8002a66:	06d0      	lsls	r0, r2, #27
 8002a68:	bf44      	itt	mi
 8002a6a:	2320      	movmi	r3, #32
 8002a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a70:	0711      	lsls	r1, r2, #28
 8002a72:	bf44      	itt	mi
 8002a74:	232b      	movmi	r3, #43	; 0x2b
 8002a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a80:	d015      	beq.n	8002aae <_svfiprintf_r+0xf6>
 8002a82:	9a07      	ldr	r2, [sp, #28]
 8002a84:	4654      	mov	r4, sl
 8002a86:	2000      	movs	r0, #0
 8002a88:	f04f 0c0a 	mov.w	ip, #10
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a92:	3b30      	subs	r3, #48	; 0x30
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	d94e      	bls.n	8002b36 <_svfiprintf_r+0x17e>
 8002a98:	b1b0      	cbz	r0, 8002ac8 <_svfiprintf_r+0x110>
 8002a9a:	9207      	str	r2, [sp, #28]
 8002a9c:	e014      	b.n	8002ac8 <_svfiprintf_r+0x110>
 8002a9e:	eba0 0308 	sub.w	r3, r0, r8
 8002aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	9304      	str	r3, [sp, #16]
 8002aaa:	46a2      	mov	sl, r4
 8002aac:	e7d2      	b.n	8002a54 <_svfiprintf_r+0x9c>
 8002aae:	9b03      	ldr	r3, [sp, #12]
 8002ab0:	1d19      	adds	r1, r3, #4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	9103      	str	r1, [sp, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bfbb      	ittet	lt
 8002aba:	425b      	neglt	r3, r3
 8002abc:	f042 0202 	orrlt.w	r2, r2, #2
 8002ac0:	9307      	strge	r3, [sp, #28]
 8002ac2:	9307      	strlt	r3, [sp, #28]
 8002ac4:	bfb8      	it	lt
 8002ac6:	9204      	strlt	r2, [sp, #16]
 8002ac8:	7823      	ldrb	r3, [r4, #0]
 8002aca:	2b2e      	cmp	r3, #46	; 0x2e
 8002acc:	d10c      	bne.n	8002ae8 <_svfiprintf_r+0x130>
 8002ace:	7863      	ldrb	r3, [r4, #1]
 8002ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad2:	d135      	bne.n	8002b40 <_svfiprintf_r+0x188>
 8002ad4:	9b03      	ldr	r3, [sp, #12]
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	9203      	str	r2, [sp, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bfb8      	it	lt
 8002ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ae4:	3402      	adds	r4, #2
 8002ae6:	9305      	str	r3, [sp, #20]
 8002ae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002bb4 <_svfiprintf_r+0x1fc>
 8002aec:	7821      	ldrb	r1, [r4, #0]
 8002aee:	2203      	movs	r2, #3
 8002af0:	4650      	mov	r0, sl
 8002af2:	f7fd fb75 	bl	80001e0 <memchr>
 8002af6:	b140      	cbz	r0, 8002b0a <_svfiprintf_r+0x152>
 8002af8:	2340      	movs	r3, #64	; 0x40
 8002afa:	eba0 000a 	sub.w	r0, r0, sl
 8002afe:	fa03 f000 	lsl.w	r0, r3, r0
 8002b02:	9b04      	ldr	r3, [sp, #16]
 8002b04:	4303      	orrs	r3, r0
 8002b06:	3401      	adds	r4, #1
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b0e:	4826      	ldr	r0, [pc, #152]	; (8002ba8 <_svfiprintf_r+0x1f0>)
 8002b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b14:	2206      	movs	r2, #6
 8002b16:	f7fd fb63 	bl	80001e0 <memchr>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d038      	beq.n	8002b90 <_svfiprintf_r+0x1d8>
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <_svfiprintf_r+0x1f4>)
 8002b20:	bb1b      	cbnz	r3, 8002b6a <_svfiprintf_r+0x1b2>
 8002b22:	9b03      	ldr	r3, [sp, #12]
 8002b24:	3307      	adds	r3, #7
 8002b26:	f023 0307 	bic.w	r3, r3, #7
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b30:	4433      	add	r3, r6
 8002b32:	9309      	str	r3, [sp, #36]	; 0x24
 8002b34:	e767      	b.n	8002a06 <_svfiprintf_r+0x4e>
 8002b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	e7a5      	b.n	8002a8c <_svfiprintf_r+0xd4>
 8002b40:	2300      	movs	r3, #0
 8002b42:	3401      	adds	r4, #1
 8002b44:	9305      	str	r3, [sp, #20]
 8002b46:	4619      	mov	r1, r3
 8002b48:	f04f 0c0a 	mov.w	ip, #10
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b52:	3a30      	subs	r2, #48	; 0x30
 8002b54:	2a09      	cmp	r2, #9
 8002b56:	d903      	bls.n	8002b60 <_svfiprintf_r+0x1a8>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0c5      	beq.n	8002ae8 <_svfiprintf_r+0x130>
 8002b5c:	9105      	str	r1, [sp, #20]
 8002b5e:	e7c3      	b.n	8002ae8 <_svfiprintf_r+0x130>
 8002b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b64:	4604      	mov	r4, r0
 8002b66:	2301      	movs	r3, #1
 8002b68:	e7f0      	b.n	8002b4c <_svfiprintf_r+0x194>
 8002b6a:	ab03      	add	r3, sp, #12
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	462a      	mov	r2, r5
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <_svfiprintf_r+0x1f8>)
 8002b72:	a904      	add	r1, sp, #16
 8002b74:	4638      	mov	r0, r7
 8002b76:	f3af 8000 	nop.w
 8002b7a:	1c42      	adds	r2, r0, #1
 8002b7c:	4606      	mov	r6, r0
 8002b7e:	d1d6      	bne.n	8002b2e <_svfiprintf_r+0x176>
 8002b80:	89ab      	ldrh	r3, [r5, #12]
 8002b82:	065b      	lsls	r3, r3, #25
 8002b84:	f53f af2c 	bmi.w	80029e0 <_svfiprintf_r+0x28>
 8002b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b8a:	b01d      	add	sp, #116	; 0x74
 8002b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b90:	ab03      	add	r3, sp, #12
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	462a      	mov	r2, r5
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <_svfiprintf_r+0x1f8>)
 8002b98:	a904      	add	r1, sp, #16
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	f000 f87a 	bl	8002c94 <_printf_i>
 8002ba0:	e7eb      	b.n	8002b7a <_svfiprintf_r+0x1c2>
 8002ba2:	bf00      	nop
 8002ba4:	08003160 	.word	0x08003160
 8002ba8:	0800316a 	.word	0x0800316a
 8002bac:	00000000 	.word	0x00000000
 8002bb0:	08002901 	.word	0x08002901
 8002bb4:	08003166 	.word	0x08003166

08002bb8 <_printf_common>:
 8002bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bbc:	4616      	mov	r6, r2
 8002bbe:	4699      	mov	r9, r3
 8002bc0:	688a      	ldr	r2, [r1, #8]
 8002bc2:	690b      	ldr	r3, [r1, #16]
 8002bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	bfb8      	it	lt
 8002bcc:	4613      	movlt	r3, r2
 8002bce:	6033      	str	r3, [r6, #0]
 8002bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bd4:	4607      	mov	r7, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	b10a      	cbz	r2, 8002bde <_printf_common+0x26>
 8002bda:	3301      	adds	r3, #1
 8002bdc:	6033      	str	r3, [r6, #0]
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	0699      	lsls	r1, r3, #26
 8002be2:	bf42      	ittt	mi
 8002be4:	6833      	ldrmi	r3, [r6, #0]
 8002be6:	3302      	addmi	r3, #2
 8002be8:	6033      	strmi	r3, [r6, #0]
 8002bea:	6825      	ldr	r5, [r4, #0]
 8002bec:	f015 0506 	ands.w	r5, r5, #6
 8002bf0:	d106      	bne.n	8002c00 <_printf_common+0x48>
 8002bf2:	f104 0a19 	add.w	sl, r4, #25
 8002bf6:	68e3      	ldr	r3, [r4, #12]
 8002bf8:	6832      	ldr	r2, [r6, #0]
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	42ab      	cmp	r3, r5
 8002bfe:	dc26      	bgt.n	8002c4e <_printf_common+0x96>
 8002c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c04:	1e13      	subs	r3, r2, #0
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	bf18      	it	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	0692      	lsls	r2, r2, #26
 8002c0e:	d42b      	bmi.n	8002c68 <_printf_common+0xb0>
 8002c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c14:	4649      	mov	r1, r9
 8002c16:	4638      	mov	r0, r7
 8002c18:	47c0      	blx	r8
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	d01e      	beq.n	8002c5c <_printf_common+0xa4>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	68e5      	ldr	r5, [r4, #12]
 8002c22:	6832      	ldr	r2, [r6, #0]
 8002c24:	f003 0306 	and.w	r3, r3, #6
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	bf08      	it	eq
 8002c2c:	1aad      	subeq	r5, r5, r2
 8002c2e:	68a3      	ldr	r3, [r4, #8]
 8002c30:	6922      	ldr	r2, [r4, #16]
 8002c32:	bf0c      	ite	eq
 8002c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c38:	2500      	movne	r5, #0
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	bfc4      	itt	gt
 8002c3e:	1a9b      	subgt	r3, r3, r2
 8002c40:	18ed      	addgt	r5, r5, r3
 8002c42:	2600      	movs	r6, #0
 8002c44:	341a      	adds	r4, #26
 8002c46:	42b5      	cmp	r5, r6
 8002c48:	d11a      	bne.n	8002c80 <_printf_common+0xc8>
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	e008      	b.n	8002c60 <_printf_common+0xa8>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4652      	mov	r2, sl
 8002c52:	4649      	mov	r1, r9
 8002c54:	4638      	mov	r0, r7
 8002c56:	47c0      	blx	r8
 8002c58:	3001      	adds	r0, #1
 8002c5a:	d103      	bne.n	8002c64 <_printf_common+0xac>
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c64:	3501      	adds	r5, #1
 8002c66:	e7c6      	b.n	8002bf6 <_printf_common+0x3e>
 8002c68:	18e1      	adds	r1, r4, r3
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	2030      	movs	r0, #48	; 0x30
 8002c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c72:	4422      	add	r2, r4
 8002c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	e7c7      	b.n	8002c10 <_printf_common+0x58>
 8002c80:	2301      	movs	r3, #1
 8002c82:	4622      	mov	r2, r4
 8002c84:	4649      	mov	r1, r9
 8002c86:	4638      	mov	r0, r7
 8002c88:	47c0      	blx	r8
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d0e6      	beq.n	8002c5c <_printf_common+0xa4>
 8002c8e:	3601      	adds	r6, #1
 8002c90:	e7d9      	b.n	8002c46 <_printf_common+0x8e>
	...

08002c94 <_printf_i>:
 8002c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c98:	460c      	mov	r4, r1
 8002c9a:	4691      	mov	r9, r2
 8002c9c:	7e27      	ldrb	r7, [r4, #24]
 8002c9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ca0:	2f78      	cmp	r7, #120	; 0x78
 8002ca2:	4680      	mov	r8, r0
 8002ca4:	469a      	mov	sl, r3
 8002ca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002caa:	d807      	bhi.n	8002cbc <_printf_i+0x28>
 8002cac:	2f62      	cmp	r7, #98	; 0x62
 8002cae:	d80a      	bhi.n	8002cc6 <_printf_i+0x32>
 8002cb0:	2f00      	cmp	r7, #0
 8002cb2:	f000 80d8 	beq.w	8002e66 <_printf_i+0x1d2>
 8002cb6:	2f58      	cmp	r7, #88	; 0x58
 8002cb8:	f000 80a3 	beq.w	8002e02 <_printf_i+0x16e>
 8002cbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cc4:	e03a      	b.n	8002d3c <_printf_i+0xa8>
 8002cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cca:	2b15      	cmp	r3, #21
 8002ccc:	d8f6      	bhi.n	8002cbc <_printf_i+0x28>
 8002cce:	a001      	add	r0, pc, #4	; (adr r0, 8002cd4 <_printf_i+0x40>)
 8002cd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002cd4:	08002d2d 	.word	0x08002d2d
 8002cd8:	08002d41 	.word	0x08002d41
 8002cdc:	08002cbd 	.word	0x08002cbd
 8002ce0:	08002cbd 	.word	0x08002cbd
 8002ce4:	08002cbd 	.word	0x08002cbd
 8002ce8:	08002cbd 	.word	0x08002cbd
 8002cec:	08002d41 	.word	0x08002d41
 8002cf0:	08002cbd 	.word	0x08002cbd
 8002cf4:	08002cbd 	.word	0x08002cbd
 8002cf8:	08002cbd 	.word	0x08002cbd
 8002cfc:	08002cbd 	.word	0x08002cbd
 8002d00:	08002e4d 	.word	0x08002e4d
 8002d04:	08002d71 	.word	0x08002d71
 8002d08:	08002e2f 	.word	0x08002e2f
 8002d0c:	08002cbd 	.word	0x08002cbd
 8002d10:	08002cbd 	.word	0x08002cbd
 8002d14:	08002e6f 	.word	0x08002e6f
 8002d18:	08002cbd 	.word	0x08002cbd
 8002d1c:	08002d71 	.word	0x08002d71
 8002d20:	08002cbd 	.word	0x08002cbd
 8002d24:	08002cbd 	.word	0x08002cbd
 8002d28:	08002e37 	.word	0x08002e37
 8002d2c:	680b      	ldr	r3, [r1, #0]
 8002d2e:	1d1a      	adds	r2, r3, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	600a      	str	r2, [r1, #0]
 8002d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a3      	b.n	8002e88 <_printf_i+0x1f4>
 8002d40:	6825      	ldr	r5, [r4, #0]
 8002d42:	6808      	ldr	r0, [r1, #0]
 8002d44:	062e      	lsls	r6, r5, #24
 8002d46:	f100 0304 	add.w	r3, r0, #4
 8002d4a:	d50a      	bpl.n	8002d62 <_printf_i+0xce>
 8002d4c:	6805      	ldr	r5, [r0, #0]
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	2d00      	cmp	r5, #0
 8002d52:	da03      	bge.n	8002d5c <_printf_i+0xc8>
 8002d54:	232d      	movs	r3, #45	; 0x2d
 8002d56:	426d      	negs	r5, r5
 8002d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d5c:	485e      	ldr	r0, [pc, #376]	; (8002ed8 <_printf_i+0x244>)
 8002d5e:	230a      	movs	r3, #10
 8002d60:	e019      	b.n	8002d96 <_printf_i+0x102>
 8002d62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d66:	6805      	ldr	r5, [r0, #0]
 8002d68:	600b      	str	r3, [r1, #0]
 8002d6a:	bf18      	it	ne
 8002d6c:	b22d      	sxthne	r5, r5
 8002d6e:	e7ef      	b.n	8002d50 <_printf_i+0xbc>
 8002d70:	680b      	ldr	r3, [r1, #0]
 8002d72:	6825      	ldr	r5, [r4, #0]
 8002d74:	1d18      	adds	r0, r3, #4
 8002d76:	6008      	str	r0, [r1, #0]
 8002d78:	0628      	lsls	r0, r5, #24
 8002d7a:	d501      	bpl.n	8002d80 <_printf_i+0xec>
 8002d7c:	681d      	ldr	r5, [r3, #0]
 8002d7e:	e002      	b.n	8002d86 <_printf_i+0xf2>
 8002d80:	0669      	lsls	r1, r5, #25
 8002d82:	d5fb      	bpl.n	8002d7c <_printf_i+0xe8>
 8002d84:	881d      	ldrh	r5, [r3, #0]
 8002d86:	4854      	ldr	r0, [pc, #336]	; (8002ed8 <_printf_i+0x244>)
 8002d88:	2f6f      	cmp	r7, #111	; 0x6f
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2308      	moveq	r3, #8
 8002d8e:	230a      	movne	r3, #10
 8002d90:	2100      	movs	r1, #0
 8002d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d96:	6866      	ldr	r6, [r4, #4]
 8002d98:	60a6      	str	r6, [r4, #8]
 8002d9a:	2e00      	cmp	r6, #0
 8002d9c:	bfa2      	ittt	ge
 8002d9e:	6821      	ldrge	r1, [r4, #0]
 8002da0:	f021 0104 	bicge.w	r1, r1, #4
 8002da4:	6021      	strge	r1, [r4, #0]
 8002da6:	b90d      	cbnz	r5, 8002dac <_printf_i+0x118>
 8002da8:	2e00      	cmp	r6, #0
 8002daa:	d04d      	beq.n	8002e48 <_printf_i+0x1b4>
 8002dac:	4616      	mov	r6, r2
 8002dae:	fbb5 f1f3 	udiv	r1, r5, r3
 8002db2:	fb03 5711 	mls	r7, r3, r1, r5
 8002db6:	5dc7      	ldrb	r7, [r0, r7]
 8002db8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002dbc:	462f      	mov	r7, r5
 8002dbe:	42bb      	cmp	r3, r7
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	d9f4      	bls.n	8002dae <_printf_i+0x11a>
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d10b      	bne.n	8002de0 <_printf_i+0x14c>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	07df      	lsls	r7, r3, #31
 8002dcc:	d508      	bpl.n	8002de0 <_printf_i+0x14c>
 8002dce:	6923      	ldr	r3, [r4, #16]
 8002dd0:	6861      	ldr	r1, [r4, #4]
 8002dd2:	4299      	cmp	r1, r3
 8002dd4:	bfde      	ittt	le
 8002dd6:	2330      	movle	r3, #48	; 0x30
 8002dd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ddc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002de0:	1b92      	subs	r2, r2, r6
 8002de2:	6122      	str	r2, [r4, #16]
 8002de4:	f8cd a000 	str.w	sl, [sp]
 8002de8:	464b      	mov	r3, r9
 8002dea:	aa03      	add	r2, sp, #12
 8002dec:	4621      	mov	r1, r4
 8002dee:	4640      	mov	r0, r8
 8002df0:	f7ff fee2 	bl	8002bb8 <_printf_common>
 8002df4:	3001      	adds	r0, #1
 8002df6:	d14c      	bne.n	8002e92 <_printf_i+0x1fe>
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	b004      	add	sp, #16
 8002dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e02:	4835      	ldr	r0, [pc, #212]	; (8002ed8 <_printf_i+0x244>)
 8002e04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	680e      	ldr	r6, [r1, #0]
 8002e0c:	061f      	lsls	r7, r3, #24
 8002e0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e12:	600e      	str	r6, [r1, #0]
 8002e14:	d514      	bpl.n	8002e40 <_printf_i+0x1ac>
 8002e16:	07d9      	lsls	r1, r3, #31
 8002e18:	bf44      	itt	mi
 8002e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8002e1e:	6023      	strmi	r3, [r4, #0]
 8002e20:	b91d      	cbnz	r5, 8002e2a <_printf_i+0x196>
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	f023 0320 	bic.w	r3, r3, #32
 8002e28:	6023      	str	r3, [r4, #0]
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	e7b0      	b.n	8002d90 <_printf_i+0xfc>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	f043 0320 	orr.w	r3, r3, #32
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	2378      	movs	r3, #120	; 0x78
 8002e38:	4828      	ldr	r0, [pc, #160]	; (8002edc <_printf_i+0x248>)
 8002e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e3e:	e7e3      	b.n	8002e08 <_printf_i+0x174>
 8002e40:	065e      	lsls	r6, r3, #25
 8002e42:	bf48      	it	mi
 8002e44:	b2ad      	uxthmi	r5, r5
 8002e46:	e7e6      	b.n	8002e16 <_printf_i+0x182>
 8002e48:	4616      	mov	r6, r2
 8002e4a:	e7bb      	b.n	8002dc4 <_printf_i+0x130>
 8002e4c:	680b      	ldr	r3, [r1, #0]
 8002e4e:	6826      	ldr	r6, [r4, #0]
 8002e50:	6960      	ldr	r0, [r4, #20]
 8002e52:	1d1d      	adds	r5, r3, #4
 8002e54:	600d      	str	r5, [r1, #0]
 8002e56:	0635      	lsls	r5, r6, #24
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	d501      	bpl.n	8002e60 <_printf_i+0x1cc>
 8002e5c:	6018      	str	r0, [r3, #0]
 8002e5e:	e002      	b.n	8002e66 <_printf_i+0x1d2>
 8002e60:	0671      	lsls	r1, r6, #25
 8002e62:	d5fb      	bpl.n	8002e5c <_printf_i+0x1c8>
 8002e64:	8018      	strh	r0, [r3, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	6123      	str	r3, [r4, #16]
 8002e6a:	4616      	mov	r6, r2
 8002e6c:	e7ba      	b.n	8002de4 <_printf_i+0x150>
 8002e6e:	680b      	ldr	r3, [r1, #0]
 8002e70:	1d1a      	adds	r2, r3, #4
 8002e72:	600a      	str	r2, [r1, #0]
 8002e74:	681e      	ldr	r6, [r3, #0]
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f7fd f9b0 	bl	80001e0 <memchr>
 8002e80:	b108      	cbz	r0, 8002e86 <_printf_i+0x1f2>
 8002e82:	1b80      	subs	r0, r0, r6
 8002e84:	6060      	str	r0, [r4, #4]
 8002e86:	6863      	ldr	r3, [r4, #4]
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e90:	e7a8      	b.n	8002de4 <_printf_i+0x150>
 8002e92:	6923      	ldr	r3, [r4, #16]
 8002e94:	4632      	mov	r2, r6
 8002e96:	4649      	mov	r1, r9
 8002e98:	4640      	mov	r0, r8
 8002e9a:	47d0      	blx	sl
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d0ab      	beq.n	8002df8 <_printf_i+0x164>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	079b      	lsls	r3, r3, #30
 8002ea4:	d413      	bmi.n	8002ece <_printf_i+0x23a>
 8002ea6:	68e0      	ldr	r0, [r4, #12]
 8002ea8:	9b03      	ldr	r3, [sp, #12]
 8002eaa:	4298      	cmp	r0, r3
 8002eac:	bfb8      	it	lt
 8002eae:	4618      	movlt	r0, r3
 8002eb0:	e7a4      	b.n	8002dfc <_printf_i+0x168>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	4640      	mov	r0, r8
 8002eba:	47d0      	blx	sl
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d09b      	beq.n	8002df8 <_printf_i+0x164>
 8002ec0:	3501      	adds	r5, #1
 8002ec2:	68e3      	ldr	r3, [r4, #12]
 8002ec4:	9903      	ldr	r1, [sp, #12]
 8002ec6:	1a5b      	subs	r3, r3, r1
 8002ec8:	42ab      	cmp	r3, r5
 8002eca:	dcf2      	bgt.n	8002eb2 <_printf_i+0x21e>
 8002ecc:	e7eb      	b.n	8002ea6 <_printf_i+0x212>
 8002ece:	2500      	movs	r5, #0
 8002ed0:	f104 0619 	add.w	r6, r4, #25
 8002ed4:	e7f5      	b.n	8002ec2 <_printf_i+0x22e>
 8002ed6:	bf00      	nop
 8002ed8:	08003171 	.word	0x08003171
 8002edc:	08003182 	.word	0x08003182

08002ee0 <memcpy>:
 8002ee0:	440a      	add	r2, r1
 8002ee2:	4291      	cmp	r1, r2
 8002ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ee8:	d100      	bne.n	8002eec <memcpy+0xc>
 8002eea:	4770      	bx	lr
 8002eec:	b510      	push	{r4, lr}
 8002eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ef6:	4291      	cmp	r1, r2
 8002ef8:	d1f9      	bne.n	8002eee <memcpy+0xe>
 8002efa:	bd10      	pop	{r4, pc}

08002efc <memmove>:
 8002efc:	4288      	cmp	r0, r1
 8002efe:	b510      	push	{r4, lr}
 8002f00:	eb01 0402 	add.w	r4, r1, r2
 8002f04:	d902      	bls.n	8002f0c <memmove+0x10>
 8002f06:	4284      	cmp	r4, r0
 8002f08:	4623      	mov	r3, r4
 8002f0a:	d807      	bhi.n	8002f1c <memmove+0x20>
 8002f0c:	1e43      	subs	r3, r0, #1
 8002f0e:	42a1      	cmp	r1, r4
 8002f10:	d008      	beq.n	8002f24 <memmove+0x28>
 8002f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f1a:	e7f8      	b.n	8002f0e <memmove+0x12>
 8002f1c:	4402      	add	r2, r0
 8002f1e:	4601      	mov	r1, r0
 8002f20:	428a      	cmp	r2, r1
 8002f22:	d100      	bne.n	8002f26 <memmove+0x2a>
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f2e:	e7f7      	b.n	8002f20 <memmove+0x24>

08002f30 <_free_r>:
 8002f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d048      	beq.n	8002fc8 <_free_r+0x98>
 8002f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f3a:	9001      	str	r0, [sp, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8002f42:	bfb8      	it	lt
 8002f44:	18e4      	addlt	r4, r4, r3
 8002f46:	f000 f8d3 	bl	80030f0 <__malloc_lock>
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <_free_r+0x9c>)
 8002f4c:	9801      	ldr	r0, [sp, #4]
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	4615      	mov	r5, r2
 8002f52:	b933      	cbnz	r3, 8002f62 <_free_r+0x32>
 8002f54:	6063      	str	r3, [r4, #4]
 8002f56:	6014      	str	r4, [r2, #0]
 8002f58:	b003      	add	sp, #12
 8002f5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f5e:	f000 b8cd 	b.w	80030fc <__malloc_unlock>
 8002f62:	42a3      	cmp	r3, r4
 8002f64:	d90b      	bls.n	8002f7e <_free_r+0x4e>
 8002f66:	6821      	ldr	r1, [r4, #0]
 8002f68:	1862      	adds	r2, r4, r1
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	bf04      	itt	eq
 8002f6e:	681a      	ldreq	r2, [r3, #0]
 8002f70:	685b      	ldreq	r3, [r3, #4]
 8002f72:	6063      	str	r3, [r4, #4]
 8002f74:	bf04      	itt	eq
 8002f76:	1852      	addeq	r2, r2, r1
 8002f78:	6022      	streq	r2, [r4, #0]
 8002f7a:	602c      	str	r4, [r5, #0]
 8002f7c:	e7ec      	b.n	8002f58 <_free_r+0x28>
 8002f7e:	461a      	mov	r2, r3
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	b10b      	cbz	r3, 8002f88 <_free_r+0x58>
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	d9fa      	bls.n	8002f7e <_free_r+0x4e>
 8002f88:	6811      	ldr	r1, [r2, #0]
 8002f8a:	1855      	adds	r5, r2, r1
 8002f8c:	42a5      	cmp	r5, r4
 8002f8e:	d10b      	bne.n	8002fa8 <_free_r+0x78>
 8002f90:	6824      	ldr	r4, [r4, #0]
 8002f92:	4421      	add	r1, r4
 8002f94:	1854      	adds	r4, r2, r1
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	6011      	str	r1, [r2, #0]
 8002f9a:	d1dd      	bne.n	8002f58 <_free_r+0x28>
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	6053      	str	r3, [r2, #4]
 8002fa2:	4421      	add	r1, r4
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	e7d7      	b.n	8002f58 <_free_r+0x28>
 8002fa8:	d902      	bls.n	8002fb0 <_free_r+0x80>
 8002faa:	230c      	movs	r3, #12
 8002fac:	6003      	str	r3, [r0, #0]
 8002fae:	e7d3      	b.n	8002f58 <_free_r+0x28>
 8002fb0:	6825      	ldr	r5, [r4, #0]
 8002fb2:	1961      	adds	r1, r4, r5
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	bf04      	itt	eq
 8002fb8:	6819      	ldreq	r1, [r3, #0]
 8002fba:	685b      	ldreq	r3, [r3, #4]
 8002fbc:	6063      	str	r3, [r4, #4]
 8002fbe:	bf04      	itt	eq
 8002fc0:	1949      	addeq	r1, r1, r5
 8002fc2:	6021      	streq	r1, [r4, #0]
 8002fc4:	6054      	str	r4, [r2, #4]
 8002fc6:	e7c7      	b.n	8002f58 <_free_r+0x28>
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd30      	pop	{r4, r5, pc}
 8002fcc:	20000094 	.word	0x20000094

08002fd0 <_malloc_r>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	1ccd      	adds	r5, r1, #3
 8002fd4:	f025 0503 	bic.w	r5, r5, #3
 8002fd8:	3508      	adds	r5, #8
 8002fda:	2d0c      	cmp	r5, #12
 8002fdc:	bf38      	it	cc
 8002fde:	250c      	movcc	r5, #12
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	db01      	blt.n	8002fea <_malloc_r+0x1a>
 8002fe6:	42a9      	cmp	r1, r5
 8002fe8:	d903      	bls.n	8002ff2 <_malloc_r+0x22>
 8002fea:	230c      	movs	r3, #12
 8002fec:	6033      	str	r3, [r6, #0]
 8002fee:	2000      	movs	r0, #0
 8002ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff2:	f000 f87d 	bl	80030f0 <__malloc_lock>
 8002ff6:	4921      	ldr	r1, [pc, #132]	; (800307c <_malloc_r+0xac>)
 8002ff8:	680a      	ldr	r2, [r1, #0]
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	b99c      	cbnz	r4, 8003026 <_malloc_r+0x56>
 8002ffe:	4f20      	ldr	r7, [pc, #128]	; (8003080 <_malloc_r+0xb0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b923      	cbnz	r3, 800300e <_malloc_r+0x3e>
 8003004:	4621      	mov	r1, r4
 8003006:	4630      	mov	r0, r6
 8003008:	f000 f862 	bl	80030d0 <_sbrk_r>
 800300c:	6038      	str	r0, [r7, #0]
 800300e:	4629      	mov	r1, r5
 8003010:	4630      	mov	r0, r6
 8003012:	f000 f85d 	bl	80030d0 <_sbrk_r>
 8003016:	1c43      	adds	r3, r0, #1
 8003018:	d123      	bne.n	8003062 <_malloc_r+0x92>
 800301a:	230c      	movs	r3, #12
 800301c:	6033      	str	r3, [r6, #0]
 800301e:	4630      	mov	r0, r6
 8003020:	f000 f86c 	bl	80030fc <__malloc_unlock>
 8003024:	e7e3      	b.n	8002fee <_malloc_r+0x1e>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	1b5b      	subs	r3, r3, r5
 800302a:	d417      	bmi.n	800305c <_malloc_r+0x8c>
 800302c:	2b0b      	cmp	r3, #11
 800302e:	d903      	bls.n	8003038 <_malloc_r+0x68>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	441c      	add	r4, r3
 8003034:	6025      	str	r5, [r4, #0]
 8003036:	e004      	b.n	8003042 <_malloc_r+0x72>
 8003038:	6863      	ldr	r3, [r4, #4]
 800303a:	42a2      	cmp	r2, r4
 800303c:	bf0c      	ite	eq
 800303e:	600b      	streq	r3, [r1, #0]
 8003040:	6053      	strne	r3, [r2, #4]
 8003042:	4630      	mov	r0, r6
 8003044:	f000 f85a 	bl	80030fc <__malloc_unlock>
 8003048:	f104 000b 	add.w	r0, r4, #11
 800304c:	1d23      	adds	r3, r4, #4
 800304e:	f020 0007 	bic.w	r0, r0, #7
 8003052:	1ac2      	subs	r2, r0, r3
 8003054:	d0cc      	beq.n	8002ff0 <_malloc_r+0x20>
 8003056:	1a1b      	subs	r3, r3, r0
 8003058:	50a3      	str	r3, [r4, r2]
 800305a:	e7c9      	b.n	8002ff0 <_malloc_r+0x20>
 800305c:	4622      	mov	r2, r4
 800305e:	6864      	ldr	r4, [r4, #4]
 8003060:	e7cc      	b.n	8002ffc <_malloc_r+0x2c>
 8003062:	1cc4      	adds	r4, r0, #3
 8003064:	f024 0403 	bic.w	r4, r4, #3
 8003068:	42a0      	cmp	r0, r4
 800306a:	d0e3      	beq.n	8003034 <_malloc_r+0x64>
 800306c:	1a21      	subs	r1, r4, r0
 800306e:	4630      	mov	r0, r6
 8003070:	f000 f82e 	bl	80030d0 <_sbrk_r>
 8003074:	3001      	adds	r0, #1
 8003076:	d1dd      	bne.n	8003034 <_malloc_r+0x64>
 8003078:	e7cf      	b.n	800301a <_malloc_r+0x4a>
 800307a:	bf00      	nop
 800307c:	20000094 	.word	0x20000094
 8003080:	20000098 	.word	0x20000098

08003084 <_realloc_r>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	4607      	mov	r7, r0
 8003088:	4614      	mov	r4, r2
 800308a:	460e      	mov	r6, r1
 800308c:	b921      	cbnz	r1, 8003098 <_realloc_r+0x14>
 800308e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003092:	4611      	mov	r1, r2
 8003094:	f7ff bf9c 	b.w	8002fd0 <_malloc_r>
 8003098:	b922      	cbnz	r2, 80030a4 <_realloc_r+0x20>
 800309a:	f7ff ff49 	bl	8002f30 <_free_r>
 800309e:	4625      	mov	r5, r4
 80030a0:	4628      	mov	r0, r5
 80030a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a4:	f000 f830 	bl	8003108 <_malloc_usable_size_r>
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d20f      	bcs.n	80030cc <_realloc_r+0x48>
 80030ac:	4621      	mov	r1, r4
 80030ae:	4638      	mov	r0, r7
 80030b0:	f7ff ff8e 	bl	8002fd0 <_malloc_r>
 80030b4:	4605      	mov	r5, r0
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d0f2      	beq.n	80030a0 <_realloc_r+0x1c>
 80030ba:	4631      	mov	r1, r6
 80030bc:	4622      	mov	r2, r4
 80030be:	f7ff ff0f 	bl	8002ee0 <memcpy>
 80030c2:	4631      	mov	r1, r6
 80030c4:	4638      	mov	r0, r7
 80030c6:	f7ff ff33 	bl	8002f30 <_free_r>
 80030ca:	e7e9      	b.n	80030a0 <_realloc_r+0x1c>
 80030cc:	4635      	mov	r5, r6
 80030ce:	e7e7      	b.n	80030a0 <_realloc_r+0x1c>

080030d0 <_sbrk_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d06      	ldr	r5, [pc, #24]	; (80030ec <_sbrk_r+0x1c>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	4604      	mov	r4, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	f7fd fd06 	bl	8000aec <_sbrk>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_sbrk_r+0x1a>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_sbrk_r+0x1a>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	200001cc 	.word	0x200001cc

080030f0 <__malloc_lock>:
 80030f0:	4801      	ldr	r0, [pc, #4]	; (80030f8 <__malloc_lock+0x8>)
 80030f2:	f000 b811 	b.w	8003118 <__retarget_lock_acquire_recursive>
 80030f6:	bf00      	nop
 80030f8:	200001d4 	.word	0x200001d4

080030fc <__malloc_unlock>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__malloc_unlock+0x8>)
 80030fe:	f000 b80c 	b.w	800311a <__retarget_lock_release_recursive>
 8003102:	bf00      	nop
 8003104:	200001d4 	.word	0x200001d4

08003108 <_malloc_usable_size_r>:
 8003108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800310c:	1f18      	subs	r0, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	bfbc      	itt	lt
 8003112:	580b      	ldrlt	r3, [r1, r0]
 8003114:	18c0      	addlt	r0, r0, r3
 8003116:	4770      	bx	lr

08003118 <__retarget_lock_acquire_recursive>:
 8003118:	4770      	bx	lr

0800311a <__retarget_lock_release_recursive>:
 800311a:	4770      	bx	lr

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
