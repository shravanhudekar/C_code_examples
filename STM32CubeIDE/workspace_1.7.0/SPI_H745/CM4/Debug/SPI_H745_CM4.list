
SPI_H745_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007cc  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08100a64  08100a64  00010a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100a74  08100a74  00010a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08100a78  08100a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08100a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000010  08100a8c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000030  08100a8c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008da6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000012c5  00000000  00000000  00028de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000004a0  00000000  00000000  0002a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000428  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003698b  00000000  00000000  0002a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000053a7  00000000  00000000  00061303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016d812  00000000  00000000  000666aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d3ebc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010fc  00000000  00000000  001d3f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100a4c 	.word	0x08100a4c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08100a4c 	.word	0x08100a4c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100314:	f000 f870 	bl	81003f8 <HAL_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100318:	e7fe      	b.n	8100318 <main+0x8>
	...

0810031c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810031c:	b480      	push	{r7}
 810031e:	b083      	sub	sp, #12
 8100320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100322:	4b0a      	ldr	r3, [pc, #40]	; (810034c <HAL_MspInit+0x30>)
 8100324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100328:	4a08      	ldr	r2, [pc, #32]	; (810034c <HAL_MspInit+0x30>)
 810032a:	f043 0302 	orr.w	r3, r3, #2
 810032e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100332:	4b06      	ldr	r3, [pc, #24]	; (810034c <HAL_MspInit+0x30>)
 8100334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100338:	f003 0302 	and.w	r3, r3, #2
 810033c:	607b      	str	r3, [r7, #4]
 810033e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100340:	bf00      	nop
 8100342:	370c      	adds	r7, #12
 8100344:	46bd      	mov	sp, r7
 8100346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810034a:	4770      	bx	lr
 810034c:	58024400 	.word	0x58024400

08100350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100350:	b480      	push	{r7}
 8100352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100354:	e7fe      	b.n	8100354 <NMI_Handler+0x4>

08100356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100356:	b480      	push	{r7}
 8100358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810035a:	e7fe      	b.n	810035a <HardFault_Handler+0x4>

0810035c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810035c:	b480      	push	{r7}
 810035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100360:	e7fe      	b.n	8100360 <MemManage_Handler+0x4>

08100362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100362:	b480      	push	{r7}
 8100364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100366:	e7fe      	b.n	8100366 <BusFault_Handler+0x4>

08100368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100368:	b480      	push	{r7}
 810036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810036c:	e7fe      	b.n	810036c <UsageFault_Handler+0x4>

0810036e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810036e:	b480      	push	{r7}
 8100370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100372:	bf00      	nop
 8100374:	46bd      	mov	sp, r7
 8100376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810037a:	4770      	bx	lr

0810037c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810037c:	b480      	push	{r7}
 810037e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100380:	bf00      	nop
 8100382:	46bd      	mov	sp, r7
 8100384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100388:	4770      	bx	lr

0810038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810038a:	b480      	push	{r7}
 810038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810038e:	bf00      	nop
 8100390:	46bd      	mov	sp, r7
 8100392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100396:	4770      	bx	lr

08100398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100398:	b580      	push	{r7, lr}
 810039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810039c:	f000 f8c0 	bl	8100520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81003a0:	bf00      	nop
 81003a2:	bd80      	pop	{r7, pc}

081003a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81003a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81003dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81003a8:	f7ff ff96 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81003ac:	480c      	ldr	r0, [pc, #48]	; (81003e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81003ae:	490d      	ldr	r1, [pc, #52]	; (81003e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81003b0:	4a0d      	ldr	r2, [pc, #52]	; (81003e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81003b4:	e002      	b.n	81003bc <LoopCopyDataInit>

081003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81003ba:	3304      	adds	r3, #4

081003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81003c0:	d3f9      	bcc.n	81003b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81003c2:	4a0a      	ldr	r2, [pc, #40]	; (81003ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81003c4:	4c0a      	ldr	r4, [pc, #40]	; (81003f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81003c8:	e001      	b.n	81003ce <LoopFillZerobss>

081003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81003cc:	3204      	adds	r2, #4

081003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81003d0:	d3fb      	bcc.n	81003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81003d2:	f000 fb17 	bl	8100a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81003d6:	f7ff ff9b 	bl	8100310 <main>
  bx  lr
 81003da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81003dc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81003e0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81003e4:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81003e8:	08100a7c 	.word	0x08100a7c
  ldr r2, =_sbss
 81003ec:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81003f0:	10000030 	.word	0x10000030

081003f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81003f4:	e7fe      	b.n	81003f4 <ADC3_IRQHandler>
	...

081003f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81003f8:	b580      	push	{r7, lr}
 81003fa:	b082      	sub	sp, #8
 81003fc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81003fe:	4b28      	ldr	r3, [pc, #160]	; (81004a0 <HAL_Init+0xa8>)
 8100400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100404:	4a26      	ldr	r2, [pc, #152]	; (81004a0 <HAL_Init+0xa8>)
 8100406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810040a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810040e:	4b24      	ldr	r3, [pc, #144]	; (81004a0 <HAL_Init+0xa8>)
 8100410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100418:	603b      	str	r3, [r7, #0]
 810041a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810041c:	4b21      	ldr	r3, [pc, #132]	; (81004a4 <HAL_Init+0xac>)
 810041e:	681b      	ldr	r3, [r3, #0]
 8100420:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100428:	4a1e      	ldr	r2, [pc, #120]	; (81004a4 <HAL_Init+0xac>)
 810042a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810042e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100430:	4b1c      	ldr	r3, [pc, #112]	; (81004a4 <HAL_Init+0xac>)
 8100432:	681b      	ldr	r3, [r3, #0]
 8100434:	4a1b      	ldr	r2, [pc, #108]	; (81004a4 <HAL_Init+0xac>)
 8100436:	f043 0301 	orr.w	r3, r3, #1
 810043a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810043c:	2003      	movs	r0, #3
 810043e:	f000 f935 	bl	81006ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100442:	f000 f965 	bl	8100710 <HAL_RCC_GetSysClockFreq>
 8100446:	4602      	mov	r2, r0
 8100448:	4b15      	ldr	r3, [pc, #84]	; (81004a0 <HAL_Init+0xa8>)
 810044a:	699b      	ldr	r3, [r3, #24]
 810044c:	0a1b      	lsrs	r3, r3, #8
 810044e:	f003 030f 	and.w	r3, r3, #15
 8100452:	4915      	ldr	r1, [pc, #84]	; (81004a8 <HAL_Init+0xb0>)
 8100454:	5ccb      	ldrb	r3, [r1, r3]
 8100456:	f003 031f 	and.w	r3, r3, #31
 810045a:	fa22 f303 	lsr.w	r3, r2, r3
 810045e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100460:	4b0f      	ldr	r3, [pc, #60]	; (81004a0 <HAL_Init+0xa8>)
 8100462:	699b      	ldr	r3, [r3, #24]
 8100464:	f003 030f 	and.w	r3, r3, #15
 8100468:	4a0f      	ldr	r2, [pc, #60]	; (81004a8 <HAL_Init+0xb0>)
 810046a:	5cd3      	ldrb	r3, [r2, r3]
 810046c:	f003 031f 	and.w	r3, r3, #31
 8100470:	687a      	ldr	r2, [r7, #4]
 8100472:	fa22 f303 	lsr.w	r3, r2, r3
 8100476:	4a0d      	ldr	r2, [pc, #52]	; (81004ac <HAL_Init+0xb4>)
 8100478:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810047a:	4b0c      	ldr	r3, [pc, #48]	; (81004ac <HAL_Init+0xb4>)
 810047c:	681b      	ldr	r3, [r3, #0]
 810047e:	4a0c      	ldr	r2, [pc, #48]	; (81004b0 <HAL_Init+0xb8>)
 8100480:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100482:	2000      	movs	r0, #0
 8100484:	f000 f816 	bl	81004b4 <HAL_InitTick>
 8100488:	4603      	mov	r3, r0
 810048a:	2b00      	cmp	r3, #0
 810048c:	d001      	beq.n	8100492 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810048e:	2301      	movs	r3, #1
 8100490:	e002      	b.n	8100498 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100492:	f7ff ff43 	bl	810031c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100496:	2300      	movs	r3, #0
}
 8100498:	4618      	mov	r0, r3
 810049a:	3708      	adds	r7, #8
 810049c:	46bd      	mov	sp, r7
 810049e:	bd80      	pop	{r7, pc}
 81004a0:	58024400 	.word	0x58024400
 81004a4:	40024400 	.word	0x40024400
 81004a8:	08100a64 	.word	0x08100a64
 81004ac:	10000004 	.word	0x10000004
 81004b0:	10000000 	.word	0x10000000

081004b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81004b4:	b580      	push	{r7, lr}
 81004b6:	b082      	sub	sp, #8
 81004b8:	af00      	add	r7, sp, #0
 81004ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81004bc:	4b15      	ldr	r3, [pc, #84]	; (8100514 <HAL_InitTick+0x60>)
 81004be:	781b      	ldrb	r3, [r3, #0]
 81004c0:	2b00      	cmp	r3, #0
 81004c2:	d101      	bne.n	81004c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81004c4:	2301      	movs	r3, #1
 81004c6:	e021      	b.n	810050c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81004c8:	4b13      	ldr	r3, [pc, #76]	; (8100518 <HAL_InitTick+0x64>)
 81004ca:	681a      	ldr	r2, [r3, #0]
 81004cc:	4b11      	ldr	r3, [pc, #68]	; (8100514 <HAL_InitTick+0x60>)
 81004ce:	781b      	ldrb	r3, [r3, #0]
 81004d0:	4619      	mov	r1, r3
 81004d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81004d6:	fbb3 f3f1 	udiv	r3, r3, r1
 81004da:	fbb2 f3f3 	udiv	r3, r2, r3
 81004de:	4618      	mov	r0, r3
 81004e0:	f000 f909 	bl	81006f6 <HAL_SYSTICK_Config>
 81004e4:	4603      	mov	r3, r0
 81004e6:	2b00      	cmp	r3, #0
 81004e8:	d001      	beq.n	81004ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81004ea:	2301      	movs	r3, #1
 81004ec:	e00e      	b.n	810050c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81004ee:	687b      	ldr	r3, [r7, #4]
 81004f0:	2b0f      	cmp	r3, #15
 81004f2:	d80a      	bhi.n	810050a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81004f4:	2200      	movs	r2, #0
 81004f6:	6879      	ldr	r1, [r7, #4]
 81004f8:	f04f 30ff 	mov.w	r0, #4294967295
 81004fc:	f000 f8e1 	bl	81006c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100500:	4a06      	ldr	r2, [pc, #24]	; (810051c <HAL_InitTick+0x68>)
 8100502:	687b      	ldr	r3, [r7, #4]
 8100504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100506:	2300      	movs	r3, #0
 8100508:	e000      	b.n	810050c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810050a:	2301      	movs	r3, #1
}
 810050c:	4618      	mov	r0, r3
 810050e:	3708      	adds	r7, #8
 8100510:	46bd      	mov	sp, r7
 8100512:	bd80      	pop	{r7, pc}
 8100514:	1000000c 	.word	0x1000000c
 8100518:	10000000 	.word	0x10000000
 810051c:	10000008 	.word	0x10000008

08100520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100520:	b480      	push	{r7}
 8100522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100524:	4b06      	ldr	r3, [pc, #24]	; (8100540 <HAL_IncTick+0x20>)
 8100526:	781b      	ldrb	r3, [r3, #0]
 8100528:	461a      	mov	r2, r3
 810052a:	4b06      	ldr	r3, [pc, #24]	; (8100544 <HAL_IncTick+0x24>)
 810052c:	681b      	ldr	r3, [r3, #0]
 810052e:	4413      	add	r3, r2
 8100530:	4a04      	ldr	r2, [pc, #16]	; (8100544 <HAL_IncTick+0x24>)
 8100532:	6013      	str	r3, [r2, #0]
}
 8100534:	bf00      	nop
 8100536:	46bd      	mov	sp, r7
 8100538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810053c:	4770      	bx	lr
 810053e:	bf00      	nop
 8100540:	1000000c 	.word	0x1000000c
 8100544:	1000002c 	.word	0x1000002c

08100548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100548:	b480      	push	{r7}
 810054a:	b085      	sub	sp, #20
 810054c:	af00      	add	r7, sp, #0
 810054e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100550:	687b      	ldr	r3, [r7, #4]
 8100552:	f003 0307 	and.w	r3, r3, #7
 8100556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100558:	4b0c      	ldr	r3, [pc, #48]	; (810058c <__NVIC_SetPriorityGrouping+0x44>)
 810055a:	68db      	ldr	r3, [r3, #12]
 810055c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810055e:	68ba      	ldr	r2, [r7, #8]
 8100560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100564:	4013      	ands	r3, r2
 8100566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100568:	68fb      	ldr	r3, [r7, #12]
 810056a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810056c:	68bb      	ldr	r3, [r7, #8]
 810056e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810057a:	4a04      	ldr	r2, [pc, #16]	; (810058c <__NVIC_SetPriorityGrouping+0x44>)
 810057c:	68bb      	ldr	r3, [r7, #8]
 810057e:	60d3      	str	r3, [r2, #12]
}
 8100580:	bf00      	nop
 8100582:	3714      	adds	r7, #20
 8100584:	46bd      	mov	sp, r7
 8100586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810058a:	4770      	bx	lr
 810058c:	e000ed00 	.word	0xe000ed00

08100590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100590:	b480      	push	{r7}
 8100592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100594:	4b04      	ldr	r3, [pc, #16]	; (81005a8 <__NVIC_GetPriorityGrouping+0x18>)
 8100596:	68db      	ldr	r3, [r3, #12]
 8100598:	0a1b      	lsrs	r3, r3, #8
 810059a:	f003 0307 	and.w	r3, r3, #7
}
 810059e:	4618      	mov	r0, r3
 81005a0:	46bd      	mov	sp, r7
 81005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a6:	4770      	bx	lr
 81005a8:	e000ed00 	.word	0xe000ed00

081005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81005ac:	b480      	push	{r7}
 81005ae:	b083      	sub	sp, #12
 81005b0:	af00      	add	r7, sp, #0
 81005b2:	4603      	mov	r3, r0
 81005b4:	6039      	str	r1, [r7, #0]
 81005b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81005b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81005bc:	2b00      	cmp	r3, #0
 81005be:	db0a      	blt.n	81005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81005c0:	683b      	ldr	r3, [r7, #0]
 81005c2:	b2da      	uxtb	r2, r3
 81005c4:	490c      	ldr	r1, [pc, #48]	; (81005f8 <__NVIC_SetPriority+0x4c>)
 81005c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81005ca:	0112      	lsls	r2, r2, #4
 81005cc:	b2d2      	uxtb	r2, r2
 81005ce:	440b      	add	r3, r1
 81005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81005d4:	e00a      	b.n	81005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81005d6:	683b      	ldr	r3, [r7, #0]
 81005d8:	b2da      	uxtb	r2, r3
 81005da:	4908      	ldr	r1, [pc, #32]	; (81005fc <__NVIC_SetPriority+0x50>)
 81005dc:	88fb      	ldrh	r3, [r7, #6]
 81005de:	f003 030f 	and.w	r3, r3, #15
 81005e2:	3b04      	subs	r3, #4
 81005e4:	0112      	lsls	r2, r2, #4
 81005e6:	b2d2      	uxtb	r2, r2
 81005e8:	440b      	add	r3, r1
 81005ea:	761a      	strb	r2, [r3, #24]
}
 81005ec:	bf00      	nop
 81005ee:	370c      	adds	r7, #12
 81005f0:	46bd      	mov	sp, r7
 81005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f6:	4770      	bx	lr
 81005f8:	e000e100 	.word	0xe000e100
 81005fc:	e000ed00 	.word	0xe000ed00

08100600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100600:	b480      	push	{r7}
 8100602:	b089      	sub	sp, #36	; 0x24
 8100604:	af00      	add	r7, sp, #0
 8100606:	60f8      	str	r0, [r7, #12]
 8100608:	60b9      	str	r1, [r7, #8]
 810060a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810060c:	68fb      	ldr	r3, [r7, #12]
 810060e:	f003 0307 	and.w	r3, r3, #7
 8100612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100614:	69fb      	ldr	r3, [r7, #28]
 8100616:	f1c3 0307 	rsb	r3, r3, #7
 810061a:	2b04      	cmp	r3, #4
 810061c:	bf28      	it	cs
 810061e:	2304      	movcs	r3, #4
 8100620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100622:	69fb      	ldr	r3, [r7, #28]
 8100624:	3304      	adds	r3, #4
 8100626:	2b06      	cmp	r3, #6
 8100628:	d902      	bls.n	8100630 <NVIC_EncodePriority+0x30>
 810062a:	69fb      	ldr	r3, [r7, #28]
 810062c:	3b03      	subs	r3, #3
 810062e:	e000      	b.n	8100632 <NVIC_EncodePriority+0x32>
 8100630:	2300      	movs	r3, #0
 8100632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100634:	f04f 32ff 	mov.w	r2, #4294967295
 8100638:	69bb      	ldr	r3, [r7, #24]
 810063a:	fa02 f303 	lsl.w	r3, r2, r3
 810063e:	43da      	mvns	r2, r3
 8100640:	68bb      	ldr	r3, [r7, #8]
 8100642:	401a      	ands	r2, r3
 8100644:	697b      	ldr	r3, [r7, #20]
 8100646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100648:	f04f 31ff 	mov.w	r1, #4294967295
 810064c:	697b      	ldr	r3, [r7, #20]
 810064e:	fa01 f303 	lsl.w	r3, r1, r3
 8100652:	43d9      	mvns	r1, r3
 8100654:	687b      	ldr	r3, [r7, #4]
 8100656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100658:	4313      	orrs	r3, r2
         );
}
 810065a:	4618      	mov	r0, r3
 810065c:	3724      	adds	r7, #36	; 0x24
 810065e:	46bd      	mov	sp, r7
 8100660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100664:	4770      	bx	lr
	...

08100668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100668:	b580      	push	{r7, lr}
 810066a:	b082      	sub	sp, #8
 810066c:	af00      	add	r7, sp, #0
 810066e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100670:	687b      	ldr	r3, [r7, #4]
 8100672:	3b01      	subs	r3, #1
 8100674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100678:	d301      	bcc.n	810067e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810067a:	2301      	movs	r3, #1
 810067c:	e00f      	b.n	810069e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810067e:	4a0a      	ldr	r2, [pc, #40]	; (81006a8 <SysTick_Config+0x40>)
 8100680:	687b      	ldr	r3, [r7, #4]
 8100682:	3b01      	subs	r3, #1
 8100684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100686:	210f      	movs	r1, #15
 8100688:	f04f 30ff 	mov.w	r0, #4294967295
 810068c:	f7ff ff8e 	bl	81005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100690:	4b05      	ldr	r3, [pc, #20]	; (81006a8 <SysTick_Config+0x40>)
 8100692:	2200      	movs	r2, #0
 8100694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100696:	4b04      	ldr	r3, [pc, #16]	; (81006a8 <SysTick_Config+0x40>)
 8100698:	2207      	movs	r2, #7
 810069a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810069c:	2300      	movs	r3, #0
}
 810069e:	4618      	mov	r0, r3
 81006a0:	3708      	adds	r7, #8
 81006a2:	46bd      	mov	sp, r7
 81006a4:	bd80      	pop	{r7, pc}
 81006a6:	bf00      	nop
 81006a8:	e000e010 	.word	0xe000e010

081006ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006ac:	b580      	push	{r7, lr}
 81006ae:	b082      	sub	sp, #8
 81006b0:	af00      	add	r7, sp, #0
 81006b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81006b4:	6878      	ldr	r0, [r7, #4]
 81006b6:	f7ff ff47 	bl	8100548 <__NVIC_SetPriorityGrouping>
}
 81006ba:	bf00      	nop
 81006bc:	3708      	adds	r7, #8
 81006be:	46bd      	mov	sp, r7
 81006c0:	bd80      	pop	{r7, pc}

081006c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006c2:	b580      	push	{r7, lr}
 81006c4:	b086      	sub	sp, #24
 81006c6:	af00      	add	r7, sp, #0
 81006c8:	4603      	mov	r3, r0
 81006ca:	60b9      	str	r1, [r7, #8]
 81006cc:	607a      	str	r2, [r7, #4]
 81006ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81006d0:	f7ff ff5e 	bl	8100590 <__NVIC_GetPriorityGrouping>
 81006d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81006d6:	687a      	ldr	r2, [r7, #4]
 81006d8:	68b9      	ldr	r1, [r7, #8]
 81006da:	6978      	ldr	r0, [r7, #20]
 81006dc:	f7ff ff90 	bl	8100600 <NVIC_EncodePriority>
 81006e0:	4602      	mov	r2, r0
 81006e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81006e6:	4611      	mov	r1, r2
 81006e8:	4618      	mov	r0, r3
 81006ea:	f7ff ff5f 	bl	81005ac <__NVIC_SetPriority>
}
 81006ee:	bf00      	nop
 81006f0:	3718      	adds	r7, #24
 81006f2:	46bd      	mov	sp, r7
 81006f4:	bd80      	pop	{r7, pc}

081006f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81006f6:	b580      	push	{r7, lr}
 81006f8:	b082      	sub	sp, #8
 81006fa:	af00      	add	r7, sp, #0
 81006fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81006fe:	6878      	ldr	r0, [r7, #4]
 8100700:	f7ff ffb2 	bl	8100668 <SysTick_Config>
 8100704:	4603      	mov	r3, r0
}
 8100706:	4618      	mov	r0, r3
 8100708:	3708      	adds	r7, #8
 810070a:	46bd      	mov	sp, r7
 810070c:	bd80      	pop	{r7, pc}
	...

08100710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100710:	b480      	push	{r7}
 8100712:	b089      	sub	sp, #36	; 0x24
 8100714:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100716:	4bb3      	ldr	r3, [pc, #716]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100718:	691b      	ldr	r3, [r3, #16]
 810071a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810071e:	2b18      	cmp	r3, #24
 8100720:	f200 8155 	bhi.w	81009ce <HAL_RCC_GetSysClockFreq+0x2be>
 8100724:	a201      	add	r2, pc, #4	; (adr r2, 810072c <HAL_RCC_GetSysClockFreq+0x1c>)
 8100726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810072a:	bf00      	nop
 810072c:	08100791 	.word	0x08100791
 8100730:	081009cf 	.word	0x081009cf
 8100734:	081009cf 	.word	0x081009cf
 8100738:	081009cf 	.word	0x081009cf
 810073c:	081009cf 	.word	0x081009cf
 8100740:	081009cf 	.word	0x081009cf
 8100744:	081009cf 	.word	0x081009cf
 8100748:	081009cf 	.word	0x081009cf
 810074c:	081007b7 	.word	0x081007b7
 8100750:	081009cf 	.word	0x081009cf
 8100754:	081009cf 	.word	0x081009cf
 8100758:	081009cf 	.word	0x081009cf
 810075c:	081009cf 	.word	0x081009cf
 8100760:	081009cf 	.word	0x081009cf
 8100764:	081009cf 	.word	0x081009cf
 8100768:	081009cf 	.word	0x081009cf
 810076c:	081007bd 	.word	0x081007bd
 8100770:	081009cf 	.word	0x081009cf
 8100774:	081009cf 	.word	0x081009cf
 8100778:	081009cf 	.word	0x081009cf
 810077c:	081009cf 	.word	0x081009cf
 8100780:	081009cf 	.word	0x081009cf
 8100784:	081009cf 	.word	0x081009cf
 8100788:	081009cf 	.word	0x081009cf
 810078c:	081007c3 	.word	0x081007c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100790:	4b94      	ldr	r3, [pc, #592]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100792:	681b      	ldr	r3, [r3, #0]
 8100794:	f003 0320 	and.w	r3, r3, #32
 8100798:	2b00      	cmp	r3, #0
 810079a:	d009      	beq.n	81007b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810079c:	4b91      	ldr	r3, [pc, #580]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810079e:	681b      	ldr	r3, [r3, #0]
 81007a0:	08db      	lsrs	r3, r3, #3
 81007a2:	f003 0303 	and.w	r3, r3, #3
 81007a6:	4a90      	ldr	r2, [pc, #576]	; (81009e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81007a8:	fa22 f303 	lsr.w	r3, r2, r3
 81007ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81007ae:	e111      	b.n	81009d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81007b0:	4b8d      	ldr	r3, [pc, #564]	; (81009e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81007b2:	61bb      	str	r3, [r7, #24]
    break;
 81007b4:	e10e      	b.n	81009d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81007b6:	4b8d      	ldr	r3, [pc, #564]	; (81009ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81007b8:	61bb      	str	r3, [r7, #24]
    break;
 81007ba:	e10b      	b.n	81009d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81007bc:	4b8c      	ldr	r3, [pc, #560]	; (81009f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81007be:	61bb      	str	r3, [r7, #24]
    break;
 81007c0:	e108      	b.n	81009d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81007c2:	4b88      	ldr	r3, [pc, #544]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81007c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81007c6:	f003 0303 	and.w	r3, r3, #3
 81007ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81007cc:	4b85      	ldr	r3, [pc, #532]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81007d0:	091b      	lsrs	r3, r3, #4
 81007d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81007d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81007d8:	4b82      	ldr	r3, [pc, #520]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81007da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81007dc:	f003 0301 	and.w	r3, r3, #1
 81007e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81007e2:	4b80      	ldr	r3, [pc, #512]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81007e6:	08db      	lsrs	r3, r3, #3
 81007e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81007ec:	68fa      	ldr	r2, [r7, #12]
 81007ee:	fb02 f303 	mul.w	r3, r2, r3
 81007f2:	ee07 3a90 	vmov	s15, r3
 81007f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81007fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81007fe:	693b      	ldr	r3, [r7, #16]
 8100800:	2b00      	cmp	r3, #0
 8100802:	f000 80e1 	beq.w	81009c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100806:	697b      	ldr	r3, [r7, #20]
 8100808:	2b02      	cmp	r3, #2
 810080a:	f000 8083 	beq.w	8100914 <HAL_RCC_GetSysClockFreq+0x204>
 810080e:	697b      	ldr	r3, [r7, #20]
 8100810:	2b02      	cmp	r3, #2
 8100812:	f200 80a1 	bhi.w	8100958 <HAL_RCC_GetSysClockFreq+0x248>
 8100816:	697b      	ldr	r3, [r7, #20]
 8100818:	2b00      	cmp	r3, #0
 810081a:	d003      	beq.n	8100824 <HAL_RCC_GetSysClockFreq+0x114>
 810081c:	697b      	ldr	r3, [r7, #20]
 810081e:	2b01      	cmp	r3, #1
 8100820:	d056      	beq.n	81008d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100822:	e099      	b.n	8100958 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100824:	4b6f      	ldr	r3, [pc, #444]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100826:	681b      	ldr	r3, [r3, #0]
 8100828:	f003 0320 	and.w	r3, r3, #32
 810082c:	2b00      	cmp	r3, #0
 810082e:	d02d      	beq.n	810088c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100830:	4b6c      	ldr	r3, [pc, #432]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100832:	681b      	ldr	r3, [r3, #0]
 8100834:	08db      	lsrs	r3, r3, #3
 8100836:	f003 0303 	and.w	r3, r3, #3
 810083a:	4a6b      	ldr	r2, [pc, #428]	; (81009e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810083c:	fa22 f303 	lsr.w	r3, r2, r3
 8100840:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	ee07 3a90 	vmov	s15, r3
 8100848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810084c:	693b      	ldr	r3, [r7, #16]
 810084e:	ee07 3a90 	vmov	s15, r3
 8100852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810085a:	4b62      	ldr	r3, [pc, #392]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810085e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100862:	ee07 3a90 	vmov	s15, r3
 8100866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810086a:	ed97 6a02 	vldr	s12, [r7, #8]
 810086e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81009f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810087a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810087e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810088a:	e087      	b.n	810099c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810088c:	693b      	ldr	r3, [r7, #16]
 810088e:	ee07 3a90 	vmov	s15, r3
 8100892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100896:	eddf 6a58 	vldr	s13, [pc, #352]	; 81009f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810089a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810089e:	4b51      	ldr	r3, [pc, #324]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81008a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81008a6:	ee07 3a90 	vmov	s15, r3
 81008aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81008ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81008b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 81009f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81008b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81008ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81008be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81008c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81008c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81008ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81008ce:	e065      	b.n	810099c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81008d0:	693b      	ldr	r3, [r7, #16]
 81008d2:	ee07 3a90 	vmov	s15, r3
 81008d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81008da:	eddf 6a48 	vldr	s13, [pc, #288]	; 81009fc <HAL_RCC_GetSysClockFreq+0x2ec>
 81008de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81008e2:	4b40      	ldr	r3, [pc, #256]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81008e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81008ea:	ee07 3a90 	vmov	s15, r3
 81008ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81008f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81008f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81009f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81008fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81008fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810090a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810090e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100912:	e043      	b.n	810099c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100914:	693b      	ldr	r3, [r7, #16]
 8100916:	ee07 3a90 	vmov	s15, r3
 810091a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810091e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8100a00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100926:	4b2f      	ldr	r3, [pc, #188]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810092a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810092e:	ee07 3a90 	vmov	s15, r3
 8100932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100936:	ed97 6a02 	vldr	s12, [r7, #8]
 810093a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81009f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810093e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810094a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810094e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100956:	e021      	b.n	810099c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100958:	693b      	ldr	r3, [r7, #16]
 810095a:	ee07 3a90 	vmov	s15, r3
 810095e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100962:	eddf 6a26 	vldr	s13, [pc, #152]	; 81009fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8100966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810096a:	4b1e      	ldr	r3, [pc, #120]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810096e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100972:	ee07 3a90 	vmov	s15, r3
 8100976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810097a:	ed97 6a02 	vldr	s12, [r7, #8]
 810097e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81009f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810098a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810098e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810099a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810099c:	4b11      	ldr	r3, [pc, #68]	; (81009e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81009a0:	0a5b      	lsrs	r3, r3, #9
 81009a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81009a6:	3301      	adds	r3, #1
 81009a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81009aa:	683b      	ldr	r3, [r7, #0]
 81009ac:	ee07 3a90 	vmov	s15, r3
 81009b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81009b4:	edd7 6a07 	vldr	s13, [r7, #28]
 81009b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81009bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81009c0:	ee17 3a90 	vmov	r3, s15
 81009c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81009c6:	e005      	b.n	81009d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81009c8:	2300      	movs	r3, #0
 81009ca:	61bb      	str	r3, [r7, #24]
    break;
 81009cc:	e002      	b.n	81009d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81009ce:	4b07      	ldr	r3, [pc, #28]	; (81009ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81009d0:	61bb      	str	r3, [r7, #24]
    break;
 81009d2:	bf00      	nop
  }

  return sysclockfreq;
 81009d4:	69bb      	ldr	r3, [r7, #24]
}
 81009d6:	4618      	mov	r0, r3
 81009d8:	3724      	adds	r7, #36	; 0x24
 81009da:	46bd      	mov	sp, r7
 81009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e0:	4770      	bx	lr
 81009e2:	bf00      	nop
 81009e4:	58024400 	.word	0x58024400
 81009e8:	03d09000 	.word	0x03d09000
 81009ec:	003d0900 	.word	0x003d0900
 81009f0:	017d7840 	.word	0x017d7840
 81009f4:	46000000 	.word	0x46000000
 81009f8:	4c742400 	.word	0x4c742400
 81009fc:	4a742400 	.word	0x4a742400
 8100a00:	4bbebc20 	.word	0x4bbebc20

08100a04 <__libc_init_array>:
 8100a04:	b570      	push	{r4, r5, r6, lr}
 8100a06:	4d0d      	ldr	r5, [pc, #52]	; (8100a3c <__libc_init_array+0x38>)
 8100a08:	4c0d      	ldr	r4, [pc, #52]	; (8100a40 <__libc_init_array+0x3c>)
 8100a0a:	1b64      	subs	r4, r4, r5
 8100a0c:	10a4      	asrs	r4, r4, #2
 8100a0e:	2600      	movs	r6, #0
 8100a10:	42a6      	cmp	r6, r4
 8100a12:	d109      	bne.n	8100a28 <__libc_init_array+0x24>
 8100a14:	4d0b      	ldr	r5, [pc, #44]	; (8100a44 <__libc_init_array+0x40>)
 8100a16:	4c0c      	ldr	r4, [pc, #48]	; (8100a48 <__libc_init_array+0x44>)
 8100a18:	f000 f818 	bl	8100a4c <_init>
 8100a1c:	1b64      	subs	r4, r4, r5
 8100a1e:	10a4      	asrs	r4, r4, #2
 8100a20:	2600      	movs	r6, #0
 8100a22:	42a6      	cmp	r6, r4
 8100a24:	d105      	bne.n	8100a32 <__libc_init_array+0x2e>
 8100a26:	bd70      	pop	{r4, r5, r6, pc}
 8100a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8100a2c:	4798      	blx	r3
 8100a2e:	3601      	adds	r6, #1
 8100a30:	e7ee      	b.n	8100a10 <__libc_init_array+0xc>
 8100a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8100a36:	4798      	blx	r3
 8100a38:	3601      	adds	r6, #1
 8100a3a:	e7f2      	b.n	8100a22 <__libc_init_array+0x1e>
 8100a3c:	08100a74 	.word	0x08100a74
 8100a40:	08100a74 	.word	0x08100a74
 8100a44:	08100a74 	.word	0x08100a74
 8100a48:	08100a78 	.word	0x08100a78

08100a4c <_init>:
 8100a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100a4e:	bf00      	nop
 8100a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100a52:	bc08      	pop	{r3}
 8100a54:	469e      	mov	lr, r3
 8100a56:	4770      	bx	lr

08100a58 <_fini>:
 8100a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100a5a:	bf00      	nop
 8100a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100a5e:	bc08      	pop	{r3}
 8100a60:	469e      	mov	lr, r3
 8100a62:	4770      	bx	lr
