
SPI_H745_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0cc  0800a0cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0cc  0800a0cc  0001a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d4  0800a0d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800a0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  24000074  0800a150  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400039c  0800a150  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217d3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b1  00000000  00000000  00041875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00044a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00045970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a106  00000000  00000000  000467d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c3e  00000000  00000000  000808d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017fa0a  00000000  00000000  00096514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00215f1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043dc  00000000  00000000  00215f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a030 	.word	0x0800a030

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800a030 	.word	0x0800a030

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fe06 	bl	80013c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f852 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f9e0 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 f996 	bl	8000aec <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 f948 	bl	8000a54 <MX_USART3_UART_Init>
  MX_MDMA_Init();
 80007c4:	f000 f9ba 	bl	8000b3c <MX_MDMA_Init>
  MX_QUADSPI_Init();
 80007c8:	f000 f8c2 	bl	8000950 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80007cc:	f000 f8ec 	bl	80009a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  sprintf((char *)Tx_Data, "ready to send\r\n");
 80007d0:	491a      	ldr	r1, [pc, #104]	; (800083c <main+0x90>)
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <main+0x94>)
 80007d4:	f008 fffe 	bl	80097d4 <siprintf>
  HAL_SPI_Transmit_DMA(&hspi2,(uint8_t *)Tx_Data,15);
 80007d8:	220f      	movs	r2, #15
 80007da:	4919      	ldr	r1, [pc, #100]	; (8000840 <main+0x94>)
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <main+0x98>)
 80007de:	f006 fe9b 	bl	8007518 <HAL_SPI_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pin_status= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <main+0x9c>)
 80007e8:	f003 fc94 	bl	8004114 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <main+0xa0>)
 80007f2:	701a      	strb	r2, [r3, #0]

	  if (pin_status)
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <main+0xa0>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d007      	beq.n	800080c <main+0x60>
	  {
		  HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)Rx_Data, 15);
 80007fc:	220f      	movs	r2, #15
 80007fe:	4914      	ldr	r1, [pc, #80]	; (8000850 <main+0xa4>)
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <main+0x98>)
 8000802:	f006 ffd3 	bl	80077ac <HAL_SPI_Receive_DMA>
//		  sprintf((char *)Tx_Data, "data send toA\r\n");
//		  HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)Tx_Data, 15);
          flag=TRUE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0xa8>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
		 // HAL_SPI_Transmit(&hspi2,"A",1, 50);
	  }
	  if(flag)
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <main+0xa8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00d      	beq.n	8000830 <main+0x84>
	  {
		  HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)Rx_Data, 15);
 8000814:	220f      	movs	r2, #15
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <main+0xa4>)
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <main+0x98>)
 800081a:	f006 ffc7 	bl	80077ac <HAL_SPI_Receive_DMA>
		  HAL_UART_Transmit(&huart3, Rx_Data, sizeof(Rx_Data), 50);
 800081e:	2332      	movs	r3, #50	; 0x32
 8000820:	2214      	movs	r2, #20
 8000822:	490b      	ldr	r1, [pc, #44]	; (8000850 <main+0xa4>)
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <main+0xac>)
 8000826:	f007 fef4 	bl	8008612 <HAL_UART_Transmit>
		  flag=FALSE;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <main+0xa8>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000834:	f000 fe56 	bl	80014e4 <HAL_Delay>
	  pin_status= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000838:	e7d3      	b.n	80007e2 <main+0x36>
 800083a:	bf00      	nop
 800083c:	0800a048 	.word	0x0800a048
 8000840:	24000090 	.word	0x24000090
 8000844:	240000c8 	.word	0x240000c8
 8000848:	58020800 	.word	0x58020800
 800084c:	240000b9 	.word	0x240000b9
 8000850:	240000a4 	.word	0x240000a4
 8000854:	240000b8 	.word	0x240000b8
 8000858:	240001bc 	.word	0x240001bc

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	; 0x70
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	224c      	movs	r2, #76	; 0x4c
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f008 ffaa 	bl	80097c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f008 ffa4 	bl	80097c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800087c:	2004      	movs	r0, #4
 800087e:	f003 fedb 	bl	8004638 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <SystemClock_Config+0xec>)
 8000888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <SystemClock_Config+0xec>)
 800088c:	f023 0301 	bic.w	r3, r3, #1
 8000890:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <SystemClock_Config+0xec>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <SystemClock_Config+0xf0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a2a      	ldr	r2, [pc, #168]	; (800094c <SystemClock_Config+0xf0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <SystemClock_Config+0xf0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b4:	bf00      	nop
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <SystemClock_Config+0xf0>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c2:	d1f8      	bne.n	80008b6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008d6:	2305      	movs	r3, #5
 80008d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008ea:	2308      	movs	r3, #8
 80008ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 f9ec 	bl	8004cd8 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000906:	f000 f9ef 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	233f      	movs	r3, #63	; 0x3f
 800090c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000916:	2308      	movs	r3, #8
 8000918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fdfd 	bl	8005530 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800093c:	f000 f9d4 	bl	8000ce8 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3770      	adds	r7, #112	; 0x70
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400
 800094c:	58024800 	.word	0x58024800

08000950 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <MX_QUADSPI_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 200;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 800095c:	22c8      	movs	r2, #200	; 0xc8
 800095e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 8000962:	2201      	movs	r2, #1
 8000964:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_QUADSPI_Init+0x50>)
 800098c:	f003 feae 	bl	80046ec <HAL_QSPI_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 f9a7 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2400033c 	.word	0x2400033c
 80009a4:	52005000 	.word	0x52005000

080009a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <MX_SPI2_Init+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_SPI2_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_SPI2_Init+0xa4>)
 8000a3a:	f006 fc67 	bl	800730c <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a44:	f000 f950 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240000c8 	.word	0x240000c8
 8000a50:	40003800 	.word	0x40003800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f007 fd68 	bl	8008572 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f91e 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f008 fd94 	bl	80095dc <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f915 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f008 fdc9 	bl	8009658 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f90c 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f008 fd4a 	bl	800956a <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f904 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240001bc 	.word	0x240001bc
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_DMA_Init+0x4c>)
 8000af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <MX_DMA_Init+0x4c>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_DMA_Init+0x4c>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	200b      	movs	r0, #11
 8000b16:	f000 fdf0 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b1a:	200b      	movs	r0, #11
 8000b1c:	f000 fe07 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	200c      	movs	r0, #12
 8000b26:	f000 fde8 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f000 fdff 	bl	800172e <HAL_NVIC_EnableIRQ>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024400 	.word	0x58024400

08000b3c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_MDMA_Init+0x3c>)
 8000b44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b48:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <MX_MDMA_Init+0x3c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_MDMA_Init+0x3c>)
 8000b54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	207a      	movs	r0, #122	; 0x7a
 8000b66:	f000 fdc8 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000b6a:	207a      	movs	r0, #122	; 0x7a
 8000b6c:	f000 fddf 	bl	800172e <HAL_NVIC_EnableIRQ>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a4f      	ldr	r2, [pc, #316]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a39      	ldr	r2, [pc, #228]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_GPIO_Init+0x15c>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6a:	481c      	ldr	r0, [pc, #112]	; (8000cdc <MX_GPIO_Init+0x160>)
 8000c6c:	f003 fa6a 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2104      	movs	r1, #4
 8000c74:	481a      	ldr	r0, [pc, #104]	; (8000ce0 <MX_GPIO_Init+0x164>)
 8000c76:	f003 fa65 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <MX_GPIO_Init+0x168>)
 8000c90:	f003 f890 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_GPIO_Init+0x160>)
 8000cae:	f003 f881 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_GPIO_Init+0x164>)
 8000cca:	f003 f873 	bl	8003db4 <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3730      	adds	r7, #48	; 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58022000 	.word	0x58022000
 8000ce0:	58022400 	.word	0x58022400
 8000ce4:	58020800 	.word	0x58020800

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x30>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	58024400 	.word	0x58024400

08000d28 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	; 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	22bc      	movs	r2, #188	; 0xbc
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f008 fd3b 	bl	80097c4 <memset>
  if(hqspi->Instance==QUADSPI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6a      	ldr	r2, [pc, #424]	; (8000efc <HAL_QSPI_MspInit+0x1d4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 80cd 	bne.w	8000ef4 <HAL_QSPI_MspInit+0x1cc>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 ff6d 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000d74:	f7ff ffb8 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d78:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000d7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d7e:	4a60      	ldr	r2, [pc, #384]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d88:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000d8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a58      	ldr	r2, [pc, #352]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a49      	ldr	r2, [pc, #292]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <HAL_QSPI_MspInit+0x1d8>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    PC9     ------> QUADSPI_BK1_IO0
    PF10     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000df0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e0a:	2309      	movs	r3, #9
 8000e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e14:	4619      	mov	r1, r3
 8000e16:	483b      	ldr	r0, [pc, #236]	; (8000f04 <HAL_QSPI_MspInit+0x1dc>)
 8000e18:	f002 ffcc 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e34:	230a      	movs	r3, #10
 8000e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4831      	ldr	r0, [pc, #196]	; (8000f08 <HAL_QSPI_MspInit+0x1e0>)
 8000e42:	f002 ffb7 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e60:	2309      	movs	r3, #9
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4827      	ldr	r0, [pc, #156]	; (8000f0c <HAL_QSPI_MspInit+0x1e4>)
 8000e6e:	f002 ffa1 	bl	8003db4 <HAL_GPIO_Init>

    /* QUADSPI MDMA Init */
    /* QUADSPI_FIFO_TH Init */
    hmdma_quadspi_fifo_th.Instance = MDMA_Channel0;
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_QSPI_MspInit+0x1ec>)
 8000e76:	601a      	str	r2, [r3, #0]
    hmdma_quadspi_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    hmdma_quadspi_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    hmdma_quadspi_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
    hmdma_quadspi_fifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	615a      	str	r2, [r3, #20]
    hmdma_quadspi_fifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e92:	2208      	movs	r2, #8
 8000e94:	619a      	str	r2, [r3, #24]
    hmdma_quadspi_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
    hmdma_quadspi_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
    hmdma_quadspi_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_quadspi_fifo_th.Init.BufferTransferLength = 1;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_quadspi_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_quadspi_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_quadspi_fifo_th.Init.SourceBlockAddressOffset = 0;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_quadspi_fifo_th.Init.DestBlockAddressOffset = 0;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_quadspi_fifo_th) != HAL_OK)
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000eca:	f003 f954 	bl	8004176 <HAL_MDMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_QSPI_MspInit+0x1b0>
    {
      Error_Handler();
 8000ed4:	f7ff ff08 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hqspi,hmdma,hmdma_quadspi_fifo_th);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_QSPI_MspInit+0x1e8>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	205c      	movs	r0, #92	; 0x5c
 8000eea:	f000 fc06 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000eee:	205c      	movs	r0, #92	; 0x5c
 8000ef0:	f000 fc1d 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	37e8      	adds	r7, #232	; 0xe8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	52005000 	.word	0x52005000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58021400 	.word	0x58021400
 8000f10:	24000150 	.word	0x24000150
 8000f14:	52000040 	.word	0x52000040

08000f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ba      	sub	sp, #232	; 0xe8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	22bc      	movs	r2, #188	; 0xbc
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f008 fc43 	bl	80097c4 <memset>
  if(hspi->Instance==SPI2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a85      	ldr	r2, [pc, #532]	; (8001158 <HAL_SPI_MspInit+0x240>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	f040 8102 	bne.w	800114e <HAL_SPI_MspInit+0x236>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fe75 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000f64:	f7ff fec0 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f68:	4b7c      	ldr	r3, [pc, #496]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f6e:	4a7b      	ldr	r2, [pc, #492]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	4a73      	ldr	r2, [pc, #460]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	4b6d      	ldr	r3, [pc, #436]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a6c      	ldr	r2, [pc, #432]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b69      	ldr	r3, [pc, #420]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fc2:	4b66      	ldr	r3, [pc, #408]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a64      	ldr	r2, [pc, #400]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b62      	ldr	r3, [pc, #392]	; (800115c <HAL_SPI_MspInit+0x244>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001002:	4619      	mov	r1, r3
 8001004:	4856      	ldr	r0, [pc, #344]	; (8001160 <HAL_SPI_MspInit+0x248>)
 8001006:	f002 fed5 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800100a:	2308      	movs	r3, #8
 800100c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001022:	2305      	movs	r3, #5
 8001024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800102c:	4619      	mov	r1, r3
 800102e:	484d      	ldr	r0, [pc, #308]	; (8001164 <HAL_SPI_MspInit+0x24c>)
 8001030:	f002 fec0 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001034:	2304      	movs	r3, #4
 8001036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104c:	2305      	movs	r3, #5
 800104e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001052:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001056:	4619      	mov	r1, r3
 8001058:	4843      	ldr	r0, [pc, #268]	; (8001168 <HAL_SPI_MspInit+0x250>)
 800105a:	f002 feab 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800105e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001078:	2305      	movs	r3, #5
 800107a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001082:	4619      	mov	r1, r3
 8001084:	4836      	ldr	r0, [pc, #216]	; (8001160 <HAL_SPI_MspInit+0x248>)
 8001086:	f002 fe95 	bl	8003db4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream0;
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_SPI_MspInit+0x254>)
 800108c:	4a38      	ldr	r2, [pc, #224]	; (8001170 <HAL_SPI_MspInit+0x258>)
 800108e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_SPI_MspInit+0x254>)
 8001092:	2227      	movs	r2, #39	; 0x27
 8001094:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <HAL_SPI_MspInit+0x254>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_SPI_MspInit+0x254>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b0:	4b2e      	ldr	r3, [pc, #184]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80010c8:	4828      	ldr	r0, [pc, #160]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010ca:	f000 fb4b 	bl	8001764 <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_SPI_MspInit+0x1c0>
    {
      Error_Handler();
 80010d4:	f7ff fe08 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_SPI_MspInit+0x254>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 80010e6:	4a24      	ldr	r2, [pc, #144]	; (8001178 <HAL_SPI_MspInit+0x260>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 80010ec:	2228      	movs	r2, #40	; 0x28
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 80010f2:	2240      	movs	r2, #64	; 0x40
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 8001124:	f000 fb1e 	bl	8001764 <HAL_DMA_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_SPI_MspInit+0x21a>
    {
      Error_Handler();
 800112e:	f7ff fddb 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 8001136:	679a      	str	r2, [r3, #120]	; 0x78
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_SPI_MspInit+0x25c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2024      	movs	r0, #36	; 0x24
 8001144:	f000 fad9 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001148:	2024      	movs	r0, #36	; 0x24
 800114a:	f000 faf0 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	37e8      	adds	r7, #232	; 0xe8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40003800 	.word	0x40003800
 800115c:	58024400 	.word	0x58024400
 8001160:	58020400 	.word	0x58020400
 8001164:	58020c00 	.word	0x58020c00
 8001168:	58022000 	.word	0x58022000
 800116c:	2400024c 	.word	0x2400024c
 8001170:	40020010 	.word	0x40020010
 8001174:	240002c4 	.word	0x240002c4
 8001178:	40020028 	.word	0x40020028

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0b8      	sub	sp, #224	; 0xe0
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	22bc      	movs	r2, #188	; 0xbc
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f008 fb11 	bl	80097c4 <memset>
  if(huart->Instance==USART3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <HAL_UART_MspInit+0xc0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d142      	bne.n	8001232 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fd44 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011c6:	f7ff fd8f 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_UART_MspInit+0xc4>)
 80011cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_UART_MspInit+0xc4>)
 80011d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0xc4>)
 80011dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0xc4>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_UART_MspInit+0xc4>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0xc4>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001206:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800120a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001220:	2307      	movs	r3, #7
 8001222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_UART_MspInit+0xc8>)
 800122e:	f002 fdc1 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	37e0      	adds	r7, #224	; 0xe0
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004800 	.word	0x40004800
 8001240:	58024400 	.word	0x58024400
 8001244:	58020400 	.word	0x58020400

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f906 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <DMA1_Stream0_IRQHandler+0x10>)
 80012a2:	f001 fa69 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400024c 	.word	0x2400024c

080012b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA1_Stream1_IRQHandler+0x10>)
 80012b6:	f001 fa5f 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	240002c4 	.word	0x240002c4

080012c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <SPI2_IRQHandler+0x10>)
 80012ca:	f006 fda1 	bl	8007e10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000c8 	.word	0x240000c8

080012d8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <QUADSPI_IRQHandler+0x10>)
 80012de:	f003 fa79 	bl	80047d4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400033c 	.word	0x2400033c

080012ec <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_quadspi_fifo_th);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <MDMA_IRQHandler+0x10>)
 80012f2:	f002 ffb3 	bl	800425c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000150 	.word	0x24000150

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f008 fa1e 	bl	8009770 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	24080000 	.word	0x24080000
 8001360:	00000400 	.word	0x00000400
 8001364:	240000bc 	.word	0x240000bc
 8001368:	240003a0 	.word	0x240003a0

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001370:	f7ff f982 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f008 f9ef 	bl	800977c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff fa05 	bl	80007ac <main>
  bx  lr
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013ac:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80013b0:	0800a0dc 	.word	0x0800a0dc
  ldr r2, =_sbss
 80013b4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80013b8:	2400039c 	.word	0x2400039c

080013bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC3_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f000 f98c 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013cc:	f004 fa66 	bl	800589c <HAL_RCC_GetSysClockFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_Init+0x68>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	4913      	ldr	r1, [pc, #76]	; (800142c <HAL_Init+0x6c>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_Init+0x68>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_Init+0x6c>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_Init+0x70>)
 8001402:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_Init+0x74>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f814 	bl	8001438 <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e002      	b.n	8001420 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800141a:	f7ff fc6b 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	58024400 	.word	0x58024400
 800142c:	0800a058 	.word	0x0800a058
 8001430:	24000004 	.word	0x24000004
 8001434:	24000000 	.word	0x24000000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_InitTick+0x60>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e021      	b.n	8001490 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_InitTick+0x64>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_InitTick+0x60>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f971 	bl	800174a <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f93b 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x68>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2400000c 	.word	0x2400000c
 800149c:	24000000 	.word	0x24000000
 80014a0:	24000008 	.word	0x24000008

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2400000c 	.word	0x2400000c
 80014c8:	24000388 	.word	0x24000388

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	24000388 	.word	0x24000388

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2400000c 	.word	0x2400000c

0800152c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetREVID+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0c1b      	lsrs	r3, r3, #16
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	5c001000 	.word	0x5c001000

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <__NVIC_SetPriorityGrouping+0x40>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	4313      	orrs	r3, r2
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x40>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	05fa0000 	.word	0x05fa0000

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff40 	bl	800158c <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff90 	bl	8001638 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5f 	bl	80015e4 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff33 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffa4 	bl	80016a0 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff feae 	bl	80014cc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e316      	b.n	8001daa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a66      	ldr	r2, [pc, #408]	; (800191c <HAL_DMA_Init+0x1b8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d04a      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a65      	ldr	r2, [pc, #404]	; (8001920 <HAL_DMA_Init+0x1bc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d045      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_DMA_Init+0x1c0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d040      	beq.n	800181c <HAL_DMA_Init+0xb8>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a62      	ldr	r2, [pc, #392]	; (8001928 <HAL_DMA_Init+0x1c4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d03b      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a60      	ldr	r2, [pc, #384]	; (800192c <HAL_DMA_Init+0x1c8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d036      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5f      	ldr	r2, [pc, #380]	; (8001930 <HAL_DMA_Init+0x1cc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d031      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_DMA_Init+0x1d0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d02c      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_DMA_Init+0x1d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d027      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_DMA_Init+0x1d8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d022      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_DMA_Init+0x1dc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d01d      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a57      	ldr	r2, [pc, #348]	; (8001944 <HAL_DMA_Init+0x1e0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d018      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a56      	ldr	r2, [pc, #344]	; (8001948 <HAL_DMA_Init+0x1e4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_DMA_Init+0x1e8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00e      	beq.n	800181c <HAL_DMA_Init+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a53      	ldr	r2, [pc, #332]	; (8001950 <HAL_DMA_Init+0x1ec>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d009      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_DMA_Init+0x1f0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d004      	beq.n	800181c <HAL_DMA_Init+0xb8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_DMA_Init+0x1f4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Init+0xbc>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_DMA_Init+0xbe>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 813b 	beq.w	8001a9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a37      	ldr	r2, [pc, #220]	; (800191c <HAL_DMA_Init+0x1b8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d04a      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a36      	ldr	r2, [pc, #216]	; (8001920 <HAL_DMA_Init+0x1bc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d045      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_DMA_Init+0x1c0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d040      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a33      	ldr	r2, [pc, #204]	; (8001928 <HAL_DMA_Init+0x1c4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d03b      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a31      	ldr	r2, [pc, #196]	; (800192c <HAL_DMA_Init+0x1c8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d036      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <HAL_DMA_Init+0x1cc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d031      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_DMA_Init+0x1d0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d02c      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_DMA_Init+0x1d4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d027      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2b      	ldr	r2, [pc, #172]	; (800193c <HAL_DMA_Init+0x1d8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d022      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_DMA_Init+0x1dc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d01d      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_DMA_Init+0x1e0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d018      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a27      	ldr	r2, [pc, #156]	; (8001948 <HAL_DMA_Init+0x1e4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_DMA_Init+0x1e8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00e      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_DMA_Init+0x1ec>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <HAL_DMA_Init+0x1f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_Init+0x174>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_DMA_Init+0x1f4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d108      	bne.n	80018ea <HAL_DMA_Init+0x186>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e007      	b.n	80018fa <HAL_DMA_Init+0x196>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018fa:	e02f      	b.n	800195c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fc:	f7ff fde6 	bl	80014cc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d928      	bls.n	800195c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e246      	b.n	8001daa <HAL_DMA_Init+0x646>
 800191c:	40020010 	.word	0x40020010
 8001920:	40020028 	.word	0x40020028
 8001924:	40020040 	.word	0x40020040
 8001928:	40020058 	.word	0x40020058
 800192c:	40020070 	.word	0x40020070
 8001930:	40020088 	.word	0x40020088
 8001934:	400200a0 	.word	0x400200a0
 8001938:	400200b8 	.word	0x400200b8
 800193c:	40020410 	.word	0x40020410
 8001940:	40020428 	.word	0x40020428
 8001944:	40020440 	.word	0x40020440
 8001948:	40020458 	.word	0x40020458
 800194c:	40020470 	.word	0x40020470
 8001950:	40020488 	.word	0x40020488
 8001954:	400204a0 	.word	0x400204a0
 8001958:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1c8      	bne.n	80018fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <HAL_DMA_Init+0x420>)
 8001976:	4013      	ands	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001982:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d107      	bne.n	80019c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4313      	orrs	r3, r2
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019c0:	4b71      	ldr	r3, [pc, #452]	; (8001b88 <HAL_DMA_Init+0x424>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b71      	ldr	r3, [pc, #452]	; (8001b8c <HAL_DMA_Init+0x428>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019cc:	d328      	bcc.n	8001a20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b28      	cmp	r3, #40	; 0x28
 80019d4:	d903      	bls.n	80019de <HAL_DMA_Init+0x27a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b2e      	cmp	r3, #46	; 0x2e
 80019dc:	d917      	bls.n	8001a0e <HAL_DMA_Init+0x2aa>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b3e      	cmp	r3, #62	; 0x3e
 80019e4:	d903      	bls.n	80019ee <HAL_DMA_Init+0x28a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b42      	cmp	r3, #66	; 0x42
 80019ec:	d90f      	bls.n	8001a0e <HAL_DMA_Init+0x2aa>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b46      	cmp	r3, #70	; 0x46
 80019f4:	d903      	bls.n	80019fe <HAL_DMA_Init+0x29a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b48      	cmp	r3, #72	; 0x48
 80019fc:	d907      	bls.n	8001a0e <HAL_DMA_Init+0x2aa>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b4e      	cmp	r3, #78	; 0x4e
 8001a04:	d905      	bls.n	8001a12 <HAL_DMA_Init+0x2ae>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b52      	cmp	r3, #82	; 0x52
 8001a0c:	d801      	bhi.n	8001a12 <HAL_DMA_Init+0x2ae>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_Init+0x2b0>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f023 0307 	bic.w	r3, r3, #7
 8001a36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d117      	bne.n	8001a7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f002 f81f 	bl	8003aa0 <DMA_CheckFifoParam>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e197      	b.n	8001daa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f001 ff5a 	bl	800393c <DMA_CalcBaseAndBitshift>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	223f      	movs	r2, #63	; 0x3f
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	e0cd      	b.n	8001c3a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <HAL_DMA_Init+0x42c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <HAL_DMA_Init+0x430>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a38      	ldr	r2, [pc, #224]	; (8001b98 <HAL_DMA_Init+0x434>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d018      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <HAL_DMA_Init+0x438>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a35      	ldr	r2, [pc, #212]	; (8001ba0 <HAL_DMA_Init+0x43c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <HAL_DMA_Init+0x440>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_DMA_Init+0x444>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_DMA_Init+0x38a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a30      	ldr	r2, [pc, #192]	; (8001bac <HAL_DMA_Init+0x448>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_DMA_Init+0x38e>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_DMA_Init+0x390>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8097 	beq.w	8001c28 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <HAL_DMA_Init+0x42c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d021      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_DMA_Init+0x430>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01c      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <HAL_DMA_Init+0x434>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d017      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <HAL_DMA_Init+0x438>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d012      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_DMA_Init+0x43c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_DMA_Init+0x440>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d008      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_DMA_Init+0x444>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d003      	beq.n	8001b48 <HAL_DMA_Init+0x3e4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_DMA_Init+0x448>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_DMA_Init+0x44c>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b40      	cmp	r3, #64	; 0x40
 8001b70:	d020      	beq.n	8001bb4 <HAL_DMA_Init+0x450>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b80      	cmp	r3, #128	; 0x80
 8001b78:	d102      	bne.n	8001b80 <HAL_DMA_Init+0x41c>
 8001b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b7e:	e01a      	b.n	8001bb6 <HAL_DMA_Init+0x452>
 8001b80:	2300      	movs	r3, #0
 8001b82:	e018      	b.n	8001bb6 <HAL_DMA_Init+0x452>
 8001b84:	fe10803f 	.word	0xfe10803f
 8001b88:	5c001000 	.word	0x5c001000
 8001b8c:	ffff0000 	.word	0xffff0000
 8001b90:	58025408 	.word	0x58025408
 8001b94:	5802541c 	.word	0x5802541c
 8001b98:	58025430 	.word	0x58025430
 8001b9c:	58025444 	.word	0x58025444
 8001ba0:	58025458 	.word	0x58025458
 8001ba4:	5802546c 	.word	0x5802546c
 8001ba8:	58025480 	.word	0x58025480
 8001bac:	58025494 	.word	0x58025494
 8001bb0:	fffe000f 	.word	0xfffe000f
 8001bb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68d2      	ldr	r2, [r2, #12]
 8001bba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001be4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_DMA_Init+0x650>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_DMA_Init+0x654>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	009a      	lsls	r2, r3, #2
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 fe95 	bl	800393c <DMA_CalcBaseAndBitshift>
 8001c12:	4603      	mov	r3, r0
 8001c14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e008      	b.n	8001c3a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0b7      	b.n	8001daa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5f      	ldr	r2, [pc, #380]	; (8001dbc <HAL_DMA_Init+0x658>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d072      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5d      	ldr	r2, [pc, #372]	; (8001dc0 <HAL_DMA_Init+0x65c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d06d      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a5c      	ldr	r2, [pc, #368]	; (8001dc4 <HAL_DMA_Init+0x660>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d068      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_DMA_Init+0x664>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d063      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a59      	ldr	r2, [pc, #356]	; (8001dcc <HAL_DMA_Init+0x668>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d05e      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_DMA_Init+0x66c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d059      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a56      	ldr	r2, [pc, #344]	; (8001dd4 <HAL_DMA_Init+0x670>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d054      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <HAL_DMA_Init+0x674>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d04f      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a53      	ldr	r2, [pc, #332]	; (8001ddc <HAL_DMA_Init+0x678>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d04a      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a51      	ldr	r2, [pc, #324]	; (8001de0 <HAL_DMA_Init+0x67c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d045      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <HAL_DMA_Init+0x680>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d040      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a4e      	ldr	r2, [pc, #312]	; (8001de8 <HAL_DMA_Init+0x684>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d03b      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4d      	ldr	r2, [pc, #308]	; (8001dec <HAL_DMA_Init+0x688>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d036      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_DMA_Init+0x68c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d031      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_DMA_Init+0x690>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d02c      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a48      	ldr	r2, [pc, #288]	; (8001df8 <HAL_DMA_Init+0x694>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d027      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a47      	ldr	r2, [pc, #284]	; (8001dfc <HAL_DMA_Init+0x698>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d022      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_DMA_Init+0x69c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01d      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_DMA_Init+0x6a0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d018      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <HAL_DMA_Init+0x6a4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_DMA_Init+0x6a8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00e      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <HAL_DMA_Init+0x6ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <HAL_DMA_Init+0x6b0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_DMA_Init+0x6b4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_Init+0x5ca>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_DMA_Init+0x5cc>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d032      	beq.n	8001d9a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f001 ff2f 	bl	8003b98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b80      	cmp	r3, #128	; 0x80
 8001d40:	d102      	bne.n	8001d48 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d010      	beq.n	8001d88 <HAL_DMA_Init+0x624>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d80c      	bhi.n	8001d88 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f001 ffac 	bl	8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	e008      	b.n	8001d9a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	a7fdabf8 	.word	0xa7fdabf8
 8001db8:	cccccccd 	.word	0xcccccccd
 8001dbc:	40020010 	.word	0x40020010
 8001dc0:	40020028 	.word	0x40020028
 8001dc4:	40020040 	.word	0x40020040
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	40020070 	.word	0x40020070
 8001dd0:	40020088 	.word	0x40020088
 8001dd4:	400200a0 	.word	0x400200a0
 8001dd8:	400200b8 	.word	0x400200b8
 8001ddc:	40020410 	.word	0x40020410
 8001de0:	40020428 	.word	0x40020428
 8001de4:	40020440 	.word	0x40020440
 8001de8:	40020458 	.word	0x40020458
 8001dec:	40020470 	.word	0x40020470
 8001df0:	40020488 	.word	0x40020488
 8001df4:	400204a0 	.word	0x400204a0
 8001df8:	400204b8 	.word	0x400204b8
 8001dfc:	58025408 	.word	0x58025408
 8001e00:	5802541c 	.word	0x5802541c
 8001e04:	58025430 	.word	0x58025430
 8001e08:	58025444 	.word	0x58025444
 8001e0c:	58025458 	.word	0x58025458
 8001e10:	5802546c 	.word	0x5802546c
 8001e14:	58025480 	.word	0x58025480
 8001e18:	58025494 	.word	0x58025494

08001e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e226      	b.n	8002286 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Start_IT+0x2a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e21f      	b.n	8002286 <HAL_DMA_Start_IT+0x46a>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 820a 	bne.w	8002270 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a68      	ldr	r2, [pc, #416]	; (8002010 <HAL_DMA_Start_IT+0x1f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04a      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_DMA_Start_IT+0x1f8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d045      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_DMA_Start_IT+0x1fc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d040      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a63      	ldr	r2, [pc, #396]	; (800201c <HAL_DMA_Start_IT+0x200>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d03b      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a62      	ldr	r2, [pc, #392]	; (8002020 <HAL_DMA_Start_IT+0x204>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d036      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a60      	ldr	r2, [pc, #384]	; (8002024 <HAL_DMA_Start_IT+0x208>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d031      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <HAL_DMA_Start_IT+0x20c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d02c      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	; (800202c <HAL_DMA_Start_IT+0x210>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d027      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_DMA_Start_IT+0x214>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d022      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_DMA_Start_IT+0x218>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01d      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a59      	ldr	r2, [pc, #356]	; (8002038 <HAL_DMA_Start_IT+0x21c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d018      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_DMA_Start_IT+0x220>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_DMA_Start_IT+0x224>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00e      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_DMA_Start_IT+0x228>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_DMA_Start_IT+0x22c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d004      	beq.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_DMA_Start_IT+0x230>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d108      	bne.n	8001f1c <HAL_DMA_Start_IT+0x100>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e007      	b.n	8001f2c <HAL_DMA_Start_IT+0x110>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f001 fb56 	bl	80035e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_DMA_Start_IT+0x1f4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d04a      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a33      	ldr	r2, [pc, #204]	; (8002014 <HAL_DMA_Start_IT+0x1f8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d045      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_DMA_Start_IT+0x1fc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d040      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a30      	ldr	r2, [pc, #192]	; (800201c <HAL_DMA_Start_IT+0x200>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d03b      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_DMA_Start_IT+0x204>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d036      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <HAL_DMA_Start_IT+0x208>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d031      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <HAL_DMA_Start_IT+0x20c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02c      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_DMA_Start_IT+0x210>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d027      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_DMA_Start_IT+0x214>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_DMA_Start_IT+0x218>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01d      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	; (8002038 <HAL_DMA_Start_IT+0x21c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d018      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_DMA_Start_IT+0x220>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_DMA_Start_IT+0x224>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00e      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_DMA_Start_IT+0x228>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_DMA_Start_IT+0x22c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x1bc>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_DMA_Start_IT+0x230>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_DMA_Start_IT+0x1c0>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_DMA_Start_IT+0x1c2>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d036      	beq.n	8002050 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 021e 	bic.w	r2, r3, #30
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0216 	orr.w	r2, r2, #22
 8001ff4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03e      	beq.n	800207c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0208 	orr.w	r2, r2, #8
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e035      	b.n	800207c <HAL_DMA_Start_IT+0x260>
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 020e 	bic.w	r2, r3, #14
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 020a 	orr.w	r2, r2, #10
 8002062:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0204 	orr.w	r2, r2, #4
 800207a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a83      	ldr	r2, [pc, #524]	; (8002290 <HAL_DMA_Start_IT+0x474>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d072      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a82      	ldr	r2, [pc, #520]	; (8002294 <HAL_DMA_Start_IT+0x478>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d06d      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a80      	ldr	r2, [pc, #512]	; (8002298 <HAL_DMA_Start_IT+0x47c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d068      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7f      	ldr	r2, [pc, #508]	; (800229c <HAL_DMA_Start_IT+0x480>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d063      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a7d      	ldr	r2, [pc, #500]	; (80022a0 <HAL_DMA_Start_IT+0x484>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d05e      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7c      	ldr	r2, [pc, #496]	; (80022a4 <HAL_DMA_Start_IT+0x488>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d059      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_DMA_Start_IT+0x48c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d054      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a79      	ldr	r2, [pc, #484]	; (80022ac <HAL_DMA_Start_IT+0x490>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04f      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a77      	ldr	r2, [pc, #476]	; (80022b0 <HAL_DMA_Start_IT+0x494>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04a      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a76      	ldr	r2, [pc, #472]	; (80022b4 <HAL_DMA_Start_IT+0x498>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d045      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a74      	ldr	r2, [pc, #464]	; (80022b8 <HAL_DMA_Start_IT+0x49c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d040      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a73      	ldr	r2, [pc, #460]	; (80022bc <HAL_DMA_Start_IT+0x4a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d03b      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a71      	ldr	r2, [pc, #452]	; (80022c0 <HAL_DMA_Start_IT+0x4a4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d036      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a70      	ldr	r2, [pc, #448]	; (80022c4 <HAL_DMA_Start_IT+0x4a8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d031      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6e      	ldr	r2, [pc, #440]	; (80022c8 <HAL_DMA_Start_IT+0x4ac>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02c      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6d      	ldr	r2, [pc, #436]	; (80022cc <HAL_DMA_Start_IT+0x4b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d027      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6b      	ldr	r2, [pc, #428]	; (80022d0 <HAL_DMA_Start_IT+0x4b4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d022      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <HAL_DMA_Start_IT+0x4b8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d01d      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <HAL_DMA_Start_IT+0x4bc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d018      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_DMA_Start_IT+0x4c0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_DMA_Start_IT+0x4c4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a64      	ldr	r2, [pc, #400]	; (80022e4 <HAL_DMA_Start_IT+0x4c8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a62      	ldr	r2, [pc, #392]	; (80022e8 <HAL_DMA_Start_IT+0x4cc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Start_IT+0x350>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a61      	ldr	r2, [pc, #388]	; (80022ec <HAL_DMA_Start_IT+0x4d0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Start_IT+0x354>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_DMA_Start_IT+0x356>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01a      	beq.n	80021ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002192:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a37      	ldr	r2, [pc, #220]	; (8002290 <HAL_DMA_Start_IT+0x474>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04a      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a36      	ldr	r2, [pc, #216]	; (8002294 <HAL_DMA_Start_IT+0x478>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d045      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_DMA_Start_IT+0x47c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d040      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a33      	ldr	r2, [pc, #204]	; (800229c <HAL_DMA_Start_IT+0x480>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d03b      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a31      	ldr	r2, [pc, #196]	; (80022a0 <HAL_DMA_Start_IT+0x484>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d036      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <HAL_DMA_Start_IT+0x488>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d031      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_DMA_Start_IT+0x48c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d02c      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <HAL_DMA_Start_IT+0x490>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d027      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_DMA_Start_IT+0x494>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d022      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_Start_IT+0x498>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d01d      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_DMA_Start_IT+0x49c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d018      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_Start_IT+0x4a0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d013      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_DMA_Start_IT+0x4a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00e      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_Start_IT+0x4a8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_DMA_Start_IT+0x4ac>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Start_IT+0x430>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_Start_IT+0x4b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d108      	bne.n	800225e <HAL_DMA_Start_IT+0x442>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e012      	b.n	8002284 <HAL_DMA_Start_IT+0x468>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e009      	b.n	8002284 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002284:	7dfb      	ldrb	r3, [r7, #23]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40020010 	.word	0x40020010
 8002294:	40020028 	.word	0x40020028
 8002298:	40020040 	.word	0x40020040
 800229c:	40020058 	.word	0x40020058
 80022a0:	40020070 	.word	0x40020070
 80022a4:	40020088 	.word	0x40020088
 80022a8:	400200a0 	.word	0x400200a0
 80022ac:	400200b8 	.word	0x400200b8
 80022b0:	40020410 	.word	0x40020410
 80022b4:	40020428 	.word	0x40020428
 80022b8:	40020440 	.word	0x40020440
 80022bc:	40020458 	.word	0x40020458
 80022c0:	40020470 	.word	0x40020470
 80022c4:	40020488 	.word	0x40020488
 80022c8:	400204a0 	.word	0x400204a0
 80022cc:	400204b8 	.word	0x400204b8
 80022d0:	58025408 	.word	0x58025408
 80022d4:	5802541c 	.word	0x5802541c
 80022d8:	58025430 	.word	0x58025430
 80022dc:	58025444 	.word	0x58025444
 80022e0:	58025458 	.word	0x58025458
 80022e4:	5802546c 	.word	0x5802546c
 80022e8:	58025480 	.word	0x58025480
 80022ec:	58025494 	.word	0x58025494

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e205      	b.n	800270e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e1fa      	b.n	800270e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8c      	ldr	r2, [pc, #560]	; (8002550 <HAL_DMA_Abort_IT+0x260>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04a      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8b      	ldr	r2, [pc, #556]	; (8002554 <HAL_DMA_Abort_IT+0x264>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d045      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a89      	ldr	r2, [pc, #548]	; (8002558 <HAL_DMA_Abort_IT+0x268>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d040      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a88      	ldr	r2, [pc, #544]	; (800255c <HAL_DMA_Abort_IT+0x26c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d03b      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a86      	ldr	r2, [pc, #536]	; (8002560 <HAL_DMA_Abort_IT+0x270>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d036      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a85      	ldr	r2, [pc, #532]	; (8002564 <HAL_DMA_Abort_IT+0x274>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a83      	ldr	r2, [pc, #524]	; (8002568 <HAL_DMA_Abort_IT+0x278>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02c      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a82      	ldr	r2, [pc, #520]	; (800256c <HAL_DMA_Abort_IT+0x27c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d027      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_DMA_Abort_IT+0x280>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_DMA_Abort_IT+0x284>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01d      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7d      	ldr	r2, [pc, #500]	; (8002578 <HAL_DMA_Abort_IT+0x288>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d018      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7c      	ldr	r2, [pc, #496]	; (800257c <HAL_DMA_Abort_IT+0x28c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7a      	ldr	r2, [pc, #488]	; (8002580 <HAL_DMA_Abort_IT+0x290>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a79      	ldr	r2, [pc, #484]	; (8002584 <HAL_DMA_Abort_IT+0x294>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_DMA_Abort_IT+0x298>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a76      	ldr	r2, [pc, #472]	; (800258c <HAL_DMA_Abort_IT+0x29c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Abort_IT+0xcc>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_DMA_Abort_IT+0xce>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d065      	beq.n	800248e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a60      	ldr	r2, [pc, #384]	; (8002550 <HAL_DMA_Abort_IT+0x260>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04a      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5e      	ldr	r2, [pc, #376]	; (8002554 <HAL_DMA_Abort_IT+0x264>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d045      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <HAL_DMA_Abort_IT+0x268>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d040      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5b      	ldr	r2, [pc, #364]	; (800255c <HAL_DMA_Abort_IT+0x26c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d03b      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_DMA_Abort_IT+0x270>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_DMA_Abort_IT+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a57      	ldr	r2, [pc, #348]	; (8002568 <HAL_DMA_Abort_IT+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d02c      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_DMA_Abort_IT+0x27c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_DMA_Abort_IT+0x280>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_DMA_Abort_IT+0x284>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_DMA_Abort_IT+0x288>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_DMA_Abort_IT+0x28c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_DMA_Abort_IT+0x290>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <HAL_DMA_Abort_IT+0x294>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <HAL_DMA_Abort_IT+0x298>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_Abort_IT+0x17a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_DMA_Abort_IT+0x29c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d108      	bne.n	800247c <HAL_DMA_Abort_IT+0x18c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e147      	b.n	800270c <HAL_DMA_Abort_IT+0x41c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e13e      	b.n	800270c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020e 	bic.w	r2, r2, #14
 800249c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_DMA_Abort_IT+0x260>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04a      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_DMA_Abort_IT+0x264>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d045      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_DMA_Abort_IT+0x268>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d040      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_DMA_Abort_IT+0x26c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d03b      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a25      	ldr	r2, [pc, #148]	; (8002560 <HAL_DMA_Abort_IT+0x270>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d036      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <HAL_DMA_Abort_IT+0x274>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d031      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <HAL_DMA_Abort_IT+0x278>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d02c      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_DMA_Abort_IT+0x27c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d027      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_DMA_Abort_IT+0x280>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d022      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_DMA_Abort_IT+0x284>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01d      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_DMA_Abort_IT+0x288>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d018      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_DMA_Abort_IT+0x28c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_DMA_Abort_IT+0x290>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_DMA_Abort_IT+0x294>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_DMA_Abort_IT+0x298>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_DMA_Abort_IT+0x24e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_DMA_Abort_IT+0x29c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d128      	bne.n	8002590 <HAL_DMA_Abort_IT+0x2a0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e027      	b.n	80025a0 <HAL_DMA_Abort_IT+0x2b0>
 8002550:	40020010 	.word	0x40020010
 8002554:	40020028 	.word	0x40020028
 8002558:	40020040 	.word	0x40020040
 800255c:	40020058 	.word	0x40020058
 8002560:	40020070 	.word	0x40020070
 8002564:	40020088 	.word	0x40020088
 8002568:	400200a0 	.word	0x400200a0
 800256c:	400200b8 	.word	0x400200b8
 8002570:	40020410 	.word	0x40020410
 8002574:	40020428 	.word	0x40020428
 8002578:	40020440 	.word	0x40020440
 800257c:	40020458 	.word	0x40020458
 8002580:	40020470 	.word	0x40020470
 8002584:	40020488 	.word	0x40020488
 8002588:	400204a0 	.word	0x400204a0
 800258c:	400204b8 	.word	0x400204b8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_DMA_Abort_IT+0x428>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d072      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5b      	ldr	r2, [pc, #364]	; (800271c <HAL_DMA_Abort_IT+0x42c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d06d      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a59      	ldr	r2, [pc, #356]	; (8002720 <HAL_DMA_Abort_IT+0x430>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d068      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_DMA_Abort_IT+0x434>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d063      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_DMA_Abort_IT+0x438>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d05e      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a55      	ldr	r2, [pc, #340]	; (800272c <HAL_DMA_Abort_IT+0x43c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d059      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a53      	ldr	r2, [pc, #332]	; (8002730 <HAL_DMA_Abort_IT+0x440>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d054      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_DMA_Abort_IT+0x444>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04f      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a50      	ldr	r2, [pc, #320]	; (8002738 <HAL_DMA_Abort_IT+0x448>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4f      	ldr	r2, [pc, #316]	; (800273c <HAL_DMA_Abort_IT+0x44c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <HAL_DMA_Abort_IT+0x450>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4c      	ldr	r2, [pc, #304]	; (8002744 <HAL_DMA_Abort_IT+0x454>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_DMA_Abort_IT+0x458>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a49      	ldr	r2, [pc, #292]	; (800274c <HAL_DMA_Abort_IT+0x45c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a47      	ldr	r2, [pc, #284]	; (8002750 <HAL_DMA_Abort_IT+0x460>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a46      	ldr	r2, [pc, #280]	; (8002754 <HAL_DMA_Abort_IT+0x464>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a44      	ldr	r2, [pc, #272]	; (8002758 <HAL_DMA_Abort_IT+0x468>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a43      	ldr	r2, [pc, #268]	; (800275c <HAL_DMA_Abort_IT+0x46c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a41      	ldr	r2, [pc, #260]	; (8002760 <HAL_DMA_Abort_IT+0x470>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a40      	ldr	r2, [pc, #256]	; (8002764 <HAL_DMA_Abort_IT+0x474>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <HAL_DMA_Abort_IT+0x478>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a3d      	ldr	r2, [pc, #244]	; (800276c <HAL_DMA_Abort_IT+0x47c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_DMA_Abort_IT+0x480>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Abort_IT+0x3a0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_DMA_Abort_IT+0x484>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Abort_IT+0x3a4>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_DMA_Abort_IT+0x3a6>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2201      	movs	r2, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020010 	.word	0x40020010
 800271c:	40020028 	.word	0x40020028
 8002720:	40020040 	.word	0x40020040
 8002724:	40020058 	.word	0x40020058
 8002728:	40020070 	.word	0x40020070
 800272c:	40020088 	.word	0x40020088
 8002730:	400200a0 	.word	0x400200a0
 8002734:	400200b8 	.word	0x400200b8
 8002738:	40020410 	.word	0x40020410
 800273c:	40020428 	.word	0x40020428
 8002740:	40020440 	.word	0x40020440
 8002744:	40020458 	.word	0x40020458
 8002748:	40020470 	.word	0x40020470
 800274c:	40020488 	.word	0x40020488
 8002750:	400204a0 	.word	0x400204a0
 8002754:	400204b8 	.word	0x400204b8
 8002758:	58025408 	.word	0x58025408
 800275c:	5802541c 	.word	0x5802541c
 8002760:	58025430 	.word	0x58025430
 8002764:	58025444 	.word	0x58025444
 8002768:	58025458 	.word	0x58025458
 800276c:	5802546c 	.word	0x5802546c
 8002770:	58025480 	.word	0x58025480
 8002774:	58025494 	.word	0x58025494

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002784:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_DMA_IRQHandler+0x1ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a67      	ldr	r2, [pc, #412]	; (8002928 <HAL_DMA_IRQHandler+0x1b0>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_DMA_IRQHandler+0x1b4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04a      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_DMA_IRQHandler+0x1b8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d045      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5c      	ldr	r2, [pc, #368]	; (8002934 <HAL_DMA_IRQHandler+0x1bc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d040      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_DMA_IRQHandler+0x1c0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d03b      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a59      	ldr	r2, [pc, #356]	; (800293c <HAL_DMA_IRQHandler+0x1c4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d036      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_DMA_IRQHandler+0x1c8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d031      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_DMA_IRQHandler+0x1cc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d02c      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_DMA_IRQHandler+0x1d0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d027      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a53      	ldr	r2, [pc, #332]	; (800294c <HAL_DMA_IRQHandler+0x1d4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a51      	ldr	r2, [pc, #324]	; (8002950 <HAL_DMA_IRQHandler+0x1d8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01d      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a50      	ldr	r2, [pc, #320]	; (8002954 <HAL_DMA_IRQHandler+0x1dc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d018      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a4e      	ldr	r2, [pc, #312]	; (8002958 <HAL_DMA_IRQHandler+0x1e0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4d      	ldr	r2, [pc, #308]	; (800295c <HAL_DMA_IRQHandler+0x1e4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4b      	ldr	r2, [pc, #300]	; (8002960 <HAL_DMA_IRQHandler+0x1e8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a4a      	ldr	r2, [pc, #296]	; (8002964 <HAL_DMA_IRQHandler+0x1ec>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_DMA_IRQHandler+0xd2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_DMA_IRQHandler+0x1f0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_DMA_IRQHandler+0xd6>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_DMA_IRQHandler+0xd8>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 842b 	beq.w	80030ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a2 	beq.w	80029b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2e      	ldr	r2, [pc, #184]	; (800292c <HAL_DMA_IRQHandler+0x1b4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <HAL_DMA_IRQHandler+0x1b8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <HAL_DMA_IRQHandler+0x1bc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <HAL_DMA_IRQHandler+0x1c0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_DMA_IRQHandler+0x1c4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_DMA_IRQHandler+0x1c8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <HAL_DMA_IRQHandler+0x1cc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a24      	ldr	r2, [pc, #144]	; (8002948 <HAL_DMA_IRQHandler+0x1d0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_DMA_IRQHandler+0x1d4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_DMA_IRQHandler+0x1d8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_DMA_IRQHandler+0x1dc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_DMA_IRQHandler+0x1e0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_DMA_IRQHandler+0x1e4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_DMA_IRQHandler+0x1e8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_DMA_IRQHandler+0x1ec>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_IRQHandler+0x194>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_DMA_IRQHandler+0x1f0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d12f      	bne.n	800296c <HAL_DMA_IRQHandler+0x1f4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	e02e      	b.n	8002980 <HAL_DMA_IRQHandler+0x208>
 8002922:	bf00      	nop
 8002924:	24000000 	.word	0x24000000
 8002928:	1b4e81b5 	.word	0x1b4e81b5
 800292c:	40020010 	.word	0x40020010
 8002930:	40020028 	.word	0x40020028
 8002934:	40020040 	.word	0x40020040
 8002938:	40020058 	.word	0x40020058
 800293c:	40020070 	.word	0x40020070
 8002940:	40020088 	.word	0x40020088
 8002944:	400200a0 	.word	0x400200a0
 8002948:	400200b8 	.word	0x400200b8
 800294c:	40020410 	.word	0x40020410
 8002950:	40020428 	.word	0x40020428
 8002954:	40020440 	.word	0x40020440
 8002958:	40020458 	.word	0x40020458
 800295c:	40020470 	.word	0x40020470
 8002960:	40020488 	.word	0x40020488
 8002964:	400204a0 	.word	0x400204a0
 8002968:	400204b8 	.word	0x400204b8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0204 	bic.w	r2, r2, #4
 8002992:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2208      	movs	r2, #8
 800299e:	409a      	lsls	r2, r3
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d06e      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_DMA_IRQHandler+0x3f8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04a      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a67      	ldr	r2, [pc, #412]	; (8002b74 <HAL_DMA_IRQHandler+0x3fc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d045      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a66      	ldr	r2, [pc, #408]	; (8002b78 <HAL_DMA_IRQHandler+0x400>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d040      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a64      	ldr	r2, [pc, #400]	; (8002b7c <HAL_DMA_IRQHandler+0x404>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d03b      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a63      	ldr	r2, [pc, #396]	; (8002b80 <HAL_DMA_IRQHandler+0x408>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d036      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a61      	ldr	r2, [pc, #388]	; (8002b84 <HAL_DMA_IRQHandler+0x40c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a60      	ldr	r2, [pc, #384]	; (8002b88 <HAL_DMA_IRQHandler+0x410>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d02c      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a5e      	ldr	r2, [pc, #376]	; (8002b8c <HAL_DMA_IRQHandler+0x414>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d027      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a5d      	ldr	r2, [pc, #372]	; (8002b90 <HAL_DMA_IRQHandler+0x418>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5b      	ldr	r2, [pc, #364]	; (8002b94 <HAL_DMA_IRQHandler+0x41c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_DMA_IRQHandler+0x420>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_DMA_IRQHandler+0x424>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a57      	ldr	r2, [pc, #348]	; (8002ba0 <HAL_DMA_IRQHandler+0x428>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a55      	ldr	r2, [pc, #340]	; (8002ba4 <HAL_DMA_IRQHandler+0x42c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <HAL_DMA_IRQHandler+0x430>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x2ee>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_DMA_IRQHandler+0x434>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10a      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x304>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e003      	b.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2201      	movs	r2, #1
 8002a92:	409a      	lsls	r2, r3
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f043 0202 	orr.w	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2204      	movs	r2, #4
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 808f 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <HAL_DMA_IRQHandler+0x3f8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04a      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <HAL_DMA_IRQHandler+0x3fc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <HAL_DMA_IRQHandler+0x400>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_DMA_IRQHandler+0x404>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03b      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_DMA_IRQHandler+0x408>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d036      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <HAL_DMA_IRQHandler+0x40c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <HAL_DMA_IRQHandler+0x410>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d02c      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a21      	ldr	r2, [pc, #132]	; (8002b8c <HAL_DMA_IRQHandler+0x414>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d027      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_DMA_IRQHandler+0x418>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <HAL_DMA_IRQHandler+0x41c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_DMA_IRQHandler+0x420>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <HAL_DMA_IRQHandler+0x424>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_DMA_IRQHandler+0x428>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <HAL_DMA_IRQHandler+0x42c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_DMA_IRQHandler+0x430>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3e2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <HAL_DMA_IRQHandler+0x434>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12a      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x438>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e023      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x440>
 8002b70:	40020010 	.word	0x40020010
 8002b74:	40020028 	.word	0x40020028
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	40020070 	.word	0x40020070
 8002b84:	40020088 	.word	0x40020088
 8002b88:	400200a0 	.word	0x400200a0
 8002b8c:	400200b8 	.word	0x400200b8
 8002b90:	40020410 	.word	0x40020410
 8002b94:	40020428 	.word	0x40020428
 8002b98:	40020440 	.word	0x40020440
 8002b9c:	40020458 	.word	0x40020458
 8002ba0:	40020470 	.word	0x40020470
 8002ba4:	40020488 	.word	0x40020488
 8002ba8:	400204a0 	.word	0x400204a0
 8002bac:	400204b8 	.word	0x400204b8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2210      	movs	r2, #16
 8002be2:	409a      	lsls	r2, r3
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a6 	beq.w	8002d3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a85      	ldr	r2, [pc, #532]	; (8002e08 <HAL_DMA_IRQHandler+0x690>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04a      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a83      	ldr	r2, [pc, #524]	; (8002e0c <HAL_DMA_IRQHandler+0x694>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d045      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a82      	ldr	r2, [pc, #520]	; (8002e10 <HAL_DMA_IRQHandler+0x698>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d040      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a80      	ldr	r2, [pc, #512]	; (8002e14 <HAL_DMA_IRQHandler+0x69c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d03b      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7f      	ldr	r2, [pc, #508]	; (8002e18 <HAL_DMA_IRQHandler+0x6a0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d036      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7d      	ldr	r2, [pc, #500]	; (8002e1c <HAL_DMA_IRQHandler+0x6a4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d031      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7c      	ldr	r2, [pc, #496]	; (8002e20 <HAL_DMA_IRQHandler+0x6a8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02c      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_DMA_IRQHandler+0x6ac>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d027      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a79      	ldr	r2, [pc, #484]	; (8002e28 <HAL_DMA_IRQHandler+0x6b0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a77      	ldr	r2, [pc, #476]	; (8002e2c <HAL_DMA_IRQHandler+0x6b4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a76      	ldr	r2, [pc, #472]	; (8002e30 <HAL_DMA_IRQHandler+0x6b8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a74      	ldr	r2, [pc, #464]	; (8002e34 <HAL_DMA_IRQHandler+0x6bc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <HAL_DMA_IRQHandler+0x6c0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a71      	ldr	r2, [pc, #452]	; (8002e3c <HAL_DMA_IRQHandler+0x6c4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a70      	ldr	r2, [pc, #448]	; (8002e40 <HAL_DMA_IRQHandler+0x6c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x516>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_DMA_IRQHandler+0x6cc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x52c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e009      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x540>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d03e      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d024      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e01f      	b.n	8002d3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01b      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
 8002d0a:	e016      	b.n	8002d3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0208 	bic.w	r2, r2, #8
 8002d28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2220      	movs	r2, #32
 8002d44:	409a      	lsls	r2, r3
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8110 	beq.w	8002f70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <HAL_DMA_IRQHandler+0x690>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <HAL_DMA_IRQHandler+0x694>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <HAL_DMA_IRQHandler+0x698>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a28      	ldr	r2, [pc, #160]	; (8002e14 <HAL_DMA_IRQHandler+0x69c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <HAL_DMA_IRQHandler+0x6a0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <HAL_DMA_IRQHandler+0x6a4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_DMA_IRQHandler+0x6a8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_DMA_IRQHandler+0x6ac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <HAL_DMA_IRQHandler+0x6b0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_DMA_IRQHandler+0x6b4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_DMA_IRQHandler+0x6b8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_DMA_IRQHandler+0x6bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_DMA_IRQHandler+0x6c0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_DMA_IRQHandler+0x6c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_DMA_IRQHandler+0x6c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x678>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_DMA_IRQHandler+0x6cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d12b      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x6d0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e02a      	b.n	8002e5c <HAL_DMA_IRQHandler+0x6e4>
 8002e06:	bf00      	nop
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8087 	beq.w	8002f70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d139      	bne.n	8002ef2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0216 	bic.w	r2, r2, #22
 8002e8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_DMA_IRQHandler+0x736>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	223f      	movs	r2, #63	; 0x3f
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 834a 	beq.w	800357c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
          }
          return;
 8002ef0:	e344      	b.n	800357c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d02c      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
 8002f1e:	e027      	b.n	8002f70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d023      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e01e      	b.n	8002f70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10f      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0210 	bic.w	r2, r2, #16
 8002f4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8306 	beq.w	8003586 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8088 	beq.w	8003098 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <HAL_DMA_IRQHandler+0xa08>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04a      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a79      	ldr	r2, [pc, #484]	; (8003184 <HAL_DMA_IRQHandler+0xa0c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d045      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a77      	ldr	r2, [pc, #476]	; (8003188 <HAL_DMA_IRQHandler+0xa10>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d040      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a76      	ldr	r2, [pc, #472]	; (800318c <HAL_DMA_IRQHandler+0xa14>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d03b      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a74      	ldr	r2, [pc, #464]	; (8003190 <HAL_DMA_IRQHandler+0xa18>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d036      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_DMA_IRQHandler+0xa1c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d031      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a71      	ldr	r2, [pc, #452]	; (8003198 <HAL_DMA_IRQHandler+0xa20>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02c      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a70      	ldr	r2, [pc, #448]	; (800319c <HAL_DMA_IRQHandler+0xa24>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d027      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6e      	ldr	r2, [pc, #440]	; (80031a0 <HAL_DMA_IRQHandler+0xa28>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d022      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6d      	ldr	r2, [pc, #436]	; (80031a4 <HAL_DMA_IRQHandler+0xa2c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01d      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_DMA_IRQHandler+0xa30>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d018      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_DMA_IRQHandler+0xa34>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a68      	ldr	r2, [pc, #416]	; (80031b0 <HAL_DMA_IRQHandler+0xa38>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00e      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <HAL_DMA_IRQHandler+0xa3c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_DMA_IRQHandler+0xa40>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_DMA_IRQHandler+0x8b8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a64      	ldr	r2, [pc, #400]	; (80031bc <HAL_DMA_IRQHandler+0xa44>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d108      	bne.n	8003042 <HAL_DMA_IRQHandler+0x8ca>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e007      	b.n	8003052 <HAL_DMA_IRQHandler+0x8da>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3301      	adds	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305a:	429a      	cmp	r2, r3
 800305c:	d307      	bcc.n	800306e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f2      	bne.n	8003052 <HAL_DMA_IRQHandler+0x8da>
 800306c:	e000      	b.n	8003070 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800306e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2203      	movs	r2, #3
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003086:	e003      	b.n	8003090 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8272 	beq.w	8003586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e26c      	b.n	8003586 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a43      	ldr	r2, [pc, #268]	; (80031c0 <HAL_DMA_IRQHandler+0xa48>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <HAL_DMA_IRQHandler+0xa4c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01d      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <HAL_DMA_IRQHandler+0xa50>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <HAL_DMA_IRQHandler+0xa54>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3d      	ldr	r2, [pc, #244]	; (80031d0 <HAL_DMA_IRQHandler+0xa58>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3c      	ldr	r2, [pc, #240]	; (80031d4 <HAL_DMA_IRQHandler+0xa5c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3a      	ldr	r2, [pc, #232]	; (80031d8 <HAL_DMA_IRQHandler+0xa60>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_IRQHandler+0x984>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a39      	ldr	r2, [pc, #228]	; (80031dc <HAL_DMA_IRQHandler+0xa64>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_IRQHandler+0x988>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_DMA_IRQHandler+0x98a>
 8003100:	2300      	movs	r3, #0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 823f 	beq.w	8003586 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2204      	movs	r2, #4
 800311a:	409a      	lsls	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80cd 	beq.w	80032c0 <HAL_DMA_IRQHandler+0xb48>
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80c7 	beq.w	80032c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2204      	movs	r2, #4
 800313c:	409a      	lsls	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d049      	beq.n	80031e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8210 	beq.w	8003580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003168:	e20a      	b.n	8003580 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8206 	beq.w	8003580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317c:	e200      	b.n	8003580 <HAL_DMA_IRQHandler+0xe08>
 800317e:	bf00      	nop
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
 80031c0:	58025408 	.word	0x58025408
 80031c4:	5802541c 	.word	0x5802541c
 80031c8:	58025430 	.word	0x58025430
 80031cc:	58025444 	.word	0x58025444
 80031d0:	58025458 	.word	0x58025458
 80031d4:	5802546c 	.word	0x5802546c
 80031d8:	58025480 	.word	0x58025480
 80031dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d160      	bne.n	80032ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a8c      	ldr	r2, [pc, #560]	; (8003420 <HAL_DMA_IRQHandler+0xca8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d04a      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a8a      	ldr	r2, [pc, #552]	; (8003424 <HAL_DMA_IRQHandler+0xcac>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d045      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a89      	ldr	r2, [pc, #548]	; (8003428 <HAL_DMA_IRQHandler+0xcb0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d040      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_DMA_IRQHandler+0xcb4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d03b      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a86      	ldr	r2, [pc, #536]	; (8003430 <HAL_DMA_IRQHandler+0xcb8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d036      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a84      	ldr	r2, [pc, #528]	; (8003434 <HAL_DMA_IRQHandler+0xcbc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d031      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a83      	ldr	r2, [pc, #524]	; (8003438 <HAL_DMA_IRQHandler+0xcc0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d02c      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a81      	ldr	r2, [pc, #516]	; (800343c <HAL_DMA_IRQHandler+0xcc4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d027      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_DMA_IRQHandler+0xcc8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7e      	ldr	r2, [pc, #504]	; (8003444 <HAL_DMA_IRQHandler+0xccc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01d      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <HAL_DMA_IRQHandler+0xcd0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d018      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7b      	ldr	r2, [pc, #492]	; (800344c <HAL_DMA_IRQHandler+0xcd4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <HAL_DMA_IRQHandler+0xcd8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a78      	ldr	r2, [pc, #480]	; (8003454 <HAL_DMA_IRQHandler+0xcdc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a77      	ldr	r2, [pc, #476]	; (8003458 <HAL_DMA_IRQHandler+0xce0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_DMA_IRQHandler+0xb12>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a75      	ldr	r2, [pc, #468]	; (800345c <HAL_DMA_IRQHandler+0xce4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d108      	bne.n	800329c <HAL_DMA_IRQHandler+0xb24>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0208 	bic.w	r2, r2, #8
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e007      	b.n	80032ac <HAL_DMA_IRQHandler+0xb34>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8165 	beq.w	8003580 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032be:	e15f      	b.n	8003580 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2202      	movs	r2, #2
 80032ca:	409a      	lsls	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80c5 	beq.w	8003460 <HAL_DMA_IRQHandler+0xce8>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80bf 	beq.w	8003460 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2202      	movs	r2, #2
 80032ec:	409a      	lsls	r2, r3
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d018      	beq.n	800332e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 813a 	beq.w	8003584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003318:	e134      	b.n	8003584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8130 	beq.w	8003584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800332c:	e12a      	b.n	8003584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d168      	bne.n	800340a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a38      	ldr	r2, [pc, #224]	; (8003420 <HAL_DMA_IRQHandler+0xca8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d04a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a37      	ldr	r2, [pc, #220]	; (8003424 <HAL_DMA_IRQHandler+0xcac>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d045      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a35      	ldr	r2, [pc, #212]	; (8003428 <HAL_DMA_IRQHandler+0xcb0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d040      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a34      	ldr	r2, [pc, #208]	; (800342c <HAL_DMA_IRQHandler+0xcb4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d03b      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_DMA_IRQHandler+0xcb8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d036      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a31      	ldr	r2, [pc, #196]	; (8003434 <HAL_DMA_IRQHandler+0xcbc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d031      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <HAL_DMA_IRQHandler+0xcc0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02c      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2e      	ldr	r2, [pc, #184]	; (800343c <HAL_DMA_IRQHandler+0xcc4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d027      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_DMA_IRQHandler+0xcc8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_DMA_IRQHandler+0xccc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01d      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_DMA_IRQHandler+0xcd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_DMA_IRQHandler+0xcd4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_DMA_IRQHandler+0xcd8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_DMA_IRQHandler+0xcdc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_DMA_IRQHandler+0xce0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xc60>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_DMA_IRQHandler+0xce4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <HAL_DMA_IRQHandler+0xc72>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0214 	bic.w	r2, r2, #20
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e007      	b.n	80033fa <HAL_DMA_IRQHandler+0xc82>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 020a 	bic.w	r2, r2, #10
 80033f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80b8 	beq.w	8003584 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800341c:	e0b2      	b.n	8003584 <HAL_DMA_IRQHandler+0xe0c>
 800341e:	bf00      	nop
 8003420:	40020010 	.word	0x40020010
 8003424:	40020028 	.word	0x40020028
 8003428:	40020040 	.word	0x40020040
 800342c:	40020058 	.word	0x40020058
 8003430:	40020070 	.word	0x40020070
 8003434:	40020088 	.word	0x40020088
 8003438:	400200a0 	.word	0x400200a0
 800343c:	400200b8 	.word	0x400200b8
 8003440:	40020410 	.word	0x40020410
 8003444:	40020428 	.word	0x40020428
 8003448:	40020440 	.word	0x40020440
 800344c:	40020458 	.word	0x40020458
 8003450:	40020470 	.word	0x40020470
 8003454:	40020488 	.word	0x40020488
 8003458:	400204a0 	.word	0x400204a0
 800345c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2208      	movs	r2, #8
 800346a:	409a      	lsls	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8088 	beq.w	8003586 <HAL_DMA_IRQHandler+0xe0e>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8082 	beq.w	8003586 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a41      	ldr	r2, [pc, #260]	; (800358c <HAL_DMA_IRQHandler+0xe14>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3f      	ldr	r2, [pc, #252]	; (8003590 <HAL_DMA_IRQHandler+0xe18>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <HAL_DMA_IRQHandler+0xe1c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3c      	ldr	r2, [pc, #240]	; (8003598 <HAL_DMA_IRQHandler+0xe20>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	; (800359c <HAL_DMA_IRQHandler+0xe24>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a39      	ldr	r2, [pc, #228]	; (80035a0 <HAL_DMA_IRQHandler+0xe28>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_DMA_IRQHandler+0xe2c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a36      	ldr	r2, [pc, #216]	; (80035a8 <HAL_DMA_IRQHandler+0xe30>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	; (80035ac <HAL_DMA_IRQHandler+0xe34>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a33      	ldr	r2, [pc, #204]	; (80035b0 <HAL_DMA_IRQHandler+0xe38>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_DMA_IRQHandler+0xe3c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_DMA_IRQHandler+0xe40>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_DMA_IRQHandler+0xe44>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2d      	ldr	r2, [pc, #180]	; (80035c0 <HAL_DMA_IRQHandler+0xe48>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <HAL_DMA_IRQHandler+0xe4c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_IRQHandler+0xdaa>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <HAL_DMA_IRQHandler+0xe50>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <HAL_DMA_IRQHandler+0xdbc>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 021c 	bic.w	r2, r2, #28
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e007      	b.n	8003544 <HAL_DMA_IRQHandler+0xdcc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 020e 	bic.w	r2, r2, #14
 8003542:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2201      	movs	r2, #1
 800354e:	409a      	lsls	r2, r3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
 800357a:	e004      	b.n	8003586 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003584:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8

080035cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a84      	ldr	r2, [pc, #528]	; (8003814 <DMA_SetConfig+0x230>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d072      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a82      	ldr	r2, [pc, #520]	; (8003818 <DMA_SetConfig+0x234>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d06d      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a81      	ldr	r2, [pc, #516]	; (800381c <DMA_SetConfig+0x238>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d068      	beq.n	80036ee <DMA_SetConfig+0x10a>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7f      	ldr	r2, [pc, #508]	; (8003820 <DMA_SetConfig+0x23c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d063      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7e      	ldr	r2, [pc, #504]	; (8003824 <DMA_SetConfig+0x240>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d05e      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7c      	ldr	r2, [pc, #496]	; (8003828 <DMA_SetConfig+0x244>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d059      	beq.n	80036ee <DMA_SetConfig+0x10a>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7b      	ldr	r2, [pc, #492]	; (800382c <DMA_SetConfig+0x248>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d054      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a79      	ldr	r2, [pc, #484]	; (8003830 <DMA_SetConfig+0x24c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d04f      	beq.n	80036ee <DMA_SetConfig+0x10a>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a78      	ldr	r2, [pc, #480]	; (8003834 <DMA_SetConfig+0x250>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d04a      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a76      	ldr	r2, [pc, #472]	; (8003838 <DMA_SetConfig+0x254>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d045      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <DMA_SetConfig+0x258>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d040      	beq.n	80036ee <DMA_SetConfig+0x10a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a73      	ldr	r2, [pc, #460]	; (8003840 <DMA_SetConfig+0x25c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d03b      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <DMA_SetConfig+0x260>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d036      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a70      	ldr	r2, [pc, #448]	; (8003848 <DMA_SetConfig+0x264>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d031      	beq.n	80036ee <DMA_SetConfig+0x10a>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6f      	ldr	r2, [pc, #444]	; (800384c <DMA_SetConfig+0x268>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d02c      	beq.n	80036ee <DMA_SetConfig+0x10a>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6d      	ldr	r2, [pc, #436]	; (8003850 <DMA_SetConfig+0x26c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d027      	beq.n	80036ee <DMA_SetConfig+0x10a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6c      	ldr	r2, [pc, #432]	; (8003854 <DMA_SetConfig+0x270>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6a      	ldr	r2, [pc, #424]	; (8003858 <DMA_SetConfig+0x274>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01d      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a69      	ldr	r2, [pc, #420]	; (800385c <DMA_SetConfig+0x278>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d018      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a67      	ldr	r2, [pc, #412]	; (8003860 <DMA_SetConfig+0x27c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a66      	ldr	r2, [pc, #408]	; (8003864 <DMA_SetConfig+0x280>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a64      	ldr	r2, [pc, #400]	; (8003868 <DMA_SetConfig+0x284>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a63      	ldr	r2, [pc, #396]	; (800386c <DMA_SetConfig+0x288>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <DMA_SetConfig+0x10a>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a61      	ldr	r2, [pc, #388]	; (8003870 <DMA_SetConfig+0x28c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <DMA_SetConfig+0x10e>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <DMA_SetConfig+0x110>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003700:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003712:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3e      	ldr	r2, [pc, #248]	; (8003814 <DMA_SetConfig+0x230>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d04a      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3d      	ldr	r2, [pc, #244]	; (8003818 <DMA_SetConfig+0x234>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d045      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3b      	ldr	r2, [pc, #236]	; (800381c <DMA_SetConfig+0x238>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d040      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <DMA_SetConfig+0x23c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d03b      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a38      	ldr	r2, [pc, #224]	; (8003824 <DMA_SetConfig+0x240>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d036      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a37      	ldr	r2, [pc, #220]	; (8003828 <DMA_SetConfig+0x244>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d031      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a35      	ldr	r2, [pc, #212]	; (800382c <DMA_SetConfig+0x248>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02c      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a34      	ldr	r2, [pc, #208]	; (8003830 <DMA_SetConfig+0x24c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d027      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a32      	ldr	r2, [pc, #200]	; (8003834 <DMA_SetConfig+0x250>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a31      	ldr	r2, [pc, #196]	; (8003838 <DMA_SetConfig+0x254>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d01d      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2f      	ldr	r2, [pc, #188]	; (800383c <DMA_SetConfig+0x258>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <DMA_SetConfig+0x25c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <DMA_SetConfig+0x260>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <DMA_SetConfig+0x264>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <DMA_SetConfig+0x268>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <DMA_SetConfig+0x1d0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a28      	ldr	r2, [pc, #160]	; (8003850 <DMA_SetConfig+0x26c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <DMA_SetConfig+0x1d4>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <DMA_SetConfig+0x1d6>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d05a      	beq.n	8003874 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	223f      	movs	r2, #63	; 0x3f
 80037c8:	409a      	lsls	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d108      	bne.n	8003800 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037fe:	e087      	b.n	8003910 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]
}
 8003810:	e07e      	b.n	8003910 <DMA_SetConfig+0x32c>
 8003812:	bf00      	nop
 8003814:	40020010 	.word	0x40020010
 8003818:	40020028 	.word	0x40020028
 800381c:	40020040 	.word	0x40020040
 8003820:	40020058 	.word	0x40020058
 8003824:	40020070 	.word	0x40020070
 8003828:	40020088 	.word	0x40020088
 800382c:	400200a0 	.word	0x400200a0
 8003830:	400200b8 	.word	0x400200b8
 8003834:	40020410 	.word	0x40020410
 8003838:	40020428 	.word	0x40020428
 800383c:	40020440 	.word	0x40020440
 8003840:	40020458 	.word	0x40020458
 8003844:	40020470 	.word	0x40020470
 8003848:	40020488 	.word	0x40020488
 800384c:	400204a0 	.word	0x400204a0
 8003850:	400204b8 	.word	0x400204b8
 8003854:	58025408 	.word	0x58025408
 8003858:	5802541c 	.word	0x5802541c
 800385c:	58025430 	.word	0x58025430
 8003860:	58025444 	.word	0x58025444
 8003864:	58025458 	.word	0x58025458
 8003868:	5802546c 	.word	0x5802546c
 800386c:	58025480 	.word	0x58025480
 8003870:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a28      	ldr	r2, [pc, #160]	; (800391c <DMA_SetConfig+0x338>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a27      	ldr	r2, [pc, #156]	; (8003920 <DMA_SetConfig+0x33c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01d      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <DMA_SetConfig+0x340>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a24      	ldr	r2, [pc, #144]	; (8003928 <DMA_SetConfig+0x344>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <DMA_SetConfig+0x348>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <DMA_SetConfig+0x34c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <DMA_SetConfig+0x350>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <DMA_SetConfig+0x2e0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <DMA_SetConfig+0x354>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <DMA_SetConfig+0x2e4>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <DMA_SetConfig+0x2e6>
 80038c8:	2300      	movs	r3, #0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d108      	bne.n	8003900 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	60da      	str	r2, [r3, #12]
}
 80038fe:	e007      	b.n	8003910 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	60da      	str	r2, [r3, #12]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494

0800393c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <DMA_CalcBaseAndBitshift+0x118>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <DMA_CalcBaseAndBitshift+0x11c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3f      	ldr	r2, [pc, #252]	; (8003a5c <DMA_CalcBaseAndBitshift+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3e      	ldr	r2, [pc, #248]	; (8003a60 <DMA_CalcBaseAndBitshift+0x124>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a3c      	ldr	r2, [pc, #240]	; (8003a64 <DMA_CalcBaseAndBitshift+0x128>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <DMA_CalcBaseAndBitshift+0x12c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a39      	ldr	r2, [pc, #228]	; (8003a6c <DMA_CalcBaseAndBitshift+0x130>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <DMA_CalcBaseAndBitshift+0x134>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a36      	ldr	r2, [pc, #216]	; (8003a74 <DMA_CalcBaseAndBitshift+0x138>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <DMA_CalcBaseAndBitshift+0x13c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <DMA_CalcBaseAndBitshift+0x140>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <DMA_CalcBaseAndBitshift+0x144>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <DMA_CalcBaseAndBitshift+0x148>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <DMA_CalcBaseAndBitshift+0x14c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <DMA_CalcBaseAndBitshift+0x150>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xa8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2c      	ldr	r2, [pc, #176]	; (8003a90 <DMA_CalcBaseAndBitshift+0x154>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <DMA_CalcBaseAndBitshift+0xac>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <DMA_CalcBaseAndBitshift+0xae>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d024      	beq.n	8003a38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	3b10      	subs	r3, #16
 80039f6:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <DMA_CalcBaseAndBitshift+0x158>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d908      	bls.n	8003a28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <DMA_CalcBaseAndBitshift+0x160>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	1d1a      	adds	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	659a      	str	r2, [r3, #88]	; 0x58
 8003a26:	e00d      	b.n	8003a44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <DMA_CalcBaseAndBitshift+0x160>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
 8003a36:	e005      	b.n	8003a44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	aaaaaaab 	.word	0xaaaaaaab
 8003a98:	0800a068 	.word	0x0800a068
 8003a9c:	fffffc00 	.word	0xfffffc00

08003aa0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d120      	bne.n	8003af6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d858      	bhi.n	8003b6e <DMA_CheckFifoParam+0xce>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <DMA_CheckFifoParam+0x24>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003b6f 	.word	0x08003b6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d048      	beq.n	8003b72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ae4:	e045      	b.n	8003b72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aee:	d142      	bne.n	8003b76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003af4:	e03f      	b.n	8003b76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d123      	bne.n	8003b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d838      	bhi.n	8003b7a <DMA_CheckFifoParam+0xda>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <DMA_CheckFifoParam+0x70>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b27 	.word	0x08003b27
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003b39 	.word	0x08003b39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
        break;
 8003b24:	e030      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d025      	beq.n	8003b7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b36:	e022      	b.n	8003b7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b40:	d11f      	bne.n	8003b82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b46:	e01c      	b.n	8003b82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <DMA_CheckFifoParam+0xb6>
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d003      	beq.n	8003b5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003b54:	e018      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
        break;
 8003b5a:	e015      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8003b6c:	e00b      	b.n	8003b86 <DMA_CheckFifoParam+0xe6>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e00a      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        break;
 8003b72:	bf00      	nop
 8003b74:	e008      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        break;
 8003b76:	bf00      	nop
 8003b78:	e006      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        break;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
        break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
    break;
 8003b86:	bf00      	nop
    }
  }

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop

08003b98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a38      	ldr	r2, [pc, #224]	; (8003c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a36      	ldr	r2, [pc, #216]	; (8003c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a35      	ldr	r2, [pc, #212]	; (8003c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a33      	ldr	r2, [pc, #204]	; (8003c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b08      	subs	r3, #8
 8003c08:	4a28      	ldr	r2, [pc, #160]	; (8003cac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c34:	e024      	b.n	8003c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3b10      	subs	r3, #16
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d806      	bhi.n	8003c5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d902      	bls.n	8003c5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2201      	movs	r2, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	58025408 	.word	0x58025408
 8003c90:	5802541c 	.word	0x5802541c
 8003c94:	58025430 	.word	0x58025430
 8003c98:	58025444 	.word	0x58025444
 8003c9c:	58025458 	.word	0x58025458
 8003ca0:	5802546c 	.word	0x5802546c
 8003ca4:	58025480 	.word	0x58025480
 8003ca8:	58025494 	.word	0x58025494
 8003cac:	cccccccd 	.word	0xcccccccd
 8003cb0:	16009600 	.word	0x16009600
 8003cb4:	58025880 	.word	0x58025880
 8003cb8:	aaaaaaab 	.word	0xaaaaaaab
 8003cbc:	400204b8 	.word	0x400204b8
 8003cc0:	4002040f 	.word	0x4002040f
 8003cc4:	10008200 	.word	0x10008200
 8003cc8:	40020880 	.word	0x40020880

08003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d04a      	beq.n	8003d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d847      	bhi.n	8003d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d022      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d01d      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d018      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00e      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d009      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003d54:	671a      	str	r2, [r3, #112]	; 0x70
 8003d56:	e009      	b.n	8003d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003d6a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	58025408 	.word	0x58025408
 8003d88:	5802541c 	.word	0x5802541c
 8003d8c:	58025430 	.word	0x58025430
 8003d90:	58025444 	.word	0x58025444
 8003d94:	58025458 	.word	0x58025458
 8003d98:	5802546c 	.word	0x5802546c
 8003d9c:	58025480 	.word	0x58025480
 8003da0:	58025494 	.word	0x58025494
 8003da4:	1600963f 	.word	0x1600963f
 8003da8:	58025940 	.word	0x58025940
 8003dac:	1000823f 	.word	0x1000823f
 8003db0:	40020940 	.word	0x40020940

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dc2:	4b89      	ldr	r3, [pc, #548]	; (8003fe8 <HAL_GPIO_Init+0x234>)
 8003dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dc6:	e194      	b.n	80040f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8186 	beq.w	80040ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d005      	beq.n	8003df8 <HAL_GPIO_Init+0x44>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d130      	bne.n	8003e5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d017      	beq.n	8003e96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d123      	bne.n	8003eea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0203 	and.w	r2, r3, #3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80e0 	beq.w	80040ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2c:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_GPIO_Init+0x238>)
 8003f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f32:	4a2e      	ldr	r2, [pc, #184]	; (8003fec <HAL_GPIO_Init+0x238>)
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_GPIO_Init+0x238>)
 8003f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4a:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <HAL_GPIO_Init+0x23c>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_GPIO_Init+0x240>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d052      	beq.n	800401c <HAL_GPIO_Init+0x268>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_GPIO_Init+0x244>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_GPIO_Init+0x22e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_GPIO_Init+0x248>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <HAL_GPIO_Init+0x22a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_GPIO_Init+0x24c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d025      	beq.n	8003fda <HAL_GPIO_Init+0x226>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <HAL_GPIO_Init+0x250>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <HAL_GPIO_Init+0x222>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <HAL_GPIO_Init+0x254>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_GPIO_Init+0x21e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1a      	ldr	r2, [pc, #104]	; (800400c <HAL_GPIO_Init+0x258>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x21a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a19      	ldr	r2, [pc, #100]	; (8004010 <HAL_GPIO_Init+0x25c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x216>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_GPIO_Init+0x260>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x212>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_GPIO_Init+0x264>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x20e>
 8003fbe:	2309      	movs	r3, #9
 8003fc0:	e02d      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	e02b      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	e029      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fca:	2307      	movs	r3, #7
 8003fcc:	e027      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fce:	2306      	movs	r3, #6
 8003fd0:	e025      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e023      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e021      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e01f      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e01d      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01b      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fe6:	bf00      	nop
 8003fe8:	58000080 	.word	0x58000080
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	58000400 	.word	0x58000400
 8003ff4:	58020000 	.word	0x58020000
 8003ff8:	58020400 	.word	0x58020400
 8003ffc:	58020800 	.word	0x58020800
 8004000:	58020c00 	.word	0x58020c00
 8004004:	58021000 	.word	0x58021000
 8004008:	58021400 	.word	0x58021400
 800400c:	58021800 	.word	0x58021800
 8004010:	58021c00 	.word	0x58021c00
 8004014:	58022000 	.word	0x58022000
 8004018:	58022400 	.word	0x58022400
 800401c:	2300      	movs	r3, #0
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	4093      	lsls	r3, r2
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402e:	4938      	ldr	r1, [pc, #224]	; (8004110 <HAL_GPIO_Init+0x35c>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3301      	adds	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f ae63 	bne.w	8003dc8 <HAL_GPIO_Init+0x14>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	3724      	adds	r7, #36	; 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	58000400 	.word	0x58000400

08004114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	e001      	b.n	8004136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
 8004150:	4613      	mov	r3, r2
 8004152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004160:	e003      	b.n	800416a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	041a      	lsls	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800417e:	f7fd f9a5 	bl	80014cc <HAL_GetTick>
 8004182:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e03b      	b.n	8004206 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80041ae:	e00f      	b.n	80041d0 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80041b0:	f7fd f98c 	bl	80014cc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d908      	bls.n	80041d0 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2240      	movs	r2, #64	; 0x40
 80041c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e01a      	b.n	8004206 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e8      	bne.n	80041b0 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f992 	bl	8004508 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e017      	b.n	8004250 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d004      	beq.n	8004236 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e00c      	b.n	8004250 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2204      	movs	r2, #4
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004268:	4b9a      	ldr	r3, [pc, #616]	; (80044d4 <HAL_MDMA_IRQHandler+0x278>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a9a      	ldr	r2, [pc, #616]	; (80044d8 <HAL_MDMA_IRQHandler+0x27c>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a9b      	lsrs	r3, r3, #10
 8004274:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	4b97      	ldr	r3, [pc, #604]	; (80044dc <HAL_MDMA_IRQHandler+0x280>)
 800427e:	4413      	add	r3, r2
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800428e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 812e 	beq.w	80044fa <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d054      	beq.n	8004356 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d04d      	beq.n	8004356 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0202 	bic.w	r2, r2, #2
 80042c8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	669a      	str	r2, [r3, #104]	; 0x68
 80042e8:	e005      	b.n	80042f6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431a:	f043 0208 	orr.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2210      	movs	r2, #16
 8004378:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d012      	beq.n	80043be <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2208      	movs	r2, #8
 80043ac:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2204      	movs	r2, #4
 80043e0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d039      	beq.n	8004474 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800441c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b04      	cmp	r3, #4
 8004428:	d110      	bne.n	800444c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	2b00      	cmp	r3, #0
 8004440:	d05d      	beq.n	80044fe <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
        }
        return;
 800444a:	e058      	b.n	80044fe <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2202      	movs	r2, #2
 8004452:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004478:	2b00      	cmp	r3, #0
 800447a:	d041      	beq.n	8004500 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2204      	movs	r2, #4
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	d307      	bcc.n	80044b0 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f2      	bne.n	8004494 <HAL_MDMA_IRQHandler+0x238>
 80044ae:	e000      	b.n	80044b2 <HAL_MDMA_IRQHandler+0x256>
        break;
 80044b0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2203      	movs	r2, #3
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044d0:	e00a      	b.n	80044e8 <HAL_MDMA_IRQHandler+0x28c>
 80044d2:	bf00      	nop
 80044d4:	24000000 	.word	0x24000000
 80044d8:	1b4e81b5 	.word	0x1b4e81b5
 80044dc:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
 80044f8:	e002      	b.n	8004500 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80044fe:	bf00      	nop
    }
  }
}
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop

08004508 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68d9      	ldr	r1, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800452e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800453a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004546:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004550:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800455c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800455e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d107      	bne.n	800457a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004578:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	2b00      	cmp	r3, #0
 8004588:	da11      	bge.n	80045ae <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004598:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	425b      	negs	r3, r3
 80045a0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	b292      	uxth	r2, r2
 80045aa:	621a      	str	r2, [r3, #32]
 80045ac:	e006      	b.n	80045bc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b292      	uxth	r2, r2
 80045ba:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da15      	bge.n	80045f0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80045d2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	425b      	negs	r3, r3
 80045da:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a19      	ldr	r1, [r3, #32]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	041a      	lsls	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	621a      	str	r2, [r3, #32]
 80045ee:	e009      	b.n	8004604 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6a19      	ldr	r1, [r3, #32]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	041a      	lsls	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460c:	d006      	beq.n	800461c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	629a      	str	r2, [r3, #40]	; 0x28
 800461a:	e003      	b.n	8004624 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	2b06      	cmp	r3, #6
 800464a:	d00a      	beq.n	8004662 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800464c:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e040      	b.n	80046e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e03e      	b.n	80046e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800466a:	491f      	ldr	r1, [pc, #124]	; (80046e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4313      	orrs	r3, r2
 8004670:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004672:	f7fc ff2b 	bl	80014cc <HAL_GetTick>
 8004676:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004678:	e009      	b.n	800468e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800467a:	f7fc ff27 	bl	80014cc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004688:	d901      	bls.n	800468e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e028      	b.n	80046e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	d1ee      	bne.n	800467a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b1e      	cmp	r3, #30
 80046a0:	d008      	beq.n	80046b4 <HAL_PWREx_ConfigSupply+0x7c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b2e      	cmp	r3, #46	; 0x2e
 80046a6:	d005      	beq.n	80046b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b1d      	cmp	r3, #29
 80046ac:	d002      	beq.n	80046b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b2d      	cmp	r3, #45	; 0x2d
 80046b2:	d114      	bne.n	80046de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80046b4:	f7fc ff0a 	bl	80014cc <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046ba:	e009      	b.n	80046d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046bc:	f7fc ff06 	bl	80014cc <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ca:	d901      	bls.n	80046d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d1ee      	bne.n	80046bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	58024800 	.word	0x58024800

080046ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7fc feea 	bl	80014cc <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e05f      	b.n	80047c4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fc fb09 	bl	8000d28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004716:	f241 3188 	movw	r1, #5000	; 0x1388
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa64 	bl	8004be8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	3b01      	subs	r3, #1
 8004730:	021a      	lsls	r2, r3, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	2120      	movs	r1, #32
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa8f 	bl	8004c6a <QSPI_WaitFlagStateUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d135      	bne.n	80047c2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_QSPI_Init+0xe0>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6852      	ldr	r2, [r2, #4]
 8004764:	0611      	lsls	r1, r2, #24
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	69d2      	ldr	r2, [r2, #28]
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a12      	ldr	r2, [r2, #32]
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	430b      	orrs	r3, r1
 800477e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_QSPI_Init+0xe4>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6912      	ldr	r2, [r2, #16]
 800478e:	0411      	lsls	r1, r2, #16
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6952      	ldr	r2, [r2, #20]
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6992      	ldr	r2, [r2, #24]
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80047c2:	7afb      	ldrb	r3, [r7, #11]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	00ffff2f 	.word	0x00ffff2f
 80047d0:	ffe0f8fe 	.word	0xffe0f8fe

080047d4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d064      	beq.n	80048c0 <HAL_QSPI_IRQHandler+0xec>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05f      	beq.n	80048c0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3320      	adds	r3, #32
 8004806:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b12      	cmp	r3, #18
 8004812:	d125      	bne.n	8004860 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004814:	e01c      	b.n	8004850 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c
 800483c:	e008      	b.n	8004850 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800484c:	601a      	str	r2, [r3, #0]
          break;
 800484e:	e033      	b.n	80048b8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1db      	bne.n	8004816 <HAL_QSPI_IRQHandler+0x42>
 800485e:	e02b      	b.n	80048b8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b22      	cmp	r3, #34	; 0x22
 800486a:	d125      	bne.n	80048b8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800486c:	e01d      	b.n	80048aa <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
 8004896:	e008      	b.n	80048aa <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048a6:	601a      	str	r2, [r3, #0]
          break;
 80048a8:	e006      	b.n	80048b8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1da      	bne.n	800486e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f977 	bl	8004bac <HAL_QSPI_FifoThresholdCallback>
 80048be:	e13c      	b.n	8004b3a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80b0 	beq.w	8004a2c <HAL_QSPI_IRQHandler+0x258>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80aa 	beq.w	8004a2c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2202      	movs	r2, #2
 80048de:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80048ee:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b12      	cmp	r3, #18
 80048fa:	d120      	bne.n	800493e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d011      	beq.n	800492e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0204 	bic.w	r2, r2, #4
 8004918:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f92e 	bl	8004b98 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800493c:	e0fa      	b.n	8004b34 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b22      	cmp	r3, #34	; 0x22
 8004948:	d143      	bne.n	80049d2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0204 	bic.w	r2, r2, #4
 8004966:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	e021      	b.n	80049c2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3320      	adds	r3, #32
 8004984:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8004986:	e013      	b.n	80049b0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e4      	bne.n	8004988 <HAL_QSPI_IRQHandler+0x1b4>
 80049be:	e000      	b.n	80049c2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80049c0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8da 	bl	8004b84 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80049d0:	e0b0      	b.n	8004b34 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d107      	bne.n	80049ee <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8c2 	bl	8004b70 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80049ec:	e0a2      	b.n	8004b34 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	f040 809c 	bne.w	8004b34 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004a0a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f89d 	bl	8004b5c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004a22:	e087      	b.n	8004b34 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f88f 	bl	8004b48 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004a2a:	e083      	b.n	8004b34 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01f      	beq.n	8004a76 <HAL_QSPI_IRQHandler+0x2a2>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2208      	movs	r2, #8
 8004a46:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004a64:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8a6 	bl	8004bc0 <HAL_QSPI_StatusMatchCallback>
 8004a74:	e061      	b.n	8004b3a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d047      	beq.n	8004b10 <HAL_QSPI_IRQHandler+0x33c>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d042      	beq.n	8004b10 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004aa0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	f043 0202 	orr.w	r2, r3, #2
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d021      	beq.n	8004b00 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0204 	bic.w	r2, r2, #4
 8004aca:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_QSPI_IRQHandler+0x370>)
 8004ad2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fb98 	bl	800420e <HAL_MDMA_Abort_IT>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d029      	beq.n	8004b38 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f825 	bl	8004b48 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004afe:	e01b      	b.n	8004b38 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f81d 	bl	8004b48 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004b0e:	e013      	b.n	8004b38 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00f      	beq.n	8004b3a <HAL_QSPI_IRQHandler+0x366>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f851 	bl	8004bd4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8004b32:	e002      	b.n	8004b3a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004b34:	bf00      	nop
 8004b36:	e000      	b.n	8004b3a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004b38:	bf00      	nop
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08004c05 	.word	0x08004c05

08004b48 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d114      	bne.n	8004c54 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c40:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0202 	orr.w	r2, r2, #2
 8004c50:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004c52:	e006      	b.n	8004c62 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff73 	bl	8004b48 <HAL_QSPI_ErrorCallback>
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c7a:	e01a      	b.n	8004cb2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d016      	beq.n	8004cb2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fc fc22 	bl	80014cc <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00e      	b.n	8004cd0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d1d6      	bne.n	8004c7c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	; 0x30
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f000 bc1c 	b.w	8005524 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8087 	beq.w	8004e08 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfa:	4b9e      	ldr	r3, [pc, #632]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d04:	4b9b      	ldr	r3, [pc, #620]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d007      	beq.n	8004d20 <HAL_RCC_OscConfig+0x48>
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	2b18      	cmp	r3, #24
 8004d14:	d110      	bne.n	8004d38 <HAL_RCC_OscConfig+0x60>
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d10b      	bne.n	8004d38 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	4b94      	ldr	r3, [pc, #592]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d06c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x12e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d168      	bne.n	8004e06 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e3f5      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d106      	bne.n	8004d50 <HAL_RCC_OscConfig+0x78>
 8004d42:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a8b      	ldr	r2, [pc, #556]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e02e      	b.n	8004dae <HAL_RCC_OscConfig+0xd6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCC_OscConfig+0x9a>
 8004d58:	4b86      	ldr	r3, [pc, #536]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a85      	ldr	r2, [pc, #532]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b83      	ldr	r3, [pc, #524]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a82      	ldr	r2, [pc, #520]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	e01d      	b.n	8004dae <HAL_RCC_OscConfig+0xd6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d7a:	d10c      	bne.n	8004d96 <HAL_RCC_OscConfig+0xbe>
 8004d7c:	4b7d      	ldr	r3, [pc, #500]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7c      	ldr	r2, [pc, #496]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4b7a      	ldr	r3, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a79      	ldr	r2, [pc, #484]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	e00b      	b.n	8004dae <HAL_RCC_OscConfig+0xd6>
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a76      	ldr	r2, [pc, #472]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fc fb89 	bl	80014cc <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dbe:	f7fc fb85 	bl	80014cc <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b64      	cmp	r3, #100	; 0x64
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e3a9      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0xe6>
 8004ddc:	e014      	b.n	8004e08 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc fb75 	bl	80014cc <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de6:	f7fc fb71 	bl	80014cc <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b64      	cmp	r3, #100	; 0x64
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e395      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004df8:	4b5e      	ldr	r3, [pc, #376]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x10e>
 8004e04:	e000      	b.n	8004e08 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80ca 	beq.w	8004faa <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e16:	4b57      	ldr	r3, [pc, #348]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e1e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e20:	4b54      	ldr	r3, [pc, #336]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_RCC_OscConfig+0x164>
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b18      	cmp	r3, #24
 8004e30:	d156      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x208>
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d151      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	4b4d      	ldr	r3, [pc, #308]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_OscConfig+0x17c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e367      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e54:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 0219 	bic.w	r2, r3, #25
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4944      	ldr	r1, [pc, #272]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e66:	f7fc fb31 	bl	80014cc <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fc fb2d 	bl	80014cc <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e351      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e80:	4b3c      	ldr	r3, [pc, #240]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8c:	f7fc fb4e 	bl	800152c <HAL_GetREVID>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d817      	bhi.n	8004eca <HAL_RCC_OscConfig+0x1f2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d108      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x1dc>
 8004ea2:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004eaa:	4a32      	ldr	r2, [pc, #200]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb2:	e07a      	b.n	8004faa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	031b      	lsls	r3, r3, #12
 8004ec2:	492c      	ldr	r1, [pc, #176]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec8:	e06f      	b.n	8004faa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eca:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	4926      	ldr	r1, [pc, #152]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ede:	e064      	b.n	8004faa <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d047      	beq.n	8004f78 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 0219 	bic.w	r2, r3, #25
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	491f      	ldr	r1, [pc, #124]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fc fae7 	bl	80014cc <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fc fae3 	bl	80014cc <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e307      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f20:	f7fc fb04 	bl	800152c <HAL_GetREVID>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d817      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x286>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d108      	bne.n	8004f48 <HAL_RCC_OscConfig+0x270>
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f44:	6053      	str	r3, [r2, #4]
 8004f46:	e030      	b.n	8004faa <HAL_RCC_OscConfig+0x2d2>
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	4907      	ldr	r1, [pc, #28]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	604b      	str	r3, [r1, #4]
 8004f5c:	e025      	b.n	8004faa <HAL_RCC_OscConfig+0x2d2>
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	4901      	ldr	r1, [pc, #4]	; (8004f74 <HAL_RCC_OscConfig+0x29c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	604b      	str	r3, [r1, #4]
 8004f72:	e01a      	b.n	8004faa <HAL_RCC_OscConfig+0x2d2>
 8004f74:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f78:	4b9e      	ldr	r3, [pc, #632]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a9d      	ldr	r2, [pc, #628]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc faa2 	bl	80014cc <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f8c:	f7fc fa9e 	bl	80014cc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e2c2      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f9e:	4b95      	ldr	r3, [pc, #596]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80a9 	beq.w	800510a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb8:	4b8e      	ldr	r3, [pc, #568]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fc0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fc2:	4b8c      	ldr	r3, [pc, #560]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d007      	beq.n	8004fde <HAL_RCC_OscConfig+0x306>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b18      	cmp	r3, #24
 8004fd2:	d13a      	bne.n	800504a <HAL_RCC_OscConfig+0x372>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d135      	bne.n	800504a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fde:	4b85      	ldr	r3, [pc, #532]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x31e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e296      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff6:	f7fc fa99 	bl	800152c <HAL_GetREVID>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005000:	4293      	cmp	r3, r2
 8005002:	d817      	bhi.n	8005034 <HAL_RCC_OscConfig+0x35c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	2b20      	cmp	r3, #32
 800500a:	d108      	bne.n	800501e <HAL_RCC_OscConfig+0x346>
 800500c:	4b79      	ldr	r3, [pc, #484]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005014:	4a77      	ldr	r2, [pc, #476]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800501c:	e075      	b.n	800510a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800501e:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	069b      	lsls	r3, r3, #26
 800502c:	4971      	ldr	r1, [pc, #452]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005032:	e06a      	b.n	800510a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005034:	4b6f      	ldr	r3, [pc, #444]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	496c      	ldr	r1, [pc, #432]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005044:	4313      	orrs	r3, r2
 8005046:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005048:	e05f      	b.n	800510a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d042      	beq.n	80050d8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005052:	4b68      	ldr	r3, [pc, #416]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a67      	ldr	r2, [pc, #412]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc fa35 	bl	80014cc <HAL_GetTick>
 8005062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005066:	f7fc fa31 	bl	80014cc <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e255      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005078:	4b5e      	ldr	r3, [pc, #376]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005084:	f7fc fa52 	bl	800152c <HAL_GetREVID>
 8005088:	4603      	mov	r3, r0
 800508a:	f241 0203 	movw	r2, #4099	; 0x1003
 800508e:	4293      	cmp	r3, r2
 8005090:	d817      	bhi.n	80050c2 <HAL_RCC_OscConfig+0x3ea>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	2b20      	cmp	r3, #32
 8005098:	d108      	bne.n	80050ac <HAL_RCC_OscConfig+0x3d4>
 800509a:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80050a2:	4a54      	ldr	r2, [pc, #336]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050a8:	6053      	str	r3, [r2, #4]
 80050aa:	e02e      	b.n	800510a <HAL_RCC_OscConfig+0x432>
 80050ac:	4b51      	ldr	r3, [pc, #324]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	069b      	lsls	r3, r3, #26
 80050ba:	494e      	ldr	r1, [pc, #312]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
 80050c0:	e023      	b.n	800510a <HAL_RCC_OscConfig+0x432>
 80050c2:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	061b      	lsls	r3, r3, #24
 80050d0:	4948      	ldr	r1, [pc, #288]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60cb      	str	r3, [r1, #12]
 80050d6:	e018      	b.n	800510a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050d8:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a45      	ldr	r2, [pc, #276]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80050de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc f9f2 	bl	80014cc <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80050ec:	f7fc f9ee 	bl	80014cc <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e212      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050fe:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d036      	beq.n	8005184 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d019      	beq.n	8005152 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512a:	f7fc f9cf 	bl	80014cc <HAL_GetTick>
 800512e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005132:	f7fc f9cb 	bl	80014cc <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1ef      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x45a>
 8005150:	e018      	b.n	8005184 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005152:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	4a27      	ldr	r2, [pc, #156]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fc f9b5 	bl	80014cc <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005166:	f7fc f9b1 	bl	80014cc <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e1d5      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f0      	bne.n	8005166 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d039      	beq.n	8005204 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d019      	beq.n	80051cc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 800519e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051a4:	f7fc f992 	bl	80014cc <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80051ac:	f7fc f98e 	bl	80014cc <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e1b2      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x4d4>
 80051ca:	e01b      	b.n	8005204 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <HAL_RCC_OscConfig+0x51c>)
 80051d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051d8:	f7fc f978 	bl	80014cc <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80051e0:	f7fc f974 	bl	80014cc <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d904      	bls.n	80051f8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e198      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051f8:	4ba3      	ldr	r3, [pc, #652]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ed      	bne.n	80051e0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8081 	beq.w	8005314 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005212:	4b9e      	ldr	r3, [pc, #632]	; (800548c <HAL_RCC_OscConfig+0x7b4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a9d      	ldr	r2, [pc, #628]	; (800548c <HAL_RCC_OscConfig+0x7b4>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800521e:	f7fc f955 	bl	80014cc <HAL_GetTick>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005226:	f7fc f951 	bl	80014cc <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b64      	cmp	r3, #100	; 0x64
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e175      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005238:	4b94      	ldr	r3, [pc, #592]	; (800548c <HAL_RCC_OscConfig+0x7b4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x582>
 800524c:	4b8e      	ldr	r3, [pc, #568]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a8d      	ldr	r2, [pc, #564]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
 8005258:	e02d      	b.n	80052b6 <HAL_RCC_OscConfig+0x5de>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0x5a4>
 8005262:	4b89      	ldr	r3, [pc, #548]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	4a88      	ldr	r2, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	6713      	str	r3, [r2, #112]	; 0x70
 800526e:	4b86      	ldr	r3, [pc, #536]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4a85      	ldr	r2, [pc, #532]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005274:	f023 0304 	bic.w	r3, r3, #4
 8005278:	6713      	str	r3, [r2, #112]	; 0x70
 800527a:	e01c      	b.n	80052b6 <HAL_RCC_OscConfig+0x5de>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0x5c6>
 8005284:	4b80      	ldr	r3, [pc, #512]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	4a7f      	ldr	r2, [pc, #508]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6713      	str	r3, [r2, #112]	; 0x70
 8005290:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	4a7c      	ldr	r2, [pc, #496]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	; 0x70
 800529c:	e00b      	b.n	80052b6 <HAL_RCC_OscConfig+0x5de>
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	4a79      	ldr	r2, [pc, #484]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70
 80052aa:	4b77      	ldr	r3, [pc, #476]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	4a76      	ldr	r2, [pc, #472]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fc f905 	bl	80014cc <HAL_GetTick>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fc f901 	bl	80014cc <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e123      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052dc:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCC_OscConfig+0x5ee>
 80052e8:	e014      	b.n	8005314 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fc f8ef 	bl	80014cc <HAL_GetTick>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fc f8eb 	bl	80014cc <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e10d      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005308:	4b5f      	ldr	r3, [pc, #380]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8102 	beq.w	8005522 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800531e:	4b5a      	ldr	r3, [pc, #360]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005326:	2b18      	cmp	r3, #24
 8005328:	f000 80bd 	beq.w	80054a6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b02      	cmp	r3, #2
 8005332:	f040 8095 	bne.w	8005460 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005336:	4b54      	ldr	r3, [pc, #336]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a53      	ldr	r2, [pc, #332]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800533c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fc f8c3 	bl	80014cc <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534a:	f7fc f8bf 	bl	80014cc <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0e3      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800535c:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005368:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800536a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800536c:	4b48      	ldr	r3, [pc, #288]	; (8005490 <HAL_RCC_OscConfig+0x7b8>)
 800536e:	4013      	ands	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005378:	0112      	lsls	r2, r2, #4
 800537a:	430a      	orrs	r2, r1
 800537c:	4942      	ldr	r1, [pc, #264]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	628b      	str	r3, [r1, #40]	; 0x28
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	3b01      	subs	r3, #1
 8005388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	3b01      	subs	r3, #1
 8005392:	025b      	lsls	r3, r3, #9
 8005394:	b29b      	uxth	r3, r3
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	3b01      	subs	r3, #1
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	3b01      	subs	r3, #1
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053b2:	4935      	ldr	r1, [pc, #212]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80053b8:	4b33      	ldr	r3, [pc, #204]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a32      	ldr	r2, [pc, #200]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053c4:	4b30      	ldr	r3, [pc, #192]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	4b32      	ldr	r3, [pc, #200]	; (8005494 <HAL_RCC_OscConfig+0x7bc>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053d0:	00d2      	lsls	r2, r2, #3
 80053d2:	492d      	ldr	r1, [pc, #180]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80053d8:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	f023 020c 	bic.w	r2, r3, #12
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	4928      	ldr	r1, [pc, #160]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053ea:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	f023 0202 	bic.w	r2, r3, #2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	4924      	ldr	r1, [pc, #144]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053fc:	4b22      	ldr	r3, [pc, #136]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4a21      	ldr	r2, [pc, #132]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800540e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005414:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800541a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800541e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005420:	4b19      	ldr	r3, [pc, #100]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542c:	4b16      	ldr	r3, [pc, #88]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a15      	ldr	r2, [pc, #84]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc f848 	bl	80014cc <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005440:	f7fc f844 	bl	80014cc <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e068      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x768>
 800545e:	e060      	b.n	8005522 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <HAL_RCC_OscConfig+0x7b0>)
 8005466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800546a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fc f82e 	bl	80014cc <HAL_GetTick>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005472:	e011      	b.n	8005498 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005474:	f7fc f82a 	bl	80014cc <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d90a      	bls.n	8005498 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04e      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
 8005486:	bf00      	nop
 8005488:	58024400 	.word	0x58024400
 800548c:	58024800 	.word	0x58024800
 8005490:	fffffc0c 	.word	0xfffffc0c
 8005494:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005498:	4b24      	ldr	r3, [pc, #144]	; (800552c <HAL_RCC_OscConfig+0x854>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e7      	bne.n	8005474 <HAL_RCC_OscConfig+0x79c>
 80054a4:	e03d      	b.n	8005522 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054a6:	4b21      	ldr	r3, [pc, #132]	; (800552c <HAL_RCC_OscConfig+0x854>)
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054ac:	4b1f      	ldr	r3, [pc, #124]	; (800552c <HAL_RCC_OscConfig+0x854>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d031      	beq.n	800551e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f003 0203 	and.w	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d12a      	bne.n	800551e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d122      	bne.n	800551e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d11a      	bne.n	800551e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	0a5b      	lsrs	r3, r3, #9
 80054ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d111      	bne.n	800551e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d108      	bne.n	800551e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	0e1b      	lsrs	r3, r3, #24
 8005510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3730      	adds	r7, #48	; 0x30
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	58024400 	.word	0x58024400

08005530 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e19c      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b8a      	ldr	r3, [pc, #552]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b87      	ldr	r3, [pc, #540]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 020f 	bic.w	r2, r3, #15
 800555a:	4985      	ldr	r1, [pc, #532]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b83      	ldr	r3, [pc, #524]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e184      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	4b7b      	ldr	r3, [pc, #492]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005590:	4b78      	ldr	r3, [pc, #480]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4975      	ldr	r1, [pc, #468]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d908      	bls.n	80055d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055be:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	496a      	ldr	r1, [pc, #424]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	4b64      	ldr	r3, [pc, #400]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d908      	bls.n	80055fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055ec:	4b61      	ldr	r3, [pc, #388]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	495e      	ldr	r1, [pc, #376]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d010      	beq.n	800562c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005616:	429a      	cmp	r2, r3
 8005618:	d908      	bls.n	800562c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4953      	ldr	r1, [pc, #332]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005628:	4313      	orrs	r3, r2
 800562a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	429a      	cmp	r2, r3
 8005646:	d908      	bls.n	800565a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f023 020f 	bic.w	r2, r3, #15
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4947      	ldr	r1, [pc, #284]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005656:	4313      	orrs	r3, r2
 8005658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d055      	beq.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005666:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4940      	ldr	r1, [pc, #256]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005674:	4313      	orrs	r3, r2
 8005676:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d107      	bne.n	8005690 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005680:	4b3c      	ldr	r3, [pc, #240]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d121      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0f6      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d115      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0ea      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b0:	4b30      	ldr	r3, [pc, #192]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0de      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0d6      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f023 0207 	bic.w	r2, r3, #7
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4925      	ldr	r1, [pc, #148]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fb fef3 	bl	80014cc <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ea:	f7fb feef 	bl	80014cc <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e0be      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005700:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	429a      	cmp	r2, r3
 8005710:	d1eb      	bne.n	80056ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	4b14      	ldr	r3, [pc, #80]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	429a      	cmp	r2, r3
 800572c:	d208      	bcs.n	8005740 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f023 020f 	bic.w	r2, r3, #15
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	490e      	ldr	r1, [pc, #56]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800573c:	4313      	orrs	r3, r2
 800573e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d214      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 020f 	bic.w	r2, r3, #15
 8005756:	4906      	ldr	r1, [pc, #24]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e086      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
 8005770:	52002000 	.word	0x52002000
 8005774:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	4b3f      	ldr	r3, [pc, #252]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005790:	429a      	cmp	r2, r3
 8005792:	d208      	bcs.n	80057a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005794:	4b3c      	ldr	r3, [pc, #240]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	4939      	ldr	r1, [pc, #228]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057be:	429a      	cmp	r2, r3
 80057c0:	d208      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	492e      	ldr	r1, [pc, #184]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d208      	bcs.n	8005802 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4922      	ldr	r1, [pc, #136]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800581a:	429a      	cmp	r2, r3
 800581c:	d208      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800581e:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4917      	ldr	r1, [pc, #92]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 800582c:	4313      	orrs	r3, r2
 800582e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005830:	f000 f834 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8005834:	4602      	mov	r2, r0
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4912      	ldr	r1, [pc, #72]	; (800588c <HAL_RCC_ClockConfig+0x35c>)
 8005842:	5ccb      	ldrb	r3, [r1, r3]
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <HAL_RCC_ClockConfig+0x35c>)
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <HAL_RCC_ClockConfig+0x360>)
 8005866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005868:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x364>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <HAL_RCC_ClockConfig+0x368>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fb fde0 	bl	8001438 <HAL_InitTick>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
 800588c:	0800a058 	.word	0x0800a058
 8005890:	24000004 	.word	0x24000004
 8005894:	24000000 	.word	0x24000000
 8005898:	24000008 	.word	0x24000008

0800589c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058a2:	4bb3      	ldr	r3, [pc, #716]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058aa:	2b18      	cmp	r3, #24
 80058ac:	f200 8155 	bhi.w	8005b5a <HAL_RCC_GetSysClockFreq+0x2be>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	08005b5b 	.word	0x08005b5b
 80058c0:	08005b5b 	.word	0x08005b5b
 80058c4:	08005b5b 	.word	0x08005b5b
 80058c8:	08005b5b 	.word	0x08005b5b
 80058cc:	08005b5b 	.word	0x08005b5b
 80058d0:	08005b5b 	.word	0x08005b5b
 80058d4:	08005b5b 	.word	0x08005b5b
 80058d8:	08005943 	.word	0x08005943
 80058dc:	08005b5b 	.word	0x08005b5b
 80058e0:	08005b5b 	.word	0x08005b5b
 80058e4:	08005b5b 	.word	0x08005b5b
 80058e8:	08005b5b 	.word	0x08005b5b
 80058ec:	08005b5b 	.word	0x08005b5b
 80058f0:	08005b5b 	.word	0x08005b5b
 80058f4:	08005b5b 	.word	0x08005b5b
 80058f8:	08005949 	.word	0x08005949
 80058fc:	08005b5b 	.word	0x08005b5b
 8005900:	08005b5b 	.word	0x08005b5b
 8005904:	08005b5b 	.word	0x08005b5b
 8005908:	08005b5b 	.word	0x08005b5b
 800590c:	08005b5b 	.word	0x08005b5b
 8005910:	08005b5b 	.word	0x08005b5b
 8005914:	08005b5b 	.word	0x08005b5b
 8005918:	0800594f 	.word	0x0800594f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800591c:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005928:	4b91      	ldr	r3, [pc, #580]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	4a90      	ldr	r2, [pc, #576]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800593a:	e111      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800593c:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800593e:	61bb      	str	r3, [r7, #24]
    break;
 8005940:	e10e      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005942:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005944:	61bb      	str	r3, [r7, #24]
    break;
 8005946:	e10b      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005948:	4b8c      	ldr	r3, [pc, #560]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800594a:	61bb      	str	r3, [r7, #24]
    break;
 800594c:	e108      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800594e:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005958:	4b85      	ldr	r3, [pc, #532]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005962:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005964:	4b82      	ldr	r3, [pc, #520]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800596e:	4b80      	ldr	r3, [pc, #512]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80e1 	beq.w	8005b54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f000 8083 	beq.w	8005aa0 <HAL_RCC_GetSysClockFreq+0x204>
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b02      	cmp	r3, #2
 800599e:	f200 80a1 	bhi.w	8005ae4 <HAL_RCC_GetSysClockFreq+0x248>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x114>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d056      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x1c0>
 80059ae:	e099      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059bc:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	4a6b      	ldr	r2, [pc, #428]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
 80059cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005a16:	e087      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5a:	e065      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b40      	ldr	r3, [pc, #256]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9e:	e043      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b2f      	ldr	r3, [pc, #188]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ac6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae2:	e021      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	0a5b      	lsrs	r3, r3, #9
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	3301      	adds	r3, #1
 8005b34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4c:	ee17 3a90 	vmov	r3, s15
 8005b50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b52:	e005      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
    break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b5c:	61bb      	str	r3, [r7, #24]
    break;
 8005b5e:	bf00      	nop
  }

  return sysclockfreq;
 8005b60:	69bb      	ldr	r3, [r7, #24]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	; 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
 8005b74:	03d09000 	.word	0x03d09000
 8005b78:	003d0900 	.word	0x003d0900
 8005b7c:	017d7840 	.word	0x017d7840
 8005b80:	46000000 	.word	0x46000000
 8005b84:	4c742400 	.word	0x4c742400
 8005b88:	4a742400 	.word	0x4a742400
 8005b8c:	4bbebc20 	.word	0x4bbebc20

08005b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b96:	f7ff fe81 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	490f      	ldr	r1, [pc, #60]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ba8:	5ccb      	ldrb	r3, [r1, r3]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bce:	4a07      	ldr	r2, [pc, #28]	; (8005bec <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	58024400 	.word	0x58024400
 8005be4:	0800a058 	.word	0x0800a058
 8005be8:	24000004 	.word	0x24000004
 8005bec:	24000000 	.word	0x24000000

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bf4:	f7ff ffcc 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	58024400 	.word	0x58024400
 8005c18:	0800a058 	.word	0x0800a058

08005c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c20:	f7ff ffb6 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4904      	ldr	r1, [pc, #16]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	0800a058 	.word	0x0800a058

08005c48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c50:	2300      	movs	r3, #0
 8005c52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c54:	2300      	movs	r3, #0
 8005c56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d03f      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c6c:	d02a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c72:	d824      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c78:	d018      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c7e:	d81e      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c88:	d007      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c8a:	e018      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8c:	4bab      	ldr	r3, [pc, #684]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	4aaa      	ldr	r2, [pc, #680]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c98:	e015      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 f9cf 	bl	8007044 <RCCEx_PLL2_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005caa:	e00c      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3324      	adds	r3, #36	; 0x24
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fa78 	bl	80071a8 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ccc:	4b9b      	ldr	r3, [pc, #620]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd8:	4998      	ldr	r1, [pc, #608]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8005cde:	e001      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d03d      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d826      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d15 	.word	0x08005d15
 8005d04:	08005d23 	.word	0x08005d23
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d4d 	.word	0x08005d4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a88      	ldr	r2, [pc, #544]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d20:	e015      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3304      	adds	r3, #4
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 f98b 	bl	8007044 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d32:	e00c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3324      	adds	r3, #36	; 0x24
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fa34 	bl	80071a8 <RCCEx_PLL3_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d54:	4b79      	ldr	r3, [pc, #484]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	f023 0207 	bic.w	r2, r3, #7
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d60:	4976      	ldr	r1, [pc, #472]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	650b      	str	r3, [r1, #80]	; 0x50
 8005d66:	e001      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d042      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d80:	d02b      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d825      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d88:	2bc0      	cmp	r3, #192	; 0xc0
 8005d8a:	d028      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d8e:	d821      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d90:	2b80      	cmp	r3, #128	; 0x80
 8005d92:	d016      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d81d      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d007      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005da0:	e018      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da2:	4b66      	ldr	r3, [pc, #408]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	4a65      	ldr	r2, [pc, #404]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005dae:	e017      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	2100      	movs	r1, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f944 	bl	8007044 <RCCEx_PLL2_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005dc0:	e00e      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3324      	adds	r3, #36	; 0x24
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f9ed 	bl	80071a8 <RCCEx_PLL3_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd8:	e002      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005de6:	4b55      	ldr	r3, [pc, #340]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	4952      	ldr	r1, [pc, #328]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	650b      	str	r3, [r1, #80]	; 0x50
 8005df8:	e001      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d049      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e14:	d030      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e1a:	d82a      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e20:	d02c      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005e22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e26:	d824      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2c:	d018      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e32:	d81e      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005e3e:	e018      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a3d      	ldr	r2, [pc, #244]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e4c:	e017      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3304      	adds	r3, #4
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f8f5 	bl	8007044 <RCCEx_PLL2_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e5e:	e00e      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f99e 	bl	80071a8 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
      break;
 8005e76:	e002      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e84:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e92:	492a      	ldr	r1, [pc, #168]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	658b      	str	r3, [r1, #88]	; 0x58
 8005e98:	e001      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d04c      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eb4:	d030      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eba:	d82a      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ec0:	d02c      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ec6:	d824      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ecc:	d018      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed2:	d81e      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005edc:	d007      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ede:	e018      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee0:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005eec:	e017      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 f8a5 	bl	8007044 <RCCEx_PLL2_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005efe:	e00e      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3324      	adds	r3, #36	; 0x24
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f94e 	bl	80071a8 <RCCEx_PLL3_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f10:	e005      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
      break;
 8005f16:	e002      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10d      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f32:	4902      	ldr	r1, [pc, #8]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	658b      	str	r3, [r1, #88]	; 0x58
 8005f38:	e004      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d032      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f54:	2b30      	cmp	r3, #48	; 0x30
 8005f56:	d01c      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f58:	2b30      	cmp	r3, #48	; 0x30
 8005f5a:	d817      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d00c      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d813      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d016      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d10f      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6c:	4baf      	ldr	r3, [pc, #700]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	4aae      	ldr	r2, [pc, #696]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f78:	e00e      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 f85f 	bl	8007044 <RCCEx_PLL2_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f8a:	e005      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f90:	e002      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f9e:	4ba3      	ldr	r3, [pc, #652]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	49a0      	ldr	r1, [pc, #640]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fb0:	e001      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d047      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fca:	d030      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd0:	d82a      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd6:	d02c      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fdc:	d824      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d018      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe8:	d81e      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	d007      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005ff4:	e018      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff6:	4b8d      	ldr	r3, [pc, #564]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a8c      	ldr	r2, [pc, #560]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006002:	e017      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f001 f81a 	bl	8007044 <RCCEx_PLL2_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006014:	e00e      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3324      	adds	r3, #36	; 0x24
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f8c3 	bl	80071a8 <RCCEx_PLL3_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006026:	e005      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	75fb      	strb	r3, [r7, #23]
      break;
 800602c:	e002      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800603a:	4b7c      	ldr	r3, [pc, #496]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006046:	4979      	ldr	r1, [pc, #484]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006048:	4313      	orrs	r3, r2
 800604a:	650b      	str	r3, [r1, #80]	; 0x50
 800604c:	e001      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d049      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006066:	d02e      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800606c:	d828      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800606e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006072:	d02a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006078:	d822      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800607a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800607e:	d026      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006084:	d81c      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608a:	d010      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x466>
 800608c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006090:	d816      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01d      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609a:	d111      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3304      	adds	r3, #4
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 ffce 	bl	8007044 <RCCEx_PLL2_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80060ac:	e012      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	2101      	movs	r1, #1
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f877 	bl	80071a8 <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80060be:	e009      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
      break;
 80060c4:	e006      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060da:	4b54      	ldr	r3, [pc, #336]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	4951      	ldr	r1, [pc, #324]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	650b      	str	r3, [r1, #80]	; 0x50
 80060ec:	e001      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04b      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006108:	d02e      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800610a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800610e:	d828      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d02a      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d822      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800611c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006120:	d026      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006126:	d81c      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612c:	d010      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800612e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006132:	d816      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01d      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800613c:	d111      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f000 ff7d 	bl	8007044 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800614e:	e012      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3324      	adds	r3, #36	; 0x24
 8006154:	2101      	movs	r1, #1
 8006156:	4618      	mov	r0, r3
 8006158:	f001 f826 	bl	80071a8 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006160:	e009      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
      break;
 8006166:	e006      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006168:	bf00      	nop
 800616a:	e004      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800616c:	bf00      	nop
 800616e:	e002      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800618a:	4928      	ldr	r1, [pc, #160]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800618c:	4313      	orrs	r3, r2
 800618e:	658b      	str	r3, [r1, #88]	; 0x58
 8006190:	e001      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02f      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061aa:	d00e      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 80061ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b0:	d814      	bhi.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d015      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80061b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ba:	d10f      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80061c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80061c8:	e00c      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	2101      	movs	r1, #1
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 ff37 	bl	8007044 <RCCEx_PLL2_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80061da:	e003      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
      break;
 80061e0:	e000      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80061e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f6:	490d      	ldr	r1, [pc, #52]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	650b      	str	r3, [r1, #80]	; 0x50
 80061fc:	e001      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d033      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	2b03      	cmp	r3, #3
 8006214:	d81c      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006216:	a201      	add	r2, pc, #4	; (adr r2, 800621c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006257 	.word	0x08006257
 8006220:	08006231 	.word	0x08006231
 8006224:	0800623f 	.word	0x0800623f
 8006228:	08006257 	.word	0x08006257
 800622c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4bb8      	ldr	r3, [pc, #736]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4ab7      	ldr	r2, [pc, #732]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800623c:	e00c      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fefd 	bl	8007044 <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800624e:	e003      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	75fb      	strb	r3, [r7, #23]
      break;
 8006254:	e000      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800625e:	4bad      	ldr	r3, [pc, #692]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	f023 0203 	bic.w	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	49aa      	ldr	r1, [pc, #680]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006270:	e001      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8086 	beq.w	8006390 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006284:	4ba4      	ldr	r3, [pc, #656]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4aa3      	ldr	r2, [pc, #652]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800628a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006290:	f7fb f91c 	bl	80014cc <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006296:	e009      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006298:	f7fb f918 	bl	80014cc <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d902      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	75fb      	strb	r3, [r7, #23]
        break;
 80062aa:	e005      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ac:	4b9a      	ldr	r3, [pc, #616]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ef      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d166      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062be:	4b95      	ldr	r3, [pc, #596]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062c8:	4053      	eors	r3, r2
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d013      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062d2:	4b90      	ldr	r3, [pc, #576]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062dc:	4b8d      	ldr	r3, [pc, #564]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	4a8c      	ldr	r2, [pc, #560]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062e8:	4b8a      	ldr	r3, [pc, #552]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ec:	4a89      	ldr	r2, [pc, #548]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062f4:	4a87      	ldr	r2, [pc, #540]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006304:	d115      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006306:	f7fb f8e1 	bl	80014cc <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800630c:	e00b      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f7fb f8dd 	bl	80014cc <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	; 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d902      	bls.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
            break;
 8006324:	e005      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006326:	4b7b      	ldr	r3, [pc, #492]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0ed      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d126      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006346:	d10d      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006348:	4b72      	ldr	r3, [pc, #456]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006356:	0919      	lsrs	r1, r3, #4
 8006358:	4b70      	ldr	r3, [pc, #448]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800635a:	400b      	ands	r3, r1
 800635c:	496d      	ldr	r1, [pc, #436]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	610b      	str	r3, [r1, #16]
 8006362:	e005      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006364:	4b6b      	ldr	r3, [pc, #428]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	4a6a      	ldr	r2, [pc, #424]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800636a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800636e:	6113      	str	r3, [r2, #16]
 8006370:	4b68      	ldr	r3, [pc, #416]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800637a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800637e:	4965      	ldr	r1, [pc, #404]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006380:	4313      	orrs	r3, r2
 8006382:	670b      	str	r3, [r1, #112]	; 0x70
 8006384:	e004      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	75bb      	strb	r3, [r7, #22]
 800638a:	e001      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d07e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a0:	2b28      	cmp	r3, #40	; 0x28
 80063a2:	d867      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	0800647b 	.word	0x0800647b
 80063b0:	08006475 	.word	0x08006475
 80063b4:	08006475 	.word	0x08006475
 80063b8:	08006475 	.word	0x08006475
 80063bc:	08006475 	.word	0x08006475
 80063c0:	08006475 	.word	0x08006475
 80063c4:	08006475 	.word	0x08006475
 80063c8:	08006475 	.word	0x08006475
 80063cc:	08006451 	.word	0x08006451
 80063d0:	08006475 	.word	0x08006475
 80063d4:	08006475 	.word	0x08006475
 80063d8:	08006475 	.word	0x08006475
 80063dc:	08006475 	.word	0x08006475
 80063e0:	08006475 	.word	0x08006475
 80063e4:	08006475 	.word	0x08006475
 80063e8:	08006475 	.word	0x08006475
 80063ec:	08006463 	.word	0x08006463
 80063f0:	08006475 	.word	0x08006475
 80063f4:	08006475 	.word	0x08006475
 80063f8:	08006475 	.word	0x08006475
 80063fc:	08006475 	.word	0x08006475
 8006400:	08006475 	.word	0x08006475
 8006404:	08006475 	.word	0x08006475
 8006408:	08006475 	.word	0x08006475
 800640c:	0800647b 	.word	0x0800647b
 8006410:	08006475 	.word	0x08006475
 8006414:	08006475 	.word	0x08006475
 8006418:	08006475 	.word	0x08006475
 800641c:	08006475 	.word	0x08006475
 8006420:	08006475 	.word	0x08006475
 8006424:	08006475 	.word	0x08006475
 8006428:	08006475 	.word	0x08006475
 800642c:	0800647b 	.word	0x0800647b
 8006430:	08006475 	.word	0x08006475
 8006434:	08006475 	.word	0x08006475
 8006438:	08006475 	.word	0x08006475
 800643c:	08006475 	.word	0x08006475
 8006440:	08006475 	.word	0x08006475
 8006444:	08006475 	.word	0x08006475
 8006448:	08006475 	.word	0x08006475
 800644c:	0800647b 	.word	0x0800647b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	2101      	movs	r1, #1
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fdf4 	bl	8007044 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006460:	e00c      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3324      	adds	r3, #36	; 0x24
 8006466:	2101      	movs	r1, #1
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fe9d 	bl	80071a8 <RCCEx_PLL3_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
      break;
 8006478:	e000      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800647a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006482:	4b24      	ldr	r3, [pc, #144]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800648e:	4921      	ldr	r1, [pc, #132]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006490:	4313      	orrs	r3, r2
 8006492:	654b      	str	r3, [r1, #84]	; 0x54
 8006494:	e001      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d820      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064f7 	.word	0x080064f7
 80064b8:	080064cd 	.word	0x080064cd
 80064bc:	080064df 	.word	0x080064df
 80064c0:	080064f7 	.word	0x080064f7
 80064c4:	080064f7 	.word	0x080064f7
 80064c8:	080064f7 	.word	0x080064f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	2101      	movs	r1, #1
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fdb6 	bl	8007044 <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80064dc:	e00c      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3324      	adds	r3, #36	; 0x24
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe5f 	bl	80071a8 <RCCEx_PLL3_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
      break;
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80064f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d110      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f023 0207 	bic.w	r2, r3, #7
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	4902      	ldr	r1, [pc, #8]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800650c:	4313      	orrs	r3, r2
 800650e:	654b      	str	r3, [r1, #84]	; 0x54
 8006510:	e008      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006512:	bf00      	nop
 8006514:	58024400 	.word	0x58024400
 8006518:	58024800 	.word	0x58024800
 800651c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d039      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	2b05      	cmp	r3, #5
 8006538:	d820      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006583 	.word	0x08006583
 8006544:	08006559 	.word	0x08006559
 8006548:	0800656b 	.word	0x0800656b
 800654c:	08006583 	.word	0x08006583
 8006550:	08006583 	.word	0x08006583
 8006554:	08006583 	.word	0x08006583
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fd70 	bl	8007044 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006568:	e00c      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3324      	adds	r3, #36	; 0x24
 800656e:	2101      	movs	r1, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fe19 	bl	80071a8 <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800657a:	e003      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
      break;
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800658a:	4bb7      	ldr	r3, [pc, #732]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658e:	f023 0207 	bic.w	r2, r3, #7
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	49b3      	ldr	r1, [pc, #716]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800659a:	4313      	orrs	r3, r2
 800659c:	658b      	str	r3, [r1, #88]	; 0x58
 800659e:	e001      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d04b      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ba:	d02e      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80065bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c0:	d828      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c6:	d02a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d822      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80065ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065d2:	d026      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80065d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065d8:	d81c      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80065da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065de:	d010      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80065e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e4:	d816      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01d      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80065ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ee:	d111      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fd24 	bl	8007044 <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006600:	e012      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3324      	adds	r3, #36	; 0x24
 8006606:	2102      	movs	r1, #2
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fdcd 	bl	80071a8 <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006612:	e009      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e006      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800661a:	bf00      	nop
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662e:	4b8e      	ldr	r3, [pc, #568]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	498a      	ldr	r1, [pc, #552]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800663e:	4313      	orrs	r3, r2
 8006640:	654b      	str	r3, [r1, #84]	; 0x54
 8006642:	e001      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d04b      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800665a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800665e:	d02e      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006660:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006664:	d828      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d02a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006670:	d822      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006672:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006676:	d026      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800667c:	d81c      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800667e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006682:	d010      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006688:	d816      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01d      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800668e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006692:	d111      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fcd2 	bl	8007044 <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80066a4:	e012      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2102      	movs	r1, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fd7b 	bl	80071a8 <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80066b6:	e009      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80066be:	bf00      	nop
 80066c0:	e004      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80066ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066d2:	4b65      	ldr	r3, [pc, #404]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066e0:	4961      	ldr	r1, [pc, #388]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	658b      	str	r3, [r1, #88]	; 0x58
 80066e6:	e001      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d04b      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006702:	d02e      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006704:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006708:	d828      	bhi.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800670a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670e:	d02a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d822      	bhi.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006716:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800671a:	d026      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800671c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006720:	d81c      	bhi.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006726:	d010      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800672c:	d816      	bhi.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01d      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	d111      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fc80 	bl	8007044 <RCCEx_PLL2_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006748:	e012      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3324      	adds	r3, #36	; 0x24
 800674e:	2102      	movs	r1, #2
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fd29 	bl	80071a8 <RCCEx_PLL3_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800675a:	e009      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	75fb      	strb	r3, [r7, #23]
      break;
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800676e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006776:	4b3c      	ldr	r3, [pc, #240]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006784:	4938      	ldr	r1, [pc, #224]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006786:	4313      	orrs	r3, r2
 8006788:	658b      	str	r3, [r1, #88]	; 0x58
 800678a:	e001      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	d10a      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3324      	adds	r3, #36	; 0x24
 80067ac:	2102      	movs	r1, #2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fcfa 	bl	80071a8 <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067be:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80067c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	4926      	ldr	r1, [pc, #152]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e8:	d10a      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3324      	adds	r3, #36	; 0x24
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fcd9 	bl	80071a8 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006800:	4b19      	ldr	r3, [pc, #100]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680e:	4916      	ldr	r1, [pc, #88]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006810:	4313      	orrs	r3, r2
 8006812:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d036      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800682a:	d01f      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006830:	d817      	bhi.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d009      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800683c:	e011      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3304      	adds	r3, #4
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fbfd 	bl	8007044 <RCCEx_PLL2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800684e:	e00e      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3324      	adds	r3, #36	; 0x24
 8006854:	2102      	movs	r1, #2
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fca6 	bl	80071a8 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006860:	e005      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]
      break;
 8006866:	e002      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006868:	58024400 	.word	0x58024400
      break;
 800686c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006874:	4b93      	ldr	r3, [pc, #588]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006882:	4990      	ldr	r1, [pc, #576]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006884:	4313      	orrs	r3, r2
 8006886:	658b      	str	r3, [r1, #88]	; 0x58
 8006888:	e001      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d033      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068a4:	d01c      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80068a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068aa:	d816      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80068ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b0:	d003      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80068b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068b6:	d007      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80068b8:	e00f      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ba:	4b82      	ldr	r3, [pc, #520]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	4a81      	ldr	r2, [pc, #516]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80068c6:	e00c      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3324      	adds	r3, #36	; 0x24
 80068cc:	2101      	movs	r1, #1
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fc6a 	bl	80071a8 <RCCEx_PLL3_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80068d8:	e003      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
      break;
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80068e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068e8:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f6:	4973      	ldr	r1, [pc, #460]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	654b      	str	r3, [r1, #84]	; 0x54
 80068fc:	e001      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d029      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691a:	d007      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800691c:	e00f      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691e:	4b69      	ldr	r3, [pc, #420]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	4a68      	ldr	r2, [pc, #416]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800692a:	e00b      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3304      	adds	r3, #4
 8006930:	2102      	movs	r1, #2
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fb86 	bl	8007044 <RCCEx_PLL2_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800693c:	e002      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
      break;
 8006942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800694a:	4b5e      	ldr	r3, [pc, #376]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006956:	495b      	ldr	r1, [pc, #364]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006958:	4313      	orrs	r3, r2
 800695a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800695c:	e001      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	2102      	movs	r1, #2
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fc17 	bl	80071a8 <RCCEx_PLL3_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d030      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006998:	d017      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800699a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800699e:	d811      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80069a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a4:	d013      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80069a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069aa:	d80b      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d010      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b4:	d106      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b6:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	4a42      	ldr	r2, [pc, #264]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80069c2:	e007      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e004      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80069ca:	bf00      	nop
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80069ce:	bf00      	nop
 80069d0:	e000      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80069d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069da:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e6:	4937      	ldr	r1, [pc, #220]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	654b      	str	r3, [r1, #84]	; 0x54
 80069ec:	e001      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	492e      	ldr	r1, [pc, #184]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a1c:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a2a:	4926      	ldr	r1, [pc, #152]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a3c:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a48:	491e      	ldr	r1, [pc, #120]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	4a19      	ldr	r2, [pc, #100]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a64:	6113      	str	r3, [r2, #16]
 8006a66:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006a70:	4914      	ldr	r1, [pc, #80]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da08      	bge.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	490e      	ldr	r1, [pc, #56]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	4906      	ldr	r1, [pc, #24]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006ab0:	7dbb      	ldrb	r3, [r7, #22]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	58024400 	.word	0x58024400

08006ac8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006acc:	f7ff f860 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	4b06      	ldr	r3, [pc, #24]	; (8006aec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	4904      	ldr	r1, [pc, #16]	; (8006af0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ade:	5ccb      	ldrb	r3, [r1, r3]
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	58024400 	.word	0x58024400
 8006af0:	0800a058 	.word	0x0800a058

08006af4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006afc:	4ba1      	ldr	r3, [pc, #644]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006b06:	4b9f      	ldr	r3, [pc, #636]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	0b1b      	lsrs	r3, r3, #12
 8006b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b12:	4b9c      	ldr	r3, [pc, #624]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006b1e:	4b99      	ldr	r3, [pc, #612]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8111 	beq.w	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f000 8083 	beq.w	8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f200 80a1 	bhi.w	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d056      	beq.n	8006c0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b5e:	e099      	b.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b60:	4b88      	ldr	r3, [pc, #544]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02d      	beq.n	8006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b6c:	4b85      	ldr	r3, [pc, #532]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	4a84      	ldr	r2, [pc, #528]	; (8006d88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b7b      	ldr	r3, [pc, #492]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006bc6:	e087      	b.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b6a      	ldr	r3, [pc, #424]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0a:	e065      	b.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b59      	ldr	r3, [pc, #356]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c4e:	e043      	b.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b48      	ldr	r3, [pc, #288]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c92:	e021      	b.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b37      	ldr	r3, [pc, #220]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	0a5b      	lsrs	r3, r3, #9
 8006cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfe:	ee17 2a90 	vmov	r2, s15
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006d06:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d38:	0e1b      	lsrs	r3, r3, #24
 8006d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5a:	ee17 2a90 	vmov	r2, s15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d62:	e008      	b.n	8006d76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	3724      	adds	r7, #36	; 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	58024400 	.word	0x58024400
 8006d88:	03d09000 	.word	0x03d09000
 8006d8c:	46000000 	.word	0x46000000
 8006d90:	4c742400 	.word	0x4c742400
 8006d94:	4a742400 	.word	0x4a742400
 8006d98:	4bbebc20 	.word	0x4bbebc20

08006d9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006da4:	4ba1      	ldr	r3, [pc, #644]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006dae:	4b9f      	ldr	r3, [pc, #636]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	0d1b      	lsrs	r3, r3, #20
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006dba:	4b9c      	ldr	r3, [pc, #624]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006dc6:	4b99      	ldr	r3, [pc, #612]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	08db      	lsrs	r3, r3, #3
 8006dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8111 	beq.w	800700c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	f000 8083 	beq.w	8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	f200 80a1 	bhi.w	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d056      	beq.n	8006eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e06:	e099      	b.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e08:	4b88      	ldr	r3, [pc, #544]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d02d      	beq.n	8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e14:	4b85      	ldr	r3, [pc, #532]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	08db      	lsrs	r3, r3, #3
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	4a84      	ldr	r2, [pc, #528]	; (8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b7b      	ldr	r3, [pc, #492]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e6e:	e087      	b.n	8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b6a      	ldr	r3, [pc, #424]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb2:	e065      	b.n	8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800703c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	4b59      	ldr	r3, [pc, #356]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef6:	e043      	b.n	8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0a:	4b48      	ldr	r3, [pc, #288]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f3a:	e021      	b.n	8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800703c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4e:	4b37      	ldr	r3, [pc, #220]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f80:	4b2a      	ldr	r3, [pc, #168]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	0a5b      	lsrs	r3, r3, #9
 8006f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa6:	ee17 2a90 	vmov	r2, s15
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006fae:	4b1f      	ldr	r3, [pc, #124]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	0c1b      	lsrs	r3, r3, #16
 8006fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd4:	ee17 2a90 	vmov	r2, s15
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006fdc:	4b13      	ldr	r3, [pc, #76]	; (800702c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	0e1b      	lsrs	r3, r3, #24
 8006fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007002:	ee17 2a90 	vmov	r2, s15
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800700a:	e008      	b.n	800701e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	609a      	str	r2, [r3, #8]
}
 800701e:	bf00      	nop
 8007020:	3724      	adds	r7, #36	; 0x24
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400
 8007030:	03d09000 	.word	0x03d09000
 8007034:	46000000 	.word	0x46000000
 8007038:	4c742400 	.word	0x4c742400
 800703c:	4a742400 	.word	0x4a742400
 8007040:	4bbebc20 	.word	0x4bbebc20

08007044 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007052:	4b53      	ldr	r3, [pc, #332]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	2b03      	cmp	r3, #3
 800705c:	d101      	bne.n	8007062 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e099      	b.n	8007196 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007062:	4b4f      	ldr	r3, [pc, #316]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a4e      	ldr	r2, [pc, #312]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007068:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800706c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800706e:	f7fa fa2d 	bl	80014cc <HAL_GetTick>
 8007072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007074:	e008      	b.n	8007088 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007076:	f7fa fa29 	bl	80014cc <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e086      	b.n	8007196 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007088:	4b45      	ldr	r3, [pc, #276]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f0      	bne.n	8007076 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007094:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	031b      	lsls	r3, r3, #12
 80070a2:	493f      	ldr	r1, [pc, #252]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	628b      	str	r3, [r1, #40]	; 0x28
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	025b      	lsls	r3, r3, #9
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	061b      	lsls	r3, r3, #24
 80070d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070d8:	4931      	ldr	r1, [pc, #196]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	492d      	ldr	r1, [pc, #180]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070f0:	4b2b      	ldr	r3, [pc, #172]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	f023 0220 	bic.w	r2, r3, #32
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	4928      	ldr	r1, [pc, #160]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007102:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	4a26      	ldr	r2, [pc, #152]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007108:	f023 0310 	bic.w	r3, r3, #16
 800710c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <RCCEx_PLL2_Config+0x160>)
 8007114:	4013      	ands	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	69d2      	ldr	r2, [r2, #28]
 800711a:	00d2      	lsls	r2, r2, #3
 800711c:	4920      	ldr	r1, [pc, #128]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800711e:	4313      	orrs	r3, r2
 8007120:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007122:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	4a1e      	ldr	r2, [pc, #120]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007128:	f043 0310 	orr.w	r3, r3, #16
 800712c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800713a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007140:	e00f      	b.n	8007162 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d106      	bne.n	8007156 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800714e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007154:	e005      	b.n	8007162 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800715c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a0e      	ldr	r2, [pc, #56]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 8007168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800716c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800716e:	f7fa f9ad 	bl	80014cc <HAL_GetTick>
 8007172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007174:	e008      	b.n	8007188 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007176:	f7fa f9a9 	bl	80014cc <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e006      	b.n	8007196 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <RCCEx_PLL2_Config+0x15c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f0      	beq.n	8007176 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	58024400 	.word	0x58024400
 80071a4:	ffff0007 	.word	0xffff0007

080071a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071b6:	4b53      	ldr	r3, [pc, #332]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d101      	bne.n	80071c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e099      	b.n	80072fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071c6:	4b4f      	ldr	r3, [pc, #316]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a4e      	ldr	r2, [pc, #312]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d2:	f7fa f97b 	bl	80014cc <HAL_GetTick>
 80071d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071d8:	e008      	b.n	80071ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071da:	f7fa f977 	bl	80014cc <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e086      	b.n	80072fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071ec:	4b45      	ldr	r3, [pc, #276]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1f0      	bne.n	80071da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	051b      	lsls	r3, r3, #20
 8007206:	493f      	ldr	r1, [pc, #252]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007208:	4313      	orrs	r3, r2
 800720a:	628b      	str	r3, [r1, #40]	; 0x28
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	3b01      	subs	r3, #1
 8007212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	3b01      	subs	r3, #1
 800721c:	025b      	lsls	r3, r3, #9
 800721e:	b29b      	uxth	r3, r3
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	3b01      	subs	r3, #1
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	3b01      	subs	r3, #1
 8007236:	061b      	lsls	r3, r3, #24
 8007238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800723c:	4931      	ldr	r1, [pc, #196]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800723e:	4313      	orrs	r3, r2
 8007240:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007242:	4b30      	ldr	r3, [pc, #192]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	492d      	ldr	r1, [pc, #180]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007250:	4313      	orrs	r3, r2
 8007252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007254:	4b2b      	ldr	r3, [pc, #172]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	4928      	ldr	r1, [pc, #160]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007266:	4b27      	ldr	r3, [pc, #156]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	4a26      	ldr	r2, [pc, #152]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800726c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <RCCEx_PLL3_Config+0x160>)
 8007278:	4013      	ands	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	69d2      	ldr	r2, [r2, #28]
 800727e:	00d2      	lsls	r2, r2, #3
 8007280:	4920      	ldr	r1, [pc, #128]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007282:	4313      	orrs	r3, r2
 8007284:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007286:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800728c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a19      	ldr	r2, [pc, #100]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 800729e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072a4:	e00f      	b.n	80072c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d106      	bne.n	80072ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072ac:	4b15      	ldr	r3, [pc, #84]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	4a14      	ldr	r2, [pc, #80]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b8:	e005      	b.n	80072c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072ba:	4b12      	ldr	r3, [pc, #72]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	4a11      	ldr	r2, [pc, #68]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a0e      	ldr	r2, [pc, #56]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072d2:	f7fa f8fb 	bl	80014cc <HAL_GetTick>
 80072d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072d8:	e008      	b.n	80072ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072da:	f7fa f8f7 	bl	80014cc <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e006      	b.n	80072fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f0      	beq.n	80072da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
 8007308:	ffff0007 	.word	0xffff0007

0800730c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e0f1      	b.n	8007502 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a78      	ldr	r2, [pc, #480]	; (800750c <HAL_SPI_Init+0x200>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00f      	beq.n	800734e <HAL_SPI_Init+0x42>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a77      	ldr	r2, [pc, #476]	; (8007510 <HAL_SPI_Init+0x204>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00a      	beq.n	800734e <HAL_SPI_Init+0x42>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a75      	ldr	r2, [pc, #468]	; (8007514 <HAL_SPI_Init+0x208>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d005      	beq.n	800734e <HAL_SPI_Init+0x42>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b0f      	cmp	r3, #15
 8007348:	d901      	bls.n	800734e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e0d9      	b.n	8007502 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 f8f4 	bl	800853c <SPI_GetPacketSize>
 8007354:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a6c      	ldr	r2, [pc, #432]	; (800750c <HAL_SPI_Init+0x200>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00c      	beq.n	800737a <HAL_SPI_Init+0x6e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a6a      	ldr	r2, [pc, #424]	; (8007510 <HAL_SPI_Init+0x204>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <HAL_SPI_Init+0x6e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a69      	ldr	r2, [pc, #420]	; (8007514 <HAL_SPI_Init+0x208>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d002      	beq.n	800737a <HAL_SPI_Init+0x6e>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b08      	cmp	r3, #8
 8007378:	d811      	bhi.n	800739e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800737e:	4a63      	ldr	r2, [pc, #396]	; (800750c <HAL_SPI_Init+0x200>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a61      	ldr	r2, [pc, #388]	; (8007510 <HAL_SPI_Init+0x204>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <HAL_SPI_Init+0x8c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a60      	ldr	r2, [pc, #384]	; (8007514 <HAL_SPI_Init+0x208>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d104      	bne.n	80073a2 <HAL_SPI_Init+0x96>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b10      	cmp	r3, #16
 800739c:	d901      	bls.n	80073a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e0af      	b.n	8007502 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7f9 fdae 	bl	8000f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80073de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073e8:	d119      	bne.n	800741e <HAL_SPI_Init+0x112>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073f2:	d103      	bne.n	80073fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10c      	bne.n	800741e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800740c:	d107      	bne.n	800741e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800741c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	431a      	orrs	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	ea42 0103 	orr.w	r1, r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747e:	ea42 0103 	orr.w	r1, r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d113      	bne.n	80074be <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0201 	bic.w	r2, r2, #1
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40013000 	.word	0x40013000
 8007510:	40003800 	.word	0x40003800
 8007514:	40003c00 	.word	0x40003c00

08007518 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_SPI_Transmit_DMA+0x20>
 8007534:	2302      	movs	r3, #2
 8007536:	e12c      	b.n	8007792 <HAL_SPI_Transmit_DMA+0x27a>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d007      	beq.n	800755c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800754c:	2302      	movs	r3, #2
 800754e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	e11a      	b.n	8007792 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_SPI_Transmit_DMA+0x50>
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	e10c      	b.n	8007792 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2203      	movs	r2, #3
 800757c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80075c8:	d107      	bne.n	80075da <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	d905      	bls.n	80075ee <HAL_SPI_Transmit_DMA+0xd6>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ec:	d10f      	bne.n	800760e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80075f2:	2b07      	cmp	r3, #7
 80075f4:	d913      	bls.n	800761e <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007600:	d00d      	beq.n	800761e <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007606:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800760c:	d007      	beq.n	800761e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	e0b9      	b.n	8007792 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b07      	cmp	r3, #7
 8007624:	d820      	bhi.n	8007668 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007630:	d109      	bne.n	8007646 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007638:	b29b      	uxth	r3, r3
 800763a:	3301      	adds	r3, #1
 800763c:	105b      	asrs	r3, r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007650:	d11e      	bne.n	8007690 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007658:	b29b      	uxth	r3, r3
 800765a:	3303      	adds	r3, #3
 800765c:	109b      	asrs	r3, r3, #2
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007666:	e013      	b.n	8007690 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b0f      	cmp	r3, #15
 800766e:	d80f      	bhi.n	8007690 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800767a:	d109      	bne.n	8007690 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007682:	b29b      	uxth	r3, r3
 8007684:	3301      	adds	r3, #1
 8007686:	105b      	asrs	r3, r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007694:	4a41      	ldr	r2, [pc, #260]	; (800779c <HAL_SPI_Transmit_DMA+0x284>)
 8007696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800769c:	4a40      	ldr	r2, [pc, #256]	; (80077a0 <HAL_SPI_Transmit_DMA+0x288>)
 800769e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a4:	4a3f      	ldr	r2, [pc, #252]	; (80077a4 <HAL_SPI_Transmit_DMA+0x28c>)
 80076a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ac:	2200      	movs	r2, #0
 80076ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076be:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c8:	4619      	mov	r1, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3320      	adds	r3, #32
 80076d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80076da:	f7fa fb9f 	bl	8001e1c <HAL_DMA_Start_IT>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d013      	beq.n	800770c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ea:	f043 0210 	orr.w	r2, r3, #16
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	e042      	b.n	8007792 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007716:	d108      	bne.n	800772a <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b21      	ldr	r3, [pc, #132]	; (80077a8 <HAL_SPI_Transmit_DMA+0x290>)
 8007724:	400b      	ands	r3, r1
 8007726:	6053      	str	r3, [r2, #4]
 8007728:	e009      	b.n	800773e <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <HAL_SPI_Transmit_DMA+0x290>)
 8007732:	4013      	ands	r3, r2
 8007734:	88f9      	ldrh	r1, [r7, #6]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	430b      	orrs	r3, r1
 800773c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800775c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0201 	orr.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007776:	d107      	bne.n	8007788 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007786:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007790:	7dfb      	ldrb	r3, [r7, #23]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	0800832f 	.word	0x0800832f
 80077a0:	0800825d 	.word	0x0800825d
 80077a4:	08008383 	.word	0x08008383
 80077a8:	ffff0000 	.word	0xffff0000

080077ac <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d110      	bne.n	80077e8 <HAL_SPI_Receive_DMA+0x3c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ce:	d10b      	bne.n	80077e8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2204      	movs	r2, #4
 80077d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f940 	bl	8007a64 <HAL_SPI_TransmitReceive_DMA>
 80077e4:	4603      	mov	r3, r0
 80077e6:	e130      	b.n	8007a4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_SPI_Receive_DMA+0x4a>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e129      	b.n	8007a4a <HAL_SPI_Receive_DMA+0x29e>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b01      	cmp	r3, #1
 8007808:	d007      	beq.n	800781a <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 800780a:	2302      	movs	r3, #2
 800780c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	e117      	b.n	8007a4a <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_SPI_Receive_DMA+0x7a>
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d107      	bne.n	8007836 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	e109      	b.n	8007a4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2204      	movs	r2, #4
 800783a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007880:	d107      	bne.n	8007892 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007890:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d905      	bls.n	80078a6 <HAL_SPI_Receive_DMA+0xfa>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078a4:	d10f      	bne.n	80078c6 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80078aa:	2b07      	cmp	r3, #7
 80078ac:	d913      	bls.n	80078d6 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b8:	d00d      	beq.n	80078d6 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078be:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80078c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c4:	d007      	beq.n	80078d6 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	e0b9      	b.n	8007a4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078e4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	2b07      	cmp	r3, #7
 80078ec:	d820      	bhi.n	8007930 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f8:	d109      	bne.n	800790e <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3301      	adds	r3, #1
 8007904:	105b      	asrs	r3, r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007918:	d11e      	bne.n	8007958 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007920:	b29b      	uxth	r3, r3
 8007922:	3303      	adds	r3, #3
 8007924:	109b      	asrs	r3, r3, #2
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800792e:	e013      	b.n	8007958 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	2b0f      	cmp	r3, #15
 8007936:	d80f      	bhi.n	8007958 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007942:	d109      	bne.n	8007958 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3301      	adds	r3, #1
 800794e:	105b      	asrs	r3, r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795c:	4a3d      	ldr	r2, [pc, #244]	; (8007a54 <HAL_SPI_Receive_DMA+0x2a8>)
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007964:	4a3c      	ldr	r2, [pc, #240]	; (8007a58 <HAL_SPI_Receive_DMA+0x2ac>)
 8007966:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796c:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <HAL_SPI_Receive_DMA+0x2b0>)
 800796e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007974:	2200      	movs	r2, #0
 8007976:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3330      	adds	r3, #48	; 0x30
 8007982:	4619      	mov	r1, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007988:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007990:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007992:	f7fa fa43 	bl	8001e1c <HAL_DMA_Start_IT>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d013      	beq.n	80079c4 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a2:	f043 0210 	orr.w	r2, r3, #16
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	e042      	b.n	8007a4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ce:	d108      	bne.n	80079e2 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <HAL_SPI_Receive_DMA+0x2b4>)
 80079dc:	400b      	ands	r3, r1
 80079de:	6053      	str	r3, [r2, #4]
 80079e0:	e009      	b.n	80079f6 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	4b1d      	ldr	r3, [pc, #116]	; (8007a60 <HAL_SPI_Receive_DMA+0x2b4>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	88f9      	ldrh	r1, [r7, #6]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a04:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8007a14:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a2e:	d107      	bne.n	8007a40 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	0800834b 	.word	0x0800834b
 8007a58:	080082a3 	.word	0x080082a3
 8007a5c:	08008383 	.word	0x08008383
 8007a60:	ffff0000 	.word	0xffff0000

08007a64 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e1b4      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x38a>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a92:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a9a:	7dbb      	ldrb	r3, [r7, #22]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d012      	beq.n	8007ac6 <HAL_SPI_TransmitReceive_DMA+0x62>
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa6:	d106      	bne.n	8007ab6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007ab0:	7dbb      	ldrb	r3, [r7, #22]
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d007      	beq.n	8007ac6 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	e193      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d107      	bne.n	8007ae8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	e182      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d003      	beq.n	8007afc <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2205      	movs	r2, #5
 8007af8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	887a      	ldrh	r2, [r7, #2]
 8007b0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	887a      	ldrh	r2, [r7, #2]
 8007b16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	887a      	ldrh	r2, [r7, #2]
 8007b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	887a      	ldrh	r2, [r7, #2]
 8007b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007b4a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b0f      	cmp	r3, #15
 8007b52:	d905      	bls.n	8007b60 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b5e:	d10f      	bne.n	8007b80 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007b64:	2b07      	cmp	r3, #7
 8007b66:	d913      	bls.n	8007b90 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b72:	d00d      	beq.n	8007b90 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b78:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b7e:	d007      	beq.n	8007b90 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	e12e      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	d840      	bhi.n	8007c1a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba2:	d109      	bne.n	8007bb8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3301      	adds	r3, #1
 8007bae:	105b      	asrs	r3, r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc2:	d109      	bne.n	8007bd8 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3303      	adds	r3, #3
 8007bce:	109b      	asrs	r3, r3, #2
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be2:	d109      	bne.n	8007bf8 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	105b      	asrs	r3, r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c02:	d12e      	bne.n	8007c62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	109b      	asrs	r3, r3, #2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007c18:	e023      	b.n	8007c62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	2b0f      	cmp	r3, #15
 8007c20:	d81f      	bhi.n	8007c62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c2c:	d109      	bne.n	8007c42 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3301      	adds	r3, #1
 8007c38:	105b      	asrs	r3, r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c4c:	d109      	bne.n	8007c62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3301      	adds	r3, #1
 8007c58:	105b      	asrs	r3, r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d108      	bne.n	8007c80 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c72:	4a61      	ldr	r2, [pc, #388]	; (8007df8 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7a:	4a60      	ldr	r2, [pc, #384]	; (8007dfc <HAL_SPI_TransmitReceive_DMA+0x398>)
 8007c7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c7e:	e007      	b.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c84:	4a5e      	ldr	r2, [pc, #376]	; (8007e00 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8007c86:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8c:	4a5d      	ldr	r2, [pc, #372]	; (8007e04 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8007c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c94:	4a5c      	ldr	r2, [pc, #368]	; (8007e08 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8007c96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3330      	adds	r3, #48	; 0x30
 8007caa:	4619      	mov	r1, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007cb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007cba:	f7fa f8af 	bl	8001e1c <HAL_DMA_Start_IT>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d013      	beq.n	8007cec <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cca:	f043 0210 	orr.w	r2, r3, #16
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	e080      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfa:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d00:	2200      	movs	r2, #0
 8007d02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d08:	2200      	movs	r2, #0
 8007d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d10:	2200      	movs	r2, #0
 8007d12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d18:	2200      	movs	r2, #0
 8007d1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d24:	4619      	mov	r1, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3320      	adds	r3, #32
 8007d2c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d34:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007d36:	f7fa f871 	bl	8001e1c <HAL_DMA_Start_IT>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d013      	beq.n	8007d68 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d46:	f043 0210 	orr.w	r2, r3, #16
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	e042      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d72:	d108      	bne.n	8007d86 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6859      	ldr	r1, [r3, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b23      	ldr	r3, [pc, #140]	; (8007e0c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8007d80:	400b      	ands	r3, r1
 8007d82:	6053      	str	r3, [r2, #4]
 8007d84:	e009      	b.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	8879      	ldrh	r1, [r7, #2]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	430b      	orrs	r3, r1
 8007d98:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007da8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8007db8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dd2:	d107      	bne.n	8007de4 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	0800834b 	.word	0x0800834b
 8007dfc:	080082a3 	.word	0x080082a3
 8007e00:	08008367 	.word	0x08008367
 8007e04:	080082e9 	.word	0x080082e9
 8007e08:	08008383 	.word	0x08008383
 8007e0c:	ffff0000 	.word	0xffff0000

08007e10 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007e28:	6a3a      	ldr	r2, [r7, #32]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e42:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3330      	adds	r3, #48	; 0x30
 8007e4a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d113      	bne.n	8007e7e <HAL_SPI_IRQHandler+0x6e>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f003 0320 	and.w	r3, r3, #32
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10e      	bne.n	8007e7e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
    handled = 1UL;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10f      	bne.n	8007ea8 <HAL_SPI_IRQHandler+0x98>
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
    handled = 1UL;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10f      	bne.n	8007ed2 <HAL_SPI_IRQHandler+0xc2>
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
    handled = 1UL;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f040 816f 	bne.w	80081b8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80a0 	beq.w	8008026 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0208 	orr.w	r2, r2, #8
 8007ef4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699a      	ldr	r2, [r3, #24]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0210 	orr.w	r2, r2, #16
 8007f04:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699a      	ldr	r2, [r3, #24]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f14:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0208 	bic.w	r2, r2, #8
 8007f24:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00f      	beq.n	8007f50 <HAL_SPI_IRQHandler+0x140>
 8007f30:	7cfb      	ldrb	r3, [r7, #19]
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d004      	beq.n	8007f40 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_SPI_IRQHandler+0x140>
 8007f40:	7cfb      	ldrb	r3, [r7, #19]
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d059      	beq.n	8007ffa <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d154      	bne.n	8007ffa <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d13d      	bne.n	8007fda <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007f5e:	e036      	b.n	8007fce <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	2b0f      	cmp	r3, #15
 8007f66:	d90b      	bls.n	8007f80 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f72:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	665a      	str	r2, [r3, #100]	; 0x64
 8007f7e:	e01d      	b.n	8007fbc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	2b07      	cmp	r3, #7
 8007f86:	d90b      	bls.n	8007fa0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	8812      	ldrh	r2, [r2, #0]
 8007f90:	b292      	uxth	r2, r2
 8007f92:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	665a      	str	r2, [r3, #100]	; 0x64
 8007f9e:	e00d      	b.n	8007fbc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fac:	7812      	ldrb	r2, [r2, #0]
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1c2      	bne.n	8007f60 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa0e 	bl	80083fc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f928 	bl	8008248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007ff8:	e0e3      	b.n	80081c2 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007ffa:	7cfb      	ldrb	r3, [r7, #19]
 8007ffc:	2b05      	cmp	r3, #5
 8007ffe:	d103      	bne.n	8008008 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8f9 	bl	80081f8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008006:	e0d9      	b.n	80081bc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008008:	7cfb      	ldrb	r3, [r7, #19]
 800800a:	2b04      	cmp	r3, #4
 800800c:	d103      	bne.n	8008016 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f8e8 	bl	80081e4 <HAL_SPI_RxCpltCallback>
    return;
 8008014:	e0d2      	b.n	80081bc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008016:	7cfb      	ldrb	r3, [r7, #19]
 8008018:	2b03      	cmp	r3, #3
 800801a:	f040 80cf 	bne.w	80081bc <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f8d6 	bl	80081d0 <HAL_SPI_TxCpltCallback>
    return;
 8008024:	e0ca      	b.n	80081bc <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00d      	beq.n	800804c <HAL_SPI_IRQHandler+0x23c>
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d008      	beq.n	800804c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008048:	619a      	str	r2, [r3, #24]

    return;
 800804a:	e0ba      	b.n	80081c2 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80b5 	beq.w	80081c2 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00f      	beq.n	8008082 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008068:	f043 0204 	orr.w	r2, r3, #4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699a      	ldr	r2, [r3, #24]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008080:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00f      	beq.n	80080ac <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008092:	f043 0201 	orr.w	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00f      	beq.n	80080d6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080bc:	f043 0208 	orr.w	r2, r3, #8
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f003 0320 	and.w	r3, r3, #32
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00f      	beq.n	8008100 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0220 	orr.w	r2, r2, #32
 80080fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008106:	2b00      	cmp	r3, #0
 8008108:	d05a      	beq.n	80081c0 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6919      	ldr	r1, [r3, #16]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	4b28      	ldr	r3, [pc, #160]	; (80081c8 <HAL_SPI_IRQHandler+0x3b8>)
 8008126:	400b      	ands	r3, r1
 8008128:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008130:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008134:	d138      	bne.n	80081a8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008144:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d013      	beq.n	8008176 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <HAL_SPI_IRQHandler+0x3bc>)
 8008154:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800815a:	4618      	mov	r0, r3
 800815c:	f7fa f8c8 	bl	80022f0 <HAL_DMA_Abort_IT>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800817a:	2b00      	cmp	r3, #0
 800817c:	d020      	beq.n	80081c0 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008182:	4a12      	ldr	r2, [pc, #72]	; (80081cc <HAL_SPI_IRQHandler+0x3bc>)
 8008184:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800818a:	4618      	mov	r0, r3
 800818c:	f7fa f8b0 	bl	80022f0 <HAL_DMA_Abort_IT>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d014      	beq.n	80081c0 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80081a6:	e00b      	b.n	80081c0 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f849 	bl	8008248 <HAL_SPI_ErrorCallback>
    return;
 80081b6:	e003      	b.n	80081c0 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80081b8:	bf00      	nop
 80081ba:	e002      	b.n	80081c2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80081bc:	bf00      	nop
 80081be:	e000      	b.n	80081c2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80081c0:	bf00      	nop
  }
}
 80081c2:	3728      	adds	r7, #40	; 0x28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	fffffc94 	.word	0xfffffc94
 80081cc:	080083c9 	.word	0x080083c9

080081d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b07      	cmp	r3, #7
 8008274:	d011      	beq.n	800829a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008280:	d103      	bne.n	800828a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff ffa4 	bl	80081d0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008288:	e007      	b.n	800829a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0208 	orr.w	r2, r2, #8
 8008298:	611a      	str	r2, [r3, #16]
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b07      	cmp	r3, #7
 80082ba:	d011      	beq.n	80082e0 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c6:	d103      	bne.n	80082d0 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff ff8b 	bl	80081e4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80082ce:	e007      	b.n	80082e0 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0208 	orr.w	r2, r2, #8
 80082de:	611a      	str	r2, [r3, #16]
}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b07      	cmp	r3, #7
 8008300:	d011      	beq.n	8008326 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830c:	d103      	bne.n	8008316 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff ff72 	bl	80081f8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008314:	e007      	b.n	8008326 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0208 	orr.w	r2, r2, #8
 8008324:	611a      	str	r2, [r3, #16]
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff ff65 	bl	800820c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff ff61 	bl	8008220 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff ff5d 	bl	8008234 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fb f91b 	bl	80035cc <HAL_DMA_GetError>
 8008396:	4603      	mov	r3, r0
 8008398:	2b02      	cmp	r3, #2
 800839a:	d011      	beq.n	80083c0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f82d 	bl	80083fc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a8:	f043 0210 	orr.w	r2, r3, #16
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff ff44 	bl	8008248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff ff2a 	bl	8008248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0208 	orr.w	r2, r2, #8
 800841a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699a      	ldr	r2, [r3, #24]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0210 	orr.w	r2, r2, #16
 800842a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6919      	ldr	r1, [r3, #16]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	4b3c      	ldr	r3, [pc, #240]	; (8008538 <SPI_CloseTransfer+0x13c>)
 8008448:	400b      	ands	r3, r1
 800844a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800845a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b04      	cmp	r3, #4
 8008466:	d014      	beq.n	8008492 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00f      	beq.n	8008492 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008478:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699a      	ldr	r2, [r3, #24]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0220 	orr.w	r2, r2, #32
 8008490:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d014      	beq.n	80084c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00f      	beq.n	80084c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ae:	f043 0204 	orr.w	r2, r3, #4
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00f      	beq.n	80084f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d8:	f043 0201 	orr.w	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00f      	beq.n	800851c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008502:	f043 0208 	orr.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800851a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800852c:	bf00      	nop
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	fffffc90 	.word	0xfffffc90

0800853c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3307      	adds	r3, #7
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	fb02 f303 	mul.w	r3, r2, r3
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e042      	b.n	800860a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7f8 fdf0 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	; 0x24
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f8c3 	bl	8008740 <UART_SetConfig>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e022      	b.n	800860a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fe17 	bl	8009200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0201 	orr.w	r2, r2, #1
 8008600:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fe9e 	bl	8009344 <UART_CheckIdleState>
 8008608:	4603      	mov	r3, r0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b08a      	sub	sp, #40	; 0x28
 8008616:	af02      	add	r7, sp, #8
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008628:	2b20      	cmp	r3, #32
 800862a:	f040 8083 	bne.w	8008734 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <HAL_UART_Transmit+0x28>
 8008634:	88fb      	ldrh	r3, [r7, #6]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e07b      	b.n	8008736 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UART_Transmit+0x3a>
 8008648:	2302      	movs	r3, #2
 800864a:	e074      	b.n	8008736 <HAL_UART_Transmit+0x124>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2221      	movs	r2, #33	; 0x21
 8008660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008664:	f7f8 ff32 	bl	80014cc <HAL_GetTick>
 8008668:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	88fa      	ldrh	r2, [r7, #6]
 8008676:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008682:	d108      	bne.n	8008696 <HAL_UART_Transmit+0x84>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d104      	bne.n	8008696 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800868c:	2300      	movs	r3, #0
 800868e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	61bb      	str	r3, [r7, #24]
 8008694:	e003      	b.n	800869e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80086a6:	e02c      	b.n	8008702 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fe91 	bl	80093da <UART_WaitOnFlagUntilTimeout>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e039      	b.n	8008736 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10b      	bne.n	80086e0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	3302      	adds	r3, #2
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	e007      	b.n	80086f0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	781a      	ldrb	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	3301      	adds	r3, #1
 80086ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1cc      	bne.n	80086a8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	2140      	movs	r1, #64	; 0x40
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 fe5e 	bl	80093da <UART_WaitOnFlagUntilTimeout>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e006      	b.n	8008736 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	e000      	b.n	8008736 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008734:	2302      	movs	r3, #2
  }
}
 8008736:	4618      	mov	r0, r3
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008740:	b5b0      	push	{r4, r5, r7, lr}
 8008742:	b08e      	sub	sp, #56	; 0x38
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4313      	orrs	r3, r2
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4bbf      	ldr	r3, [pc, #764]	; (8008a6c <UART_SetConfig+0x32c>)
 800876e:	4013      	ands	r3, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008776:	430b      	orrs	r3, r1
 8008778:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4ab5      	ldr	r2, [pc, #724]	; (8008a70 <UART_SetConfig+0x330>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d004      	beq.n	80087aa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a6:	4313      	orrs	r3, r2
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	4bb0      	ldr	r3, [pc, #704]	; (8008a74 <UART_SetConfig+0x334>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	6812      	ldr	r2, [r2, #0]
 80087b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087ba:	430b      	orrs	r3, r1
 80087bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	f023 010f 	bic.w	r1, r3, #15
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4aa7      	ldr	r2, [pc, #668]	; (8008a78 <UART_SetConfig+0x338>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d176      	bne.n	80088cc <UART_SetConfig+0x18c>
 80087de:	4ba7      	ldr	r3, [pc, #668]	; (8008a7c <UART_SetConfig+0x33c>)
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087e6:	2b28      	cmp	r3, #40	; 0x28
 80087e8:	d86c      	bhi.n	80088c4 <UART_SetConfig+0x184>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0xb0>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008895 	.word	0x08008895
 80087f4:	080088c5 	.word	0x080088c5
 80087f8:	080088c5 	.word	0x080088c5
 80087fc:	080088c5 	.word	0x080088c5
 8008800:	080088c5 	.word	0x080088c5
 8008804:	080088c5 	.word	0x080088c5
 8008808:	080088c5 	.word	0x080088c5
 800880c:	080088c5 	.word	0x080088c5
 8008810:	0800889d 	.word	0x0800889d
 8008814:	080088c5 	.word	0x080088c5
 8008818:	080088c5 	.word	0x080088c5
 800881c:	080088c5 	.word	0x080088c5
 8008820:	080088c5 	.word	0x080088c5
 8008824:	080088c5 	.word	0x080088c5
 8008828:	080088c5 	.word	0x080088c5
 800882c:	080088c5 	.word	0x080088c5
 8008830:	080088a5 	.word	0x080088a5
 8008834:	080088c5 	.word	0x080088c5
 8008838:	080088c5 	.word	0x080088c5
 800883c:	080088c5 	.word	0x080088c5
 8008840:	080088c5 	.word	0x080088c5
 8008844:	080088c5 	.word	0x080088c5
 8008848:	080088c5 	.word	0x080088c5
 800884c:	080088c5 	.word	0x080088c5
 8008850:	080088ad 	.word	0x080088ad
 8008854:	080088c5 	.word	0x080088c5
 8008858:	080088c5 	.word	0x080088c5
 800885c:	080088c5 	.word	0x080088c5
 8008860:	080088c5 	.word	0x080088c5
 8008864:	080088c5 	.word	0x080088c5
 8008868:	080088c5 	.word	0x080088c5
 800886c:	080088c5 	.word	0x080088c5
 8008870:	080088b5 	.word	0x080088b5
 8008874:	080088c5 	.word	0x080088c5
 8008878:	080088c5 	.word	0x080088c5
 800887c:	080088c5 	.word	0x080088c5
 8008880:	080088c5 	.word	0x080088c5
 8008884:	080088c5 	.word	0x080088c5
 8008888:	080088c5 	.word	0x080088c5
 800888c:	080088c5 	.word	0x080088c5
 8008890:	080088bd 	.word	0x080088bd
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889a:	e222      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 800889c:	2304      	movs	r3, #4
 800889e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a2:	e21e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80088a4:	2308      	movs	r3, #8
 80088a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088aa:	e21a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80088ac:	2310      	movs	r3, #16
 80088ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b2:	e216      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80088b4:	2320      	movs	r3, #32
 80088b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ba:	e212      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80088bc:	2340      	movs	r3, #64	; 0x40
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c2:	e20e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80088c4:	2380      	movs	r3, #128	; 0x80
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e20a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a6b      	ldr	r2, [pc, #428]	; (8008a80 <UART_SetConfig+0x340>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d130      	bne.n	8008938 <UART_SetConfig+0x1f8>
 80088d6:	4b69      	ldr	r3, [pc, #420]	; (8008a7c <UART_SetConfig+0x33c>)
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d826      	bhi.n	8008930 <UART_SetConfig+0x1f0>
 80088e2:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <UART_SetConfig+0x1a8>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	08008901 	.word	0x08008901
 80088ec:	08008909 	.word	0x08008909
 80088f0:	08008911 	.word	0x08008911
 80088f4:	08008919 	.word	0x08008919
 80088f8:	08008921 	.word	0x08008921
 80088fc:	08008929 	.word	0x08008929
 8008900:	2300      	movs	r3, #0
 8008902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008906:	e1ec      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008908:	2304      	movs	r3, #4
 800890a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890e:	e1e8      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008910:	2308      	movs	r3, #8
 8008912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008916:	e1e4      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008918:	2310      	movs	r3, #16
 800891a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891e:	e1e0      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008920:	2320      	movs	r3, #32
 8008922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008926:	e1dc      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892e:	e1d8      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e1d4      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a51      	ldr	r2, [pc, #324]	; (8008a84 <UART_SetConfig+0x344>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d130      	bne.n	80089a4 <UART_SetConfig+0x264>
 8008942:	4b4e      	ldr	r3, [pc, #312]	; (8008a7c <UART_SetConfig+0x33c>)
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b05      	cmp	r3, #5
 800894c:	d826      	bhi.n	800899c <UART_SetConfig+0x25c>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x214>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	0800896d 	.word	0x0800896d
 8008958:	08008975 	.word	0x08008975
 800895c:	0800897d 	.word	0x0800897d
 8008960:	08008985 	.word	0x08008985
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008995 	.word	0x08008995
 800896c:	2300      	movs	r3, #0
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	e1b6      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e1b2      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	e1ae      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898a:	e1aa      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 800898c:	2320      	movs	r3, #32
 800898e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008992:	e1a6      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899a:	e1a2      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a2:	e19e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a37      	ldr	r2, [pc, #220]	; (8008a88 <UART_SetConfig+0x348>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d130      	bne.n	8008a10 <UART_SetConfig+0x2d0>
 80089ae:	4b33      	ldr	r3, [pc, #204]	; (8008a7c <UART_SetConfig+0x33c>)
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d826      	bhi.n	8008a08 <UART_SetConfig+0x2c8>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0x280>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089d9 	.word	0x080089d9
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e180      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	e17c      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ee:	e178      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f6:	e174      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 80089f8:	2320      	movs	r3, #32
 80089fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fe:	e170      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a06:	e16c      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0e:	e168      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a1d      	ldr	r2, [pc, #116]	; (8008a8c <UART_SetConfig+0x34c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d142      	bne.n	8008aa0 <UART_SetConfig+0x360>
 8008a1a:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <UART_SetConfig+0x33c>)
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d838      	bhi.n	8008a98 <UART_SetConfig+0x358>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x2ec>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a45 	.word	0x08008a45
 8008a30:	08008a4d 	.word	0x08008a4d
 8008a34:	08008a55 	.word	0x08008a55
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a91 	.word	0x08008a91
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e14a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	e146      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5a:	e142      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a62:	e13e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e13a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a6c:	cfff69f3 	.word	0xcfff69f3
 8008a70:	58000c00 	.word	0x58000c00
 8008a74:	11fff4ff 	.word	0x11fff4ff
 8008a78:	40011000 	.word	0x40011000
 8008a7c:	58024400 	.word	0x58024400
 8008a80:	40004400 	.word	0x40004400
 8008a84:	40004800 	.word	0x40004800
 8008a88:	40004c00 	.word	0x40004c00
 8008a8c:	40005000 	.word	0x40005000
 8008a90:	2340      	movs	r3, #64	; 0x40
 8008a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a96:	e124      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008a98:	2380      	movs	r3, #128	; 0x80
 8008a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9e:	e120      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4acc      	ldr	r2, [pc, #816]	; (8008dd8 <UART_SetConfig+0x698>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d176      	bne.n	8008b98 <UART_SetConfig+0x458>
 8008aaa:	4bcc      	ldr	r3, [pc, #816]	; (8008ddc <UART_SetConfig+0x69c>)
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ab2:	2b28      	cmp	r3, #40	; 0x28
 8008ab4:	d86c      	bhi.n	8008b90 <UART_SetConfig+0x450>
 8008ab6:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <UART_SetConfig+0x37c>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008b61 	.word	0x08008b61
 8008ac0:	08008b91 	.word	0x08008b91
 8008ac4:	08008b91 	.word	0x08008b91
 8008ac8:	08008b91 	.word	0x08008b91
 8008acc:	08008b91 	.word	0x08008b91
 8008ad0:	08008b91 	.word	0x08008b91
 8008ad4:	08008b91 	.word	0x08008b91
 8008ad8:	08008b91 	.word	0x08008b91
 8008adc:	08008b69 	.word	0x08008b69
 8008ae0:	08008b91 	.word	0x08008b91
 8008ae4:	08008b91 	.word	0x08008b91
 8008ae8:	08008b91 	.word	0x08008b91
 8008aec:	08008b91 	.word	0x08008b91
 8008af0:	08008b91 	.word	0x08008b91
 8008af4:	08008b91 	.word	0x08008b91
 8008af8:	08008b91 	.word	0x08008b91
 8008afc:	08008b71 	.word	0x08008b71
 8008b00:	08008b91 	.word	0x08008b91
 8008b04:	08008b91 	.word	0x08008b91
 8008b08:	08008b91 	.word	0x08008b91
 8008b0c:	08008b91 	.word	0x08008b91
 8008b10:	08008b91 	.word	0x08008b91
 8008b14:	08008b91 	.word	0x08008b91
 8008b18:	08008b91 	.word	0x08008b91
 8008b1c:	08008b79 	.word	0x08008b79
 8008b20:	08008b91 	.word	0x08008b91
 8008b24:	08008b91 	.word	0x08008b91
 8008b28:	08008b91 	.word	0x08008b91
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008b91 	.word	0x08008b91
 8008b34:	08008b91 	.word	0x08008b91
 8008b38:	08008b91 	.word	0x08008b91
 8008b3c:	08008b81 	.word	0x08008b81
 8008b40:	08008b91 	.word	0x08008b91
 8008b44:	08008b91 	.word	0x08008b91
 8008b48:	08008b91 	.word	0x08008b91
 8008b4c:	08008b91 	.word	0x08008b91
 8008b50:	08008b91 	.word	0x08008b91
 8008b54:	08008b91 	.word	0x08008b91
 8008b58:	08008b91 	.word	0x08008b91
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e0bc      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b68:	2304      	movs	r3, #4
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e0b8      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b70:	2308      	movs	r3, #8
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	e0b4      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7e:	e0b0      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b80:	2320      	movs	r3, #32
 8008b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b86:	e0ac      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b88:	2340      	movs	r3, #64	; 0x40
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	e0a8      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b90:	2380      	movs	r3, #128	; 0x80
 8008b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b96:	e0a4      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a90      	ldr	r2, [pc, #576]	; (8008de0 <UART_SetConfig+0x6a0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d130      	bne.n	8008c04 <UART_SetConfig+0x4c4>
 8008ba2:	4b8e      	ldr	r3, [pc, #568]	; (8008ddc <UART_SetConfig+0x69c>)
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d826      	bhi.n	8008bfc <UART_SetConfig+0x4bc>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x474>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bcd 	.word	0x08008bcd
 8008bb8:	08008bd5 	.word	0x08008bd5
 8008bbc:	08008bdd 	.word	0x08008bdd
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd2:	e086      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e082      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be2:	e07e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008be4:	2310      	movs	r3, #16
 8008be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bea:	e07a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008bec:	2320      	movs	r3, #32
 8008bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf2:	e076      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008bf4:	2340      	movs	r3, #64	; 0x40
 8008bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfa:	e072      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c02:	e06e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a76      	ldr	r2, [pc, #472]	; (8008de4 <UART_SetConfig+0x6a4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d130      	bne.n	8008c70 <UART_SetConfig+0x530>
 8008c0e:	4b73      	ldr	r3, [pc, #460]	; (8008ddc <UART_SetConfig+0x69c>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d826      	bhi.n	8008c68 <UART_SetConfig+0x528>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x4e0>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c41 	.word	0x08008c41
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3e:	e050      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e04c      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e048      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e044      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e040      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e03c      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e038      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a5c      	ldr	r2, [pc, #368]	; (8008de8 <UART_SetConfig+0x6a8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d130      	bne.n	8008cdc <UART_SetConfig+0x59c>
 8008c7a:	4b58      	ldr	r3, [pc, #352]	; (8008ddc <UART_SetConfig+0x69c>)
 8008c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d826      	bhi.n	8008cd4 <UART_SetConfig+0x594>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <UART_SetConfig+0x54c>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cad 	.word	0x08008cad
 8008c94:	08008cb5 	.word	0x08008cb5
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008caa:	e01a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb2:	e016      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cba:	e012      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc2:	e00e      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cca:	e00a      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd2:	e006      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e002      	b.n	8008ce2 <UART_SetConfig+0x5a2>
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a40      	ldr	r2, [pc, #256]	; (8008de8 <UART_SetConfig+0x6a8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	f040 80ef 	bne.w	8008ecc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	dc46      	bgt.n	8008d84 <UART_SetConfig+0x644>
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	f2c0 8081 	blt.w	8008dfe <UART_SetConfig+0x6be>
 8008cfc:	3b02      	subs	r3, #2
 8008cfe:	2b1e      	cmp	r3, #30
 8008d00:	d87d      	bhi.n	8008dfe <UART_SetConfig+0x6be>
 8008d02:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <UART_SetConfig+0x5c8>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d8b 	.word	0x08008d8b
 8008d0c:	08008dff 	.word	0x08008dff
 8008d10:	08008d93 	.word	0x08008d93
 8008d14:	08008dff 	.word	0x08008dff
 8008d18:	08008dff 	.word	0x08008dff
 8008d1c:	08008dff 	.word	0x08008dff
 8008d20:	08008da3 	.word	0x08008da3
 8008d24:	08008dff 	.word	0x08008dff
 8008d28:	08008dff 	.word	0x08008dff
 8008d2c:	08008dff 	.word	0x08008dff
 8008d30:	08008dff 	.word	0x08008dff
 8008d34:	08008dff 	.word	0x08008dff
 8008d38:	08008dff 	.word	0x08008dff
 8008d3c:	08008dff 	.word	0x08008dff
 8008d40:	08008db3 	.word	0x08008db3
 8008d44:	08008dff 	.word	0x08008dff
 8008d48:	08008dff 	.word	0x08008dff
 8008d4c:	08008dff 	.word	0x08008dff
 8008d50:	08008dff 	.word	0x08008dff
 8008d54:	08008dff 	.word	0x08008dff
 8008d58:	08008dff 	.word	0x08008dff
 8008d5c:	08008dff 	.word	0x08008dff
 8008d60:	08008dff 	.word	0x08008dff
 8008d64:	08008dff 	.word	0x08008dff
 8008d68:	08008dff 	.word	0x08008dff
 8008d6c:	08008dff 	.word	0x08008dff
 8008d70:	08008dff 	.word	0x08008dff
 8008d74:	08008dff 	.word	0x08008dff
 8008d78:	08008dff 	.word	0x08008dff
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008df1 	.word	0x08008df1
 8008d84:	2b40      	cmp	r3, #64	; 0x40
 8008d86:	d036      	beq.n	8008df6 <UART_SetConfig+0x6b6>
 8008d88:	e039      	b.n	8008dfe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d8a:	f7fd fe9d 	bl	8006ac8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d90:	e03b      	b.n	8008e0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d92:	f107 0314 	add.w	r3, r7, #20
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fd feac 	bl	8006af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008da0:	e033      	b.n	8008e0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd fff8 	bl	8006d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db0:	e02b      	b.n	8008e0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db2:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <UART_SetConfig+0x69c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dbe:	4b07      	ldr	r3, [pc, #28]	; (8008ddc <UART_SetConfig+0x69c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	08db      	lsrs	r3, r3, #3
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	4a08      	ldr	r2, [pc, #32]	; (8008dec <UART_SetConfig+0x6ac>)
 8008dca:	fa22 f303 	lsr.w	r3, r2, r3
 8008dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dd0:	e01b      	b.n	8008e0a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008dd2:	4b06      	ldr	r3, [pc, #24]	; (8008dec <UART_SetConfig+0x6ac>)
 8008dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dd6:	e018      	b.n	8008e0a <UART_SetConfig+0x6ca>
 8008dd8:	40011400 	.word	0x40011400
 8008ddc:	58024400 	.word	0x58024400
 8008de0:	40007800 	.word	0x40007800
 8008de4:	40007c00 	.word	0x40007c00
 8008de8:	58000c00 	.word	0x58000c00
 8008dec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008df0:	4bc4      	ldr	r3, [pc, #784]	; (8009104 <UART_SetConfig+0x9c4>)
 8008df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008df4:	e009      	b.n	8008e0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dfc:	e005      	b.n	8008e0a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 81da 	beq.w	80091c6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	4abc      	ldr	r2, [pc, #752]	; (8009108 <UART_SetConfig+0x9c8>)
 8008e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e24:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	4413      	add	r3, r2
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d305      	bcc.n	8008e42 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e3c:	6a3a      	ldr	r2, [r7, #32]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d903      	bls.n	8008e4a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e48:	e1bd      	b.n	80091c6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f04f 0100 	mov.w	r1, #0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	4aac      	ldr	r2, [pc, #688]	; (8009108 <UART_SetConfig+0x9c8>)
 8008e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	f7f7 fa8d 	bl	8000380 <__aeabi_uldivmod>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	020b      	lsls	r3, r1, #8
 8008e78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e7c:	0202      	lsls	r2, r0, #8
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	6849      	ldr	r1, [r1, #4]
 8008e82:	0849      	lsrs	r1, r1, #1
 8008e84:	4608      	mov	r0, r1
 8008e86:	f04f 0100 	mov.w	r1, #0
 8008e8a:	1814      	adds	r4, r2, r0
 8008e8c:	eb43 0501 	adc.w	r5, r3, r1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	461a      	mov	r2, r3
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	f7f7 fa6f 	bl	8000380 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb0:	d308      	bcc.n	8008ec4 <UART_SetConfig+0x784>
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eb8:	d204      	bcs.n	8008ec4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ec0:	60da      	str	r2, [r3, #12]
 8008ec2:	e180      	b.n	80091c6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008eca:	e17c      	b.n	80091c6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed4:	f040 80be 	bne.w	8009054 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8008ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	dc49      	bgt.n	8008f74 <UART_SetConfig+0x834>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db7c      	blt.n	8008fde <UART_SetConfig+0x89e>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d87a      	bhi.n	8008fde <UART_SetConfig+0x89e>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <UART_SetConfig+0x7b0>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f7b 	.word	0x08008f7b
 8008ef4:	08008f83 	.word	0x08008f83
 8008ef8:	08008fdf 	.word	0x08008fdf
 8008efc:	08008fdf 	.word	0x08008fdf
 8008f00:	08008f8b 	.word	0x08008f8b
 8008f04:	08008fdf 	.word	0x08008fdf
 8008f08:	08008fdf 	.word	0x08008fdf
 8008f0c:	08008fdf 	.word	0x08008fdf
 8008f10:	08008f9b 	.word	0x08008f9b
 8008f14:	08008fdf 	.word	0x08008fdf
 8008f18:	08008fdf 	.word	0x08008fdf
 8008f1c:	08008fdf 	.word	0x08008fdf
 8008f20:	08008fdf 	.word	0x08008fdf
 8008f24:	08008fdf 	.word	0x08008fdf
 8008f28:	08008fdf 	.word	0x08008fdf
 8008f2c:	08008fdf 	.word	0x08008fdf
 8008f30:	08008fab 	.word	0x08008fab
 8008f34:	08008fdf 	.word	0x08008fdf
 8008f38:	08008fdf 	.word	0x08008fdf
 8008f3c:	08008fdf 	.word	0x08008fdf
 8008f40:	08008fdf 	.word	0x08008fdf
 8008f44:	08008fdf 	.word	0x08008fdf
 8008f48:	08008fdf 	.word	0x08008fdf
 8008f4c:	08008fdf 	.word	0x08008fdf
 8008f50:	08008fdf 	.word	0x08008fdf
 8008f54:	08008fdf 	.word	0x08008fdf
 8008f58:	08008fdf 	.word	0x08008fdf
 8008f5c:	08008fdf 	.word	0x08008fdf
 8008f60:	08008fdf 	.word	0x08008fdf
 8008f64:	08008fdf 	.word	0x08008fdf
 8008f68:	08008fdf 	.word	0x08008fdf
 8008f6c:	08008fdf 	.word	0x08008fdf
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	d02e      	beq.n	8008fd6 <UART_SetConfig+0x896>
 8008f78:	e031      	b.n	8008fde <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f7a:	f7fc fe39 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8008f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f80:	e033      	b.n	8008fea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f82:	f7fc fe4b 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 8008f86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f88:	e02f      	b.n	8008fea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fd fdb0 	bl	8006af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f98:	e027      	b.n	8008fea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd fefc 	bl	8006d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa8:	e01f      	b.n	8008fea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008faa:	4b58      	ldr	r3, [pc, #352]	; (800910c <UART_SetConfig+0x9cc>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fb6:	4b55      	ldr	r3, [pc, #340]	; (800910c <UART_SetConfig+0x9cc>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	08db      	lsrs	r3, r3, #3
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	4a53      	ldr	r2, [pc, #332]	; (8009110 <UART_SetConfig+0x9d0>)
 8008fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fc8:	e00f      	b.n	8008fea <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008fca:	4b51      	ldr	r3, [pc, #324]	; (8009110 <UART_SetConfig+0x9d0>)
 8008fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fce:	e00c      	b.n	8008fea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fd0:	4b4c      	ldr	r3, [pc, #304]	; (8009104 <UART_SetConfig+0x9c4>)
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fd4:	e009      	b.n	8008fea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fdc:	e005      	b.n	8008fea <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 80ea 	beq.w	80091c6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	4a44      	ldr	r2, [pc, #272]	; (8009108 <UART_SetConfig+0x9c8>)
 8008ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	fbb3 f3f2 	udiv	r3, r3, r2
 8009004:	005a      	lsls	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	085b      	lsrs	r3, r3, #1
 800900c:	441a      	add	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	fbb2 f3f3 	udiv	r3, r2, r3
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d916      	bls.n	800904c <UART_SetConfig+0x90c>
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009024:	d212      	bcs.n	800904c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	b29b      	uxth	r3, r3
 800902a:	f023 030f 	bic.w	r3, r3, #15
 800902e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	b29b      	uxth	r3, r3
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	b29a      	uxth	r2, r3
 800903c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800903e:	4313      	orrs	r3, r2
 8009040:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	e0bc      	b.n	80091c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009052:	e0b8      	b.n	80091c6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009058:	2b20      	cmp	r3, #32
 800905a:	dc4b      	bgt.n	80090f4 <UART_SetConfig+0x9b4>
 800905c:	2b00      	cmp	r3, #0
 800905e:	f2c0 8087 	blt.w	8009170 <UART_SetConfig+0xa30>
 8009062:	2b20      	cmp	r3, #32
 8009064:	f200 8084 	bhi.w	8009170 <UART_SetConfig+0xa30>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <UART_SetConfig+0x930>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	080090fb 	.word	0x080090fb
 8009074:	08009115 	.word	0x08009115
 8009078:	08009171 	.word	0x08009171
 800907c:	08009171 	.word	0x08009171
 8009080:	0800911d 	.word	0x0800911d
 8009084:	08009171 	.word	0x08009171
 8009088:	08009171 	.word	0x08009171
 800908c:	08009171 	.word	0x08009171
 8009090:	0800912d 	.word	0x0800912d
 8009094:	08009171 	.word	0x08009171
 8009098:	08009171 	.word	0x08009171
 800909c:	08009171 	.word	0x08009171
 80090a0:	08009171 	.word	0x08009171
 80090a4:	08009171 	.word	0x08009171
 80090a8:	08009171 	.word	0x08009171
 80090ac:	08009171 	.word	0x08009171
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	08009171 	.word	0x08009171
 80090b8:	08009171 	.word	0x08009171
 80090bc:	08009171 	.word	0x08009171
 80090c0:	08009171 	.word	0x08009171
 80090c4:	08009171 	.word	0x08009171
 80090c8:	08009171 	.word	0x08009171
 80090cc:	08009171 	.word	0x08009171
 80090d0:	08009171 	.word	0x08009171
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009171 	.word	0x08009171
 80090dc:	08009171 	.word	0x08009171
 80090e0:	08009171 	.word	0x08009171
 80090e4:	08009171 	.word	0x08009171
 80090e8:	08009171 	.word	0x08009171
 80090ec:	08009171 	.word	0x08009171
 80090f0:	08009163 	.word	0x08009163
 80090f4:	2b40      	cmp	r3, #64	; 0x40
 80090f6:	d037      	beq.n	8009168 <UART_SetConfig+0xa28>
 80090f8:	e03a      	b.n	8009170 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090fa:	f7fc fd79 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 80090fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009100:	e03c      	b.n	800917c <UART_SetConfig+0xa3c>
 8009102:	bf00      	nop
 8009104:	003d0900 	.word	0x003d0900
 8009108:	0800a070 	.word	0x0800a070
 800910c:	58024400 	.word	0x58024400
 8009110:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009114:	f7fc fd82 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 8009118:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800911a:	e02f      	b.n	800917c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911c:	f107 0314 	add.w	r3, r7, #20
 8009120:	4618      	mov	r0, r3
 8009122:	f7fd fce7 	bl	8006af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800912a:	e027      	b.n	800917c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	4618      	mov	r0, r3
 8009132:	f7fd fe33 	bl	8006d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800913a:	e01f      	b.n	800917c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800913c:	4b2c      	ldr	r3, [pc, #176]	; (80091f0 <UART_SetConfig+0xab0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d009      	beq.n	800915c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009148:	4b29      	ldr	r3, [pc, #164]	; (80091f0 <UART_SetConfig+0xab0>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	08db      	lsrs	r3, r3, #3
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	4a28      	ldr	r2, [pc, #160]	; (80091f4 <UART_SetConfig+0xab4>)
 8009154:	fa22 f303 	lsr.w	r3, r2, r3
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800915a:	e00f      	b.n	800917c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800915c:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <UART_SetConfig+0xab4>)
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009160:	e00c      	b.n	800917c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009162:	4b25      	ldr	r3, [pc, #148]	; (80091f8 <UART_SetConfig+0xab8>)
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009166:	e009      	b.n	800917c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800916e:	e005      	b.n	800917c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800917a:	bf00      	nop
    }

    if (pclk != 0U)
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d021      	beq.n	80091c6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	4a1d      	ldr	r2, [pc, #116]	; (80091fc <UART_SetConfig+0xabc>)
 8009188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800918c:	461a      	mov	r2, r3
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	fbb3 f2f2 	udiv	r2, r3, r2
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	085b      	lsrs	r3, r3, #1
 800919a:	441a      	add	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	2b0f      	cmp	r3, #15
 80091aa:	d909      	bls.n	80091c0 <UART_SetConfig+0xa80>
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b2:	d205      	bcs.n	80091c0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60da      	str	r2, [r3, #12]
 80091be:	e002      	b.n	80091c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3738      	adds	r7, #56	; 0x38
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bdb0      	pop	{r4, r5, r7, pc}
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
 80091f4:	03d09000 	.word	0x03d09000
 80091f8:	003d0900 	.word	0x003d0900
 80091fc:	0800a070 	.word	0x0800a070

08009200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01a      	beq.n	8009316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d10a      	bne.n	8009316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af02      	add	r7, sp, #8
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009354:	f7f8 f8ba 	bl	80014cc <HAL_GetTick>
 8009358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b08      	cmp	r3, #8
 8009366:	d10e      	bne.n	8009386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f82f 	bl	80093da <UART_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e025      	b.n	80093d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b04      	cmp	r3, #4
 8009392:	d10e      	bne.n	80093b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f819 	bl	80093da <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e00f      	b.n	80093d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b09c      	sub	sp, #112	; 0x70
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	603b      	str	r3, [r7, #0]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ea:	e0a9      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	f000 80a5 	beq.w	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7f8 f869 	bl	80014cc <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <UART_WaitOnFlagUntilTimeout+0x32>
 8009406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009408:	2b00      	cmp	r3, #0
 800940a:	d140      	bne.n	800948e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800941a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009420:	667b      	str	r3, [r7, #100]	; 0x64
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800942a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800942c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e6      	bne.n	800940c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	663b      	str	r3, [r7, #96]	; 0x60
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800945e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e5      	bne.n	800943e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e069      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	d051      	beq.n	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094aa:	d149      	bne.n	8009540 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
 80094d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e6      	bne.n	80094b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3308      	adds	r3, #8
 80094ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	613b      	str	r3, [r7, #16]
   return(result);
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009508:	623a      	str	r2, [r7, #32]
 800950a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	69f9      	ldr	r1, [r7, #28]
 800950e:	6a3a      	ldr	r2, [r7, #32]
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	61bb      	str	r3, [r7, #24]
   return(result);
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e5      	bne.n	80094e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2220      	movs	r2, #32
 8009530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e010      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69da      	ldr	r2, [r3, #28]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4013      	ands	r3, r2
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	429a      	cmp	r2, r3
 800955c:	f43f af46 	beq.w	80093ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3770      	adds	r7, #112	; 0x70
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_UARTEx_DisableFifoMode+0x16>
 800957c:	2302      	movs	r3, #2
 800957e:	e027      	b.n	80095d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2224      	movs	r2, #36	; 0x24
 800958c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0201 	bic.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e02d      	b.n	8009650 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2224      	movs	r2, #36	; 0x24
 8009600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f84f 	bl	80096d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800966c:	2302      	movs	r3, #2
 800966e:	e02d      	b.n	80096cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2224      	movs	r2, #36	; 0x24
 800967c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0201 	bic.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f811 	bl	80096d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096f4:	e031      	b.n	800975a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096f6:	2310      	movs	r3, #16
 80096f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096fa:	2310      	movs	r3, #16
 80096fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	0e5b      	lsrs	r3, r3, #25
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	0f5b      	lsrs	r3, r3, #29
 8009716:	b2db      	uxtb	r3, r3
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	7b3a      	ldrb	r2, [r7, #12]
 8009722:	4911      	ldr	r1, [pc, #68]	; (8009768 <UARTEx_SetNbDataToProcess+0x94>)
 8009724:	5c8a      	ldrb	r2, [r1, r2]
 8009726:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800972a:	7b3a      	ldrb	r2, [r7, #12]
 800972c:	490f      	ldr	r1, [pc, #60]	; (800976c <UARTEx_SetNbDataToProcess+0x98>)
 800972e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009730:	fb93 f3f2 	sdiv	r3, r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	7b7a      	ldrb	r2, [r7, #13]
 8009740:	4909      	ldr	r1, [pc, #36]	; (8009768 <UARTEx_SetNbDataToProcess+0x94>)
 8009742:	5c8a      	ldrb	r2, [r1, r2]
 8009744:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009748:	7b7a      	ldrb	r2, [r7, #13]
 800974a:	4908      	ldr	r1, [pc, #32]	; (800976c <UARTEx_SetNbDataToProcess+0x98>)
 800974c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800974e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	0800a088 	.word	0x0800a088
 800976c:	0800a090 	.word	0x0800a090

08009770 <__errno>:
 8009770:	4b01      	ldr	r3, [pc, #4]	; (8009778 <__errno+0x8>)
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	24000010 	.word	0x24000010

0800977c <__libc_init_array>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4d0d      	ldr	r5, [pc, #52]	; (80097b4 <__libc_init_array+0x38>)
 8009780:	4c0d      	ldr	r4, [pc, #52]	; (80097b8 <__libc_init_array+0x3c>)
 8009782:	1b64      	subs	r4, r4, r5
 8009784:	10a4      	asrs	r4, r4, #2
 8009786:	2600      	movs	r6, #0
 8009788:	42a6      	cmp	r6, r4
 800978a:	d109      	bne.n	80097a0 <__libc_init_array+0x24>
 800978c:	4d0b      	ldr	r5, [pc, #44]	; (80097bc <__libc_init_array+0x40>)
 800978e:	4c0c      	ldr	r4, [pc, #48]	; (80097c0 <__libc_init_array+0x44>)
 8009790:	f000 fc4e 	bl	800a030 <_init>
 8009794:	1b64      	subs	r4, r4, r5
 8009796:	10a4      	asrs	r4, r4, #2
 8009798:	2600      	movs	r6, #0
 800979a:	42a6      	cmp	r6, r4
 800979c:	d105      	bne.n	80097aa <__libc_init_array+0x2e>
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a4:	4798      	blx	r3
 80097a6:	3601      	adds	r6, #1
 80097a8:	e7ee      	b.n	8009788 <__libc_init_array+0xc>
 80097aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ae:	4798      	blx	r3
 80097b0:	3601      	adds	r6, #1
 80097b2:	e7f2      	b.n	800979a <__libc_init_array+0x1e>
 80097b4:	0800a0d4 	.word	0x0800a0d4
 80097b8:	0800a0d4 	.word	0x0800a0d4
 80097bc:	0800a0d4 	.word	0x0800a0d4
 80097c0:	0800a0d8 	.word	0x0800a0d8

080097c4 <memset>:
 80097c4:	4402      	add	r2, r0
 80097c6:	4603      	mov	r3, r0
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d100      	bne.n	80097ce <memset+0xa>
 80097cc:	4770      	bx	lr
 80097ce:	f803 1b01 	strb.w	r1, [r3], #1
 80097d2:	e7f9      	b.n	80097c8 <memset+0x4>

080097d4 <siprintf>:
 80097d4:	b40e      	push	{r1, r2, r3}
 80097d6:	b500      	push	{lr}
 80097d8:	b09c      	sub	sp, #112	; 0x70
 80097da:	ab1d      	add	r3, sp, #116	; 0x74
 80097dc:	9002      	str	r0, [sp, #8]
 80097de:	9006      	str	r0, [sp, #24]
 80097e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097e4:	4809      	ldr	r0, [pc, #36]	; (800980c <siprintf+0x38>)
 80097e6:	9107      	str	r1, [sp, #28]
 80097e8:	9104      	str	r1, [sp, #16]
 80097ea:	4909      	ldr	r1, [pc, #36]	; (8009810 <siprintf+0x3c>)
 80097ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f0:	9105      	str	r1, [sp, #20]
 80097f2:	6800      	ldr	r0, [r0, #0]
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	a902      	add	r1, sp, #8
 80097f8:	f000 f868 	bl	80098cc <_svfiprintf_r>
 80097fc:	9b02      	ldr	r3, [sp, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
 8009802:	b01c      	add	sp, #112	; 0x70
 8009804:	f85d eb04 	ldr.w	lr, [sp], #4
 8009808:	b003      	add	sp, #12
 800980a:	4770      	bx	lr
 800980c:	24000010 	.word	0x24000010
 8009810:	ffff0208 	.word	0xffff0208

08009814 <__ssputs_r>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	688e      	ldr	r6, [r1, #8]
 800981a:	429e      	cmp	r6, r3
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	461f      	mov	r7, r3
 8009824:	d838      	bhi.n	8009898 <__ssputs_r+0x84>
 8009826:	898a      	ldrh	r2, [r1, #12]
 8009828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800982c:	d032      	beq.n	8009894 <__ssputs_r+0x80>
 800982e:	6825      	ldr	r5, [r4, #0]
 8009830:	6909      	ldr	r1, [r1, #16]
 8009832:	eba5 0901 	sub.w	r9, r5, r1
 8009836:	6965      	ldr	r5, [r4, #20]
 8009838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009840:	3301      	adds	r3, #1
 8009842:	444b      	add	r3, r9
 8009844:	106d      	asrs	r5, r5, #1
 8009846:	429d      	cmp	r5, r3
 8009848:	bf38      	it	cc
 800984a:	461d      	movcc	r5, r3
 800984c:	0553      	lsls	r3, r2, #21
 800984e:	d531      	bpl.n	80098b4 <__ssputs_r+0xa0>
 8009850:	4629      	mov	r1, r5
 8009852:	f000 fb47 	bl	8009ee4 <_malloc_r>
 8009856:	4606      	mov	r6, r0
 8009858:	b950      	cbnz	r0, 8009870 <__ssputs_r+0x5c>
 800985a:	230c      	movs	r3, #12
 800985c:	f8ca 3000 	str.w	r3, [sl]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	6921      	ldr	r1, [r4, #16]
 8009872:	464a      	mov	r2, r9
 8009874:	f000 fabe 	bl	8009df4 <memcpy>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800987e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	6126      	str	r6, [r4, #16]
 8009886:	6165      	str	r5, [r4, #20]
 8009888:	444e      	add	r6, r9
 800988a:	eba5 0509 	sub.w	r5, r5, r9
 800988e:	6026      	str	r6, [r4, #0]
 8009890:	60a5      	str	r5, [r4, #8]
 8009892:	463e      	mov	r6, r7
 8009894:	42be      	cmp	r6, r7
 8009896:	d900      	bls.n	800989a <__ssputs_r+0x86>
 8009898:	463e      	mov	r6, r7
 800989a:	4632      	mov	r2, r6
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	4641      	mov	r1, r8
 80098a0:	f000 fab6 	bl	8009e10 <memmove>
 80098a4:	68a3      	ldr	r3, [r4, #8]
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	1b9b      	subs	r3, r3, r6
 80098aa:	4432      	add	r2, r6
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7db      	b.n	800986c <__ssputs_r+0x58>
 80098b4:	462a      	mov	r2, r5
 80098b6:	f000 fb6f 	bl	8009f98 <_realloc_r>
 80098ba:	4606      	mov	r6, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1e1      	bne.n	8009884 <__ssputs_r+0x70>
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	4650      	mov	r0, sl
 80098c4:	f000 fabe 	bl	8009e44 <_free_r>
 80098c8:	e7c7      	b.n	800985a <__ssputs_r+0x46>
	...

080098cc <_svfiprintf_r>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4698      	mov	r8, r3
 80098d2:	898b      	ldrh	r3, [r1, #12]
 80098d4:	061b      	lsls	r3, r3, #24
 80098d6:	b09d      	sub	sp, #116	; 0x74
 80098d8:	4607      	mov	r7, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	d50e      	bpl.n	80098fe <_svfiprintf_r+0x32>
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	b963      	cbnz	r3, 80098fe <_svfiprintf_r+0x32>
 80098e4:	2140      	movs	r1, #64	; 0x40
 80098e6:	f000 fafd 	bl	8009ee4 <_malloc_r>
 80098ea:	6028      	str	r0, [r5, #0]
 80098ec:	6128      	str	r0, [r5, #16]
 80098ee:	b920      	cbnz	r0, 80098fa <_svfiprintf_r+0x2e>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e0d1      	b.n	8009a9e <_svfiprintf_r+0x1d2>
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	616b      	str	r3, [r5, #20]
 80098fe:	2300      	movs	r3, #0
 8009900:	9309      	str	r3, [sp, #36]	; 0x24
 8009902:	2320      	movs	r3, #32
 8009904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009908:	f8cd 800c 	str.w	r8, [sp, #12]
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ab8 <_svfiprintf_r+0x1ec>
 8009912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009916:	f04f 0901 	mov.w	r9, #1
 800991a:	4623      	mov	r3, r4
 800991c:	469a      	mov	sl, r3
 800991e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009922:	b10a      	cbz	r2, 8009928 <_svfiprintf_r+0x5c>
 8009924:	2a25      	cmp	r2, #37	; 0x25
 8009926:	d1f9      	bne.n	800991c <_svfiprintf_r+0x50>
 8009928:	ebba 0b04 	subs.w	fp, sl, r4
 800992c:	d00b      	beq.n	8009946 <_svfiprintf_r+0x7a>
 800992e:	465b      	mov	r3, fp
 8009930:	4622      	mov	r2, r4
 8009932:	4629      	mov	r1, r5
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ff6d 	bl	8009814 <__ssputs_r>
 800993a:	3001      	adds	r0, #1
 800993c:	f000 80aa 	beq.w	8009a94 <_svfiprintf_r+0x1c8>
 8009940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009942:	445a      	add	r2, fp
 8009944:	9209      	str	r2, [sp, #36]	; 0x24
 8009946:	f89a 3000 	ldrb.w	r3, [sl]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80a2 	beq.w	8009a94 <_svfiprintf_r+0x1c8>
 8009950:	2300      	movs	r3, #0
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800995a:	f10a 0a01 	add.w	sl, sl, #1
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	9307      	str	r3, [sp, #28]
 8009962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009966:	931a      	str	r3, [sp, #104]	; 0x68
 8009968:	4654      	mov	r4, sl
 800996a:	2205      	movs	r2, #5
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	4851      	ldr	r0, [pc, #324]	; (8009ab8 <_svfiprintf_r+0x1ec>)
 8009972:	f7f6 fcb5 	bl	80002e0 <memchr>
 8009976:	9a04      	ldr	r2, [sp, #16]
 8009978:	b9d8      	cbnz	r0, 80099b2 <_svfiprintf_r+0xe6>
 800997a:	06d0      	lsls	r0, r2, #27
 800997c:	bf44      	itt	mi
 800997e:	2320      	movmi	r3, #32
 8009980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009984:	0711      	lsls	r1, r2, #28
 8009986:	bf44      	itt	mi
 8009988:	232b      	movmi	r3, #43	; 0x2b
 800998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800998e:	f89a 3000 	ldrb.w	r3, [sl]
 8009992:	2b2a      	cmp	r3, #42	; 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xf6>
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	4654      	mov	r4, sl
 800999a:	2000      	movs	r0, #0
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4621      	mov	r1, r4
 80099a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a6:	3b30      	subs	r3, #48	; 0x30
 80099a8:	2b09      	cmp	r3, #9
 80099aa:	d94e      	bls.n	8009a4a <_svfiprintf_r+0x17e>
 80099ac:	b1b0      	cbz	r0, 80099dc <_svfiprintf_r+0x110>
 80099ae:	9207      	str	r2, [sp, #28]
 80099b0:	e014      	b.n	80099dc <_svfiprintf_r+0x110>
 80099b2:	eba0 0308 	sub.w	r3, r0, r8
 80099b6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	46a2      	mov	sl, r4
 80099c0:	e7d2      	b.n	8009968 <_svfiprintf_r+0x9c>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	1d19      	adds	r1, r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfbb      	ittet	lt
 80099ce:	425b      	neglt	r3, r3
 80099d0:	f042 0202 	orrlt.w	r2, r2, #2
 80099d4:	9307      	strge	r3, [sp, #28]
 80099d6:	9307      	strlt	r3, [sp, #28]
 80099d8:	bfb8      	it	lt
 80099da:	9204      	strlt	r2, [sp, #16]
 80099dc:	7823      	ldrb	r3, [r4, #0]
 80099de:	2b2e      	cmp	r3, #46	; 0x2e
 80099e0:	d10c      	bne.n	80099fc <_svfiprintf_r+0x130>
 80099e2:	7863      	ldrb	r3, [r4, #1]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d135      	bne.n	8009a54 <_svfiprintf_r+0x188>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfb8      	it	lt
 80099f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f8:	3402      	adds	r4, #2
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ac8 <_svfiprintf_r+0x1fc>
 8009a00:	7821      	ldrb	r1, [r4, #0]
 8009a02:	2203      	movs	r2, #3
 8009a04:	4650      	mov	r0, sl
 8009a06:	f7f6 fc6b 	bl	80002e0 <memchr>
 8009a0a:	b140      	cbz	r0, 8009a1e <_svfiprintf_r+0x152>
 8009a0c:	2340      	movs	r3, #64	; 0x40
 8009a0e:	eba0 000a 	sub.w	r0, r0, sl
 8009a12:	fa03 f000 	lsl.w	r0, r3, r0
 8009a16:	9b04      	ldr	r3, [sp, #16]
 8009a18:	4303      	orrs	r3, r0
 8009a1a:	3401      	adds	r4, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	4826      	ldr	r0, [pc, #152]	; (8009abc <_svfiprintf_r+0x1f0>)
 8009a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a28:	2206      	movs	r2, #6
 8009a2a:	f7f6 fc59 	bl	80002e0 <memchr>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d038      	beq.n	8009aa4 <_svfiprintf_r+0x1d8>
 8009a32:	4b23      	ldr	r3, [pc, #140]	; (8009ac0 <_svfiprintf_r+0x1f4>)
 8009a34:	bb1b      	cbnz	r3, 8009a7e <_svfiprintf_r+0x1b2>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	3307      	adds	r3, #7
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	3308      	adds	r3, #8
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a44:	4433      	add	r3, r6
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	e767      	b.n	800991a <_svfiprintf_r+0x4e>
 8009a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4e:	460c      	mov	r4, r1
 8009a50:	2001      	movs	r0, #1
 8009a52:	e7a5      	b.n	80099a0 <_svfiprintf_r+0xd4>
 8009a54:	2300      	movs	r3, #0
 8009a56:	3401      	adds	r4, #1
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	f04f 0c0a 	mov.w	ip, #10
 8009a60:	4620      	mov	r0, r4
 8009a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a66:	3a30      	subs	r2, #48	; 0x30
 8009a68:	2a09      	cmp	r2, #9
 8009a6a:	d903      	bls.n	8009a74 <_svfiprintf_r+0x1a8>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0c5      	beq.n	80099fc <_svfiprintf_r+0x130>
 8009a70:	9105      	str	r1, [sp, #20]
 8009a72:	e7c3      	b.n	80099fc <_svfiprintf_r+0x130>
 8009a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a78:	4604      	mov	r4, r0
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e7f0      	b.n	8009a60 <_svfiprintf_r+0x194>
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	462a      	mov	r2, r5
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <_svfiprintf_r+0x1f8>)
 8009a86:	a904      	add	r1, sp, #16
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f3af 8000 	nop.w
 8009a8e:	1c42      	adds	r2, r0, #1
 8009a90:	4606      	mov	r6, r0
 8009a92:	d1d6      	bne.n	8009a42 <_svfiprintf_r+0x176>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af2c 	bmi.w	80098f4 <_svfiprintf_r+0x28>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	b01d      	add	sp, #116	; 0x74
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <_svfiprintf_r+0x1f8>)
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f000 f87a 	bl	8009ba8 <_printf_i>
 8009ab4:	e7eb      	b.n	8009a8e <_svfiprintf_r+0x1c2>
 8009ab6:	bf00      	nop
 8009ab8:	0800a098 	.word	0x0800a098
 8009abc:	0800a0a2 	.word	0x0800a0a2
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	08009815 	.word	0x08009815
 8009ac8:	0800a09e 	.word	0x0800a09e

08009acc <_printf_common>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	688a      	ldr	r2, [r1, #8]
 8009ad6:	690b      	ldr	r3, [r1, #16]
 8009ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009adc:	4293      	cmp	r3, r2
 8009ade:	bfb8      	it	lt
 8009ae0:	4613      	movlt	r3, r2
 8009ae2:	6033      	str	r3, [r6, #0]
 8009ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae8:	4607      	mov	r7, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b10a      	cbz	r2, 8009af2 <_printf_common+0x26>
 8009aee:	3301      	adds	r3, #1
 8009af0:	6033      	str	r3, [r6, #0]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	0699      	lsls	r1, r3, #26
 8009af6:	bf42      	ittt	mi
 8009af8:	6833      	ldrmi	r3, [r6, #0]
 8009afa:	3302      	addmi	r3, #2
 8009afc:	6033      	strmi	r3, [r6, #0]
 8009afe:	6825      	ldr	r5, [r4, #0]
 8009b00:	f015 0506 	ands.w	r5, r5, #6
 8009b04:	d106      	bne.n	8009b14 <_printf_common+0x48>
 8009b06:	f104 0a19 	add.w	sl, r4, #25
 8009b0a:	68e3      	ldr	r3, [r4, #12]
 8009b0c:	6832      	ldr	r2, [r6, #0]
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	42ab      	cmp	r3, r5
 8009b12:	dc26      	bgt.n	8009b62 <_printf_common+0x96>
 8009b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b18:	1e13      	subs	r3, r2, #0
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	2301      	movne	r3, #1
 8009b20:	0692      	lsls	r2, r2, #26
 8009b22:	d42b      	bmi.n	8009b7c <_printf_common+0xb0>
 8009b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	47c0      	blx	r8
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d01e      	beq.n	8009b70 <_printf_common+0xa4>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	68e5      	ldr	r5, [r4, #12]
 8009b36:	6832      	ldr	r2, [r6, #0]
 8009b38:	f003 0306 	and.w	r3, r3, #6
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	bf08      	it	eq
 8009b40:	1aad      	subeq	r5, r5, r2
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	bf0c      	ite	eq
 8009b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b4c:	2500      	movne	r5, #0
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	bfc4      	itt	gt
 8009b52:	1a9b      	subgt	r3, r3, r2
 8009b54:	18ed      	addgt	r5, r5, r3
 8009b56:	2600      	movs	r6, #0
 8009b58:	341a      	adds	r4, #26
 8009b5a:	42b5      	cmp	r5, r6
 8009b5c:	d11a      	bne.n	8009b94 <_printf_common+0xc8>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e008      	b.n	8009b74 <_printf_common+0xa8>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4652      	mov	r2, sl
 8009b66:	4649      	mov	r1, r9
 8009b68:	4638      	mov	r0, r7
 8009b6a:	47c0      	blx	r8
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d103      	bne.n	8009b78 <_printf_common+0xac>
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b78:	3501      	adds	r5, #1
 8009b7a:	e7c6      	b.n	8009b0a <_printf_common+0x3e>
 8009b7c:	18e1      	adds	r1, r4, r3
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	2030      	movs	r0, #48	; 0x30
 8009b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b86:	4422      	add	r2, r4
 8009b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b90:	3302      	adds	r3, #2
 8009b92:	e7c7      	b.n	8009b24 <_printf_common+0x58>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4622      	mov	r2, r4
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d0e6      	beq.n	8009b70 <_printf_common+0xa4>
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	e7d9      	b.n	8009b5a <_printf_common+0x8e>
	...

08009ba8 <_printf_i>:
 8009ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	460c      	mov	r4, r1
 8009bae:	4691      	mov	r9, r2
 8009bb0:	7e27      	ldrb	r7, [r4, #24]
 8009bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bb4:	2f78      	cmp	r7, #120	; 0x78
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	469a      	mov	sl, r3
 8009bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bbe:	d807      	bhi.n	8009bd0 <_printf_i+0x28>
 8009bc0:	2f62      	cmp	r7, #98	; 0x62
 8009bc2:	d80a      	bhi.n	8009bda <_printf_i+0x32>
 8009bc4:	2f00      	cmp	r7, #0
 8009bc6:	f000 80d8 	beq.w	8009d7a <_printf_i+0x1d2>
 8009bca:	2f58      	cmp	r7, #88	; 0x58
 8009bcc:	f000 80a3 	beq.w	8009d16 <_printf_i+0x16e>
 8009bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd8:	e03a      	b.n	8009c50 <_printf_i+0xa8>
 8009bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bde:	2b15      	cmp	r3, #21
 8009be0:	d8f6      	bhi.n	8009bd0 <_printf_i+0x28>
 8009be2:	a001      	add	r0, pc, #4	; (adr r0, 8009be8 <_printf_i+0x40>)
 8009be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009be8:	08009c41 	.word	0x08009c41
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009bd1 	.word	0x08009bd1
 8009bf4:	08009bd1 	.word	0x08009bd1
 8009bf8:	08009bd1 	.word	0x08009bd1
 8009bfc:	08009bd1 	.word	0x08009bd1
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009bd1 	.word	0x08009bd1
 8009c08:	08009bd1 	.word	0x08009bd1
 8009c0c:	08009bd1 	.word	0x08009bd1
 8009c10:	08009bd1 	.word	0x08009bd1
 8009c14:	08009d61 	.word	0x08009d61
 8009c18:	08009c85 	.word	0x08009c85
 8009c1c:	08009d43 	.word	0x08009d43
 8009c20:	08009bd1 	.word	0x08009bd1
 8009c24:	08009bd1 	.word	0x08009bd1
 8009c28:	08009d83 	.word	0x08009d83
 8009c2c:	08009bd1 	.word	0x08009bd1
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009bd1 	.word	0x08009bd1
 8009c38:	08009bd1 	.word	0x08009bd1
 8009c3c:	08009d4b 	.word	0x08009d4b
 8009c40:	680b      	ldr	r3, [r1, #0]
 8009c42:	1d1a      	adds	r2, r3, #4
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	600a      	str	r2, [r1, #0]
 8009c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c50:	2301      	movs	r3, #1
 8009c52:	e0a3      	b.n	8009d9c <_printf_i+0x1f4>
 8009c54:	6825      	ldr	r5, [r4, #0]
 8009c56:	6808      	ldr	r0, [r1, #0]
 8009c58:	062e      	lsls	r6, r5, #24
 8009c5a:	f100 0304 	add.w	r3, r0, #4
 8009c5e:	d50a      	bpl.n	8009c76 <_printf_i+0xce>
 8009c60:	6805      	ldr	r5, [r0, #0]
 8009c62:	600b      	str	r3, [r1, #0]
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	da03      	bge.n	8009c70 <_printf_i+0xc8>
 8009c68:	232d      	movs	r3, #45	; 0x2d
 8009c6a:	426d      	negs	r5, r5
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	485e      	ldr	r0, [pc, #376]	; (8009dec <_printf_i+0x244>)
 8009c72:	230a      	movs	r3, #10
 8009c74:	e019      	b.n	8009caa <_printf_i+0x102>
 8009c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c7a:	6805      	ldr	r5, [r0, #0]
 8009c7c:	600b      	str	r3, [r1, #0]
 8009c7e:	bf18      	it	ne
 8009c80:	b22d      	sxthne	r5, r5
 8009c82:	e7ef      	b.n	8009c64 <_printf_i+0xbc>
 8009c84:	680b      	ldr	r3, [r1, #0]
 8009c86:	6825      	ldr	r5, [r4, #0]
 8009c88:	1d18      	adds	r0, r3, #4
 8009c8a:	6008      	str	r0, [r1, #0]
 8009c8c:	0628      	lsls	r0, r5, #24
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0xec>
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0xf2>
 8009c94:	0669      	lsls	r1, r5, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0xe8>
 8009c98:	881d      	ldrh	r5, [r3, #0]
 8009c9a:	4854      	ldr	r0, [pc, #336]	; (8009dec <_printf_i+0x244>)
 8009c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2308      	moveq	r3, #8
 8009ca2:	230a      	movne	r3, #10
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009caa:	6866      	ldr	r6, [r4, #4]
 8009cac:	60a6      	str	r6, [r4, #8]
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	bfa2      	ittt	ge
 8009cb2:	6821      	ldrge	r1, [r4, #0]
 8009cb4:	f021 0104 	bicge.w	r1, r1, #4
 8009cb8:	6021      	strge	r1, [r4, #0]
 8009cba:	b90d      	cbnz	r5, 8009cc0 <_printf_i+0x118>
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	d04d      	beq.n	8009d5c <_printf_i+0x1b4>
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8009cca:	5dc7      	ldrb	r7, [r0, r7]
 8009ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cd0:	462f      	mov	r7, r5
 8009cd2:	42bb      	cmp	r3, r7
 8009cd4:	460d      	mov	r5, r1
 8009cd6:	d9f4      	bls.n	8009cc2 <_printf_i+0x11a>
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d10b      	bne.n	8009cf4 <_printf_i+0x14c>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	07df      	lsls	r7, r3, #31
 8009ce0:	d508      	bpl.n	8009cf4 <_printf_i+0x14c>
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	bfde      	ittt	le
 8009cea:	2330      	movle	r3, #48	; 0x30
 8009cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cf4:	1b92      	subs	r2, r2, r6
 8009cf6:	6122      	str	r2, [r4, #16]
 8009cf8:	f8cd a000 	str.w	sl, [sp]
 8009cfc:	464b      	mov	r3, r9
 8009cfe:	aa03      	add	r2, sp, #12
 8009d00:	4621      	mov	r1, r4
 8009d02:	4640      	mov	r0, r8
 8009d04:	f7ff fee2 	bl	8009acc <_printf_common>
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d14c      	bne.n	8009da6 <_printf_i+0x1fe>
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	b004      	add	sp, #16
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d16:	4835      	ldr	r0, [pc, #212]	; (8009dec <_printf_i+0x244>)
 8009d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	680e      	ldr	r6, [r1, #0]
 8009d20:	061f      	lsls	r7, r3, #24
 8009d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d26:	600e      	str	r6, [r1, #0]
 8009d28:	d514      	bpl.n	8009d54 <_printf_i+0x1ac>
 8009d2a:	07d9      	lsls	r1, r3, #31
 8009d2c:	bf44      	itt	mi
 8009d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d32:	6023      	strmi	r3, [r4, #0]
 8009d34:	b91d      	cbnz	r5, 8009d3e <_printf_i+0x196>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	f023 0320 	bic.w	r3, r3, #32
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	2310      	movs	r3, #16
 8009d40:	e7b0      	b.n	8009ca4 <_printf_i+0xfc>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	f043 0320 	orr.w	r3, r3, #32
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	2378      	movs	r3, #120	; 0x78
 8009d4c:	4828      	ldr	r0, [pc, #160]	; (8009df0 <_printf_i+0x248>)
 8009d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d52:	e7e3      	b.n	8009d1c <_printf_i+0x174>
 8009d54:	065e      	lsls	r6, r3, #25
 8009d56:	bf48      	it	mi
 8009d58:	b2ad      	uxthmi	r5, r5
 8009d5a:	e7e6      	b.n	8009d2a <_printf_i+0x182>
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	e7bb      	b.n	8009cd8 <_printf_i+0x130>
 8009d60:	680b      	ldr	r3, [r1, #0]
 8009d62:	6826      	ldr	r6, [r4, #0]
 8009d64:	6960      	ldr	r0, [r4, #20]
 8009d66:	1d1d      	adds	r5, r3, #4
 8009d68:	600d      	str	r5, [r1, #0]
 8009d6a:	0635      	lsls	r5, r6, #24
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	d501      	bpl.n	8009d74 <_printf_i+0x1cc>
 8009d70:	6018      	str	r0, [r3, #0]
 8009d72:	e002      	b.n	8009d7a <_printf_i+0x1d2>
 8009d74:	0671      	lsls	r1, r6, #25
 8009d76:	d5fb      	bpl.n	8009d70 <_printf_i+0x1c8>
 8009d78:	8018      	strh	r0, [r3, #0]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	4616      	mov	r6, r2
 8009d80:	e7ba      	b.n	8009cf8 <_printf_i+0x150>
 8009d82:	680b      	ldr	r3, [r1, #0]
 8009d84:	1d1a      	adds	r2, r3, #4
 8009d86:	600a      	str	r2, [r1, #0]
 8009d88:	681e      	ldr	r6, [r3, #0]
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7f6 faa6 	bl	80002e0 <memchr>
 8009d94:	b108      	cbz	r0, 8009d9a <_printf_i+0x1f2>
 8009d96:	1b80      	subs	r0, r0, r6
 8009d98:	6060      	str	r0, [r4, #4]
 8009d9a:	6863      	ldr	r3, [r4, #4]
 8009d9c:	6123      	str	r3, [r4, #16]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da4:	e7a8      	b.n	8009cf8 <_printf_i+0x150>
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	4632      	mov	r2, r6
 8009daa:	4649      	mov	r1, r9
 8009dac:	4640      	mov	r0, r8
 8009dae:	47d0      	blx	sl
 8009db0:	3001      	adds	r0, #1
 8009db2:	d0ab      	beq.n	8009d0c <_printf_i+0x164>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	079b      	lsls	r3, r3, #30
 8009db8:	d413      	bmi.n	8009de2 <_printf_i+0x23a>
 8009dba:	68e0      	ldr	r0, [r4, #12]
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	4298      	cmp	r0, r3
 8009dc0:	bfb8      	it	lt
 8009dc2:	4618      	movlt	r0, r3
 8009dc4:	e7a4      	b.n	8009d10 <_printf_i+0x168>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	47d0      	blx	sl
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d09b      	beq.n	8009d0c <_printf_i+0x164>
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	9903      	ldr	r1, [sp, #12]
 8009dda:	1a5b      	subs	r3, r3, r1
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dcf2      	bgt.n	8009dc6 <_printf_i+0x21e>
 8009de0:	e7eb      	b.n	8009dba <_printf_i+0x212>
 8009de2:	2500      	movs	r5, #0
 8009de4:	f104 0619 	add.w	r6, r4, #25
 8009de8:	e7f5      	b.n	8009dd6 <_printf_i+0x22e>
 8009dea:	bf00      	nop
 8009dec:	0800a0a9 	.word	0x0800a0a9
 8009df0:	0800a0ba 	.word	0x0800a0ba

08009df4 <memcpy>:
 8009df4:	440a      	add	r2, r1
 8009df6:	4291      	cmp	r1, r2
 8009df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dfc:	d100      	bne.n	8009e00 <memcpy+0xc>
 8009dfe:	4770      	bx	lr
 8009e00:	b510      	push	{r4, lr}
 8009e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e0a:	4291      	cmp	r1, r2
 8009e0c:	d1f9      	bne.n	8009e02 <memcpy+0xe>
 8009e0e:	bd10      	pop	{r4, pc}

08009e10 <memmove>:
 8009e10:	4288      	cmp	r0, r1
 8009e12:	b510      	push	{r4, lr}
 8009e14:	eb01 0402 	add.w	r4, r1, r2
 8009e18:	d902      	bls.n	8009e20 <memmove+0x10>
 8009e1a:	4284      	cmp	r4, r0
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	d807      	bhi.n	8009e30 <memmove+0x20>
 8009e20:	1e43      	subs	r3, r0, #1
 8009e22:	42a1      	cmp	r1, r4
 8009e24:	d008      	beq.n	8009e38 <memmove+0x28>
 8009e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e2e:	e7f8      	b.n	8009e22 <memmove+0x12>
 8009e30:	4402      	add	r2, r0
 8009e32:	4601      	mov	r1, r0
 8009e34:	428a      	cmp	r2, r1
 8009e36:	d100      	bne.n	8009e3a <memmove+0x2a>
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e42:	e7f7      	b.n	8009e34 <memmove+0x24>

08009e44 <_free_r>:
 8009e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e46:	2900      	cmp	r1, #0
 8009e48:	d048      	beq.n	8009edc <_free_r+0x98>
 8009e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4e:	9001      	str	r0, [sp, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f1a1 0404 	sub.w	r4, r1, #4
 8009e56:	bfb8      	it	lt
 8009e58:	18e4      	addlt	r4, r4, r3
 8009e5a:	f000 f8d3 	bl	800a004 <__malloc_lock>
 8009e5e:	4a20      	ldr	r2, [pc, #128]	; (8009ee0 <_free_r+0x9c>)
 8009e60:	9801      	ldr	r0, [sp, #4]
 8009e62:	6813      	ldr	r3, [r2, #0]
 8009e64:	4615      	mov	r5, r2
 8009e66:	b933      	cbnz	r3, 8009e76 <_free_r+0x32>
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	6014      	str	r4, [r2, #0]
 8009e6c:	b003      	add	sp, #12
 8009e6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e72:	f000 b8cd 	b.w	800a010 <__malloc_unlock>
 8009e76:	42a3      	cmp	r3, r4
 8009e78:	d90b      	bls.n	8009e92 <_free_r+0x4e>
 8009e7a:	6821      	ldr	r1, [r4, #0]
 8009e7c:	1862      	adds	r2, r4, r1
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	bf04      	itt	eq
 8009e82:	681a      	ldreq	r2, [r3, #0]
 8009e84:	685b      	ldreq	r3, [r3, #4]
 8009e86:	6063      	str	r3, [r4, #4]
 8009e88:	bf04      	itt	eq
 8009e8a:	1852      	addeq	r2, r2, r1
 8009e8c:	6022      	streq	r2, [r4, #0]
 8009e8e:	602c      	str	r4, [r5, #0]
 8009e90:	e7ec      	b.n	8009e6c <_free_r+0x28>
 8009e92:	461a      	mov	r2, r3
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	b10b      	cbz	r3, 8009e9c <_free_r+0x58>
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	d9fa      	bls.n	8009e92 <_free_r+0x4e>
 8009e9c:	6811      	ldr	r1, [r2, #0]
 8009e9e:	1855      	adds	r5, r2, r1
 8009ea0:	42a5      	cmp	r5, r4
 8009ea2:	d10b      	bne.n	8009ebc <_free_r+0x78>
 8009ea4:	6824      	ldr	r4, [r4, #0]
 8009ea6:	4421      	add	r1, r4
 8009ea8:	1854      	adds	r4, r2, r1
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	6011      	str	r1, [r2, #0]
 8009eae:	d1dd      	bne.n	8009e6c <_free_r+0x28>
 8009eb0:	681c      	ldr	r4, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	6053      	str	r3, [r2, #4]
 8009eb6:	4421      	add	r1, r4
 8009eb8:	6011      	str	r1, [r2, #0]
 8009eba:	e7d7      	b.n	8009e6c <_free_r+0x28>
 8009ebc:	d902      	bls.n	8009ec4 <_free_r+0x80>
 8009ebe:	230c      	movs	r3, #12
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	e7d3      	b.n	8009e6c <_free_r+0x28>
 8009ec4:	6825      	ldr	r5, [r4, #0]
 8009ec6:	1961      	adds	r1, r4, r5
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	bf04      	itt	eq
 8009ecc:	6819      	ldreq	r1, [r3, #0]
 8009ece:	685b      	ldreq	r3, [r3, #4]
 8009ed0:	6063      	str	r3, [r4, #4]
 8009ed2:	bf04      	itt	eq
 8009ed4:	1949      	addeq	r1, r1, r5
 8009ed6:	6021      	streq	r1, [r4, #0]
 8009ed8:	6054      	str	r4, [r2, #4]
 8009eda:	e7c7      	b.n	8009e6c <_free_r+0x28>
 8009edc:	b003      	add	sp, #12
 8009ede:	bd30      	pop	{r4, r5, pc}
 8009ee0:	240000c0 	.word	0x240000c0

08009ee4 <_malloc_r>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	1ccd      	adds	r5, r1, #3
 8009ee8:	f025 0503 	bic.w	r5, r5, #3
 8009eec:	3508      	adds	r5, #8
 8009eee:	2d0c      	cmp	r5, #12
 8009ef0:	bf38      	it	cc
 8009ef2:	250c      	movcc	r5, #12
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	db01      	blt.n	8009efe <_malloc_r+0x1a>
 8009efa:	42a9      	cmp	r1, r5
 8009efc:	d903      	bls.n	8009f06 <_malloc_r+0x22>
 8009efe:	230c      	movs	r3, #12
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	2000      	movs	r0, #0
 8009f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f06:	f000 f87d 	bl	800a004 <__malloc_lock>
 8009f0a:	4921      	ldr	r1, [pc, #132]	; (8009f90 <_malloc_r+0xac>)
 8009f0c:	680a      	ldr	r2, [r1, #0]
 8009f0e:	4614      	mov	r4, r2
 8009f10:	b99c      	cbnz	r4, 8009f3a <_malloc_r+0x56>
 8009f12:	4f20      	ldr	r7, [pc, #128]	; (8009f94 <_malloc_r+0xb0>)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	b923      	cbnz	r3, 8009f22 <_malloc_r+0x3e>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f000 f862 	bl	8009fe4 <_sbrk_r>
 8009f20:	6038      	str	r0, [r7, #0]
 8009f22:	4629      	mov	r1, r5
 8009f24:	4630      	mov	r0, r6
 8009f26:	f000 f85d 	bl	8009fe4 <_sbrk_r>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d123      	bne.n	8009f76 <_malloc_r+0x92>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	6033      	str	r3, [r6, #0]
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 f86c 	bl	800a010 <__malloc_unlock>
 8009f38:	e7e3      	b.n	8009f02 <_malloc_r+0x1e>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	1b5b      	subs	r3, r3, r5
 8009f3e:	d417      	bmi.n	8009f70 <_malloc_r+0x8c>
 8009f40:	2b0b      	cmp	r3, #11
 8009f42:	d903      	bls.n	8009f4c <_malloc_r+0x68>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	441c      	add	r4, r3
 8009f48:	6025      	str	r5, [r4, #0]
 8009f4a:	e004      	b.n	8009f56 <_malloc_r+0x72>
 8009f4c:	6863      	ldr	r3, [r4, #4]
 8009f4e:	42a2      	cmp	r2, r4
 8009f50:	bf0c      	ite	eq
 8009f52:	600b      	streq	r3, [r1, #0]
 8009f54:	6053      	strne	r3, [r2, #4]
 8009f56:	4630      	mov	r0, r6
 8009f58:	f000 f85a 	bl	800a010 <__malloc_unlock>
 8009f5c:	f104 000b 	add.w	r0, r4, #11
 8009f60:	1d23      	adds	r3, r4, #4
 8009f62:	f020 0007 	bic.w	r0, r0, #7
 8009f66:	1ac2      	subs	r2, r0, r3
 8009f68:	d0cc      	beq.n	8009f04 <_malloc_r+0x20>
 8009f6a:	1a1b      	subs	r3, r3, r0
 8009f6c:	50a3      	str	r3, [r4, r2]
 8009f6e:	e7c9      	b.n	8009f04 <_malloc_r+0x20>
 8009f70:	4622      	mov	r2, r4
 8009f72:	6864      	ldr	r4, [r4, #4]
 8009f74:	e7cc      	b.n	8009f10 <_malloc_r+0x2c>
 8009f76:	1cc4      	adds	r4, r0, #3
 8009f78:	f024 0403 	bic.w	r4, r4, #3
 8009f7c:	42a0      	cmp	r0, r4
 8009f7e:	d0e3      	beq.n	8009f48 <_malloc_r+0x64>
 8009f80:	1a21      	subs	r1, r4, r0
 8009f82:	4630      	mov	r0, r6
 8009f84:	f000 f82e 	bl	8009fe4 <_sbrk_r>
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d1dd      	bne.n	8009f48 <_malloc_r+0x64>
 8009f8c:	e7cf      	b.n	8009f2e <_malloc_r+0x4a>
 8009f8e:	bf00      	nop
 8009f90:	240000c0 	.word	0x240000c0
 8009f94:	240000c4 	.word	0x240000c4

08009f98 <_realloc_r>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	460e      	mov	r6, r1
 8009fa0:	b921      	cbnz	r1, 8009fac <_realloc_r+0x14>
 8009fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	f7ff bf9c 	b.w	8009ee4 <_malloc_r>
 8009fac:	b922      	cbnz	r2, 8009fb8 <_realloc_r+0x20>
 8009fae:	f7ff ff49 	bl	8009e44 <_free_r>
 8009fb2:	4625      	mov	r5, r4
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb8:	f000 f830 	bl	800a01c <_malloc_usable_size_r>
 8009fbc:	42a0      	cmp	r0, r4
 8009fbe:	d20f      	bcs.n	8009fe0 <_realloc_r+0x48>
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f7ff ff8e 	bl	8009ee4 <_malloc_r>
 8009fc8:	4605      	mov	r5, r0
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d0f2      	beq.n	8009fb4 <_realloc_r+0x1c>
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	f7ff ff0f 	bl	8009df4 <memcpy>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff ff33 	bl	8009e44 <_free_r>
 8009fde:	e7e9      	b.n	8009fb4 <_realloc_r+0x1c>
 8009fe0:	4635      	mov	r5, r6
 8009fe2:	e7e7      	b.n	8009fb4 <_realloc_r+0x1c>

08009fe4 <_sbrk_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d06      	ldr	r5, [pc, #24]	; (800a000 <_sbrk_r+0x1c>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	f7f7 f986 	bl	8001300 <_sbrk>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_sbrk_r+0x1a>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_sbrk_r+0x1a>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	2400038c 	.word	0x2400038c

0800a004 <__malloc_lock>:
 800a004:	4801      	ldr	r0, [pc, #4]	; (800a00c <__malloc_lock+0x8>)
 800a006:	f000 b811 	b.w	800a02c <__retarget_lock_acquire_recursive>
 800a00a:	bf00      	nop
 800a00c:	24000394 	.word	0x24000394

0800a010 <__malloc_unlock>:
 800a010:	4801      	ldr	r0, [pc, #4]	; (800a018 <__malloc_unlock+0x8>)
 800a012:	f000 b80c 	b.w	800a02e <__retarget_lock_release_recursive>
 800a016:	bf00      	nop
 800a018:	24000394 	.word	0x24000394

0800a01c <_malloc_usable_size_r>:
 800a01c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a020:	1f18      	subs	r0, r3, #4
 800a022:	2b00      	cmp	r3, #0
 800a024:	bfbc      	itt	lt
 800a026:	580b      	ldrlt	r3, [r1, r0]
 800a028:	18c0      	addlt	r0, r0, r3
 800a02a:	4770      	bx	lr

0800a02c <__retarget_lock_acquire_recursive>:
 800a02c:	4770      	bx	lr

0800a02e <__retarget_lock_release_recursive>:
 800a02e:	4770      	bx	lr

0800a030 <_init>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr

0800a03c <_fini>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr
