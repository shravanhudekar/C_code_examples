
I2C_example_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003148  08003148  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003148  08003148  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003148  08003148  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  08003160  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  08003160  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014879  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b8  00000000  00000000  000348b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00036b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  000375d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037ab3  00000000  00000000  00037f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf70  00000000  00000000  0006fa2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017127e  00000000  00000000  0007c99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001edc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a14  00000000  00000000  001edc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003120 	.word	0x08003120

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003120 	.word	0x08003120

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 f9a6 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f806 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f000 f8ae 	bl	8000578 <MX_GPIO_Init>
  MX_I2C4_Init();
 800041c:	f000 f86c 	bl	80004f8 <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000420:	e7fe      	b.n	8000420 <main+0x14>
	...

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b09c      	sub	sp, #112	; 0x70
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800042e:	224c      	movs	r2, #76	; 0x4c
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fe6c 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2220      	movs	r2, #32
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fe66 	bl	8003110 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000444:	2004      	movs	r0, #4
 8000446:	f000 fde5 	bl	8001014 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800044a:	2300      	movs	r3, #0
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <SystemClock_Config+0xcc>)
 8000450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000452:	4a27      	ldr	r2, [pc, #156]	; (80004f0 <SystemClock_Config+0xcc>)
 8000454:	f023 0301 	bic.w	r3, r3, #1
 8000458:	62d3      	str	r3, [r2, #44]	; 0x2c
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <SystemClock_Config+0xcc>)
 800045c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <SystemClock_Config+0xd0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <SystemClock_Config+0xd0>)
 800046e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <SystemClock_Config+0xd0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000480:	bf00      	nop
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <SystemClock_Config+0xd0>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800048a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800048e:	d1f8      	bne.n	8000482 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	2302      	movs	r3, #2
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000494:	2301      	movs	r3, #1
 8000496:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fe0f 	bl	80010c8 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004b0:	f000 f87c 	bl	80005ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	233f      	movs	r3, #63	; 0x3f
 80004b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004d0:	2340      	movs	r3, #64	; 0x40
 80004d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2101      	movs	r1, #1
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fa21 	bl	8001920 <HAL_RCC_ClockConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004e4:	f000 f862 	bl	80005ac <Error_Handler>
  }
}
 80004e8:	bf00      	nop
 80004ea:	3770      	adds	r7, #112	; 0x70
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	58000400 	.word	0x58000400
 80004f4:	58024800 	.word	0x58024800

080004f8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_I2C4_Init+0x74>)
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <MX_I2C4_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_I2C4_Init+0x74>)
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <MX_I2C4_Init+0x7c>)
 8000506:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_I2C4_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_I2C4_Init+0x74>)
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_I2C4_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_I2C4_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_I2C4_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_I2C4_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_I2C4_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <MX_I2C4_Init+0x74>)
 8000534:	f000 fc46 	bl	8000dc4 <HAL_I2C_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800053e:	f000 f835 	bl	80005ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000542:	2100      	movs	r1, #0
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <MX_I2C4_Init+0x74>)
 8000546:	f000 fccd 	bl	8000ee4 <HAL_I2CEx_ConfigAnalogFilter>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000550:	f000 f82c 	bl	80005ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000554:	2100      	movs	r1, #0
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_I2C4_Init+0x74>)
 8000558:	f000 fd0f 	bl	8000f7a <HAL_I2CEx_ConfigDigitalFilter>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 f823 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2400002c 	.word	0x2400002c
 8000570:	58001c00 	.word	0x58001c00
 8000574:	00707cbb 	.word	0x00707cbb

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_GPIO_Init+0x30>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <MX_GPIO_Init+0x30>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_GPIO_Init+0x30>)
 8000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	58024400 	.word	0x58024400

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_MspInit+0x30>)
 80005c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_MspInit+0x30>)
 80005c6:	f043 0302 	orr.w	r3, r3, #2
 80005ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x30>)
 80005d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	58024400 	.word	0x58024400

080005ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0b8      	sub	sp, #224	; 0xe0
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	22bc      	movs	r2, #188	; 0xbc
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fd7f 	bl	8003110 <memset>
  if(hi2c->Instance==I2C4)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a25      	ldr	r2, [pc, #148]	; (80006ac <HAL_I2C_MspInit+0xc0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d142      	bne.n	80006a2 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800061c:	2310      	movs	r3, #16
 800061e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fca8 	bl	8001f80 <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000636:	f7ff ffb9 	bl	80005ac <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <HAL_I2C_MspInit+0xc4>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <HAL_I2C_MspInit+0xc4>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_I2C_MspInit+0xc4>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000658:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800065c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000660:	2312      	movs	r3, #18
 8000662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000672:	2304      	movs	r3, #4
 8000674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800067c:	4619      	mov	r1, r3
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <HAL_I2C_MspInit+0xc8>)
 8000680:	f000 f9f0 	bl	8000a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_I2C_MspInit+0xc4>)
 8000686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <HAL_I2C_MspInit+0xc4>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_I2C_MspInit+0xc4>)
 8000696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80006a2:	bf00      	nop
 80006a4:	37e0      	adds	r7, #224	; 0xe0
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	58001c00 	.word	0x58001c00
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f89e 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000744 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000710:	f7ff fde2 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f002 fcc5 	bl	80030c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073e:	f7ff fe65 	bl	800040c <main>
  bx  lr
 8000742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000744:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000748:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800074c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000750:	08003150 	.word	0x08003150
  ldr r2, =_sbss
 8000754:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000758:	2400007c 	.word	0x2400007c

0800075c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC3_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000766:	2003      	movs	r0, #3
 8000768:	f000 f94a 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800076c:	f001 fa8e 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8000770:	4602      	mov	r2, r0
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_Init+0x68>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	4913      	ldr	r1, [pc, #76]	; (80007cc <HAL_Init+0x6c>)
 800077e:	5ccb      	ldrb	r3, [r1, r3]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	fa22 f303 	lsr.w	r3, r2, r3
 8000788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_Init+0x68>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_Init+0x6c>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
 8000796:	f003 031f 	and.w	r3, r3, #31
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	fa22 f303 	lsr.w	r3, r2, r3
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <HAL_Init+0x70>)
 80007a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <HAL_Init+0x74>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f814 	bl	80007d8 <HAL_InitTick>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e002      	b.n	80007c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007ba:	f7ff fefd 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	58024400 	.word	0x58024400
 80007cc:	08003138 	.word	0x08003138
 80007d0:	24000004 	.word	0x24000004
 80007d4:	24000000 	.word	0x24000000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_InitTick+0x60>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e021      	b.n	8000830 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_InitTick+0x64>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_InitTick+0x60>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f921 	bl	8000a4a <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e00e      	b.n	8000830 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80a      	bhi.n	800082e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 f8f9 	bl	8000a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_InitTick+0x68>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2400000c 	.word	0x2400000c
 800083c:	24000000 	.word	0x24000000
 8000840:	24000008 	.word	0x24000008

08000844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x20>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_IncTick+0x24>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2400000c 	.word	0x2400000c
 8000868:	24000078 	.word	0x24000078

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	24000078 	.word	0x24000078

08000884 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_GetREVID+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	0c1b      	lsrs	r3, r3, #16
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	5c001000 	.word	0x5c001000

0800089c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <__NVIC_SetPriorityGrouping+0x40>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x40>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	05fa0000 	.word	0x05fa0000

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	; (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	; (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	; 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009cc:	d301      	bcc.n	80009d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00f      	b.n	80009f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <SysTick_Config+0x40>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009da:	210f      	movs	r1, #15
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f7ff ff8e 	bl	8000900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SysTick_Config+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SysTick_Config+0x40>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff47 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff5e 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff90 	bl	8000954 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5f 	bl	8000900 <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffb2 	bl	80009bc <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a72:	4b89      	ldr	r3, [pc, #548]	; (8000c98 <HAL_GPIO_Init+0x234>)
 8000a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a76:	e194      	b.n	8000da2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 8186 	beq.w	8000d9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d005      	beq.n	8000aa8 <HAL_GPIO_Init+0x44>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	f003 0201 	and.w	r2, r3, #1
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d017      	beq.n	8000b46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d123      	bne.n	8000b9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	220f      	movs	r2, #15
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	69b9      	ldr	r1, [r7, #24]
 8000b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0203 	and.w	r2, r3, #3
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80e0 	beq.w	8000d9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <HAL_GPIO_Init+0x238>)
 8000bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be2:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <HAL_GPIO_Init+0x238>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <HAL_GPIO_Init+0x238>)
 8000bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <HAL_GPIO_Init+0x23c>)
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	3302      	adds	r3, #2
 8000c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	220f      	movs	r2, #15
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <HAL_GPIO_Init+0x240>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d052      	beq.n	8000ccc <HAL_GPIO_Init+0x268>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_GPIO_Init+0x244>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d031      	beq.n	8000c92 <HAL_GPIO_Init+0x22e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_GPIO_Init+0x248>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d02b      	beq.n	8000c8e <HAL_GPIO_Init+0x22a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_GPIO_Init+0x24c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d025      	beq.n	8000c8a <HAL_GPIO_Init+0x226>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_GPIO_Init+0x250>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d01f      	beq.n	8000c86 <HAL_GPIO_Init+0x222>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <HAL_GPIO_Init+0x254>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0x21e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a1a      	ldr	r2, [pc, #104]	; (8000cbc <HAL_GPIO_Init+0x258>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0x21a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_GPIO_Init+0x25c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00d      	beq.n	8000c7a <HAL_GPIO_Init+0x216>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_GPIO_Init+0x260>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0x212>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_GPIO_Init+0x264>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_GPIO_Init+0x20e>
 8000c6e:	2309      	movs	r3, #9
 8000c70:	e02d      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c72:	230a      	movs	r3, #10
 8000c74:	e02b      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c76:	2308      	movs	r3, #8
 8000c78:	e029      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	e027      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c7e:	2306      	movs	r3, #6
 8000c80:	e025      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e023      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e021      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e01f      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e01d      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e01b      	b.n	8000cce <HAL_GPIO_Init+0x26a>
 8000c96:	bf00      	nop
 8000c98:	58000080 	.word	0x58000080
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58000400 	.word	0x58000400
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	58020400 	.word	0x58020400
 8000cac:	58020800 	.word	0x58020800
 8000cb0:	58020c00 	.word	0x58020c00
 8000cb4:	58021000 	.word	0x58021000
 8000cb8:	58021400 	.word	0x58021400
 8000cbc:	58021800 	.word	0x58021800
 8000cc0:	58021c00 	.word	0x58021c00
 8000cc4:	58022000 	.word	0x58022000
 8000cc8:	58022400 	.word	0x58022400
 8000ccc:	2300      	movs	r3, #0
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cde:	4938      	ldr	r1, [pc, #224]	; (8000dc0 <HAL_GPIO_Init+0x35c>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f47f ae63 	bne.w	8000a78 <HAL_GPIO_Init+0x14>
  }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3724      	adds	r7, #36	; 0x24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	58000400 	.word	0x58000400

08000dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e07f      	b.n	8000ed6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fbfe 	bl	80005ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d107      	bne.n	8000e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e006      	b.n	8000e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d104      	bne.n	8000e5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6859      	ldr	r1, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_I2C_Init+0x11c>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69d9      	ldr	r1, [r3, #28]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	02008000 	.word	0x02008000

08000ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b20      	cmp	r3, #32
 8000ef8:	d138      	bne.n	8000f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e032      	b.n	8000f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2224      	movs	r2, #36	; 0x24
 8000f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f6c:	2302      	movs	r3, #2
  }
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d139      	bne.n	8001004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e033      	b.n	8001006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2224      	movs	r2, #36	; 0x24
 8000faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e000      	b.n	8001006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001004:	2302      	movs	r3, #2
  }
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	2b06      	cmp	r3, #6
 8001026:	d00a      	beq.n	800103e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d001      	beq.n	800103a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e040      	b.n	80010bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e03e      	b.n	80010bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001046:	491f      	ldr	r1, [pc, #124]	; (80010c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4313      	orrs	r3, r2
 800104c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800104e:	f7ff fc0d 	bl	800086c <HAL_GetTick>
 8001052:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001054:	e009      	b.n	800106a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001056:	f7ff fc09 	bl	800086c <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001064:	d901      	bls.n	800106a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e028      	b.n	80010bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001076:	d1ee      	bne.n	8001056 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b1e      	cmp	r3, #30
 800107c:	d008      	beq.n	8001090 <HAL_PWREx_ConfigSupply+0x7c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b2e      	cmp	r3, #46	; 0x2e
 8001082:	d005      	beq.n	8001090 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b1d      	cmp	r3, #29
 8001088:	d002      	beq.n	8001090 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b2d      	cmp	r3, #45	; 0x2d
 800108e:	d114      	bne.n	80010ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001090:	f7ff fbec 	bl	800086c <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001096:	e009      	b.n	80010ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001098:	f7ff fbe8 	bl	800086c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a6:	d901      	bls.n	80010ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e007      	b.n	80010bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d1ee      	bne.n	8001098 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58024800 	.word	0x58024800

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f000 bc1c 	b.w	8001914 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8087 	beq.w	80011f8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ea:	4b9e      	ldr	r3, [pc, #632]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010f4:	4b9b      	ldr	r3, [pc, #620]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	2b10      	cmp	r3, #16
 80010fe:	d007      	beq.n	8001110 <HAL_RCC_OscConfig+0x48>
 8001100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001102:	2b18      	cmp	r3, #24
 8001104:	d110      	bne.n	8001128 <HAL_RCC_OscConfig+0x60>
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d10b      	bne.n	8001128 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	4b94      	ldr	r3, [pc, #592]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d06c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x12e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d168      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e3f5      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d106      	bne.n	8001140 <HAL_RCC_OscConfig+0x78>
 8001132:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a8b      	ldr	r2, [pc, #556]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e02e      	b.n	800119e <HAL_RCC_OscConfig+0xd6>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_OscConfig+0x9a>
 8001148:	4b86      	ldr	r3, [pc, #536]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a85      	ldr	r2, [pc, #532]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b83      	ldr	r3, [pc, #524]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a82      	ldr	r2, [pc, #520]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	e01d      	b.n	800119e <HAL_RCC_OscConfig+0xd6>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0xbe>
 800116c:	4b7d      	ldr	r3, [pc, #500]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a7c      	ldr	r2, [pc, #496]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b7a      	ldr	r3, [pc, #488]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a79      	ldr	r2, [pc, #484]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0xd6>
 8001186:	4b77      	ldr	r3, [pc, #476]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a76      	ldr	r2, [pc, #472]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a73      	ldr	r2, [pc, #460]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d013      	beq.n	80011ce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb61 	bl	800086c <HAL_GetTick>
 80011aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb5d 	bl	800086c <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b64      	cmp	r3, #100	; 0x64
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e3a9      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0xe6>
 80011cc:	e014      	b.n	80011f8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ce:	f7ff fb4d 	bl	800086c <HAL_GetTick>
 80011d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d6:	f7ff fb49 	bl	800086c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e395      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011e8:	4b5e      	ldr	r3, [pc, #376]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0x10e>
 80011f4:	e000      	b.n	80011f8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80ca 	beq.w	800139a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001206:	4b57      	ldr	r3, [pc, #348]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800120e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001210:	4b54      	ldr	r3, [pc, #336]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <HAL_RCC_OscConfig+0x164>
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	2b18      	cmp	r3, #24
 8001220:	d156      	bne.n	80012d0 <HAL_RCC_OscConfig+0x208>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d151      	bne.n	80012d0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122c:	4b4d      	ldr	r3, [pc, #308]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x17c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e367      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001244:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 0219 	bic.w	r2, r3, #25
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4944      	ldr	r1, [pc, #272]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001256:	f7ff fb09 	bl	800086c <HAL_GetTick>
 800125a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fb05 	bl	800086c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e351      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001270:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	f7ff fb02 	bl	8000884 <HAL_GetREVID>
 8001280:	4603      	mov	r3, r0
 8001282:	f241 0203 	movw	r2, #4099	; 0x1003
 8001286:	4293      	cmp	r3, r2
 8001288:	d817      	bhi.n	80012ba <HAL_RCC_OscConfig+0x1f2>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	2b40      	cmp	r3, #64	; 0x40
 8001290:	d108      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1dc>
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a2:	e07a      	b.n	800139a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	031b      	lsls	r3, r3, #12
 80012b2:	492c      	ldr	r1, [pc, #176]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b8:	e06f      	b.n	800139a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	061b      	lsls	r3, r3, #24
 80012c8:	4926      	ldr	r1, [pc, #152]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ce:	e064      	b.n	800139a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d047      	beq.n	8001368 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 0219 	bic.w	r2, r3, #25
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	491f      	ldr	r1, [pc, #124]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fabf 	bl	800086c <HAL_GetTick>
 80012ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fabb 	bl	800086c <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e307      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	f7ff fab8 	bl	8000884 <HAL_GetREVID>
 8001314:	4603      	mov	r3, r0
 8001316:	f241 0203 	movw	r2, #4099	; 0x1003
 800131a:	4293      	cmp	r3, r2
 800131c:	d817      	bhi.n	800134e <HAL_RCC_OscConfig+0x286>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	d108      	bne.n	8001338 <HAL_RCC_OscConfig+0x270>
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800132e:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	6053      	str	r3, [r2, #4]
 8001336:	e030      	b.n	800139a <HAL_RCC_OscConfig+0x2d2>
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	031b      	lsls	r3, r3, #12
 8001346:	4907      	ldr	r1, [pc, #28]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e025      	b.n	800139a <HAL_RCC_OscConfig+0x2d2>
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	061b      	lsls	r3, r3, #24
 800135c:	4901      	ldr	r1, [pc, #4]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
 8001362:	e01a      	b.n	800139a <HAL_RCC_OscConfig+0x2d2>
 8001364:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001368:	4b9e      	ldr	r3, [pc, #632]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a9d      	ldr	r2, [pc, #628]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fa7a 	bl	800086c <HAL_GetTick>
 8001378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff fa76 	bl	800086c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e2c2      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800138e:	4b95      	ldr	r3, [pc, #596]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80a9 	beq.w	80014fa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a8:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013b2:	4b8c      	ldr	r3, [pc, #560]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d007      	beq.n	80013ce <HAL_RCC_OscConfig+0x306>
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b18      	cmp	r3, #24
 80013c2:	d13a      	bne.n	800143a <HAL_RCC_OscConfig+0x372>
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d135      	bne.n	800143a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x31e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	2b80      	cmp	r3, #128	; 0x80
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e296      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013e6:	f7ff fa4d 	bl	8000884 <HAL_GetREVID>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d817      	bhi.n	8001424 <HAL_RCC_OscConfig+0x35c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	d108      	bne.n	800140e <HAL_RCC_OscConfig+0x346>
 80013fc:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800140a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800140c:	e075      	b.n	80014fa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	069b      	lsls	r3, r3, #26
 800141c:	4971      	ldr	r1, [pc, #452]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001422:	e06a      	b.n	80014fa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001424:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	496c      	ldr	r1, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001434:	4313      	orrs	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001438:	e05f      	b.n	80014fa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d042      	beq.n	80014c8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001442:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a67      	ldr	r2, [pc, #412]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fa0d 	bl	800086c <HAL_GetTick>
 8001452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001456:	f7ff fa09 	bl	800086c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e255      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001468:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001474:	f7ff fa06 	bl	8000884 <HAL_GetREVID>
 8001478:	4603      	mov	r3, r0
 800147a:	f241 0203 	movw	r2, #4099	; 0x1003
 800147e:	4293      	cmp	r3, r2
 8001480:	d817      	bhi.n	80014b2 <HAL_RCC_OscConfig+0x3ea>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b20      	cmp	r3, #32
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x3d4>
 800148a:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001492:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001498:	6053      	str	r3, [r2, #4]
 800149a:	e02e      	b.n	80014fa <HAL_RCC_OscConfig+0x432>
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	069b      	lsls	r3, r3, #26
 80014aa:	494e      	ldr	r1, [pc, #312]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e023      	b.n	80014fa <HAL_RCC_OscConfig+0x432>
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	4948      	ldr	r1, [pc, #288]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
 80014c6:	e018      	b.n	80014fa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014c8:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a45      	ldr	r2, [pc, #276]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80014ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff f9ca 	bl	800086c <HAL_GetTick>
 80014d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014dc:	f7ff f9c6 	bl	800086c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e212      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d036      	beq.n	8001574 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d019      	beq.n	8001542 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001512:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff f9a7 	bl	800086c <HAL_GetTick>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff f9a3 	bl	800086c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1ef      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x45a>
 8001540:	e018      	b.n	8001574 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001546:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff f98d 	bl	800086c <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff f989 	bl	800086c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1d5      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	2b00      	cmp	r3, #0
 800157e:	d039      	beq.n	80015f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d019      	beq.n	80015bc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 800158e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001594:	f7ff f96a 	bl	800086c <HAL_GetTick>
 8001598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800159c:	f7ff f966 	bl	800086c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1b2      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x4d4>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_RCC_OscConfig+0x51c>)
 80015c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015c8:	f7ff f950 	bl	800086c <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015d0:	f7ff f94c 	bl	800086c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d904      	bls.n	80015e8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e198      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
 80015e2:	bf00      	nop
 80015e4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015e8:	4ba3      	ldr	r3, [pc, #652]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ed      	bne.n	80015d0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8081 	beq.w	8001704 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001602:	4b9e      	ldr	r3, [pc, #632]	; (800187c <HAL_RCC_OscConfig+0x7b4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a9d      	ldr	r2, [pc, #628]	; (800187c <HAL_RCC_OscConfig+0x7b4>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800160e:	f7ff f92d 	bl	800086c <HAL_GetTick>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff f929 	bl	800086c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e175      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001628:	4b94      	ldr	r3, [pc, #592]	; (800187c <HAL_RCC_OscConfig+0x7b4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x582>
 800163c:	4b8e      	ldr	r3, [pc, #568]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a8d      	ldr	r2, [pc, #564]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_OscConfig+0x5de>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x5a4>
 8001652:	4b89      	ldr	r3, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a88      	ldr	r2, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
 800165e:	4b86      	ldr	r3, [pc, #536]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a85      	ldr	r2, [pc, #532]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x5de>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x5c6>
 8001674:	4b80      	ldr	r3, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a7c      	ldr	r2, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x5de>
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a76      	ldr	r2, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff f8dd 	bl	800086c <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f8d9 	bl	800086c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e123      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x5ee>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff f8c7 	bl	800086c <HAL_GetTick>
 80016de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f8c3 	bl	800086c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e10d      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8102 	beq.w	8001912 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001716:	2b18      	cmp	r3, #24
 8001718:	f000 80bd 	beq.w	8001896 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2b02      	cmp	r3, #2
 8001722:	f040 8095 	bne.w	8001850 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b54      	ldr	r3, [pc, #336]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a53      	ldr	r2, [pc, #332]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800172c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff f89b 	bl	800086c <HAL_GetTick>
 8001736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff f897 	bl	800086c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0e3      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800175a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175c:	4b48      	ldr	r3, [pc, #288]	; (8001880 <HAL_RCC_OscConfig+0x7b8>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	430a      	orrs	r2, r1
 800176c:	4942      	ldr	r1, [pc, #264]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800176e:	4313      	orrs	r3, r2
 8001770:	628b      	str	r3, [r1, #40]	; 0x28
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	3b01      	subs	r3, #1
 8001778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	3b01      	subs	r3, #1
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	b29b      	uxth	r3, r3
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	3b01      	subs	r3, #1
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017a2:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x7bc>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017c0:	00d2      	lsls	r2, r2, #3
 80017c2:	492d      	ldr	r1, [pc, #180]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	f023 020c 	bic.w	r2, r3, #12
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4928      	ldr	r1, [pc, #160]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	f023 0202 	bic.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4924      	ldr	r1, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff f820 	bl	800086c <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f81c 	bl	800086c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e068      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x768>
 800184e:	e060      	b.n	8001912 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_RCC_OscConfig+0x7b0>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff f806 	bl	800086c <HAL_GetTick>
 8001860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001862:	e011      	b.n	8001888 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f802 	bl	800086c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d90a      	bls.n	8001888 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04e      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
 8001876:	bf00      	nop
 8001878:	58024400 	.word	0x58024400
 800187c:	58024800 	.word	0x58024800
 8001880:	fffffc0c 	.word	0xfffffc0c
 8001884:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x854>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e7      	bne.n	8001864 <HAL_RCC_OscConfig+0x79c>
 8001894:	e03d      	b.n	8001912 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x854>)
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x854>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d031      	beq.n	800190e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d12a      	bne.n	800190e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d122      	bne.n	800190e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d11a      	bne.n	800190e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	0a5b      	lsrs	r3, r3, #9
 80018dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d111      	bne.n	800190e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d108      	bne.n	800190e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	0e1b      	lsrs	r3, r3, #24
 8001900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3730      	adds	r7, #48	; 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	58024400 	.word	0x58024400

08001920 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e19c      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b8a      	ldr	r3, [pc, #552]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d910      	bls.n	8001964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b87      	ldr	r3, [pc, #540]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 020f 	bic.w	r2, r3, #15
 800194a:	4985      	ldr	r1, [pc, #532]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b83      	ldr	r3, [pc, #524]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e184      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800197c:	429a      	cmp	r2, r3
 800197e:	d908      	bls.n	8001992 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001980:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4975      	ldr	r1, [pc, #468]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 800198e:	4313      	orrs	r3, r2
 8001990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d908      	bls.n	80019c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	496a      	ldr	r1, [pc, #424]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019d8:	429a      	cmp	r2, r3
 80019da:	d908      	bls.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	495e      	ldr	r1, [pc, #376]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d908      	bls.n	8001a1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a0a:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4953      	ldr	r1, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d010      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d908      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f023 020f 	bic.w	r2, r3, #15
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4947      	ldr	r1, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d055      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a56:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4940      	ldr	r1, [pc, #256]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d121      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0f6      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d115      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0ea      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0de      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0d6      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f023 0207 	bic.w	r2, r3, #7
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4925      	ldr	r1, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7fe fecb 	bl	800086c <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7fe fec7 	bl	800086c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0be      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d1eb      	bne.n	8001ada <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d208      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f023 020f 	bic.w	r2, r3, #15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d214      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 020f 	bic.w	r2, r3, #15
 8001b46:	4906      	ldr	r1, [pc, #24]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_RCC_ClockConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e086      	b.n	8001c6e <HAL_RCC_ClockConfig+0x34e>
 8001b60:	52002000 	.word	0x52002000
 8001b64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d208      	bcs.n	8001b96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b84:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4939      	ldr	r1, [pc, #228]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d010      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d208      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	492e      	ldr	r1, [pc, #184]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d208      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4922      	ldr	r1, [pc, #136]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d208      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4917      	ldr	r1, [pc, #92]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c20:	f000 f834 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	4912      	ldr	r1, [pc, #72]	; (8001c7c <HAL_RCC_ClockConfig+0x35c>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_RCC_ClockConfig+0x35c>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x360>)
 8001c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x364>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x368>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fdb8 	bl	80007d8 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	08003138 	.word	0x08003138
 8001c80:	24000004 	.word	0x24000004
 8001c84:	24000000 	.word	0x24000000
 8001c88:	24000008 	.word	0x24000008

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c92:	4bb3      	ldr	r3, [pc, #716]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9a:	2b18      	cmp	r3, #24
 8001c9c:	f200 8155 	bhi.w	8001f4a <HAL_RCC_GetSysClockFreq+0x2be>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001d0d 	.word	0x08001d0d
 8001cac:	08001f4b 	.word	0x08001f4b
 8001cb0:	08001f4b 	.word	0x08001f4b
 8001cb4:	08001f4b 	.word	0x08001f4b
 8001cb8:	08001f4b 	.word	0x08001f4b
 8001cbc:	08001f4b 	.word	0x08001f4b
 8001cc0:	08001f4b 	.word	0x08001f4b
 8001cc4:	08001f4b 	.word	0x08001f4b
 8001cc8:	08001d33 	.word	0x08001d33
 8001ccc:	08001f4b 	.word	0x08001f4b
 8001cd0:	08001f4b 	.word	0x08001f4b
 8001cd4:	08001f4b 	.word	0x08001f4b
 8001cd8:	08001f4b 	.word	0x08001f4b
 8001cdc:	08001f4b 	.word	0x08001f4b
 8001ce0:	08001f4b 	.word	0x08001f4b
 8001ce4:	08001f4b 	.word	0x08001f4b
 8001ce8:	08001d39 	.word	0x08001d39
 8001cec:	08001f4b 	.word	0x08001f4b
 8001cf0:	08001f4b 	.word	0x08001f4b
 8001cf4:	08001f4b 	.word	0x08001f4b
 8001cf8:	08001f4b 	.word	0x08001f4b
 8001cfc:	08001f4b 	.word	0x08001f4b
 8001d00:	08001f4b 	.word	0x08001f4b
 8001d04:	08001f4b 	.word	0x08001f4b
 8001d08:	08001d3f 	.word	0x08001d3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d0c:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d18:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d2a:	e111      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d2e:	61bb      	str	r3, [r7, #24]
    break;
 8001d30:	e10e      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d32:	4b8d      	ldr	r3, [pc, #564]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d34:	61bb      	str	r3, [r7, #24]
    break;
 8001d36:	e10b      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d38:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d3a:	61bb      	str	r3, [r7, #24]
    break;
 8001d3c:	e108      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d3e:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d48:	4b85      	ldr	r3, [pc, #532]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d54:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d5e:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80e1 	beq.w	8001f44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f000 8083 	beq.w	8001e90 <HAL_RCC_GetSysClockFreq+0x204>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	f200 80a1 	bhi.w	8001ed4 <HAL_RCC_GetSysClockFreq+0x248>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x114>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d056      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d9e:	e099      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001da0:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dac:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	4a6b      	ldr	r2, [pc, #428]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd6:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e06:	e087      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e1a:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e4a:	e065      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e8e:	e043      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ed2:	e021      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ede:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001efa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	0a5b      	lsrs	r3, r3, #9
 8001f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f22:	3301      	adds	r3, #1
 8001f24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
    break;
 8001f48:	e002      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f4c:	61bb      	str	r3, [r7, #24]
    break;
 8001f4e:	bf00      	nop
  }

  return sysclockfreq;
 8001f50:	69bb      	ldr	r3, [r7, #24]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	58024400 	.word	0x58024400
 8001f64:	03d09000 	.word	0x03d09000
 8001f68:	003d0900 	.word	0x003d0900
 8001f6c:	017d7840 	.word	0x017d7840
 8001f70:	46000000 	.word	0x46000000
 8001f74:	4c742400 	.word	0x4c742400
 8001f78:	4a742400 	.word	0x4a742400
 8001f7c:	4bbebc20 	.word	0x4bbebc20

08001f80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d03f      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fa4:	d02a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001faa:	d824      	bhi.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fb0:	d018      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fb6:	d81e      	bhi.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fc0:	d007      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fc2:	e018      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fc4:	4bab      	ldr	r3, [pc, #684]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4aaa      	ldr	r2, [pc, #680]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001fd0:	e015      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 ff11 	bl	8002e00 <RCCEx_PLL2_Config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001fe2:	e00c      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3324      	adds	r3, #36	; 0x24
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ffba 	bl	8002f64 <RCCEx_PLL3_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001ff4:	e003      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8001ffa:	e000      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002004:	4b9b      	ldr	r3, [pc, #620]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002010:	4998      	ldr	r1, [pc, #608]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	650b      	str	r3, [r1, #80]	; 0x50
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d03d      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	2b04      	cmp	r3, #4
 800202e:	d826      	bhi.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	0800204d 	.word	0x0800204d
 800203c:	0800205b 	.word	0x0800205b
 8002040:	0800206d 	.word	0x0800206d
 8002044:	08002085 	.word	0x08002085
 8002048:	08002085 	.word	0x08002085
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800204c:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	4a88      	ldr	r2, [pc, #544]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002058:	e015      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fecd 	bl	8002e00 <RCCEx_PLL2_Config>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800206a:	e00c      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3324      	adds	r3, #36	; 0x24
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f000 ff76 	bl	8002f64 <RCCEx_PLL3_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800207c:	e003      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
      break;
 8002082:	e000      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	4976      	ldr	r1, [pc, #472]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	650b      	str	r3, [r1, #80]	; 0x50
 800209e:	e001      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d042      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b8:	d02b      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80020ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020be:	d825      	bhi.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80020c0:	2bc0      	cmp	r3, #192	; 0xc0
 80020c2:	d028      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80020c4:	2bc0      	cmp	r3, #192	; 0xc0
 80020c6:	d821      	bhi.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	d016      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d81d      	bhi.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d007      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80020d8:	e018      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020da:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	4a65      	ldr	r2, [pc, #404]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80020e6:	e017      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fe86 	bl	8002e00 <RCCEx_PLL2_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80020f8:	e00e      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3324      	adds	r3, #36	; 0x24
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 ff2f 	bl	8002f64 <RCCEx_PLL3_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800210a:	e005      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	75fb      	strb	r3, [r7, #23]
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002112:	bf00      	nop
 8002114:	e000      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800211e:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002122:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4952      	ldr	r1, [pc, #328]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	650b      	str	r3, [r1, #80]	; 0x50
 8002130:	e001      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d049      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002148:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800214c:	d030      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800214e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002152:	d82a      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002158:	d02c      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800215a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800215e:	d824      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002164:	d018      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216a:	d81e      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002174:	d007      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002176:	e018      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	4a3d      	ldr	r2, [pc, #244]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800217e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002184:	e017      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fe37 	bl	8002e00 <RCCEx_PLL2_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002196:	e00e      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3324      	adds	r3, #36	; 0x24
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fee0 	bl	8002f64 <RCCEx_PLL3_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021a8:	e005      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021ca:	492a      	ldr	r1, [pc, #168]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	658b      	str	r3, [r1, #88]	; 0x58
 80021d0:	e001      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04c      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ec:	d030      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f2:	d82a      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80021f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021f8:	d02c      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80021fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021fe:	d824      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002204:	d018      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800220a:	d81e      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d007      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002216:	e018      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800221e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002224:	e017      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fde7 	bl	8002e00 <RCCEx_PLL2_Config>
 8002232:	4603      	mov	r3, r0
 8002234:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002236:	e00e      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3324      	adds	r3, #36	; 0x24
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fe90 	bl	8002f64 <RCCEx_PLL3_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002248:	e005      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
      break;
 800224e:	e002      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002250:	bf00      	nop
 8002252:	e000      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10d      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800226a:	4902      	ldr	r1, [pc, #8]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	658b      	str	r3, [r1, #88]	; 0x58
 8002270:	e004      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002272:	bf00      	nop
 8002274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7dfb      	ldrb	r3, [r7, #23]
 800227a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d032      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	2b30      	cmp	r3, #48	; 0x30
 800228e:	d01c      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002290:	2b30      	cmp	r3, #48	; 0x30
 8002292:	d817      	bhi.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002294:	2b20      	cmp	r3, #32
 8002296:	d00c      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002298:	2b20      	cmp	r3, #32
 800229a:	d813      	bhi.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d016      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d10f      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022a4:	4baf      	ldr	r3, [pc, #700]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	4aae      	ldr	r2, [pc, #696]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80022b0:	e00e      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2102      	movs	r1, #2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fda1 	bl	8002e00 <RCCEx_PLL2_Config>
 80022be:	4603      	mov	r3, r0
 80022c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	75fb      	strb	r3, [r7, #23]
      break;
 80022c8:	e002      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80022ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022d6:	4ba3      	ldr	r3, [pc, #652]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e2:	49a0      	ldr	r1, [pc, #640]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80022e8:	e001      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d047      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002302:	d030      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002308:	d82a      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800230a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800230e:	d02c      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002310:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002314:	d824      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	d018      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800231c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002320:	d81e      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d007      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800232c:	e018      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800232e:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	4a8c      	ldr	r2, [pc, #560]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800233a:	e017      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fd5c 	bl	8002e00 <RCCEx_PLL2_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800234c:	e00e      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3324      	adds	r3, #36	; 0x24
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fe05 	bl	8002f64 <RCCEx_PLL3_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800235e:	e005      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
      break;
 8002364:	e002      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002366:	bf00      	nop
 8002368:	e000      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800236a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002372:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	4979      	ldr	r1, [pc, #484]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	650b      	str	r3, [r1, #80]	; 0x50
 8002384:	e001      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d049      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239e:	d02e      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d828      	bhi.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80023a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023aa:	d02a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80023ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023b0:	d822      	bhi.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80023b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023b6:	d026      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80023b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023bc:	d81c      	bhi.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80023be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023c2:	d010      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80023c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023c8:	d816      	bhi.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01d      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d2:	d111      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fd10 	bl	8002e00 <RCCEx_PLL2_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80023e4:	e012      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3324      	adds	r3, #36	; 0x24
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fdb9 	bl	8002f64 <RCCEx_PLL3_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80023f6:	e009      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
      break;
 80023fc:	e006      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80023fe:	bf00      	nop
 8002400:	e004      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002402:	bf00      	nop
 8002404:	e002      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800240a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002416:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	4951      	ldr	r1, [pc, #324]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	650b      	str	r3, [r1, #80]	; 0x50
 8002424:	e001      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d04b      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800243c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002440:	d02e      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002446:	d828      	bhi.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244c:	d02a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002452:	d822      	bhi.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002454:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002458:	d026      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800245a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800245e:	d81c      	bhi.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002464:	d010      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800246a:	d816      	bhi.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01d      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002474:	d111      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	2101      	movs	r1, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fcbf 	bl	8002e00 <RCCEx_PLL2_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002486:	e012      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3324      	adds	r3, #36	; 0x24
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fd68 	bl	8002f64 <RCCEx_PLL3_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002498:	e009      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
      break;
 800249e:	e006      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80024a0:	bf00      	nop
 80024a2:	e004      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80024a4:	bf00      	nop
 80024a6:	e002      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80024ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024c2:	4928      	ldr	r1, [pc, #160]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	658b      	str	r3, [r1, #88]	; 0x58
 80024c8:	e001      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02f      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e2:	d00e      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e8:	d814      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f2:	d10f      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002500:	e00c      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	2101      	movs	r1, #1
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fc79 	bl	8002e00 <RCCEx_PLL2_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002512:	e003      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
      break;
 8002518:	e000      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800251a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252e:	490d      	ldr	r1, [pc, #52]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	650b      	str	r3, [r1, #80]	; 0x50
 8002534:	e001      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002536:	7dfb      	ldrb	r3, [r7, #23]
 8002538:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d033      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	2b03      	cmp	r3, #3
 800254c:	d81c      	bhi.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	0800258f 	.word	0x0800258f
 8002558:	08002569 	.word	0x08002569
 800255c:	08002577 	.word	0x08002577
 8002560:	0800258f 	.word	0x0800258f
 8002564:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002568:	4bb8      	ldr	r3, [pc, #736]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	4ab7      	ldr	r2, [pc, #732]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800256e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002572:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002574:	e00c      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fc3f 	bl	8002e00 <RCCEx_PLL2_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002586:	e003      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	75fb      	strb	r3, [r7, #23]
      break;
 800258c:	e000      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800258e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002596:	4bad      	ldr	r3, [pc, #692]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	49aa      	ldr	r1, [pc, #680]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025a8:	e001      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8086 	beq.w	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025bc:	4ba4      	ldr	r3, [pc, #656]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4aa3      	ldr	r2, [pc, #652]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025c8:	f7fe f950 	bl	800086c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ce:	e009      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7fe f94c 	bl	800086c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d902      	bls.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	75fb      	strb	r3, [r7, #23]
        break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e4:	4b9a      	ldr	r3, [pc, #616]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d166      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80025f6:	4b95      	ldr	r3, [pc, #596]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80025f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002600:	4053      	eors	r3, r2
 8002602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800260a:	4b90      	ldr	r3, [pc, #576]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002614:	4b8d      	ldr	r3, [pc, #564]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a8c      	ldr	r2, [pc, #560]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002620:	4b8a      	ldr	r3, [pc, #552]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a89      	ldr	r2, [pc, #548]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800262c:	4a87      	ldr	r2, [pc, #540]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263c:	d115      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe f915 	bl	800086c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002644:	e00b      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe f911 	bl	800086c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d902      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	75fb      	strb	r3, [r7, #23]
            break;
 800265c:	e005      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800265e:	4b7b      	ldr	r3, [pc, #492]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ed      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d126      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800267e:	d10d      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002680:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800268e:	0919      	lsrs	r1, r3, #4
 8002690:	4b70      	ldr	r3, [pc, #448]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002692:	400b      	ands	r3, r1
 8002694:	496d      	ldr	r1, [pc, #436]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	610b      	str	r3, [r1, #16]
 800269a:	e005      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800269c:	4b6b      	ldr	r3, [pc, #428]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4a6a      	ldr	r2, [pc, #424]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80026a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026a6:	6113      	str	r3, [r2, #16]
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80026aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	4965      	ldr	r1, [pc, #404]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	670b      	str	r3, [r1, #112]	; 0x70
 80026bc:	e004      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	75bb      	strb	r3, [r7, #22]
 80026c2:	e001      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d07e      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d8:	2b28      	cmp	r3, #40	; 0x28
 80026da:	d867      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080027b3 	.word	0x080027b3
 80026e8:	080027ad 	.word	0x080027ad
 80026ec:	080027ad 	.word	0x080027ad
 80026f0:	080027ad 	.word	0x080027ad
 80026f4:	080027ad 	.word	0x080027ad
 80026f8:	080027ad 	.word	0x080027ad
 80026fc:	080027ad 	.word	0x080027ad
 8002700:	080027ad 	.word	0x080027ad
 8002704:	08002789 	.word	0x08002789
 8002708:	080027ad 	.word	0x080027ad
 800270c:	080027ad 	.word	0x080027ad
 8002710:	080027ad 	.word	0x080027ad
 8002714:	080027ad 	.word	0x080027ad
 8002718:	080027ad 	.word	0x080027ad
 800271c:	080027ad 	.word	0x080027ad
 8002720:	080027ad 	.word	0x080027ad
 8002724:	0800279b 	.word	0x0800279b
 8002728:	080027ad 	.word	0x080027ad
 800272c:	080027ad 	.word	0x080027ad
 8002730:	080027ad 	.word	0x080027ad
 8002734:	080027ad 	.word	0x080027ad
 8002738:	080027ad 	.word	0x080027ad
 800273c:	080027ad 	.word	0x080027ad
 8002740:	080027ad 	.word	0x080027ad
 8002744:	080027b3 	.word	0x080027b3
 8002748:	080027ad 	.word	0x080027ad
 800274c:	080027ad 	.word	0x080027ad
 8002750:	080027ad 	.word	0x080027ad
 8002754:	080027ad 	.word	0x080027ad
 8002758:	080027ad 	.word	0x080027ad
 800275c:	080027ad 	.word	0x080027ad
 8002760:	080027ad 	.word	0x080027ad
 8002764:	080027b3 	.word	0x080027b3
 8002768:	080027ad 	.word	0x080027ad
 800276c:	080027ad 	.word	0x080027ad
 8002770:	080027ad 	.word	0x080027ad
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027ad 	.word	0x080027ad
 800277c:	080027ad 	.word	0x080027ad
 8002780:	080027ad 	.word	0x080027ad
 8002784:	080027b3 	.word	0x080027b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fb36 	bl	8002e00 <RCCEx_PLL2_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002798:	e00c      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3324      	adds	r3, #36	; 0x24
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fbdf 	bl	8002f64 <RCCEx_PLL3_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80027aa:	e003      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	e000      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80027b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c6:	4921      	ldr	r1, [pc, #132]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	654b      	str	r3, [r1, #84]	; 0x54
 80027cc:	e001      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d820      	bhi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	0800282f 	.word	0x0800282f
 80027f0:	08002805 	.word	0x08002805
 80027f4:	08002817 	.word	0x08002817
 80027f8:	0800282f 	.word	0x0800282f
 80027fc:	0800282f 	.word	0x0800282f
 8002800:	0800282f 	.word	0x0800282f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	2101      	movs	r1, #1
 800280a:	4618      	mov	r0, r3
 800280c:	f000 faf8 	bl	8002e00 <RCCEx_PLL2_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002814:	e00c      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3324      	adds	r3, #36	; 0x24
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fba1 	bl	8002f64 <RCCEx_PLL3_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002826:	e003      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
      break;
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800282e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d110      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	4902      	ldr	r1, [pc, #8]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	654b      	str	r3, [r1, #84]	; 0x54
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800284a:	bf00      	nop
 800284c:	58024400 	.word	0x58024400
 8002850:	58024800 	.word	0x58024800
 8002854:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d039      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	2b05      	cmp	r3, #5
 8002870:	d820      	bhi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	080028bb 	.word	0x080028bb
 800287c:	08002891 	.word	0x08002891
 8002880:	080028a3 	.word	0x080028a3
 8002884:	080028bb 	.word	0x080028bb
 8002888:	080028bb 	.word	0x080028bb
 800288c:	080028bb 	.word	0x080028bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fab2 	bl	8002e00 <RCCEx_PLL2_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80028a0:	e00c      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3324      	adds	r3, #36	; 0x24
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fb5b 	bl	8002f64 <RCCEx_PLL3_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80028b2:	e003      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
      break;
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80028ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c2:	4bb7      	ldr	r3, [pc, #732]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	49b3      	ldr	r1, [pc, #716]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	658b      	str	r3, [r1, #88]	; 0x58
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d04b      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f2:	d02e      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80028f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f8:	d828      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d02a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d822      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800290a:	d026      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800290c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002910:	d81c      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002916:	d010      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d816      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01d      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002926:	d111      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa66 	bl	8002e00 <RCCEx_PLL2_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002938:	e012      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3324      	adds	r3, #36	; 0x24
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fb0f 	bl	8002f64 <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800294a:	e009      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
      break;
 8002950:	e006      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002952:	bf00      	nop
 8002954:	e004      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800295e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002966:	4b8e      	ldr	r3, [pc, #568]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002974:	498a      	ldr	r1, [pc, #552]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002976:	4313      	orrs	r3, r2
 8002978:	654b      	str	r3, [r1, #84]	; 0x54
 800297a:	e001      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d04b      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002992:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002996:	d02e      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002998:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800299c:	d828      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d02a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a8:	d822      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80029aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029ae:	d026      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80029b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029b4:	d81c      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80029b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ba:	d010      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	d816      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01d      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d111      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa14 	bl	8002e00 <RCCEx_PLL2_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80029dc:	e012      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	2102      	movs	r1, #2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fabd 	bl	8002f64 <RCCEx_PLL3_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80029ee:	e009      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]
      break;
 80029f4:	e006      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80029f6:	bf00      	nop
 80029f8:	e004      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80029fa:	bf00      	nop
 80029fc:	e002      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a18:	4961      	ldr	r1, [pc, #388]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a1e:	e001      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d04b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002a3a:	d02e      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002a3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002a40:	d828      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a46:	d02a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	d822      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002a4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002a52:	d026      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002a54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002a58:	d81c      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a64:	d816      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01d      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f9c2 	bl	8002e00 <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002a80:	e012      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3324      	adds	r3, #36	; 0x24
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fa6b 	bl	8002f64 <RCCEx_PLL3_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002a92:	e009      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
      break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e004      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002aae:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002abc:	4938      	ldr	r1, [pc, #224]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	d10a      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3324      	adds	r3, #36	; 0x24
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fa3c 	bl	8002f64 <RCCEx_PLL3_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b04:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3324      	adds	r3, #36	; 0x24
 8002b26:	2102      	movs	r1, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fa1b 	bl	8002f64 <RCCEx_PLL3_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b46:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d036      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b62:	d01f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b68:	d817      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002b74:	e011      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f93f 	bl	8002e00 <RCCEx_PLL2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002b86:	e00e      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3324      	adds	r3, #36	; 0x24
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f9e8 	bl	8002f64 <RCCEx_PLL3_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002b98:	e005      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8002ba0:	58024400 	.word	0x58024400
      break;
 8002ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bac:	4b93      	ldr	r3, [pc, #588]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bba:	4990      	ldr	r1, [pc, #576]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8002bc0:	e001      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d033      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bdc:	d01c      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8002bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002be2:	d816      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8002be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bee:	d007      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8002bf0:	e00f      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf2:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4a81      	ldr	r2, [pc, #516]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002bfe:	e00c      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f9ac 	bl	8002f64 <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c10:	e003      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
      break;
 8002c16:	e000      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8002c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2e:	4973      	ldr	r1, [pc, #460]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	654b      	str	r3, [r1, #84]	; 0x54
 8002c34:	e001      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d029      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d007      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8002c54:	e00f      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c56:	4b69      	ldr	r3, [pc, #420]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	4a68      	ldr	r2, [pc, #416]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002c62:	e00b      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f8c8 	bl	8002e00 <RCCEx_PLL2_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	495b      	ldr	r1, [pc, #364]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c94:	e001      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3324      	adds	r3, #36	; 0x24
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f959 	bl	8002f64 <RCCEx_PLL3_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d030      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cd0:	d017      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8002cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cd6:	d811      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cdc:	d013      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce2:	d80b      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d106      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002cfa:	e007      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002d00:	e004      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d1e:	4937      	ldr	r1, [pc, #220]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	654b      	str	r3, [r1, #84]	; 0x54
 8002d24:	e001      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	492e      	ldr	r1, [pc, #184]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002d54:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d62:	4926      	ldr	r1, [pc, #152]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d74:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d80:	491e      	ldr	r1, [pc, #120]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002d98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d9c:	6113      	str	r3, [r2, #16]
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002da8:	4914      	ldr	r1, [pc, #80]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da08      	bge.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	4906      	ldr	r1, [pc, #24]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002de8:	7dbb      	ldrb	r3, [r7, #22]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	58024400 	.word	0x58024400

08002e00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002e0e:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d101      	bne.n	8002e1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e099      	b.n	8002f52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002e1e:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2a:	f7fd fd1f 	bl	800086c <HAL_GetTick>
 8002e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002e32:	f7fd fd1b 	bl	800086c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e086      	b.n	8002f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e44:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002e50:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	031b      	lsls	r3, r3, #12
 8002e5e:	493f      	ldr	r1, [pc, #252]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	628b      	str	r3, [r1, #40]	; 0x28
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	025b      	lsls	r3, r3, #9
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	061b      	lsls	r3, r3, #24
 8002e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e94:	4931      	ldr	r1, [pc, #196]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	492d      	ldr	r1, [pc, #180]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	f023 0220 	bic.w	r2, r3, #32
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4928      	ldr	r1, [pc, #160]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ec4:	f023 0310 	bic.w	r3, r3, #16
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <RCCEx_PLL2_Config+0x160>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	69d2      	ldr	r2, [r2, #28]
 8002ed6:	00d2      	lsls	r2, r2, #3
 8002ed8:	4920      	ldr	r1, [pc, #128]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ee4:	f043 0310 	orr.w	r3, r3, #16
 8002ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002efc:	e00f      	b.n	8002f1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f10:	e005      	b.n	8002f1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2a:	f7fd fc9f 	bl	800086c <HAL_GetTick>
 8002f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f30:	e008      	b.n	8002f44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f32:	f7fd fc9b 	bl	800086c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e006      	b.n	8002f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <RCCEx_PLL2_Config+0x15c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	ffff0007 	.word	0xffff0007

08002f64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d101      	bne.n	8002f82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e099      	b.n	80030b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002f82:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a4e      	ldr	r2, [pc, #312]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8e:	f7fd fc6d 	bl	800086c <HAL_GetTick>
 8002f92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002f96:	f7fd fc69 	bl	800086c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e086      	b.n	80030b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	051b      	lsls	r3, r3, #20
 8002fc2:	493f      	ldr	r1, [pc, #252]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	025b      	lsls	r3, r3, #9
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ff8:	4931      	ldr	r1, [pc, #196]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	492d      	ldr	r1, [pc, #180]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4928      	ldr	r1, [pc, #160]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800301e:	4313      	orrs	r3, r2
 8003020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003022:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <RCCEx_PLL3_Config+0x160>)
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	69d2      	ldr	r2, [r2, #28]
 800303a:	00d2      	lsls	r2, r2, #3
 800303c:	4920      	ldr	r1, [pc, #128]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800303e:	4313      	orrs	r3, r2
 8003040:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800305a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800305e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003060:	e00f      	b.n	8003082 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800306e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003074:	e005      	b.n	8003082 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 800307c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308e:	f7fd fbed 	bl	800086c <HAL_GetTick>
 8003092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003094:	e008      	b.n	80030a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003096:	f7fd fbe9 	bl	800086c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e006      	b.n	80030b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <RCCEx_PLL3_Config+0x15c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400
 80030c4:	ffff0007 	.word	0xffff0007

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	4d0d      	ldr	r5, [pc, #52]	; (8003100 <__libc_init_array+0x38>)
 80030cc:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	2600      	movs	r6, #0
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	4d0b      	ldr	r5, [pc, #44]	; (8003108 <__libc_init_array+0x40>)
 80030da:	4c0c      	ldr	r4, [pc, #48]	; (800310c <__libc_init_array+0x44>)
 80030dc:	f000 f820 	bl	8003120 <_init>
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	2600      	movs	r6, #0
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	08003148 	.word	0x08003148
 8003104:	08003148 	.word	0x08003148
 8003108:	08003148 	.word	0x08003148
 800310c:	0800314c 	.word	0x0800314c

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <_init>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr

0800312c <_fini>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr
