
SPI_ISR_DMA_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005228  08005228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005230  08005230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000020c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012460  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c4  00000000  00000000  00032500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  000348c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  000357b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224a4  00000000  00000000  000365d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b83  00000000  00000000  00058a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce2f5  00000000  00000000  000695f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001378ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004834  00000000  00000000  00137940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005130 	.word	0x08005130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005130 	.word	0x08005130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fca0 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f84c 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f93c 	bl	80007f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f912 	bl	80007a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8e6 	bl	800074c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000580:	f000 f8ae 	bl	80006e0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  sprintf((char *)Tx_Data, "ready to send\r\n");
 8000584:	4919      	ldr	r1, [pc, #100]	; (80005ec <main+0x84>)
 8000586:	481a      	ldr	r0, [pc, #104]	; (80005f0 <main+0x88>)
 8000588:	f003 fcc2 	bl	8003f10 <siprintf>
  HAL_SPI_Transmit(&hspi3,(uint8_t *)Tx_Data,15,50);
 800058c:	2332      	movs	r3, #50	; 0x32
 800058e:	220f      	movs	r2, #15
 8000590:	4917      	ldr	r1, [pc, #92]	; (80005f0 <main+0x88>)
 8000592:	4818      	ldr	r0, [pc, #96]	; (80005f4 <main+0x8c>)
 8000594:	f002 f863 	bl	800265e <HAL_SPI_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  pin_status= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000598:	2101      	movs	r1, #1
 800059a:	4817      	ldr	r0, [pc, #92]	; (80005f8 <main+0x90>)
 800059c:	f001 fafe 	bl	8001b9c <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <main+0x94>)
 80005a6:	701a      	strb	r2, [r3, #0]

	  	  if (pin_status)
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x94>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00c      	beq.n	80005ca <main+0x62>
	  	  {
	  		  sprintf((char *)Tx_Data, "data transmit\r\n");
 80005b0:	4913      	ldr	r1, [pc, #76]	; (8000600 <main+0x98>)
 80005b2:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x88>)
 80005b4:	f003 fcac 	bl	8003f10 <siprintf>
	      	  HAL_SPI_Transmit(&hspi3,(uint8_t *)Tx_Data,15,50);
 80005b8:	2332      	movs	r3, #50	; 0x32
 80005ba:	220f      	movs	r2, #15
 80005bc:	490c      	ldr	r1, [pc, #48]	; (80005f0 <main+0x88>)
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x8c>)
 80005c0:	f002 f84d 	bl	800265e <HAL_SPI_Transmit>

	      	  flag=TRUE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <main+0x9c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  if(flag)
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x9c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <main+0x7a>
	  	  {
	  		  HAL_SPI_Receive_DMA(&hspi3, (uint8_t *)Rx_Data, 15);
 80005d2:	220f      	movs	r2, #15
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <main+0xa0>)
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0x8c>)
 80005d8:	f002 f97e 	bl	80028d8 <HAL_SPI_Receive_DMA>
//	  		  if(i>25)
//	  		  {
//	  			  i=0;
//	  			  printf("\r\n");
//	  		  }
	  		  flag=FALSE;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <main+0x9c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  HAL_Delay(500);
 80005e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e6:	f000 fca5 	bl	8000f34 <HAL_Delay>
	  	  pin_status= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005ea:	e7d5      	b.n	8000598 <main+0x30>
 80005ec:	08005148 	.word	0x08005148
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	200000c4 	.word	0x200000c4
 80005f8:	40020000 	.word	0x40020000
 80005fc:	200000b5 	.word	0x200000b5
 8000600:	08005158 	.word	0x08005158
 8000604:	200000b4 	.word	0x200000b4
 8000608:	200000a0 	.word	0x200000a0

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fc58 	bl	8003ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	; 0xa8
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fab5 	bl	8001c00 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f950 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fd16 	bl	80020f0 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f939 	bl	8000940 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_SPI3_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <MX_SPI3_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_SPI3_Init+0x64>)
 80006ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_SPI3_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_SPI3_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_SPI3_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_SPI3_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_SPI3_Init+0x64>)
 800070c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000710:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_SPI3_Init+0x64>)
 8000714:	2220      	movs	r2, #32
 8000716:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_SPI3_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_SPI3_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_SPI3_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_SPI3_Init+0x64>)
 800072c:	220a      	movs	r2, #10
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_SPI3_Init+0x64>)
 8000732:	f001 ff0b 	bl	800254c <HAL_SPI_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 f900 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000c4 	.word	0x200000c4
 8000748:	40003c00 	.word	0x40003c00

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f003 f864 	bl	8003850 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f8d7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000017c 	.word	0x2000017c
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_DMA_Init+0x4c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_DMA_Init+0x4c>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_DMA_Init+0x4c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200b      	movs	r0, #11
 80007c8:	f000 fc90 	bl	80010ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007cc:	200b      	movs	r0, #11
 80007ce:	f000 fca9 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2010      	movs	r0, #16
 80007d8:	f000 fc88 	bl	80010ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007dc:	2010      	movs	r0, #16
 80007de:	f000 fca1 	bl	8001124 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2c      	ldr	r2, [pc, #176]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_GPIO_Init+0xd4>)
 800087e:	f001 f9a5 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000882:	2301      	movs	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_GPIO_Init+0xd8>)
 8000896:	f000 ffe5 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800089a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_GPIO_Init+0xd4>)
 80008b4:	f000 ffd6 	bl	8001864 <HAL_GPIO_Init>

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020000 	.word	0x40020000

080008cc <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	printf("%s\r\n",Rx_Data);
 80008d4:	4905      	ldr	r1, [pc, #20]	; (80008ec <HAL_SPI_RxCpltCallback+0x20>)
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <HAL_SPI_RxCpltCallback+0x24>)
 80008d8:	f003 fb02 	bl	8003ee0 <iprintf>
	 // HAL_UART_Transmit(&huart2, (uint8_t *)Rx_Data, sizeof(Rx_Data), 500);
	flag=TRUE;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_SPI_RxCpltCallback+0x28>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	08005168 	.word	0x08005168
 80008f4:	200000b4 	.word	0x200000b4

080008f8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000900:	1d39      	adds	r1, r7, #4
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	2201      	movs	r2, #1
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <__io_putchar+0x20>)
 800090a:	f002 ffee 	bl	80038ea <HAL_UART_Transmit>

  return ch;
 800090e:	687b      	ldr	r3, [r7, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000017c 	.word	0x2000017c

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fae1 	bl	8000ef4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010000 	.word	0x40010000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fba3 	bl	80010d6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a4b      	ldr	r2, [pc, #300]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	f040 808f 	bne.w	8000ade <HAL_SPI_MspInit+0x142>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	4b49      	ldr	r3, [pc, #292]	; (8000aec <HAL_SPI_MspInit+0x150>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a48      	ldr	r2, [pc, #288]	; (8000aec <HAL_SPI_MspInit+0x150>)
 80009ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b46      	ldr	r3, [pc, #280]	; (8000aec <HAL_SPI_MspInit+0x150>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <HAL_SPI_MspInit+0x150>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a41      	ldr	r2, [pc, #260]	; (8000aec <HAL_SPI_MspInit+0x150>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_SPI_MspInit+0x150>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4836      	ldr	r0, [pc, #216]	; (8000af0 <HAL_SPI_MspInit+0x154>)
 8000a16:	f000 ff25 	bl	8001864 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a1c:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <HAL_SPI_MspInit+0x15c>)
 8000a1e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000a20:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a38:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a5a:	f000 fb71 	bl	8001140 <HAL_DMA_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000a64:	f7ff ff6c 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <HAL_SPI_MspInit+0x158>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <HAL_SPI_MspInit+0x164>)
 8000a78:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a82:	2240      	movs	r2, #64	; 0x40
 8000a84:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000ab4:	f000 fb44 	bl	8001140 <HAL_DMA_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8000abe:	f7ff ff3f 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000ac6:	649a      	str	r2, [r3, #72]	; 0x48
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_SPI_MspInit+0x160>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2033      	movs	r0, #51	; 0x33
 8000ad4:	f000 fb0a 	bl	80010ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ad8:	2033      	movs	r0, #51	; 0x33
 8000ada:	f000 fb23 	bl	8001124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40003c00 	.word	0x40003c00
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020800 	.word	0x40020800
 8000af4:	200001c0 	.word	0x200001c0
 8000af8:	40026010 	.word	0x40026010
 8000afc:	2000011c 	.word	0x2000011c
 8000b00:	40026088 	.word	0x40026088

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0x8c>)
 8000b7a:	f000 fe73 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2019      	movs	r0, #25
 8000baa:	f000 fa9f 	bl	80010ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bae:	2019      	movs	r0, #25
 8000bb0:	f000 fab8 	bl	8001124 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <HAL_InitTick+0xa4>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <HAL_InitTick+0xa4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_InitTick+0xa4>)
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fc84 	bl	80024e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000be0:	f001 fc6e 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8000be4:	4603      	mov	r3, r0
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <HAL_InitTick+0xa8>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_InitTick+0xac>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <HAL_InitTick+0xb0>)
 8000bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_InitTick+0xac>)
 8000c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_InitTick+0xac>)
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_InitTick+0xac>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_InitTick+0xac>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <HAL_InitTick+0xac>)
 8000c1a:	f002 fb6b 	bl	80032f4 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <HAL_InitTick+0xac>)
 8000c26:	f002 fbbf 	bl	80033a8 <HAL_TIM_Base_Start_IT>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	20000220 	.word	0x20000220
 8000c44:	40010000 	.word	0x40010000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA1_Stream0_IRQHandler+0x10>)
 8000ca6:	f000 fb73 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001c0 	.word	0x200001c0

08000cb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Stream5_IRQHandler+0x10>)
 8000cba:	f000 fb69 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000011c 	.word	0x2000011c

08000cc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cce:	f002 fbdb 	bl	8003488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000220 	.word	0x20000220

08000cdc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <SPI3_IRQHandler+0x10>)
 8000ce2:	f001 ffc3 	bl	8002c6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000c4 	.word	0x200000c4

08000cf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
	}

return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	e009      	b.n	8000d50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fdd7 	bl	80008f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf1      	blt.n	8000d3c <_write+0x12>
	}
	return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_close>:

int _close(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
	return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f003 f83e 	bl	8003e7c <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200000b8 	.word	0x200000b8
 8000e34:	20000280 	.word	0x20000280

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f002 fffd 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fb6b 	bl	8000568 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea0:	08005238 	.word	0x08005238
  ldr r2, =_sbss
 8000ea4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea8:	2000027c 	.word	0x2000027c

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f8fc 	bl	80010d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fe58 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fd32 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000268 	.word	0x20000268

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000268 	.word	0x20000268

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4c 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fe:	f7ff ff61 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001102:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff ffb1 	bl	8001070 <NVIC_EncodePriority>
 800110e:	4602      	mov	r2, r0
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff80 	bl	800101c <__NVIC_SetPriority>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff54 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fee6 	bl	8000f1c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e099      	b.n	8001290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2202      	movs	r2, #2
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117c:	e00f      	b.n	800119e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800117e:	f7ff fecd 	bl	8000f1c <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b05      	cmp	r3, #5
 800118a:	d908      	bls.n	800119e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2220      	movs	r2, #32
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2203      	movs	r2, #3
 8001196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e078      	b.n	8001290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1e8      	bne.n	800117e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_DMA_Init+0x158>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d107      	bne.n	8001208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4313      	orrs	r3, r2
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f023 0307 	bic.w	r3, r3, #7
 800121e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4313      	orrs	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	2b04      	cmp	r3, #4
 8001230:	d117      	bne.n	8001262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00e      	beq.n	8001262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fa91 	bl	800176c <DMA_CheckFifoParam>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2240      	movs	r2, #64	; 0x40
 8001254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800125e:	2301      	movs	r3, #1
 8001260:	e016      	b.n	8001290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fa48 	bl	8001700 <DMA_CalcBaseAndBitshift>
 8001270:	4603      	mov	r3, r0
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001278:	223f      	movs	r2, #63	; 0x3f
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	f010803f 	.word	0xf010803f

0800129c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <HAL_DMA_Start_IT+0x26>
 80012be:	2302      	movs	r3, #2
 80012c0:	e040      	b.n	8001344 <HAL_DMA_Start_IT+0xa8>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d12f      	bne.n	8001336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2202      	movs	r2, #2
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f9da 	bl	80016a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	223f      	movs	r2, #63	; 0x3f
 80012f6:	409a      	lsls	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0216 	orr.w	r2, r2, #22
 800130a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0208 	orr.w	r2, r2, #8
 8001322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e005      	b.n	8001342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800133e:	2302      	movs	r3, #2
 8001340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00c      	b.n	8001384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2205      	movs	r2, #5
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800139c:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_DMA_IRQHandler+0x258>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a92      	ldr	r2, [pc, #584]	; (80015ec <HAL_DMA_IRQHandler+0x25c>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2208      	movs	r2, #8
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2208      	movs	r2, #8
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	2204      	movs	r2, #4
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2204      	movs	r2, #4
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2210      	movs	r2, #16
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03c      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2210      	movs	r2, #16
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d018      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d024      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e01f      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
 80014d0:	e016      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2220      	movs	r2, #32
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8086 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2220      	movs	r2, #32
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b05      	cmp	r3, #5
 8001538:	d136      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0216 	bic.w	r2, r2, #22
 8001548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_DMA_IRQHandler+0x1da>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	2b00      	cmp	r3, #0
 800159c:	d07d      	beq.n	800169a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
        }
        return;
 80015a6:	e078      	b.n	800169a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d030      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e02b      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d027      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
 80015e6:	e022      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
 80015e8:	20000000 	.word	0x20000000
 80015ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0210 	bic.w	r2, r2, #16
 800160c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	2b00      	cmp	r3, #0
 8001634:	d032      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d022      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	429a      	cmp	r2, r3
 8001664:	d307      	bcc.n	8001676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_DMA_IRQHandler+0x2ca>
 8001674:	e000      	b.n	8001678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001676:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e000      	b.n	800169c <HAL_DMA_IRQHandler+0x30c>
        return;
 800169a:	bf00      	nop
    }
  }
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	d108      	bne.n	80016e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e2:	e007      	b.n	80016f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3b10      	subs	r3, #16
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DMA_CalcBaseAndBitshift+0x64>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <DMA_CalcBaseAndBitshift+0x68>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d909      	bls.n	8001742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
 8001740:	e007      	b.n	8001752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	08005188 	.word	0x08005188

0800176c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11f      	bne.n	80017c6 <DMA_CheckFifoParam+0x5a>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d856      	bhi.n	800183a <DMA_CheckFifoParam+0xce>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <DMA_CheckFifoParam+0x28>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b7 	.word	0x080017b7
 800179c:	080017a5 	.word	0x080017a5
 80017a0:	0800183b 	.word	0x0800183b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d046      	beq.n	800183e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b4:	e043      	b.n	800183e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017be:	d140      	bne.n	8001842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c4:	e03d      	b.n	8001842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ce:	d121      	bne.n	8001814 <DMA_CheckFifoParam+0xa8>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d837      	bhi.n	8001846 <DMA_CheckFifoParam+0xda>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <DMA_CheckFifoParam+0x70>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f3 	.word	0x080017f3
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001805 	.word	0x08001805
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      break;
 80017f0:	e030      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d025      	beq.n	800184a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001802:	e022      	b.n	800184a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800180c:	d11f      	bne.n	800184e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001812:	e01c      	b.n	800184e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d903      	bls.n	8001822 <DMA_CheckFifoParam+0xb6>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d003      	beq.n	8001828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001820:	e018      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      break;
 8001826:	e015      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00e      	beq.n	8001852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      break;
 8001838:	e00b      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 800183a:	bf00      	nop
 800183c:	e00a      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
 8001840:	e008      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e006      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e004      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e002      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;   
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
    }
  } 
  
  return status; 
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e16b      	b.n	8001b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 815a 	bne.w	8001b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80b4 	beq.w	8001b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x314>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_GPIO_Init+0x318>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x222>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x21e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4f      	ldr	r2, [pc, #316]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x216>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <HAL_GPIO_Init+0x328>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	; (8001b90 <HAL_GPIO_Init+0x32c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x20a>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00e      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ace:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f ae90 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40021400 	.word	0x40021400
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40021c00 	.word	0x40021c00
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e264      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d075      	beq.n	8001d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1e:	4ba3      	ldr	r3, [pc, #652]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d00c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4ba0      	ldr	r3, [pc, #640]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c36:	4b9d      	ldr	r3, [pc, #628]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b99      	ldr	r3, [pc, #612]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d157      	bne.n	8001d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e23f      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x74>
 8001c66:	4b91      	ldr	r3, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x98>
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a8a      	ldr	r2, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c98:	4b84      	ldr	r3, [pc, #528]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a83      	ldr	r2, [pc, #524]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f930 	bl	8000f1c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f92c 	bl	8000f1c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e204      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f91c 	bl	8000f1c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f918 	bl	8000f1c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1f0      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xe8>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1c4      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4952      	ldr	r1, [pc, #328]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f8d1 	bl	8000f1c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f8cd 	bl	8000f1c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1a5      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4940      	ldr	r1, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8b0 	bl	8000f1c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f8ac 	bl	8000f1c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e184      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d030      	beq.n	8001e4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_OscConfig+0x2b4>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f890 	bl	8000f1c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff f88c 	bl	8000f1c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e164      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x200>
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x2b4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f879 	bl	8000f1c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f875 	bl	8000f1c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e14d      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a0 	beq.w	8001f9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f83b 	bl	8000f1c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e011      	b.n	8001ece <HAL_RCC_OscConfig+0x2ce>
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	42470000 	.word	0x42470000
 8001eb4:	42470e80 	.word	0x42470e80
 8001eb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7ff f82e 	bl	8000f1c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e106      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b85      	ldr	r3, [pc, #532]	; (80020e4 <HAL_RCC_OscConfig+0x4e4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
 8001ee2:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a80      	ldr	r2, [pc, #512]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x32a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x312>
 8001ef8:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a7a      	ldr	r2, [pc, #488]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x32a>
 8001f12:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a74      	ldr	r2, [pc, #464]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a71      	ldr	r2, [pc, #452]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7fe fff3 	bl	8000f1c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe ffef 	bl	8000f1c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0c5      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x33a>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe ffdd 	bl	8000f1c <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe ffd9 	bl	8000f1c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0af      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a55      	ldr	r2, [pc, #340]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 809b 	beq.w	80020da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d05c      	beq.n	800206a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d141      	bne.n	800203c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ffad 	bl	8000f1c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe ffa9 	bl	8000f1c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e081      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	019b      	lsls	r3, r3, #6
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	061b      	lsls	r3, r3, #24
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff82 	bl	8000f1c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff7e 	bl	8000f1c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e056      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x41c>
 800203a:	e04e      	b.n	80020da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff6b 	bl	8000f1c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe ff67 	bl	8000f1c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03f      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x44a>
 8002068:	e037      	b.n	80020da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e032      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d028      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d11a      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a6:	4013      	ands	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40007000 	.word	0x40007000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470060 	.word	0x42470060

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0cc      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d90c      	bls.n	800212c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800214e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d044      	beq.n	8002210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d119      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e067      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fe9c 	bl	8000f1c <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7fe fe98 	bl	8000f1c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e04f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 020c 	and.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1eb      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d20c      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc7c 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08005170 	.word	0x08005170
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	2300      	movs	r3, #0
 80022ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d4:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d00d      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x40>
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	f200 80bd 	bhi.w	8002460 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ee:	e0b7      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022f2:	60bb      	str	r3, [r7, #8]
       break;
 80022f4:	e0b7      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022f8:	60bb      	str	r3, [r7, #8]
      break;
 80022fa:	e0b4      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04d      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	461a      	mov	r2, r3
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	ea02 0800 	and.w	r8, r2, r0
 800232a:	ea03 0901 	and.w	r9, r3, r1
 800232e:	4640      	mov	r0, r8
 8002330:	4649      	mov	r1, r9
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	014b      	lsls	r3, r1, #5
 800233c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002340:	0142      	lsls	r2, r0, #5
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	ebb0 0008 	subs.w	r0, r0, r8
 800234a:	eb61 0109 	sbc.w	r1, r1, r9
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	018b      	lsls	r3, r1, #6
 8002358:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800235c:	0182      	lsls	r2, r0, #6
 800235e:	1a12      	subs	r2, r2, r0
 8002360:	eb63 0301 	sbc.w	r3, r3, r1
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	00d9      	lsls	r1, r3, #3
 800236e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002372:	00d0      	lsls	r0, r2, #3
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	eb12 0208 	adds.w	r2, r2, r8
 800237c:	eb43 0309 	adc.w	r3, r3, r9
 8002380:	f04f 0000 	mov.w	r0, #0
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	0259      	lsls	r1, r3, #9
 800238a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800238e:	0250      	lsls	r0, r2, #9
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	f7fd ff66 	bl	8000270 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4613      	mov	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e04a      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	461a      	mov	r2, r3
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	ea02 0400 	and.w	r4, r2, r0
 80023c6:	ea03 0501 	and.w	r5, r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	014b      	lsls	r3, r1, #5
 80023d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023dc:	0142      	lsls	r2, r0, #5
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	1b00      	subs	r0, r0, r4
 80023e4:	eb61 0105 	sbc.w	r1, r1, r5
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	018b      	lsls	r3, r1, #6
 80023f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f6:	0182      	lsls	r2, r0, #6
 80023f8:	1a12      	subs	r2, r2, r0
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	00d9      	lsls	r1, r3, #3
 8002408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240c:	00d0      	lsls	r0, r2, #3
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	1912      	adds	r2, r2, r4
 8002414:	eb45 0303 	adc.w	r3, r5, r3
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	0299      	lsls	r1, r3, #10
 8002422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002426:	0290      	lsls	r0, r2, #10
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fd ff1a 	bl	8000270 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	60bb      	str	r3, [r7, #8]
      break;
 800245e:	e002      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002462:	60bb      	str	r3, [r7, #8]
      break;
 8002464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002466:	68bb      	ldr	r3, [r7, #8]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	00f42400 	.word	0x00f42400
 800247c:	007a1200 	.word	0x007a1200

08002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCC_GetHCLKFreq+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800249c:	f7ff fff0 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0a9b      	lsrs	r3, r3, #10
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4903      	ldr	r1, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	08005180 	.word	0x08005180

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c4:	f7ff ffdc 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0b5b      	lsrs	r3, r3, #13
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08005180 	.word	0x08005180

080024e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	220f      	movs	r2, #15
 80024f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_RCC_GetClockConfig+0x60>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0207 	and.w	r2, r3, #7
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	601a      	str	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	40023c00 	.word	0x40023c00

0800254c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07b      	b.n	8002656 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800256e:	d009      	beq.n	8002584 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
 8002576:	e005      	b.n	8002584 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe f9fc 	bl	800099c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	ea42 0103 	orr.w	r1, r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0104 	and.w	r1, r3, #4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f003 0210 	and.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002644:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b088      	sub	sp, #32
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_SPI_Transmit+0x22>
 800267c:	2302      	movs	r3, #2
 800267e:	e126      	b.n	80028ce <HAL_SPI_Transmit+0x270>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002688:	f7fe fc48 	bl	8000f1c <HAL_GetTick>
 800268c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d002      	beq.n	80026a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026a2:	e10b      	b.n	80028bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_SPI_Transmit+0x52>
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026b4:	e102      	b.n	80028bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026fc:	d10f      	bne.n	800271e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800270c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d007      	beq.n	800273c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002744:	d14b      	bne.n	80027de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_SPI_Transmit+0xf6>
 800274e:	8afb      	ldrh	r3, [r7, #22]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13e      	bne.n	80027d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002778:	e02b      	b.n	80027d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d112      	bne.n	80027ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	1c9a      	adds	r2, r3, #2
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80027ac:	e011      	b.n	80027d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ae:	f7fe fbb5 	bl	8000f1c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d803      	bhi.n	80027c6 <HAL_SPI_Transmit+0x168>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d102      	bne.n	80027cc <HAL_SPI_Transmit+0x16e>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027d0:	e074      	b.n	80028bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ce      	bne.n	800277a <HAL_SPI_Transmit+0x11c>
 80027dc:	e04c      	b.n	8002878 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_Transmit+0x18e>
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d140      	bne.n	800286e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002812:	e02c      	b.n	800286e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d113      	bne.n	800284a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	86da      	strh	r2, [r3, #54]	; 0x36
 8002848:	e011      	b.n	800286e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800284a:	f7fe fb67 	bl	8000f1c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d803      	bhi.n	8002862 <HAL_SPI_Transmit+0x204>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d102      	bne.n	8002868 <HAL_SPI_Transmit+0x20a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800286c:	e026      	b.n	80028bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1cd      	bne.n	8002814 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	6839      	ldr	r1, [r7, #0]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fcf7 	bl	8003270 <SPI_EndRxTxTransaction>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e000      	b.n	80028bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80028ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d110      	bne.n	8002914 <HAL_SPI_Receive_DMA+0x3c>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fa:	d10b      	bne.n	8002914 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2204      	movs	r2, #4
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8ac 	bl	8002a68 <HAL_SPI_TransmitReceive_DMA>
 8002910:	4603      	mov	r3, r0
 8002912:	e09f      	b.n	8002a54 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_SPI_Receive_DMA+0x4a>
 800291e:	2302      	movs	r3, #2
 8002920:	e098      	b.n	8002a54 <HAL_SPI_Receive_DMA+0x17c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d002      	beq.n	800293c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	75fb      	strb	r3, [r7, #23]
    goto error;
 800293a:	e086      	b.n	8002a4a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Receive_DMA+0x70>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800294c:	e07d      	b.n	8002a4a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2204      	movs	r2, #4
 8002952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298e:	d10f      	bne.n	80029b0 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_SPI_Receive_DMA+0x184>)
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <HAL_SPI_Receive_DMA+0x188>)
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_SPI_Receive_DMA+0x18c>)
 80029c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	2200      	movs	r2, #0
 80029ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	4619      	mov	r1, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029e8:	f7fe fc58 	bl	800129c <HAL_DMA_Start_IT>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002a0a:	e01e      	b.n	8002a4a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d007      	beq.n	8002a2a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	08002ff5 	.word	0x08002ff5
 8002a60:	08002ebd 	.word	0x08002ebd
 8002a64:	0800302d 	.word	0x0800302d

08002a68 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0e3      	b.n	8002c50 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a96:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002a9e:	7dbb      	ldrb	r3, [r7, #22]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aaa:	d106      	bne.n	8002aba <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_TransmitReceive_DMA+0x52>
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
 8002abc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002abe:	e0c2      	b.n	8002c46 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ad6:	e0b6      	b.n	8002c46 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d003      	beq.n	8002aec <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2205      	movs	r2, #5
 8002ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	887a      	ldrh	r2, [r7, #2]
 8002b02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d108      	bne.n	8002b40 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	4a48      	ldr	r2, [pc, #288]	; (8002c5c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b3e:	e007      	b.n	8002b50 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	4a45      	ldr	r2, [pc, #276]	; (8002c64 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	4a44      	ldr	r2, [pc, #272]	; (8002c68 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002b56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b78:	f7fe fb90 	bl	800129c <HAL_DMA_Start_IT>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b9a:	e054      	b.n	8002c46 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	2200      	movs	r2, #0
 8002bca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002be4:	f7fe fb5a 	bl	800129c <HAL_DMA_Start_IT>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0210 	orr.w	r2, r3, #16
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002c06:	e01e      	b.n	8002c46 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d007      	beq.n	8002c26 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c24:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0202 	orr.w	r2, r2, #2
 8002c44:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	08002ff5 	.word	0x08002ff5
 8002c5c:	08002ebd 	.word	0x08002ebd
 8002c60:	08003011 	.word	0x08003011
 8002c64:	08002f65 	.word	0x08002f65
 8002c68:	0800302d 	.word	0x0800302d

08002c6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
    return;
 8002cae:	e0d7      	b.n	8002e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_SPI_IRQHandler+0x66>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	09db      	lsrs	r3, r3, #7
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
    return;
 8002cd0:	e0c6      	b.n	8002e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_SPI_IRQHandler+0x8c>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80b4 	beq.w	8002e60 <HAL_SPI_IRQHandler+0x1f4>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80ad 	beq.w	8002e60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d011      	beq.n	8002d42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	e00b      	b.n	8002d5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
        return;
 8002d58:	e082      	b.n	8002e60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d014      	beq.n	8002d90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00c      	beq.n	8002db6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0208 	orr.w	r2, r3, #8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d04f      	beq.n	8002e5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dcc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_SPI_IRQHandler+0x17e>
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d034      	beq.n	8002e54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0203 	bic.w	r2, r2, #3
 8002df8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d011      	beq.n	8002e26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_SPI_IRQHandler+0x1fc>)
 8002e08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fa9c 	bl	800134c <HAL_DMA_Abort_IT>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_SPI_IRQHandler+0x1fc>)
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fa86 	bl	800134c <HAL_DMA_Abort_IT>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002e52:	e003      	b.n	8002e5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f827 	bl	8002ea8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e5a:	e000      	b.n	8002e5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002e5c:	bf00      	nop
    return;
 8002e5e:	bf00      	nop
  }
}
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	0800306d 	.word	0x0800306d

08002e6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eca:	f7fe f827 	bl	8000f1c <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d03b      	beq.n	8002f58 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0220 	bic.w	r2, r2, #32
 8002eee:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <SPI_DMAReceiveCplt+0x58>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f00:	d108      	bne.n	8002f14 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0203 	bic.w	r2, r2, #3
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e007      	b.n	8002f24 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	2164      	movs	r1, #100	; 0x64
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f93b 	bl	80031a4 <SPI_EndRxTransaction>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff ffa9 	bl	8002ea8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f56:	e002      	b.n	8002f5e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7fd fcb7 	bl	80008cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f72:	f7fd ffd3 	bl	8000f1c <HAL_GetTick>
 8002f76:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f86:	d02f      	beq.n	8002fe8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0220 	bic.w	r2, r2, #32
 8002f96:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	2164      	movs	r1, #100	; 0x64
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f967 	bl	8003270 <SPI_EndRxTxTransaction>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0203 	bic.w	r2, r2, #3
 8002fc2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff ff61 	bl	8002ea8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002fe6:	e002      	b.n	8002fee <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff ff3f 	bl	8002e6c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff ff3c 	bl	8002e80 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff ff38 	bl	8002e94 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0203 	bic.w	r2, r2, #3
 8003048:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff22 	bl	8002ea8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff0e 	bl	8002ea8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a4:	f7fd ff3a 	bl	8000f1c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b4:	f7fd ff32 	bl	8000f1c <HAL_GetTick>
 80030b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	015b      	lsls	r3, r3, #5
 80030c0:	0d1b      	lsrs	r3, r3, #20
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ca:	e054      	b.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d050      	beq.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d4:	f7fd ff22 	bl	8000f1c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d13d      	bne.n	8003166 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003102:	d111      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310c:	d004      	beq.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d107      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003130:	d10f      	bne.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e017      	b.n	8003196 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3b01      	subs	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d19b      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000

080031a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b8:	d111      	bne.n	80031de <SPI_EndRxTransaction+0x3a>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d004      	beq.n	80031ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d107      	bne.n	80031de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e6:	d12a      	bne.n	800323e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	d012      	beq.n	8003218 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff49 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02d      	beq.n	8003264 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e026      	b.n	8003266 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	2101      	movs	r1, #1
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff ff36 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01a      	beq.n	8003264 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e013      	b.n	8003266 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	2101      	movs	r1, #1
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff ff23 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e000      	b.n	8003266 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <SPI_EndRxTxTransaction+0x7c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <SPI_EndRxTxTransaction+0x80>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0d5b      	lsrs	r3, r3, #21
 8003288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329a:	d112      	bne.n	80032c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff fef4 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d0f2      	beq.n	80032c2 <SPI_EndRxTxTransaction+0x52>
 80032dc:	e000      	b.n	80032e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80032de:	bf00      	nop
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000
 80032f0:	165e9f81 	.word	0x165e9f81

080032f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e041      	b.n	800338a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f839 	bl	8003392 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 f9d8 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d001      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e04e      	b.n	800345e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <HAL_TIM_Base_Start_IT+0xc4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d01d      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_TIM_Base_Start_IT+0xc8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <HAL_TIM_Base_Start_IT+0xcc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_TIM_Base_Start_IT+0xd0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_TIM_Base_Start_IT+0xd4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_TIM_Base_Start_IT+0xd8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x80>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_TIM_Base_Start_IT+0xdc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d111      	bne.n	800344c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b06      	cmp	r3, #6
 8003438:	d010      	beq.n	800345c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	e007      	b.n	800345c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800
 8003478:	40000c00 	.word	0x40000c00
 800347c:	40010400 	.word	0x40010400
 8003480:	40014000 	.word	0x40014000
 8003484:	40001800 	.word	0x40001800

08003488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d122      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0202 	mvn.w	r2, #2
 80034b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8ee 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8e0 	bl	8003698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8f1 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d122      	bne.n	8003538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11b      	bne.n	8003538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0204 	mvn.w	r2, #4
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8c4 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8b6 	bl	8003698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8c7 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0208 	mvn.w	r2, #8
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2204      	movs	r2, #4
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f89a 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f88c 	bl	8003698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f89d 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b10      	cmp	r3, #16
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2208      	movs	r2, #8
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f870 	bl	80036ac <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f862 	bl	8003698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f873 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0201 	mvn.w	r2, #1
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd f988 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f902 	bl	800383c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f838 	bl	80036d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0220 	mvn.w	r2, #32
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8cc 	bl	8003828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a40      	ldr	r2, [pc, #256]	; (80037fc <TIM_Base_SetConfig+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d00f      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <TIM_Base_SetConfig+0x118>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3b      	ldr	r2, [pc, #236]	; (8003808 <TIM_Base_SetConfig+0x120>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3a      	ldr	r2, [pc, #232]	; (800380c <TIM_Base_SetConfig+0x124>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d108      	bne.n	800373a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <TIM_Base_SetConfig+0x114>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003748:	d027      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <TIM_Base_SetConfig+0x118>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d023      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01f      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <TIM_Base_SetConfig+0x120>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a29      	ldr	r2, [pc, #164]	; (800380c <TIM_Base_SetConfig+0x124>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d017      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <TIM_Base_SetConfig+0x128>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <TIM_Base_SetConfig+0x12c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <TIM_Base_SetConfig+0x130>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <TIM_Base_SetConfig+0x134>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a24      	ldr	r2, [pc, #144]	; (8003820 <TIM_Base_SetConfig+0x138>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <TIM_Base_SetConfig+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <TIM_Base_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_Base_SetConfig+0xf8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <TIM_Base_SetConfig+0x124>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800
 800381c:	40001800 	.word	0x40001800
 8003820:	40001c00 	.word	0x40001c00
 8003824:	40002000 	.word	0x40002000

08003828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e03f      	b.n	80038e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd f944 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f929 	bl	8003aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b08a      	sub	sp, #40	; 0x28
 80038ee:	af02      	add	r7, sp, #8
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	d17c      	bne.n	8003a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_UART_Transmit+0x2c>
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e075      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit+0x3e>
 8003924:	2302      	movs	r3, #2
 8003926:	e06e      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393e:	f7fd faed 	bl	8000f1c <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x82>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800397c:	e02a      	b.n	80039d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f840 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e036      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3302      	adds	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e007      	b.n	80039c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1cf      	bne.n	800397e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f810 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e006      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b090      	sub	sp, #64	; 0x40
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	e050      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d04c      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2e:	f7fd fa75 	bl	8000f1c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d241      	bcs.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a5e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	613b      	str	r3, [r7, #16]
   return(result);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a92:	623a      	str	r2, [r7, #32]
 8003a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	69f9      	ldr	r1, [r7, #28]
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e00f      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d09f      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3740      	adds	r7, #64	; 0x40
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af0:	b09f      	sub	sp, #124	; 0x7c
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	68d9      	ldr	r1, [r3, #12]
 8003b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	ea40 0301 	orr.w	r3, r0, r1
 8003b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b30:	f021 010c 	bic.w	r1, r1, #12
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	6999      	ldr	r1, [r3, #24]
 8003b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	ea40 0301 	orr.w	r3, r0, r1
 8003b54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4bc5      	ldr	r3, [pc, #788]	; (8003e70 <UART_SetConfig+0x384>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d004      	beq.n	8003b6a <UART_SetConfig+0x7e>
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4bc3      	ldr	r3, [pc, #780]	; (8003e74 <UART_SetConfig+0x388>)
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d103      	bne.n	8003b72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b6a:	f7fe fca9 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003b6e:	6778      	str	r0, [r7, #116]	; 0x74
 8003b70:	e002      	b.n	8003b78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b72:	f7fe fc91 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003b76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b80:	f040 80b6 	bne.w	8003cf0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b86:	461c      	mov	r4, r3
 8003b88:	f04f 0500 	mov.w	r5, #0
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	462b      	mov	r3, r5
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	6439      	str	r1, [r7, #64]	; 0x40
 8003b94:	415b      	adcs	r3, r3
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
 8003b98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b9c:	1912      	adds	r2, r2, r4
 8003b9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	00d9      	lsls	r1, r3, #3
 8003bac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb0:	00d0      	lsls	r0, r2, #3
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	1911      	adds	r1, r2, r4
 8003bb8:	6639      	str	r1, [r7, #96]	; 0x60
 8003bba:	416b      	adcs	r3, r5
 8003bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003bd8:	f7fc fb4a 	bl	8000270 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4ba5      	ldr	r3, [pc, #660]	; (8003e78 <UART_SetConfig+0x38c>)
 8003be2:	fba3 2302 	umull	r2, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	011e      	lsls	r6, r3, #4
 8003bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bec:	461c      	mov	r4, r3
 8003bee:	f04f 0500 	mov.w	r5, #0
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	6339      	str	r1, [r7, #48]	; 0x30
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c02:	1912      	adds	r2, r2, r4
 8003c04:	eb45 0303 	adc.w	r3, r5, r3
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	00d9      	lsls	r1, r3, #3
 8003c12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c16:	00d0      	lsls	r0, r2, #3
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	1911      	adds	r1, r2, r4
 8003c1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c20:	416b      	adcs	r3, r5
 8003c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	1891      	adds	r1, r2, r2
 8003c30:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c32:	415b      	adcs	r3, r3
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c3e:	f7fc fb17 	bl	8000270 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4b8c      	ldr	r3, [pc, #560]	; (8003e78 <UART_SetConfig+0x38c>)
 8003c48:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2164      	movs	r1, #100	; 0x64
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <UART_SetConfig+0x38c>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c68:	441e      	add	r6, r3
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	1894      	adds	r4, r2, r2
 8003c78:	623c      	str	r4, [r7, #32]
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c82:	1812      	adds	r2, r2, r0
 8003c84:	eb41 0303 	adc.w	r3, r1, r3
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	f04f 0500 	mov.w	r5, #0
 8003c90:	00dd      	lsls	r5, r3, #3
 8003c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c96:	00d4      	lsls	r4, r2, #3
 8003c98:	4622      	mov	r2, r4
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	1814      	adds	r4, r2, r0
 8003c9e:	653c      	str	r4, [r7, #80]	; 0x50
 8003ca0:	414b      	adcs	r3, r1
 8003ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	1891      	adds	r1, r2, r2
 8003cb0:	61b9      	str	r1, [r7, #24]
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cbe:	f7fc fad7 	bl	8000270 <__aeabi_uldivmod>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <UART_SetConfig+0x38c>)
 8003cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	2164      	movs	r1, #100	; 0x64
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	3332      	adds	r3, #50	; 0x32
 8003cda:	4a67      	ldr	r2, [pc, #412]	; (8003e78 <UART_SetConfig+0x38c>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	f003 0207 	and.w	r2, r3, #7
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4432      	add	r2, r6
 8003cec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cee:	e0b9      	b.n	8003e64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf2:	461c      	mov	r4, r3
 8003cf4:	f04f 0500 	mov.w	r5, #0
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	462b      	mov	r3, r5
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	6139      	str	r1, [r7, #16]
 8003d00:	415b      	adcs	r3, r3
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d08:	1912      	adds	r2, r2, r4
 8003d0a:	eb45 0303 	adc.w	r3, r5, r3
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	00d9      	lsls	r1, r3, #3
 8003d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d1c:	00d0      	lsls	r0, r2, #3
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	eb12 0804 	adds.w	r8, r2, r4
 8003d26:	eb43 0905 	adc.w	r9, r3, r5
 8003d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	008b      	lsls	r3, r1, #2
 8003d3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d42:	0082      	lsls	r2, r0, #2
 8003d44:	4640      	mov	r0, r8
 8003d46:	4649      	mov	r1, r9
 8003d48:	f7fc fa92 	bl	8000270 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <UART_SetConfig+0x38c>)
 8003d52:	fba3 2302 	umull	r2, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	011e      	lsls	r6, r3, #4
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	1894      	adds	r4, r2, r2
 8003d68:	60bc      	str	r4, [r7, #8]
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d72:	1812      	adds	r2, r2, r0
 8003d74:	eb41 0303 	adc.w	r3, r1, r3
 8003d78:	f04f 0400 	mov.w	r4, #0
 8003d7c:	f04f 0500 	mov.w	r5, #0
 8003d80:	00dd      	lsls	r5, r3, #3
 8003d82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d86:	00d4      	lsls	r4, r2, #3
 8003d88:	4622      	mov	r2, r4
 8003d8a:	462b      	mov	r3, r5
 8003d8c:	1814      	adds	r4, r2, r0
 8003d8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d90:	414b      	adcs	r3, r1
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	008b      	lsls	r3, r1, #2
 8003da8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dac:	0082      	lsls	r2, r0, #2
 8003dae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003db2:	f7fc fa5d 	bl	8000270 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <UART_SetConfig+0x38c>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <UART_SetConfig+0x38c>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dda:	441e      	add	r6, r3
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dde:	4618      	mov	r0, r3
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	1894      	adds	r4, r2, r2
 8003dea:	603c      	str	r4, [r7, #0]
 8003dec:	415b      	adcs	r3, r3
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003df4:	1812      	adds	r2, r2, r0
 8003df6:	eb41 0303 	adc.w	r3, r1, r3
 8003dfa:	f04f 0400 	mov.w	r4, #0
 8003dfe:	f04f 0500 	mov.w	r5, #0
 8003e02:	00dd      	lsls	r5, r3, #3
 8003e04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e08:	00d4      	lsls	r4, r2, #3
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	eb12 0a00 	adds.w	sl, r2, r0
 8003e12:	eb43 0b01 	adc.w	fp, r3, r1
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	008b      	lsls	r3, r1, #2
 8003e2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e2e:	0082      	lsls	r2, r0, #2
 8003e30:	4650      	mov	r0, sl
 8003e32:	4659      	mov	r1, fp
 8003e34:	f7fc fa1c 	bl	8000270 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <UART_SetConfig+0x38c>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2164      	movs	r1, #100	; 0x64
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <UART_SetConfig+0x38c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4432      	add	r2, r6
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	377c      	adds	r7, #124	; 0x7c
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6e:	bf00      	nop
 8003e70:	40011000 	.word	0x40011000
 8003e74:	40011400 	.word	0x40011400
 8003e78:	51eb851f 	.word	0x51eb851f

08003e7c <__errno>:
 8003e7c:	4b01      	ldr	r3, [pc, #4]	; (8003e84 <__errno+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	2000000c 	.word	0x2000000c

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f001 f948 	bl	8005130 <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08005230 	.word	0x08005230
 8003ec4:	08005230 	.word	0x08005230
 8003ec8:	08005230 	.word	0x08005230
 8003ecc:	08005234 	.word	0x08005234

08003ed0 <memset>:
 8003ed0:	4402      	add	r2, r0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d100      	bne.n	8003eda <memset+0xa>
 8003ed8:	4770      	bx	lr
 8003eda:	f803 1b01 	strb.w	r1, [r3], #1
 8003ede:	e7f9      	b.n	8003ed4 <memset+0x4>

08003ee0 <iprintf>:
 8003ee0:	b40f      	push	{r0, r1, r2, r3}
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <iprintf+0x2c>)
 8003ee4:	b513      	push	{r0, r1, r4, lr}
 8003ee6:	681c      	ldr	r4, [r3, #0]
 8003ee8:	b124      	cbz	r4, 8003ef4 <iprintf+0x14>
 8003eea:	69a3      	ldr	r3, [r4, #24]
 8003eec:	b913      	cbnz	r3, 8003ef4 <iprintf+0x14>
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 f886 	bl	8004000 <__sinit>
 8003ef4:	ab05      	add	r3, sp, #20
 8003ef6:	9a04      	ldr	r2, [sp, #16]
 8003ef8:	68a1      	ldr	r1, [r4, #8]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	4620      	mov	r0, r4
 8003efe:	f000 faff 	bl	8004500 <_vfiprintf_r>
 8003f02:	b002      	add	sp, #8
 8003f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f08:	b004      	add	sp, #16
 8003f0a:	4770      	bx	lr
 8003f0c:	2000000c 	.word	0x2000000c

08003f10 <siprintf>:
 8003f10:	b40e      	push	{r1, r2, r3}
 8003f12:	b500      	push	{lr}
 8003f14:	b09c      	sub	sp, #112	; 0x70
 8003f16:	ab1d      	add	r3, sp, #116	; 0x74
 8003f18:	9002      	str	r0, [sp, #8]
 8003f1a:	9006      	str	r0, [sp, #24]
 8003f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f20:	4809      	ldr	r0, [pc, #36]	; (8003f48 <siprintf+0x38>)
 8003f22:	9107      	str	r1, [sp, #28]
 8003f24:	9104      	str	r1, [sp, #16]
 8003f26:	4909      	ldr	r1, [pc, #36]	; (8003f4c <siprintf+0x3c>)
 8003f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	6800      	ldr	r0, [r0, #0]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	a902      	add	r1, sp, #8
 8003f34:	f000 f9ba 	bl	80042ac <_svfiprintf_r>
 8003f38:	9b02      	ldr	r3, [sp, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	b01c      	add	sp, #112	; 0x70
 8003f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f44:	b003      	add	sp, #12
 8003f46:	4770      	bx	lr
 8003f48:	2000000c 	.word	0x2000000c
 8003f4c:	ffff0208 	.word	0xffff0208

08003f50 <std>:
 8003f50:	2300      	movs	r3, #0
 8003f52:	b510      	push	{r4, lr}
 8003f54:	4604      	mov	r4, r0
 8003f56:	e9c0 3300 	strd	r3, r3, [r0]
 8003f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f5e:	6083      	str	r3, [r0, #8]
 8003f60:	8181      	strh	r1, [r0, #12]
 8003f62:	6643      	str	r3, [r0, #100]	; 0x64
 8003f64:	81c2      	strh	r2, [r0, #14]
 8003f66:	6183      	str	r3, [r0, #24]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	305c      	adds	r0, #92	; 0x5c
 8003f6e:	f7ff ffaf 	bl	8003ed0 <memset>
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <std+0x38>)
 8003f74:	6263      	str	r3, [r4, #36]	; 0x24
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <std+0x3c>)
 8003f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <std+0x40>)
 8003f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <std+0x44>)
 8003f80:	6224      	str	r4, [r4, #32]
 8003f82:	6323      	str	r3, [r4, #48]	; 0x30
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	08004aa9 	.word	0x08004aa9
 8003f8c:	08004acb 	.word	0x08004acb
 8003f90:	08004b03 	.word	0x08004b03
 8003f94:	08004b27 	.word	0x08004b27

08003f98 <_cleanup_r>:
 8003f98:	4901      	ldr	r1, [pc, #4]	; (8003fa0 <_cleanup_r+0x8>)
 8003f9a:	f000 b8af 	b.w	80040fc <_fwalk_reent>
 8003f9e:	bf00      	nop
 8003fa0:	08004e01 	.word	0x08004e01

08003fa4 <__sfmoreglue>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	1e4a      	subs	r2, r1, #1
 8003fa8:	2568      	movs	r5, #104	; 0x68
 8003faa:	4355      	muls	r5, r2
 8003fac:	460e      	mov	r6, r1
 8003fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fb2:	f000 f8c5 	bl	8004140 <_malloc_r>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	b140      	cbz	r0, 8003fcc <__sfmoreglue+0x28>
 8003fba:	2100      	movs	r1, #0
 8003fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8003fc0:	300c      	adds	r0, #12
 8003fc2:	60a0      	str	r0, [r4, #8]
 8003fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fc8:	f7ff ff82 	bl	8003ed0 <memset>
 8003fcc:	4620      	mov	r0, r4
 8003fce:	bd70      	pop	{r4, r5, r6, pc}

08003fd0 <__sfp_lock_acquire>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	; (8003fd8 <__sfp_lock_acquire+0x8>)
 8003fd2:	f000 b8b3 	b.w	800413c <__retarget_lock_acquire_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20000274 	.word	0x20000274

08003fdc <__sfp_lock_release>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__sfp_lock_release+0x8>)
 8003fde:	f000 b8ae 	b.w	800413e <__retarget_lock_release_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000274 	.word	0x20000274

08003fe8 <__sinit_lock_acquire>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__sinit_lock_acquire+0x8>)
 8003fea:	f000 b8a7 	b.w	800413c <__retarget_lock_acquire_recursive>
 8003fee:	bf00      	nop
 8003ff0:	2000026f 	.word	0x2000026f

08003ff4 <__sinit_lock_release>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <__sinit_lock_release+0x8>)
 8003ff6:	f000 b8a2 	b.w	800413e <__retarget_lock_release_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	2000026f 	.word	0x2000026f

08004000 <__sinit>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	f7ff fff0 	bl	8003fe8 <__sinit_lock_acquire>
 8004008:	69a3      	ldr	r3, [r4, #24]
 800400a:	b11b      	cbz	r3, 8004014 <__sinit+0x14>
 800400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004010:	f7ff bff0 	b.w	8003ff4 <__sinit_lock_release>
 8004014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004018:	6523      	str	r3, [r4, #80]	; 0x50
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <__sinit+0x68>)
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <__sinit+0x6c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	62a2      	str	r2, [r4, #40]	; 0x28
 8004022:	42a3      	cmp	r3, r4
 8004024:	bf04      	itt	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	61a3      	streq	r3, [r4, #24]
 800402a:	4620      	mov	r0, r4
 800402c:	f000 f820 	bl	8004070 <__sfp>
 8004030:	6060      	str	r0, [r4, #4]
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f81c 	bl	8004070 <__sfp>
 8004038:	60a0      	str	r0, [r4, #8]
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f818 	bl	8004070 <__sfp>
 8004040:	2200      	movs	r2, #0
 8004042:	60e0      	str	r0, [r4, #12]
 8004044:	2104      	movs	r1, #4
 8004046:	6860      	ldr	r0, [r4, #4]
 8004048:	f7ff ff82 	bl	8003f50 <std>
 800404c:	68a0      	ldr	r0, [r4, #8]
 800404e:	2201      	movs	r2, #1
 8004050:	2109      	movs	r1, #9
 8004052:	f7ff ff7d 	bl	8003f50 <std>
 8004056:	68e0      	ldr	r0, [r4, #12]
 8004058:	2202      	movs	r2, #2
 800405a:	2112      	movs	r1, #18
 800405c:	f7ff ff78 	bl	8003f50 <std>
 8004060:	2301      	movs	r3, #1
 8004062:	61a3      	str	r3, [r4, #24]
 8004064:	e7d2      	b.n	800400c <__sinit+0xc>
 8004066:	bf00      	nop
 8004068:	08005190 	.word	0x08005190
 800406c:	08003f99 	.word	0x08003f99

08004070 <__sfp>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	4607      	mov	r7, r0
 8004074:	f7ff ffac 	bl	8003fd0 <__sfp_lock_acquire>
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <__sfp+0x84>)
 800407a:	681e      	ldr	r6, [r3, #0]
 800407c:	69b3      	ldr	r3, [r6, #24]
 800407e:	b913      	cbnz	r3, 8004086 <__sfp+0x16>
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff ffbd 	bl	8004000 <__sinit>
 8004086:	3648      	adds	r6, #72	; 0x48
 8004088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800408c:	3b01      	subs	r3, #1
 800408e:	d503      	bpl.n	8004098 <__sfp+0x28>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	b30b      	cbz	r3, 80040d8 <__sfp+0x68>
 8004094:	6836      	ldr	r6, [r6, #0]
 8004096:	e7f7      	b.n	8004088 <__sfp+0x18>
 8004098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800409c:	b9d5      	cbnz	r5, 80040d4 <__sfp+0x64>
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <__sfp+0x88>)
 80040a0:	60e3      	str	r3, [r4, #12]
 80040a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040a6:	6665      	str	r5, [r4, #100]	; 0x64
 80040a8:	f000 f847 	bl	800413a <__retarget_lock_init_recursive>
 80040ac:	f7ff ff96 	bl	8003fdc <__sfp_lock_release>
 80040b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040b8:	6025      	str	r5, [r4, #0]
 80040ba:	61a5      	str	r5, [r4, #24]
 80040bc:	2208      	movs	r2, #8
 80040be:	4629      	mov	r1, r5
 80040c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040c4:	f7ff ff04 	bl	8003ed0 <memset>
 80040c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040d0:	4620      	mov	r0, r4
 80040d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d4:	3468      	adds	r4, #104	; 0x68
 80040d6:	e7d9      	b.n	800408c <__sfp+0x1c>
 80040d8:	2104      	movs	r1, #4
 80040da:	4638      	mov	r0, r7
 80040dc:	f7ff ff62 	bl	8003fa4 <__sfmoreglue>
 80040e0:	4604      	mov	r4, r0
 80040e2:	6030      	str	r0, [r6, #0]
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d1d5      	bne.n	8004094 <__sfp+0x24>
 80040e8:	f7ff ff78 	bl	8003fdc <__sfp_lock_release>
 80040ec:	230c      	movs	r3, #12
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	e7ee      	b.n	80040d0 <__sfp+0x60>
 80040f2:	bf00      	nop
 80040f4:	08005190 	.word	0x08005190
 80040f8:	ffff0001 	.word	0xffff0001

080040fc <_fwalk_reent>:
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004100:	4606      	mov	r6, r0
 8004102:	4688      	mov	r8, r1
 8004104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004108:	2700      	movs	r7, #0
 800410a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800410e:	f1b9 0901 	subs.w	r9, r9, #1
 8004112:	d505      	bpl.n	8004120 <_fwalk_reent+0x24>
 8004114:	6824      	ldr	r4, [r4, #0]
 8004116:	2c00      	cmp	r4, #0
 8004118:	d1f7      	bne.n	800410a <_fwalk_reent+0xe>
 800411a:	4638      	mov	r0, r7
 800411c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004120:	89ab      	ldrh	r3, [r5, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d907      	bls.n	8004136 <_fwalk_reent+0x3a>
 8004126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800412a:	3301      	adds	r3, #1
 800412c:	d003      	beq.n	8004136 <_fwalk_reent+0x3a>
 800412e:	4629      	mov	r1, r5
 8004130:	4630      	mov	r0, r6
 8004132:	47c0      	blx	r8
 8004134:	4307      	orrs	r7, r0
 8004136:	3568      	adds	r5, #104	; 0x68
 8004138:	e7e9      	b.n	800410e <_fwalk_reent+0x12>

0800413a <__retarget_lock_init_recursive>:
 800413a:	4770      	bx	lr

0800413c <__retarget_lock_acquire_recursive>:
 800413c:	4770      	bx	lr

0800413e <__retarget_lock_release_recursive>:
 800413e:	4770      	bx	lr

08004140 <_malloc_r>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	1ccd      	adds	r5, r1, #3
 8004144:	f025 0503 	bic.w	r5, r5, #3
 8004148:	3508      	adds	r5, #8
 800414a:	2d0c      	cmp	r5, #12
 800414c:	bf38      	it	cc
 800414e:	250c      	movcc	r5, #12
 8004150:	2d00      	cmp	r5, #0
 8004152:	4606      	mov	r6, r0
 8004154:	db01      	blt.n	800415a <_malloc_r+0x1a>
 8004156:	42a9      	cmp	r1, r5
 8004158:	d903      	bls.n	8004162 <_malloc_r+0x22>
 800415a:	230c      	movs	r3, #12
 800415c:	6033      	str	r3, [r6, #0]
 800415e:	2000      	movs	r0, #0
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004162:	f000 ff27 	bl	8004fb4 <__malloc_lock>
 8004166:	4921      	ldr	r1, [pc, #132]	; (80041ec <_malloc_r+0xac>)
 8004168:	680a      	ldr	r2, [r1, #0]
 800416a:	4614      	mov	r4, r2
 800416c:	b99c      	cbnz	r4, 8004196 <_malloc_r+0x56>
 800416e:	4f20      	ldr	r7, [pc, #128]	; (80041f0 <_malloc_r+0xb0>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b923      	cbnz	r3, 800417e <_malloc_r+0x3e>
 8004174:	4621      	mov	r1, r4
 8004176:	4630      	mov	r0, r6
 8004178:	f000 fc86 	bl	8004a88 <_sbrk_r>
 800417c:	6038      	str	r0, [r7, #0]
 800417e:	4629      	mov	r1, r5
 8004180:	4630      	mov	r0, r6
 8004182:	f000 fc81 	bl	8004a88 <_sbrk_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	d123      	bne.n	80041d2 <_malloc_r+0x92>
 800418a:	230c      	movs	r3, #12
 800418c:	6033      	str	r3, [r6, #0]
 800418e:	4630      	mov	r0, r6
 8004190:	f000 ff16 	bl	8004fc0 <__malloc_unlock>
 8004194:	e7e3      	b.n	800415e <_malloc_r+0x1e>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	1b5b      	subs	r3, r3, r5
 800419a:	d417      	bmi.n	80041cc <_malloc_r+0x8c>
 800419c:	2b0b      	cmp	r3, #11
 800419e:	d903      	bls.n	80041a8 <_malloc_r+0x68>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	441c      	add	r4, r3
 80041a4:	6025      	str	r5, [r4, #0]
 80041a6:	e004      	b.n	80041b2 <_malloc_r+0x72>
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	42a2      	cmp	r2, r4
 80041ac:	bf0c      	ite	eq
 80041ae:	600b      	streq	r3, [r1, #0]
 80041b0:	6053      	strne	r3, [r2, #4]
 80041b2:	4630      	mov	r0, r6
 80041b4:	f000 ff04 	bl	8004fc0 <__malloc_unlock>
 80041b8:	f104 000b 	add.w	r0, r4, #11
 80041bc:	1d23      	adds	r3, r4, #4
 80041be:	f020 0007 	bic.w	r0, r0, #7
 80041c2:	1ac2      	subs	r2, r0, r3
 80041c4:	d0cc      	beq.n	8004160 <_malloc_r+0x20>
 80041c6:	1a1b      	subs	r3, r3, r0
 80041c8:	50a3      	str	r3, [r4, r2]
 80041ca:	e7c9      	b.n	8004160 <_malloc_r+0x20>
 80041cc:	4622      	mov	r2, r4
 80041ce:	6864      	ldr	r4, [r4, #4]
 80041d0:	e7cc      	b.n	800416c <_malloc_r+0x2c>
 80041d2:	1cc4      	adds	r4, r0, #3
 80041d4:	f024 0403 	bic.w	r4, r4, #3
 80041d8:	42a0      	cmp	r0, r4
 80041da:	d0e3      	beq.n	80041a4 <_malloc_r+0x64>
 80041dc:	1a21      	subs	r1, r4, r0
 80041de:	4630      	mov	r0, r6
 80041e0:	f000 fc52 	bl	8004a88 <_sbrk_r>
 80041e4:	3001      	adds	r0, #1
 80041e6:	d1dd      	bne.n	80041a4 <_malloc_r+0x64>
 80041e8:	e7cf      	b.n	800418a <_malloc_r+0x4a>
 80041ea:	bf00      	nop
 80041ec:	200000bc 	.word	0x200000bc
 80041f0:	200000c0 	.word	0x200000c0

080041f4 <__ssputs_r>:
 80041f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	688e      	ldr	r6, [r1, #8]
 80041fa:	429e      	cmp	r6, r3
 80041fc:	4682      	mov	sl, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	4690      	mov	r8, r2
 8004202:	461f      	mov	r7, r3
 8004204:	d838      	bhi.n	8004278 <__ssputs_r+0x84>
 8004206:	898a      	ldrh	r2, [r1, #12]
 8004208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800420c:	d032      	beq.n	8004274 <__ssputs_r+0x80>
 800420e:	6825      	ldr	r5, [r4, #0]
 8004210:	6909      	ldr	r1, [r1, #16]
 8004212:	eba5 0901 	sub.w	r9, r5, r1
 8004216:	6965      	ldr	r5, [r4, #20]
 8004218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800421c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004220:	3301      	adds	r3, #1
 8004222:	444b      	add	r3, r9
 8004224:	106d      	asrs	r5, r5, #1
 8004226:	429d      	cmp	r5, r3
 8004228:	bf38      	it	cc
 800422a:	461d      	movcc	r5, r3
 800422c:	0553      	lsls	r3, r2, #21
 800422e:	d531      	bpl.n	8004294 <__ssputs_r+0xa0>
 8004230:	4629      	mov	r1, r5
 8004232:	f7ff ff85 	bl	8004140 <_malloc_r>
 8004236:	4606      	mov	r6, r0
 8004238:	b950      	cbnz	r0, 8004250 <__ssputs_r+0x5c>
 800423a:	230c      	movs	r3, #12
 800423c:	f8ca 3000 	str.w	r3, [sl]
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004246:	81a3      	strh	r3, [r4, #12]
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004250:	6921      	ldr	r1, [r4, #16]
 8004252:	464a      	mov	r2, r9
 8004254:	f000 fe86 	bl	8004f64 <memcpy>
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	6126      	str	r6, [r4, #16]
 8004266:	6165      	str	r5, [r4, #20]
 8004268:	444e      	add	r6, r9
 800426a:	eba5 0509 	sub.w	r5, r5, r9
 800426e:	6026      	str	r6, [r4, #0]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	463e      	mov	r6, r7
 8004274:	42be      	cmp	r6, r7
 8004276:	d900      	bls.n	800427a <__ssputs_r+0x86>
 8004278:	463e      	mov	r6, r7
 800427a:	4632      	mov	r2, r6
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	4641      	mov	r1, r8
 8004280:	f000 fe7e 	bl	8004f80 <memmove>
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	1b9b      	subs	r3, r3, r6
 800428a:	4432      	add	r2, r6
 800428c:	60a3      	str	r3, [r4, #8]
 800428e:	6022      	str	r2, [r4, #0]
 8004290:	2000      	movs	r0, #0
 8004292:	e7db      	b.n	800424c <__ssputs_r+0x58>
 8004294:	462a      	mov	r2, r5
 8004296:	f000 fee9 	bl	800506c <_realloc_r>
 800429a:	4606      	mov	r6, r0
 800429c:	2800      	cmp	r0, #0
 800429e:	d1e1      	bne.n	8004264 <__ssputs_r+0x70>
 80042a0:	6921      	ldr	r1, [r4, #16]
 80042a2:	4650      	mov	r0, sl
 80042a4:	f000 fe92 	bl	8004fcc <_free_r>
 80042a8:	e7c7      	b.n	800423a <__ssputs_r+0x46>
	...

080042ac <_svfiprintf_r>:
 80042ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	4698      	mov	r8, r3
 80042b2:	898b      	ldrh	r3, [r1, #12]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	b09d      	sub	sp, #116	; 0x74
 80042b8:	4607      	mov	r7, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	4614      	mov	r4, r2
 80042be:	d50e      	bpl.n	80042de <_svfiprintf_r+0x32>
 80042c0:	690b      	ldr	r3, [r1, #16]
 80042c2:	b963      	cbnz	r3, 80042de <_svfiprintf_r+0x32>
 80042c4:	2140      	movs	r1, #64	; 0x40
 80042c6:	f7ff ff3b 	bl	8004140 <_malloc_r>
 80042ca:	6028      	str	r0, [r5, #0]
 80042cc:	6128      	str	r0, [r5, #16]
 80042ce:	b920      	cbnz	r0, 80042da <_svfiprintf_r+0x2e>
 80042d0:	230c      	movs	r3, #12
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	e0d1      	b.n	800447e <_svfiprintf_r+0x1d2>
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	616b      	str	r3, [r5, #20]
 80042de:	2300      	movs	r3, #0
 80042e0:	9309      	str	r3, [sp, #36]	; 0x24
 80042e2:	2320      	movs	r3, #32
 80042e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ec:	2330      	movs	r3, #48	; 0x30
 80042ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004498 <_svfiprintf_r+0x1ec>
 80042f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042f6:	f04f 0901 	mov.w	r9, #1
 80042fa:	4623      	mov	r3, r4
 80042fc:	469a      	mov	sl, r3
 80042fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004302:	b10a      	cbz	r2, 8004308 <_svfiprintf_r+0x5c>
 8004304:	2a25      	cmp	r2, #37	; 0x25
 8004306:	d1f9      	bne.n	80042fc <_svfiprintf_r+0x50>
 8004308:	ebba 0b04 	subs.w	fp, sl, r4
 800430c:	d00b      	beq.n	8004326 <_svfiprintf_r+0x7a>
 800430e:	465b      	mov	r3, fp
 8004310:	4622      	mov	r2, r4
 8004312:	4629      	mov	r1, r5
 8004314:	4638      	mov	r0, r7
 8004316:	f7ff ff6d 	bl	80041f4 <__ssputs_r>
 800431a:	3001      	adds	r0, #1
 800431c:	f000 80aa 	beq.w	8004474 <_svfiprintf_r+0x1c8>
 8004320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004322:	445a      	add	r2, fp
 8004324:	9209      	str	r2, [sp, #36]	; 0x24
 8004326:	f89a 3000 	ldrb.w	r3, [sl]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80a2 	beq.w	8004474 <_svfiprintf_r+0x1c8>
 8004330:	2300      	movs	r3, #0
 8004332:	f04f 32ff 	mov.w	r2, #4294967295
 8004336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800433a:	f10a 0a01 	add.w	sl, sl, #1
 800433e:	9304      	str	r3, [sp, #16]
 8004340:	9307      	str	r3, [sp, #28]
 8004342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004346:	931a      	str	r3, [sp, #104]	; 0x68
 8004348:	4654      	mov	r4, sl
 800434a:	2205      	movs	r2, #5
 800434c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004350:	4851      	ldr	r0, [pc, #324]	; (8004498 <_svfiprintf_r+0x1ec>)
 8004352:	f7fb ff3d 	bl	80001d0 <memchr>
 8004356:	9a04      	ldr	r2, [sp, #16]
 8004358:	b9d8      	cbnz	r0, 8004392 <_svfiprintf_r+0xe6>
 800435a:	06d0      	lsls	r0, r2, #27
 800435c:	bf44      	itt	mi
 800435e:	2320      	movmi	r3, #32
 8004360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004364:	0711      	lsls	r1, r2, #28
 8004366:	bf44      	itt	mi
 8004368:	232b      	movmi	r3, #43	; 0x2b
 800436a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436e:	f89a 3000 	ldrb.w	r3, [sl]
 8004372:	2b2a      	cmp	r3, #42	; 0x2a
 8004374:	d015      	beq.n	80043a2 <_svfiprintf_r+0xf6>
 8004376:	9a07      	ldr	r2, [sp, #28]
 8004378:	4654      	mov	r4, sl
 800437a:	2000      	movs	r0, #0
 800437c:	f04f 0c0a 	mov.w	ip, #10
 8004380:	4621      	mov	r1, r4
 8004382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004386:	3b30      	subs	r3, #48	; 0x30
 8004388:	2b09      	cmp	r3, #9
 800438a:	d94e      	bls.n	800442a <_svfiprintf_r+0x17e>
 800438c:	b1b0      	cbz	r0, 80043bc <_svfiprintf_r+0x110>
 800438e:	9207      	str	r2, [sp, #28]
 8004390:	e014      	b.n	80043bc <_svfiprintf_r+0x110>
 8004392:	eba0 0308 	sub.w	r3, r0, r8
 8004396:	fa09 f303 	lsl.w	r3, r9, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	9304      	str	r3, [sp, #16]
 800439e:	46a2      	mov	sl, r4
 80043a0:	e7d2      	b.n	8004348 <_svfiprintf_r+0x9c>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	1d19      	adds	r1, r3, #4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	9103      	str	r1, [sp, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfbb      	ittet	lt
 80043ae:	425b      	neglt	r3, r3
 80043b0:	f042 0202 	orrlt.w	r2, r2, #2
 80043b4:	9307      	strge	r3, [sp, #28]
 80043b6:	9307      	strlt	r3, [sp, #28]
 80043b8:	bfb8      	it	lt
 80043ba:	9204      	strlt	r2, [sp, #16]
 80043bc:	7823      	ldrb	r3, [r4, #0]
 80043be:	2b2e      	cmp	r3, #46	; 0x2e
 80043c0:	d10c      	bne.n	80043dc <_svfiprintf_r+0x130>
 80043c2:	7863      	ldrb	r3, [r4, #1]
 80043c4:	2b2a      	cmp	r3, #42	; 0x2a
 80043c6:	d135      	bne.n	8004434 <_svfiprintf_r+0x188>
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	1d1a      	adds	r2, r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	9203      	str	r2, [sp, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bfb8      	it	lt
 80043d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043d8:	3402      	adds	r4, #2
 80043da:	9305      	str	r3, [sp, #20]
 80043dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044a8 <_svfiprintf_r+0x1fc>
 80043e0:	7821      	ldrb	r1, [r4, #0]
 80043e2:	2203      	movs	r2, #3
 80043e4:	4650      	mov	r0, sl
 80043e6:	f7fb fef3 	bl	80001d0 <memchr>
 80043ea:	b140      	cbz	r0, 80043fe <_svfiprintf_r+0x152>
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	eba0 000a 	sub.w	r0, r0, sl
 80043f2:	fa03 f000 	lsl.w	r0, r3, r0
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	4303      	orrs	r3, r0
 80043fa:	3401      	adds	r4, #1
 80043fc:	9304      	str	r3, [sp, #16]
 80043fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004402:	4826      	ldr	r0, [pc, #152]	; (800449c <_svfiprintf_r+0x1f0>)
 8004404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004408:	2206      	movs	r2, #6
 800440a:	f7fb fee1 	bl	80001d0 <memchr>
 800440e:	2800      	cmp	r0, #0
 8004410:	d038      	beq.n	8004484 <_svfiprintf_r+0x1d8>
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <_svfiprintf_r+0x1f4>)
 8004414:	bb1b      	cbnz	r3, 800445e <_svfiprintf_r+0x1b2>
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	3307      	adds	r3, #7
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	3308      	adds	r3, #8
 8004420:	9303      	str	r3, [sp, #12]
 8004422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004424:	4433      	add	r3, r6
 8004426:	9309      	str	r3, [sp, #36]	; 0x24
 8004428:	e767      	b.n	80042fa <_svfiprintf_r+0x4e>
 800442a:	fb0c 3202 	mla	r2, ip, r2, r3
 800442e:	460c      	mov	r4, r1
 8004430:	2001      	movs	r0, #1
 8004432:	e7a5      	b.n	8004380 <_svfiprintf_r+0xd4>
 8004434:	2300      	movs	r3, #0
 8004436:	3401      	adds	r4, #1
 8004438:	9305      	str	r3, [sp, #20]
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 0c0a 	mov.w	ip, #10
 8004440:	4620      	mov	r0, r4
 8004442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004446:	3a30      	subs	r2, #48	; 0x30
 8004448:	2a09      	cmp	r2, #9
 800444a:	d903      	bls.n	8004454 <_svfiprintf_r+0x1a8>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0c5      	beq.n	80043dc <_svfiprintf_r+0x130>
 8004450:	9105      	str	r1, [sp, #20]
 8004452:	e7c3      	b.n	80043dc <_svfiprintf_r+0x130>
 8004454:	fb0c 2101 	mla	r1, ip, r1, r2
 8004458:	4604      	mov	r4, r0
 800445a:	2301      	movs	r3, #1
 800445c:	e7f0      	b.n	8004440 <_svfiprintf_r+0x194>
 800445e:	ab03      	add	r3, sp, #12
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	462a      	mov	r2, r5
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <_svfiprintf_r+0x1f8>)
 8004466:	a904      	add	r1, sp, #16
 8004468:	4638      	mov	r0, r7
 800446a:	f3af 8000 	nop.w
 800446e:	1c42      	adds	r2, r0, #1
 8004470:	4606      	mov	r6, r0
 8004472:	d1d6      	bne.n	8004422 <_svfiprintf_r+0x176>
 8004474:	89ab      	ldrh	r3, [r5, #12]
 8004476:	065b      	lsls	r3, r3, #25
 8004478:	f53f af2c 	bmi.w	80042d4 <_svfiprintf_r+0x28>
 800447c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800447e:	b01d      	add	sp, #116	; 0x74
 8004480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004484:	ab03      	add	r3, sp, #12
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	462a      	mov	r2, r5
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <_svfiprintf_r+0x1f8>)
 800448c:	a904      	add	r1, sp, #16
 800448e:	4638      	mov	r0, r7
 8004490:	f000 f9d4 	bl	800483c <_printf_i>
 8004494:	e7eb      	b.n	800446e <_svfiprintf_r+0x1c2>
 8004496:	bf00      	nop
 8004498:	080051f4 	.word	0x080051f4
 800449c:	080051fe 	.word	0x080051fe
 80044a0:	00000000 	.word	0x00000000
 80044a4:	080041f5 	.word	0x080041f5
 80044a8:	080051fa 	.word	0x080051fa

080044ac <__sfputc_r>:
 80044ac:	6893      	ldr	r3, [r2, #8]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	b410      	push	{r4}
 80044b4:	6093      	str	r3, [r2, #8]
 80044b6:	da08      	bge.n	80044ca <__sfputc_r+0x1e>
 80044b8:	6994      	ldr	r4, [r2, #24]
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	db01      	blt.n	80044c2 <__sfputc_r+0x16>
 80044be:	290a      	cmp	r1, #10
 80044c0:	d103      	bne.n	80044ca <__sfputc_r+0x1e>
 80044c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c6:	f000 bb33 	b.w	8004b30 <__swbuf_r>
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	1c58      	adds	r0, r3, #1
 80044ce:	6010      	str	r0, [r2, #0]
 80044d0:	7019      	strb	r1, [r3, #0]
 80044d2:	4608      	mov	r0, r1
 80044d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044d8:	4770      	bx	lr

080044da <__sfputs_r>:
 80044da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044dc:	4606      	mov	r6, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	18d5      	adds	r5, r2, r3
 80044e4:	42ac      	cmp	r4, r5
 80044e6:	d101      	bne.n	80044ec <__sfputs_r+0x12>
 80044e8:	2000      	movs	r0, #0
 80044ea:	e007      	b.n	80044fc <__sfputs_r+0x22>
 80044ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f0:	463a      	mov	r2, r7
 80044f2:	4630      	mov	r0, r6
 80044f4:	f7ff ffda 	bl	80044ac <__sfputc_r>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d1f3      	bne.n	80044e4 <__sfputs_r+0xa>
 80044fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004500 <_vfiprintf_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	460d      	mov	r5, r1
 8004506:	b09d      	sub	sp, #116	; 0x74
 8004508:	4614      	mov	r4, r2
 800450a:	4698      	mov	r8, r3
 800450c:	4606      	mov	r6, r0
 800450e:	b118      	cbz	r0, 8004518 <_vfiprintf_r+0x18>
 8004510:	6983      	ldr	r3, [r0, #24]
 8004512:	b90b      	cbnz	r3, 8004518 <_vfiprintf_r+0x18>
 8004514:	f7ff fd74 	bl	8004000 <__sinit>
 8004518:	4b89      	ldr	r3, [pc, #548]	; (8004740 <_vfiprintf_r+0x240>)
 800451a:	429d      	cmp	r5, r3
 800451c:	d11b      	bne.n	8004556 <_vfiprintf_r+0x56>
 800451e:	6875      	ldr	r5, [r6, #4]
 8004520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004522:	07d9      	lsls	r1, r3, #31
 8004524:	d405      	bmi.n	8004532 <_vfiprintf_r+0x32>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	059a      	lsls	r2, r3, #22
 800452a:	d402      	bmi.n	8004532 <_vfiprintf_r+0x32>
 800452c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800452e:	f7ff fe05 	bl	800413c <__retarget_lock_acquire_recursive>
 8004532:	89ab      	ldrh	r3, [r5, #12]
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	d501      	bpl.n	800453c <_vfiprintf_r+0x3c>
 8004538:	692b      	ldr	r3, [r5, #16]
 800453a:	b9eb      	cbnz	r3, 8004578 <_vfiprintf_r+0x78>
 800453c:	4629      	mov	r1, r5
 800453e:	4630      	mov	r0, r6
 8004540:	f000 fb5a 	bl	8004bf8 <__swsetup_r>
 8004544:	b1c0      	cbz	r0, 8004578 <_vfiprintf_r+0x78>
 8004546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004548:	07dc      	lsls	r4, r3, #31
 800454a:	d50e      	bpl.n	800456a <_vfiprintf_r+0x6a>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b01d      	add	sp, #116	; 0x74
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	4b7b      	ldr	r3, [pc, #492]	; (8004744 <_vfiprintf_r+0x244>)
 8004558:	429d      	cmp	r5, r3
 800455a:	d101      	bne.n	8004560 <_vfiprintf_r+0x60>
 800455c:	68b5      	ldr	r5, [r6, #8]
 800455e:	e7df      	b.n	8004520 <_vfiprintf_r+0x20>
 8004560:	4b79      	ldr	r3, [pc, #484]	; (8004748 <_vfiprintf_r+0x248>)
 8004562:	429d      	cmp	r5, r3
 8004564:	bf08      	it	eq
 8004566:	68f5      	ldreq	r5, [r6, #12]
 8004568:	e7da      	b.n	8004520 <_vfiprintf_r+0x20>
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	0598      	lsls	r0, r3, #22
 800456e:	d4ed      	bmi.n	800454c <_vfiprintf_r+0x4c>
 8004570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004572:	f7ff fde4 	bl	800413e <__retarget_lock_release_recursive>
 8004576:	e7e9      	b.n	800454c <_vfiprintf_r+0x4c>
 8004578:	2300      	movs	r3, #0
 800457a:	9309      	str	r3, [sp, #36]	; 0x24
 800457c:	2320      	movs	r3, #32
 800457e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004582:	f8cd 800c 	str.w	r8, [sp, #12]
 8004586:	2330      	movs	r3, #48	; 0x30
 8004588:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800474c <_vfiprintf_r+0x24c>
 800458c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004590:	f04f 0901 	mov.w	r9, #1
 8004594:	4623      	mov	r3, r4
 8004596:	469a      	mov	sl, r3
 8004598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800459c:	b10a      	cbz	r2, 80045a2 <_vfiprintf_r+0xa2>
 800459e:	2a25      	cmp	r2, #37	; 0x25
 80045a0:	d1f9      	bne.n	8004596 <_vfiprintf_r+0x96>
 80045a2:	ebba 0b04 	subs.w	fp, sl, r4
 80045a6:	d00b      	beq.n	80045c0 <_vfiprintf_r+0xc0>
 80045a8:	465b      	mov	r3, fp
 80045aa:	4622      	mov	r2, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff ff93 	bl	80044da <__sfputs_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	f000 80aa 	beq.w	800470e <_vfiprintf_r+0x20e>
 80045ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045bc:	445a      	add	r2, fp
 80045be:	9209      	str	r2, [sp, #36]	; 0x24
 80045c0:	f89a 3000 	ldrb.w	r3, [sl]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a2 	beq.w	800470e <_vfiprintf_r+0x20e>
 80045ca:	2300      	movs	r3, #0
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d4:	f10a 0a01 	add.w	sl, sl, #1
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	9307      	str	r3, [sp, #28]
 80045dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045e0:	931a      	str	r3, [sp, #104]	; 0x68
 80045e2:	4654      	mov	r4, sl
 80045e4:	2205      	movs	r2, #5
 80045e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ea:	4858      	ldr	r0, [pc, #352]	; (800474c <_vfiprintf_r+0x24c>)
 80045ec:	f7fb fdf0 	bl	80001d0 <memchr>
 80045f0:	9a04      	ldr	r2, [sp, #16]
 80045f2:	b9d8      	cbnz	r0, 800462c <_vfiprintf_r+0x12c>
 80045f4:	06d1      	lsls	r1, r2, #27
 80045f6:	bf44      	itt	mi
 80045f8:	2320      	movmi	r3, #32
 80045fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045fe:	0713      	lsls	r3, r2, #28
 8004600:	bf44      	itt	mi
 8004602:	232b      	movmi	r3, #43	; 0x2b
 8004604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004608:	f89a 3000 	ldrb.w	r3, [sl]
 800460c:	2b2a      	cmp	r3, #42	; 0x2a
 800460e:	d015      	beq.n	800463c <_vfiprintf_r+0x13c>
 8004610:	9a07      	ldr	r2, [sp, #28]
 8004612:	4654      	mov	r4, sl
 8004614:	2000      	movs	r0, #0
 8004616:	f04f 0c0a 	mov.w	ip, #10
 800461a:	4621      	mov	r1, r4
 800461c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004620:	3b30      	subs	r3, #48	; 0x30
 8004622:	2b09      	cmp	r3, #9
 8004624:	d94e      	bls.n	80046c4 <_vfiprintf_r+0x1c4>
 8004626:	b1b0      	cbz	r0, 8004656 <_vfiprintf_r+0x156>
 8004628:	9207      	str	r2, [sp, #28]
 800462a:	e014      	b.n	8004656 <_vfiprintf_r+0x156>
 800462c:	eba0 0308 	sub.w	r3, r0, r8
 8004630:	fa09 f303 	lsl.w	r3, r9, r3
 8004634:	4313      	orrs	r3, r2
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	46a2      	mov	sl, r4
 800463a:	e7d2      	b.n	80045e2 <_vfiprintf_r+0xe2>
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	1d19      	adds	r1, r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	9103      	str	r1, [sp, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	bfbb      	ittet	lt
 8004648:	425b      	neglt	r3, r3
 800464a:	f042 0202 	orrlt.w	r2, r2, #2
 800464e:	9307      	strge	r3, [sp, #28]
 8004650:	9307      	strlt	r3, [sp, #28]
 8004652:	bfb8      	it	lt
 8004654:	9204      	strlt	r2, [sp, #16]
 8004656:	7823      	ldrb	r3, [r4, #0]
 8004658:	2b2e      	cmp	r3, #46	; 0x2e
 800465a:	d10c      	bne.n	8004676 <_vfiprintf_r+0x176>
 800465c:	7863      	ldrb	r3, [r4, #1]
 800465e:	2b2a      	cmp	r3, #42	; 0x2a
 8004660:	d135      	bne.n	80046ce <_vfiprintf_r+0x1ce>
 8004662:	9b03      	ldr	r3, [sp, #12]
 8004664:	1d1a      	adds	r2, r3, #4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	9203      	str	r2, [sp, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	bfb8      	it	lt
 800466e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004672:	3402      	adds	r4, #2
 8004674:	9305      	str	r3, [sp, #20]
 8004676:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800475c <_vfiprintf_r+0x25c>
 800467a:	7821      	ldrb	r1, [r4, #0]
 800467c:	2203      	movs	r2, #3
 800467e:	4650      	mov	r0, sl
 8004680:	f7fb fda6 	bl	80001d0 <memchr>
 8004684:	b140      	cbz	r0, 8004698 <_vfiprintf_r+0x198>
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	eba0 000a 	sub.w	r0, r0, sl
 800468c:	fa03 f000 	lsl.w	r0, r3, r0
 8004690:	9b04      	ldr	r3, [sp, #16]
 8004692:	4303      	orrs	r3, r0
 8004694:	3401      	adds	r4, #1
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800469c:	482c      	ldr	r0, [pc, #176]	; (8004750 <_vfiprintf_r+0x250>)
 800469e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046a2:	2206      	movs	r2, #6
 80046a4:	f7fb fd94 	bl	80001d0 <memchr>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d03f      	beq.n	800472c <_vfiprintf_r+0x22c>
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <_vfiprintf_r+0x254>)
 80046ae:	bb1b      	cbnz	r3, 80046f8 <_vfiprintf_r+0x1f8>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	3307      	adds	r3, #7
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	3308      	adds	r3, #8
 80046ba:	9303      	str	r3, [sp, #12]
 80046bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046be:	443b      	add	r3, r7
 80046c0:	9309      	str	r3, [sp, #36]	; 0x24
 80046c2:	e767      	b.n	8004594 <_vfiprintf_r+0x94>
 80046c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046c8:	460c      	mov	r4, r1
 80046ca:	2001      	movs	r0, #1
 80046cc:	e7a5      	b.n	800461a <_vfiprintf_r+0x11a>
 80046ce:	2300      	movs	r3, #0
 80046d0:	3401      	adds	r4, #1
 80046d2:	9305      	str	r3, [sp, #20]
 80046d4:	4619      	mov	r1, r3
 80046d6:	f04f 0c0a 	mov.w	ip, #10
 80046da:	4620      	mov	r0, r4
 80046dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e0:	3a30      	subs	r2, #48	; 0x30
 80046e2:	2a09      	cmp	r2, #9
 80046e4:	d903      	bls.n	80046ee <_vfiprintf_r+0x1ee>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0c5      	beq.n	8004676 <_vfiprintf_r+0x176>
 80046ea:	9105      	str	r1, [sp, #20]
 80046ec:	e7c3      	b.n	8004676 <_vfiprintf_r+0x176>
 80046ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80046f2:	4604      	mov	r4, r0
 80046f4:	2301      	movs	r3, #1
 80046f6:	e7f0      	b.n	80046da <_vfiprintf_r+0x1da>
 80046f8:	ab03      	add	r3, sp, #12
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	462a      	mov	r2, r5
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <_vfiprintf_r+0x258>)
 8004700:	a904      	add	r1, sp, #16
 8004702:	4630      	mov	r0, r6
 8004704:	f3af 8000 	nop.w
 8004708:	4607      	mov	r7, r0
 800470a:	1c78      	adds	r0, r7, #1
 800470c:	d1d6      	bne.n	80046bc <_vfiprintf_r+0x1bc>
 800470e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004710:	07d9      	lsls	r1, r3, #31
 8004712:	d405      	bmi.n	8004720 <_vfiprintf_r+0x220>
 8004714:	89ab      	ldrh	r3, [r5, #12]
 8004716:	059a      	lsls	r2, r3, #22
 8004718:	d402      	bmi.n	8004720 <_vfiprintf_r+0x220>
 800471a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471c:	f7ff fd0f 	bl	800413e <__retarget_lock_release_recursive>
 8004720:	89ab      	ldrh	r3, [r5, #12]
 8004722:	065b      	lsls	r3, r3, #25
 8004724:	f53f af12 	bmi.w	800454c <_vfiprintf_r+0x4c>
 8004728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800472a:	e711      	b.n	8004550 <_vfiprintf_r+0x50>
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <_vfiprintf_r+0x258>)
 8004734:	a904      	add	r1, sp, #16
 8004736:	4630      	mov	r0, r6
 8004738:	f000 f880 	bl	800483c <_printf_i>
 800473c:	e7e4      	b.n	8004708 <_vfiprintf_r+0x208>
 800473e:	bf00      	nop
 8004740:	080051b4 	.word	0x080051b4
 8004744:	080051d4 	.word	0x080051d4
 8004748:	08005194 	.word	0x08005194
 800474c:	080051f4 	.word	0x080051f4
 8004750:	080051fe 	.word	0x080051fe
 8004754:	00000000 	.word	0x00000000
 8004758:	080044db 	.word	0x080044db
 800475c:	080051fa 	.word	0x080051fa

08004760 <_printf_common>:
 8004760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	4616      	mov	r6, r2
 8004766:	4699      	mov	r9, r3
 8004768:	688a      	ldr	r2, [r1, #8]
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004770:	4293      	cmp	r3, r2
 8004772:	bfb8      	it	lt
 8004774:	4613      	movlt	r3, r2
 8004776:	6033      	str	r3, [r6, #0]
 8004778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800477c:	4607      	mov	r7, r0
 800477e:	460c      	mov	r4, r1
 8004780:	b10a      	cbz	r2, 8004786 <_printf_common+0x26>
 8004782:	3301      	adds	r3, #1
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	0699      	lsls	r1, r3, #26
 800478a:	bf42      	ittt	mi
 800478c:	6833      	ldrmi	r3, [r6, #0]
 800478e:	3302      	addmi	r3, #2
 8004790:	6033      	strmi	r3, [r6, #0]
 8004792:	6825      	ldr	r5, [r4, #0]
 8004794:	f015 0506 	ands.w	r5, r5, #6
 8004798:	d106      	bne.n	80047a8 <_printf_common+0x48>
 800479a:	f104 0a19 	add.w	sl, r4, #25
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	6832      	ldr	r2, [r6, #0]
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	dc26      	bgt.n	80047f6 <_printf_common+0x96>
 80047a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ac:	1e13      	subs	r3, r2, #0
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	0692      	lsls	r2, r2, #26
 80047b6:	d42b      	bmi.n	8004810 <_printf_common+0xb0>
 80047b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d01e      	beq.n	8004804 <_printf_common+0xa4>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	68e5      	ldr	r5, [r4, #12]
 80047ca:	6832      	ldr	r2, [r6, #0]
 80047cc:	f003 0306 	and.w	r3, r3, #6
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	bf08      	it	eq
 80047d4:	1aad      	subeq	r5, r5, r2
 80047d6:	68a3      	ldr	r3, [r4, #8]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	bf0c      	ite	eq
 80047dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e0:	2500      	movne	r5, #0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfc4      	itt	gt
 80047e6:	1a9b      	subgt	r3, r3, r2
 80047e8:	18ed      	addgt	r5, r5, r3
 80047ea:	2600      	movs	r6, #0
 80047ec:	341a      	adds	r4, #26
 80047ee:	42b5      	cmp	r5, r6
 80047f0:	d11a      	bne.n	8004828 <_printf_common+0xc8>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e008      	b.n	8004808 <_printf_common+0xa8>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4652      	mov	r2, sl
 80047fa:	4649      	mov	r1, r9
 80047fc:	4638      	mov	r0, r7
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d103      	bne.n	800480c <_printf_common+0xac>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	3501      	adds	r5, #1
 800480e:	e7c6      	b.n	800479e <_printf_common+0x3e>
 8004810:	18e1      	adds	r1, r4, r3
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	2030      	movs	r0, #48	; 0x30
 8004816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800481a:	4422      	add	r2, r4
 800481c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004824:	3302      	adds	r3, #2
 8004826:	e7c7      	b.n	80047b8 <_printf_common+0x58>
 8004828:	2301      	movs	r3, #1
 800482a:	4622      	mov	r2, r4
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d0e6      	beq.n	8004804 <_printf_common+0xa4>
 8004836:	3601      	adds	r6, #1
 8004838:	e7d9      	b.n	80047ee <_printf_common+0x8e>
	...

0800483c <_printf_i>:
 800483c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	460c      	mov	r4, r1
 8004842:	4691      	mov	r9, r2
 8004844:	7e27      	ldrb	r7, [r4, #24]
 8004846:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004848:	2f78      	cmp	r7, #120	; 0x78
 800484a:	4680      	mov	r8, r0
 800484c:	469a      	mov	sl, r3
 800484e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004852:	d807      	bhi.n	8004864 <_printf_i+0x28>
 8004854:	2f62      	cmp	r7, #98	; 0x62
 8004856:	d80a      	bhi.n	800486e <_printf_i+0x32>
 8004858:	2f00      	cmp	r7, #0
 800485a:	f000 80d8 	beq.w	8004a0e <_printf_i+0x1d2>
 800485e:	2f58      	cmp	r7, #88	; 0x58
 8004860:	f000 80a3 	beq.w	80049aa <_printf_i+0x16e>
 8004864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800486c:	e03a      	b.n	80048e4 <_printf_i+0xa8>
 800486e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004872:	2b15      	cmp	r3, #21
 8004874:	d8f6      	bhi.n	8004864 <_printf_i+0x28>
 8004876:	a001      	add	r0, pc, #4	; (adr r0, 800487c <_printf_i+0x40>)
 8004878:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048e9 	.word	0x080048e9
 8004884:	08004865 	.word	0x08004865
 8004888:	08004865 	.word	0x08004865
 800488c:	08004865 	.word	0x08004865
 8004890:	08004865 	.word	0x08004865
 8004894:	080048e9 	.word	0x080048e9
 8004898:	08004865 	.word	0x08004865
 800489c:	08004865 	.word	0x08004865
 80048a0:	08004865 	.word	0x08004865
 80048a4:	08004865 	.word	0x08004865
 80048a8:	080049f5 	.word	0x080049f5
 80048ac:	08004919 	.word	0x08004919
 80048b0:	080049d7 	.word	0x080049d7
 80048b4:	08004865 	.word	0x08004865
 80048b8:	08004865 	.word	0x08004865
 80048bc:	08004a17 	.word	0x08004a17
 80048c0:	08004865 	.word	0x08004865
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004865 	.word	0x08004865
 80048cc:	08004865 	.word	0x08004865
 80048d0:	080049df 	.word	0x080049df
 80048d4:	680b      	ldr	r3, [r1, #0]
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	600a      	str	r2, [r1, #0]
 80048dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0a3      	b.n	8004a30 <_printf_i+0x1f4>
 80048e8:	6825      	ldr	r5, [r4, #0]
 80048ea:	6808      	ldr	r0, [r1, #0]
 80048ec:	062e      	lsls	r6, r5, #24
 80048ee:	f100 0304 	add.w	r3, r0, #4
 80048f2:	d50a      	bpl.n	800490a <_printf_i+0xce>
 80048f4:	6805      	ldr	r5, [r0, #0]
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	da03      	bge.n	8004904 <_printf_i+0xc8>
 80048fc:	232d      	movs	r3, #45	; 0x2d
 80048fe:	426d      	negs	r5, r5
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004904:	485e      	ldr	r0, [pc, #376]	; (8004a80 <_printf_i+0x244>)
 8004906:	230a      	movs	r3, #10
 8004908:	e019      	b.n	800493e <_printf_i+0x102>
 800490a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800490e:	6805      	ldr	r5, [r0, #0]
 8004910:	600b      	str	r3, [r1, #0]
 8004912:	bf18      	it	ne
 8004914:	b22d      	sxthne	r5, r5
 8004916:	e7ef      	b.n	80048f8 <_printf_i+0xbc>
 8004918:	680b      	ldr	r3, [r1, #0]
 800491a:	6825      	ldr	r5, [r4, #0]
 800491c:	1d18      	adds	r0, r3, #4
 800491e:	6008      	str	r0, [r1, #0]
 8004920:	0628      	lsls	r0, r5, #24
 8004922:	d501      	bpl.n	8004928 <_printf_i+0xec>
 8004924:	681d      	ldr	r5, [r3, #0]
 8004926:	e002      	b.n	800492e <_printf_i+0xf2>
 8004928:	0669      	lsls	r1, r5, #25
 800492a:	d5fb      	bpl.n	8004924 <_printf_i+0xe8>
 800492c:	881d      	ldrh	r5, [r3, #0]
 800492e:	4854      	ldr	r0, [pc, #336]	; (8004a80 <_printf_i+0x244>)
 8004930:	2f6f      	cmp	r7, #111	; 0x6f
 8004932:	bf0c      	ite	eq
 8004934:	2308      	moveq	r3, #8
 8004936:	230a      	movne	r3, #10
 8004938:	2100      	movs	r1, #0
 800493a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493e:	6866      	ldr	r6, [r4, #4]
 8004940:	60a6      	str	r6, [r4, #8]
 8004942:	2e00      	cmp	r6, #0
 8004944:	bfa2      	ittt	ge
 8004946:	6821      	ldrge	r1, [r4, #0]
 8004948:	f021 0104 	bicge.w	r1, r1, #4
 800494c:	6021      	strge	r1, [r4, #0]
 800494e:	b90d      	cbnz	r5, 8004954 <_printf_i+0x118>
 8004950:	2e00      	cmp	r6, #0
 8004952:	d04d      	beq.n	80049f0 <_printf_i+0x1b4>
 8004954:	4616      	mov	r6, r2
 8004956:	fbb5 f1f3 	udiv	r1, r5, r3
 800495a:	fb03 5711 	mls	r7, r3, r1, r5
 800495e:	5dc7      	ldrb	r7, [r0, r7]
 8004960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004964:	462f      	mov	r7, r5
 8004966:	42bb      	cmp	r3, r7
 8004968:	460d      	mov	r5, r1
 800496a:	d9f4      	bls.n	8004956 <_printf_i+0x11a>
 800496c:	2b08      	cmp	r3, #8
 800496e:	d10b      	bne.n	8004988 <_printf_i+0x14c>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	07df      	lsls	r7, r3, #31
 8004974:	d508      	bpl.n	8004988 <_printf_i+0x14c>
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	4299      	cmp	r1, r3
 800497c:	bfde      	ittt	le
 800497e:	2330      	movle	r3, #48	; 0x30
 8004980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004984:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004988:	1b92      	subs	r2, r2, r6
 800498a:	6122      	str	r2, [r4, #16]
 800498c:	f8cd a000 	str.w	sl, [sp]
 8004990:	464b      	mov	r3, r9
 8004992:	aa03      	add	r2, sp, #12
 8004994:	4621      	mov	r1, r4
 8004996:	4640      	mov	r0, r8
 8004998:	f7ff fee2 	bl	8004760 <_printf_common>
 800499c:	3001      	adds	r0, #1
 800499e:	d14c      	bne.n	8004a3a <_printf_i+0x1fe>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	b004      	add	sp, #16
 80049a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049aa:	4835      	ldr	r0, [pc, #212]	; (8004a80 <_printf_i+0x244>)
 80049ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	680e      	ldr	r6, [r1, #0]
 80049b4:	061f      	lsls	r7, r3, #24
 80049b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80049ba:	600e      	str	r6, [r1, #0]
 80049bc:	d514      	bpl.n	80049e8 <_printf_i+0x1ac>
 80049be:	07d9      	lsls	r1, r3, #31
 80049c0:	bf44      	itt	mi
 80049c2:	f043 0320 	orrmi.w	r3, r3, #32
 80049c6:	6023      	strmi	r3, [r4, #0]
 80049c8:	b91d      	cbnz	r5, 80049d2 <_printf_i+0x196>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f023 0320 	bic.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	2310      	movs	r3, #16
 80049d4:	e7b0      	b.n	8004938 <_printf_i+0xfc>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	f043 0320 	orr.w	r3, r3, #32
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	2378      	movs	r3, #120	; 0x78
 80049e0:	4828      	ldr	r0, [pc, #160]	; (8004a84 <_printf_i+0x248>)
 80049e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049e6:	e7e3      	b.n	80049b0 <_printf_i+0x174>
 80049e8:	065e      	lsls	r6, r3, #25
 80049ea:	bf48      	it	mi
 80049ec:	b2ad      	uxthmi	r5, r5
 80049ee:	e7e6      	b.n	80049be <_printf_i+0x182>
 80049f0:	4616      	mov	r6, r2
 80049f2:	e7bb      	b.n	800496c <_printf_i+0x130>
 80049f4:	680b      	ldr	r3, [r1, #0]
 80049f6:	6826      	ldr	r6, [r4, #0]
 80049f8:	6960      	ldr	r0, [r4, #20]
 80049fa:	1d1d      	adds	r5, r3, #4
 80049fc:	600d      	str	r5, [r1, #0]
 80049fe:	0635      	lsls	r5, r6, #24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	d501      	bpl.n	8004a08 <_printf_i+0x1cc>
 8004a04:	6018      	str	r0, [r3, #0]
 8004a06:	e002      	b.n	8004a0e <_printf_i+0x1d2>
 8004a08:	0671      	lsls	r1, r6, #25
 8004a0a:	d5fb      	bpl.n	8004a04 <_printf_i+0x1c8>
 8004a0c:	8018      	strh	r0, [r3, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	4616      	mov	r6, r2
 8004a14:	e7ba      	b.n	800498c <_printf_i+0x150>
 8004a16:	680b      	ldr	r3, [r1, #0]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	600a      	str	r2, [r1, #0]
 8004a1c:	681e      	ldr	r6, [r3, #0]
 8004a1e:	6862      	ldr	r2, [r4, #4]
 8004a20:	2100      	movs	r1, #0
 8004a22:	4630      	mov	r0, r6
 8004a24:	f7fb fbd4 	bl	80001d0 <memchr>
 8004a28:	b108      	cbz	r0, 8004a2e <_printf_i+0x1f2>
 8004a2a:	1b80      	subs	r0, r0, r6
 8004a2c:	6060      	str	r0, [r4, #4]
 8004a2e:	6863      	ldr	r3, [r4, #4]
 8004a30:	6123      	str	r3, [r4, #16]
 8004a32:	2300      	movs	r3, #0
 8004a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a38:	e7a8      	b.n	800498c <_printf_i+0x150>
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	4649      	mov	r1, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	47d0      	blx	sl
 8004a44:	3001      	adds	r0, #1
 8004a46:	d0ab      	beq.n	80049a0 <_printf_i+0x164>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	079b      	lsls	r3, r3, #30
 8004a4c:	d413      	bmi.n	8004a76 <_printf_i+0x23a>
 8004a4e:	68e0      	ldr	r0, [r4, #12]
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	4298      	cmp	r0, r3
 8004a54:	bfb8      	it	lt
 8004a56:	4618      	movlt	r0, r3
 8004a58:	e7a4      	b.n	80049a4 <_printf_i+0x168>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4640      	mov	r0, r8
 8004a62:	47d0      	blx	sl
 8004a64:	3001      	adds	r0, #1
 8004a66:	d09b      	beq.n	80049a0 <_printf_i+0x164>
 8004a68:	3501      	adds	r5, #1
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	9903      	ldr	r1, [sp, #12]
 8004a6e:	1a5b      	subs	r3, r3, r1
 8004a70:	42ab      	cmp	r3, r5
 8004a72:	dcf2      	bgt.n	8004a5a <_printf_i+0x21e>
 8004a74:	e7eb      	b.n	8004a4e <_printf_i+0x212>
 8004a76:	2500      	movs	r5, #0
 8004a78:	f104 0619 	add.w	r6, r4, #25
 8004a7c:	e7f5      	b.n	8004a6a <_printf_i+0x22e>
 8004a7e:	bf00      	nop
 8004a80:	08005205 	.word	0x08005205
 8004a84:	08005216 	.word	0x08005216

08004a88 <_sbrk_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d06      	ldr	r5, [pc, #24]	; (8004aa4 <_sbrk_r+0x1c>)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	f7fc f99a 	bl	8000dcc <_sbrk>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_sbrk_r+0x1a>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_sbrk_r+0x1a>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	20000278 	.word	0x20000278

08004aa8 <__sread>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	460c      	mov	r4, r1
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	f000 fb02 	bl	80050b8 <_read_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	bfab      	itete	ge
 8004ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aba:	89a3      	ldrhlt	r3, [r4, #12]
 8004abc:	181b      	addge	r3, r3, r0
 8004abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ac2:	bfac      	ite	ge
 8004ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ac6:	81a3      	strhlt	r3, [r4, #12]
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <__swrite>:
 8004aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	461f      	mov	r7, r3
 8004ad0:	898b      	ldrh	r3, [r1, #12]
 8004ad2:	05db      	lsls	r3, r3, #23
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	4616      	mov	r6, r2
 8004ada:	d505      	bpl.n	8004ae8 <__swrite+0x1e>
 8004adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f000 f9c8 	bl	8004e78 <_lseek_r>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	4632      	mov	r2, r6
 8004af6:	463b      	mov	r3, r7
 8004af8:	4628      	mov	r0, r5
 8004afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	f000 b869 	b.w	8004bd4 <_write_r>

08004b02 <__sseek>:
 8004b02:	b510      	push	{r4, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 f9b5 	bl	8004e78 <_lseek_r>
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	bf15      	itete	ne
 8004b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b1e:	81a3      	strheq	r3, [r4, #12]
 8004b20:	bf18      	it	ne
 8004b22:	81a3      	strhne	r3, [r4, #12]
 8004b24:	bd10      	pop	{r4, pc}

08004b26 <__sclose>:
 8004b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2a:	f000 b8d3 	b.w	8004cd4 <_close_r>
	...

08004b30 <__swbuf_r>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	460e      	mov	r6, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	4605      	mov	r5, r0
 8004b38:	b118      	cbz	r0, 8004b42 <__swbuf_r+0x12>
 8004b3a:	6983      	ldr	r3, [r0, #24]
 8004b3c:	b90b      	cbnz	r3, 8004b42 <__swbuf_r+0x12>
 8004b3e:	f7ff fa5f 	bl	8004000 <__sinit>
 8004b42:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <__swbuf_r+0x98>)
 8004b44:	429c      	cmp	r4, r3
 8004b46:	d12b      	bne.n	8004ba0 <__swbuf_r+0x70>
 8004b48:	686c      	ldr	r4, [r5, #4]
 8004b4a:	69a3      	ldr	r3, [r4, #24]
 8004b4c:	60a3      	str	r3, [r4, #8]
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	071a      	lsls	r2, r3, #28
 8004b52:	d52f      	bpl.n	8004bb4 <__swbuf_r+0x84>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	b36b      	cbz	r3, 8004bb4 <__swbuf_r+0x84>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	1ac0      	subs	r0, r0, r3
 8004b5e:	6963      	ldr	r3, [r4, #20]
 8004b60:	b2f6      	uxtb	r6, r6
 8004b62:	4283      	cmp	r3, r0
 8004b64:	4637      	mov	r7, r6
 8004b66:	dc04      	bgt.n	8004b72 <__swbuf_r+0x42>
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f948 	bl	8004e00 <_fflush_r>
 8004b70:	bb30      	cbnz	r0, 8004bc0 <__swbuf_r+0x90>
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	60a3      	str	r3, [r4, #8]
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	701e      	strb	r6, [r3, #0]
 8004b80:	6963      	ldr	r3, [r4, #20]
 8004b82:	3001      	adds	r0, #1
 8004b84:	4283      	cmp	r3, r0
 8004b86:	d004      	beq.n	8004b92 <__swbuf_r+0x62>
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	07db      	lsls	r3, r3, #31
 8004b8c:	d506      	bpl.n	8004b9c <__swbuf_r+0x6c>
 8004b8e:	2e0a      	cmp	r6, #10
 8004b90:	d104      	bne.n	8004b9c <__swbuf_r+0x6c>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f933 	bl	8004e00 <_fflush_r>
 8004b9a:	b988      	cbnz	r0, 8004bc0 <__swbuf_r+0x90>
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <__swbuf_r+0x9c>)
 8004ba2:	429c      	cmp	r4, r3
 8004ba4:	d101      	bne.n	8004baa <__swbuf_r+0x7a>
 8004ba6:	68ac      	ldr	r4, [r5, #8]
 8004ba8:	e7cf      	b.n	8004b4a <__swbuf_r+0x1a>
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <__swbuf_r+0xa0>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	bf08      	it	eq
 8004bb0:	68ec      	ldreq	r4, [r5, #12]
 8004bb2:	e7ca      	b.n	8004b4a <__swbuf_r+0x1a>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f000 f81e 	bl	8004bf8 <__swsetup_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d0cb      	beq.n	8004b58 <__swbuf_r+0x28>
 8004bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc4:	e7ea      	b.n	8004b9c <__swbuf_r+0x6c>
 8004bc6:	bf00      	nop
 8004bc8:	080051b4 	.word	0x080051b4
 8004bcc:	080051d4 	.word	0x080051d4
 8004bd0:	08005194 	.word	0x08005194

08004bd4 <_write_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	; (8004bf4 <_write_r+0x20>)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fc f8a1 	bl	8000d2a <_write>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_write_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_write_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000278 	.word	0x20000278

08004bf8 <__swsetup_r>:
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <__swsetup_r+0xcc>)
 8004bfa:	b570      	push	{r4, r5, r6, lr}
 8004bfc:	681d      	ldr	r5, [r3, #0]
 8004bfe:	4606      	mov	r6, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	b125      	cbz	r5, 8004c0e <__swsetup_r+0x16>
 8004c04:	69ab      	ldr	r3, [r5, #24]
 8004c06:	b913      	cbnz	r3, 8004c0e <__swsetup_r+0x16>
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7ff f9f9 	bl	8004000 <__sinit>
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <__swsetup_r+0xd0>)
 8004c10:	429c      	cmp	r4, r3
 8004c12:	d10f      	bne.n	8004c34 <__swsetup_r+0x3c>
 8004c14:	686c      	ldr	r4, [r5, #4]
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c1c:	0719      	lsls	r1, r3, #28
 8004c1e:	d42c      	bmi.n	8004c7a <__swsetup_r+0x82>
 8004c20:	06dd      	lsls	r5, r3, #27
 8004c22:	d411      	bmi.n	8004c48 <__swsetup_r+0x50>
 8004c24:	2309      	movs	r3, #9
 8004c26:	6033      	str	r3, [r6, #0]
 8004c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c32:	e03e      	b.n	8004cb2 <__swsetup_r+0xba>
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <__swsetup_r+0xd4>)
 8004c36:	429c      	cmp	r4, r3
 8004c38:	d101      	bne.n	8004c3e <__swsetup_r+0x46>
 8004c3a:	68ac      	ldr	r4, [r5, #8]
 8004c3c:	e7eb      	b.n	8004c16 <__swsetup_r+0x1e>
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <__swsetup_r+0xd8>)
 8004c40:	429c      	cmp	r4, r3
 8004c42:	bf08      	it	eq
 8004c44:	68ec      	ldreq	r4, [r5, #12]
 8004c46:	e7e6      	b.n	8004c16 <__swsetup_r+0x1e>
 8004c48:	0758      	lsls	r0, r3, #29
 8004c4a:	d512      	bpl.n	8004c72 <__swsetup_r+0x7a>
 8004c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4e:	b141      	cbz	r1, 8004c62 <__swsetup_r+0x6a>
 8004c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c54:	4299      	cmp	r1, r3
 8004c56:	d002      	beq.n	8004c5e <__swsetup_r+0x66>
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f000 f9b7 	bl	8004fcc <_free_r>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6363      	str	r3, [r4, #52]	; 0x34
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f043 0308 	orr.w	r3, r3, #8
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	b94b      	cbnz	r3, 8004c92 <__swsetup_r+0x9a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c88:	d003      	beq.n	8004c92 <__swsetup_r+0x9a>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f000 f929 	bl	8004ee4 <__smakebuf_r>
 8004c92:	89a0      	ldrh	r0, [r4, #12]
 8004c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c98:	f010 0301 	ands.w	r3, r0, #1
 8004c9c:	d00a      	beq.n	8004cb4 <__swsetup_r+0xbc>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60a3      	str	r3, [r4, #8]
 8004ca2:	6963      	ldr	r3, [r4, #20]
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	61a3      	str	r3, [r4, #24]
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	b943      	cbnz	r3, 8004cbe <__swsetup_r+0xc6>
 8004cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cb0:	d1ba      	bne.n	8004c28 <__swsetup_r+0x30>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	0781      	lsls	r1, r0, #30
 8004cb6:	bf58      	it	pl
 8004cb8:	6963      	ldrpl	r3, [r4, #20]
 8004cba:	60a3      	str	r3, [r4, #8]
 8004cbc:	e7f4      	b.n	8004ca8 <__swsetup_r+0xb0>
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e7f7      	b.n	8004cb2 <__swsetup_r+0xba>
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c
 8004cc8:	080051b4 	.word	0x080051b4
 8004ccc:	080051d4 	.word	0x080051d4
 8004cd0:	08005194 	.word	0x08005194

08004cd4 <_close_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4d06      	ldr	r5, [pc, #24]	; (8004cf0 <_close_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	f7fc f83f 	bl	8000d62 <_close>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_close_r+0x1a>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_close_r+0x1a>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	20000278 	.word	0x20000278

08004cf4 <__sflush_r>:
 8004cf4:	898a      	ldrh	r2, [r1, #12]
 8004cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	0710      	lsls	r0, r2, #28
 8004cfe:	460c      	mov	r4, r1
 8004d00:	d458      	bmi.n	8004db4 <__sflush_r+0xc0>
 8004d02:	684b      	ldr	r3, [r1, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dc05      	bgt.n	8004d14 <__sflush_r+0x20>
 8004d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	dc02      	bgt.n	8004d14 <__sflush_r+0x20>
 8004d0e:	2000      	movs	r0, #0
 8004d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d0f9      	beq.n	8004d0e <__sflush_r+0x1a>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d20:	682f      	ldr	r7, [r5, #0]
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	d032      	beq.n	8004d8c <__sflush_r+0x98>
 8004d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	075a      	lsls	r2, r3, #29
 8004d2c:	d505      	bpl.n	8004d3a <__sflush_r+0x46>
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	1ac0      	subs	r0, r0, r3
 8004d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d34:	b10b      	cbz	r3, 8004d3a <__sflush_r+0x46>
 8004d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d40:	6a21      	ldr	r1, [r4, #32]
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b0      	blx	r6
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	d106      	bne.n	8004d5a <__sflush_r+0x66>
 8004d4c:	6829      	ldr	r1, [r5, #0]
 8004d4e:	291d      	cmp	r1, #29
 8004d50:	d82c      	bhi.n	8004dac <__sflush_r+0xb8>
 8004d52:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <__sflush_r+0x108>)
 8004d54:	40ca      	lsrs	r2, r1
 8004d56:	07d6      	lsls	r6, r2, #31
 8004d58:	d528      	bpl.n	8004dac <__sflush_r+0xb8>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	6062      	str	r2, [r4, #4]
 8004d5e:	04d9      	lsls	r1, r3, #19
 8004d60:	6922      	ldr	r2, [r4, #16]
 8004d62:	6022      	str	r2, [r4, #0]
 8004d64:	d504      	bpl.n	8004d70 <__sflush_r+0x7c>
 8004d66:	1c42      	adds	r2, r0, #1
 8004d68:	d101      	bne.n	8004d6e <__sflush_r+0x7a>
 8004d6a:	682b      	ldr	r3, [r5, #0]
 8004d6c:	b903      	cbnz	r3, 8004d70 <__sflush_r+0x7c>
 8004d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d72:	602f      	str	r7, [r5, #0]
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d0ca      	beq.n	8004d0e <__sflush_r+0x1a>
 8004d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d7c:	4299      	cmp	r1, r3
 8004d7e:	d002      	beq.n	8004d86 <__sflush_r+0x92>
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 f923 	bl	8004fcc <_free_r>
 8004d86:	2000      	movs	r0, #0
 8004d88:	6360      	str	r0, [r4, #52]	; 0x34
 8004d8a:	e7c1      	b.n	8004d10 <__sflush_r+0x1c>
 8004d8c:	6a21      	ldr	r1, [r4, #32]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b0      	blx	r6
 8004d94:	1c41      	adds	r1, r0, #1
 8004d96:	d1c7      	bne.n	8004d28 <__sflush_r+0x34>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0c4      	beq.n	8004d28 <__sflush_r+0x34>
 8004d9e:	2b1d      	cmp	r3, #29
 8004da0:	d001      	beq.n	8004da6 <__sflush_r+0xb2>
 8004da2:	2b16      	cmp	r3, #22
 8004da4:	d101      	bne.n	8004daa <__sflush_r+0xb6>
 8004da6:	602f      	str	r7, [r5, #0]
 8004da8:	e7b1      	b.n	8004d0e <__sflush_r+0x1a>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	e7ad      	b.n	8004d10 <__sflush_r+0x1c>
 8004db4:	690f      	ldr	r7, [r1, #16]
 8004db6:	2f00      	cmp	r7, #0
 8004db8:	d0a9      	beq.n	8004d0e <__sflush_r+0x1a>
 8004dba:	0793      	lsls	r3, r2, #30
 8004dbc:	680e      	ldr	r6, [r1, #0]
 8004dbe:	bf08      	it	eq
 8004dc0:	694b      	ldreq	r3, [r1, #20]
 8004dc2:	600f      	str	r7, [r1, #0]
 8004dc4:	bf18      	it	ne
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	eba6 0807 	sub.w	r8, r6, r7
 8004dcc:	608b      	str	r3, [r1, #8]
 8004dce:	f1b8 0f00 	cmp.w	r8, #0
 8004dd2:	dd9c      	ble.n	8004d0e <__sflush_r+0x1a>
 8004dd4:	6a21      	ldr	r1, [r4, #32]
 8004dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dd8:	4643      	mov	r3, r8
 8004dda:	463a      	mov	r2, r7
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b0      	blx	r6
 8004de0:	2800      	cmp	r0, #0
 8004de2:	dc06      	bgt.n	8004df2 <__sflush_r+0xfe>
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e78e      	b.n	8004d10 <__sflush_r+0x1c>
 8004df2:	4407      	add	r7, r0
 8004df4:	eba8 0800 	sub.w	r8, r8, r0
 8004df8:	e7e9      	b.n	8004dce <__sflush_r+0xda>
 8004dfa:	bf00      	nop
 8004dfc:	20400001 	.word	0x20400001

08004e00 <_fflush_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	690b      	ldr	r3, [r1, #16]
 8004e04:	4605      	mov	r5, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	b913      	cbnz	r3, 8004e10 <_fflush_r+0x10>
 8004e0a:	2500      	movs	r5, #0
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	b118      	cbz	r0, 8004e1a <_fflush_r+0x1a>
 8004e12:	6983      	ldr	r3, [r0, #24]
 8004e14:	b90b      	cbnz	r3, 8004e1a <_fflush_r+0x1a>
 8004e16:	f7ff f8f3 	bl	8004000 <__sinit>
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <_fflush_r+0x6c>)
 8004e1c:	429c      	cmp	r4, r3
 8004e1e:	d11b      	bne.n	8004e58 <_fflush_r+0x58>
 8004e20:	686c      	ldr	r4, [r5, #4]
 8004e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ef      	beq.n	8004e0a <_fflush_r+0xa>
 8004e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e2c:	07d0      	lsls	r0, r2, #31
 8004e2e:	d404      	bmi.n	8004e3a <_fflush_r+0x3a>
 8004e30:	0599      	lsls	r1, r3, #22
 8004e32:	d402      	bmi.n	8004e3a <_fflush_r+0x3a>
 8004e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e36:	f7ff f981 	bl	800413c <__retarget_lock_acquire_recursive>
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	f7ff ff59 	bl	8004cf4 <__sflush_r>
 8004e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e44:	07da      	lsls	r2, r3, #31
 8004e46:	4605      	mov	r5, r0
 8004e48:	d4e0      	bmi.n	8004e0c <_fflush_r+0xc>
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	059b      	lsls	r3, r3, #22
 8004e4e:	d4dd      	bmi.n	8004e0c <_fflush_r+0xc>
 8004e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e52:	f7ff f974 	bl	800413e <__retarget_lock_release_recursive>
 8004e56:	e7d9      	b.n	8004e0c <_fflush_r+0xc>
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <_fflush_r+0x70>)
 8004e5a:	429c      	cmp	r4, r3
 8004e5c:	d101      	bne.n	8004e62 <_fflush_r+0x62>
 8004e5e:	68ac      	ldr	r4, [r5, #8]
 8004e60:	e7df      	b.n	8004e22 <_fflush_r+0x22>
 8004e62:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <_fflush_r+0x74>)
 8004e64:	429c      	cmp	r4, r3
 8004e66:	bf08      	it	eq
 8004e68:	68ec      	ldreq	r4, [r5, #12]
 8004e6a:	e7da      	b.n	8004e22 <_fflush_r+0x22>
 8004e6c:	080051b4 	.word	0x080051b4
 8004e70:	080051d4 	.word	0x080051d4
 8004e74:	08005194 	.word	0x08005194

08004e78 <_lseek_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d07      	ldr	r5, [pc, #28]	; (8004e98 <_lseek_r+0x20>)
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	4608      	mov	r0, r1
 8004e80:	4611      	mov	r1, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7fb ff92 	bl	8000db0 <_lseek>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_lseek_r+0x1e>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_lseek_r+0x1e>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20000278 	.word	0x20000278

08004e9c <__swhatbuf_r>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	460e      	mov	r6, r1
 8004ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	b096      	sub	sp, #88	; 0x58
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	da07      	bge.n	8004ebe <__swhatbuf_r+0x22>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	89b3      	ldrh	r3, [r6, #12]
 8004eb4:	061a      	lsls	r2, r3, #24
 8004eb6:	d410      	bmi.n	8004eda <__swhatbuf_r+0x3e>
 8004eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ebc:	e00e      	b.n	8004edc <__swhatbuf_r+0x40>
 8004ebe:	466a      	mov	r2, sp
 8004ec0:	f000 f90c 	bl	80050dc <_fstat_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	dbf2      	blt.n	8004eae <__swhatbuf_r+0x12>
 8004ec8:	9a01      	ldr	r2, [sp, #4]
 8004eca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ed2:	425a      	negs	r2, r3
 8004ed4:	415a      	adcs	r2, r3
 8004ed6:	602a      	str	r2, [r5, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <__swhatbuf_r+0x1c>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	2000      	movs	r0, #0
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	b016      	add	sp, #88	; 0x58
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <__smakebuf_r>:
 8004ee4:	898b      	ldrh	r3, [r1, #12]
 8004ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ee8:	079d      	lsls	r5, r3, #30
 8004eea:	4606      	mov	r6, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	d507      	bpl.n	8004f00 <__smakebuf_r+0x1c>
 8004ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	2301      	movs	r3, #1
 8004efa:	6163      	str	r3, [r4, #20]
 8004efc:	b002      	add	sp, #8
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	ab01      	add	r3, sp, #4
 8004f02:	466a      	mov	r2, sp
 8004f04:	f7ff ffca 	bl	8004e9c <__swhatbuf_r>
 8004f08:	9900      	ldr	r1, [sp, #0]
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff f917 	bl	8004140 <_malloc_r>
 8004f12:	b948      	cbnz	r0, 8004f28 <__smakebuf_r+0x44>
 8004f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f18:	059a      	lsls	r2, r3, #22
 8004f1a:	d4ef      	bmi.n	8004efc <__smakebuf_r+0x18>
 8004f1c:	f023 0303 	bic.w	r3, r3, #3
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	e7e3      	b.n	8004ef0 <__smakebuf_r+0xc>
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <__smakebuf_r+0x7c>)
 8004f2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	6020      	str	r0, [r4, #0]
 8004f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	9b00      	ldr	r3, [sp, #0]
 8004f38:	6163      	str	r3, [r4, #20]
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	6120      	str	r0, [r4, #16]
 8004f3e:	b15b      	cbz	r3, 8004f58 <__smakebuf_r+0x74>
 8004f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 f8db 	bl	8005100 <_isatty_r>
 8004f4a:	b128      	cbz	r0, 8004f58 <__smakebuf_r+0x74>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	89a0      	ldrh	r0, [r4, #12]
 8004f5a:	4305      	orrs	r5, r0
 8004f5c:	81a5      	strh	r5, [r4, #12]
 8004f5e:	e7cd      	b.n	8004efc <__smakebuf_r+0x18>
 8004f60:	08003f99 	.word	0x08003f99

08004f64 <memcpy>:
 8004f64:	440a      	add	r2, r1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f6c:	d100      	bne.n	8004f70 <memcpy+0xc>
 8004f6e:	4770      	bx	lr
 8004f70:	b510      	push	{r4, lr}
 8004f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7a:	4291      	cmp	r1, r2
 8004f7c:	d1f9      	bne.n	8004f72 <memcpy+0xe>
 8004f7e:	bd10      	pop	{r4, pc}

08004f80 <memmove>:
 8004f80:	4288      	cmp	r0, r1
 8004f82:	b510      	push	{r4, lr}
 8004f84:	eb01 0402 	add.w	r4, r1, r2
 8004f88:	d902      	bls.n	8004f90 <memmove+0x10>
 8004f8a:	4284      	cmp	r4, r0
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	d807      	bhi.n	8004fa0 <memmove+0x20>
 8004f90:	1e43      	subs	r3, r0, #1
 8004f92:	42a1      	cmp	r1, r4
 8004f94:	d008      	beq.n	8004fa8 <memmove+0x28>
 8004f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f9e:	e7f8      	b.n	8004f92 <memmove+0x12>
 8004fa0:	4402      	add	r2, r0
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	428a      	cmp	r2, r1
 8004fa6:	d100      	bne.n	8004faa <memmove+0x2a>
 8004fa8:	bd10      	pop	{r4, pc}
 8004faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fb2:	e7f7      	b.n	8004fa4 <memmove+0x24>

08004fb4 <__malloc_lock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_lock+0x8>)
 8004fb6:	f7ff b8c1 	b.w	800413c <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000270 	.word	0x20000270

08004fc0 <__malloc_unlock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__malloc_unlock+0x8>)
 8004fc2:	f7ff b8bc 	b.w	800413e <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000270 	.word	0x20000270

08004fcc <_free_r>:
 8004fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d048      	beq.n	8005064 <_free_r+0x98>
 8004fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd6:	9001      	str	r0, [sp, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f1a1 0404 	sub.w	r4, r1, #4
 8004fde:	bfb8      	it	lt
 8004fe0:	18e4      	addlt	r4, r4, r3
 8004fe2:	f7ff ffe7 	bl	8004fb4 <__malloc_lock>
 8004fe6:	4a20      	ldr	r2, [pc, #128]	; (8005068 <_free_r+0x9c>)
 8004fe8:	9801      	ldr	r0, [sp, #4]
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	4615      	mov	r5, r2
 8004fee:	b933      	cbnz	r3, 8004ffe <_free_r+0x32>
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	6014      	str	r4, [r2, #0]
 8004ff4:	b003      	add	sp, #12
 8004ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ffa:	f7ff bfe1 	b.w	8004fc0 <__malloc_unlock>
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	d90b      	bls.n	800501a <_free_r+0x4e>
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	1862      	adds	r2, r4, r1
 8005006:	4293      	cmp	r3, r2
 8005008:	bf04      	itt	eq
 800500a:	681a      	ldreq	r2, [r3, #0]
 800500c:	685b      	ldreq	r3, [r3, #4]
 800500e:	6063      	str	r3, [r4, #4]
 8005010:	bf04      	itt	eq
 8005012:	1852      	addeq	r2, r2, r1
 8005014:	6022      	streq	r2, [r4, #0]
 8005016:	602c      	str	r4, [r5, #0]
 8005018:	e7ec      	b.n	8004ff4 <_free_r+0x28>
 800501a:	461a      	mov	r2, r3
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b10b      	cbz	r3, 8005024 <_free_r+0x58>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d9fa      	bls.n	800501a <_free_r+0x4e>
 8005024:	6811      	ldr	r1, [r2, #0]
 8005026:	1855      	adds	r5, r2, r1
 8005028:	42a5      	cmp	r5, r4
 800502a:	d10b      	bne.n	8005044 <_free_r+0x78>
 800502c:	6824      	ldr	r4, [r4, #0]
 800502e:	4421      	add	r1, r4
 8005030:	1854      	adds	r4, r2, r1
 8005032:	42a3      	cmp	r3, r4
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	d1dd      	bne.n	8004ff4 <_free_r+0x28>
 8005038:	681c      	ldr	r4, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	6053      	str	r3, [r2, #4]
 800503e:	4421      	add	r1, r4
 8005040:	6011      	str	r1, [r2, #0]
 8005042:	e7d7      	b.n	8004ff4 <_free_r+0x28>
 8005044:	d902      	bls.n	800504c <_free_r+0x80>
 8005046:	230c      	movs	r3, #12
 8005048:	6003      	str	r3, [r0, #0]
 800504a:	e7d3      	b.n	8004ff4 <_free_r+0x28>
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	1961      	adds	r1, r4, r5
 8005050:	428b      	cmp	r3, r1
 8005052:	bf04      	itt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	6063      	str	r3, [r4, #4]
 800505a:	bf04      	itt	eq
 800505c:	1949      	addeq	r1, r1, r5
 800505e:	6021      	streq	r1, [r4, #0]
 8005060:	6054      	str	r4, [r2, #4]
 8005062:	e7c7      	b.n	8004ff4 <_free_r+0x28>
 8005064:	b003      	add	sp, #12
 8005066:	bd30      	pop	{r4, r5, pc}
 8005068:	200000bc 	.word	0x200000bc

0800506c <_realloc_r>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	4607      	mov	r7, r0
 8005070:	4614      	mov	r4, r2
 8005072:	460e      	mov	r6, r1
 8005074:	b921      	cbnz	r1, 8005080 <_realloc_r+0x14>
 8005076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800507a:	4611      	mov	r1, r2
 800507c:	f7ff b860 	b.w	8004140 <_malloc_r>
 8005080:	b922      	cbnz	r2, 800508c <_realloc_r+0x20>
 8005082:	f7ff ffa3 	bl	8004fcc <_free_r>
 8005086:	4625      	mov	r5, r4
 8005088:	4628      	mov	r0, r5
 800508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508c:	f000 f848 	bl	8005120 <_malloc_usable_size_r>
 8005090:	42a0      	cmp	r0, r4
 8005092:	d20f      	bcs.n	80050b4 <_realloc_r+0x48>
 8005094:	4621      	mov	r1, r4
 8005096:	4638      	mov	r0, r7
 8005098:	f7ff f852 	bl	8004140 <_malloc_r>
 800509c:	4605      	mov	r5, r0
 800509e:	2800      	cmp	r0, #0
 80050a0:	d0f2      	beq.n	8005088 <_realloc_r+0x1c>
 80050a2:	4631      	mov	r1, r6
 80050a4:	4622      	mov	r2, r4
 80050a6:	f7ff ff5d 	bl	8004f64 <memcpy>
 80050aa:	4631      	mov	r1, r6
 80050ac:	4638      	mov	r0, r7
 80050ae:	f7ff ff8d 	bl	8004fcc <_free_r>
 80050b2:	e7e9      	b.n	8005088 <_realloc_r+0x1c>
 80050b4:	4635      	mov	r5, r6
 80050b6:	e7e7      	b.n	8005088 <_realloc_r+0x1c>

080050b8 <_read_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d07      	ldr	r5, [pc, #28]	; (80050d8 <_read_r+0x20>)
 80050bc:	4604      	mov	r4, r0
 80050be:	4608      	mov	r0, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fb fe12 	bl	8000cf0 <_read>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_read_r+0x1e>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_read_r+0x1e>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	20000278 	.word	0x20000278

080050dc <_fstat_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d07      	ldr	r5, [pc, #28]	; (80050fc <_fstat_r+0x20>)
 80050e0:	2300      	movs	r3, #0
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	f7fb fe46 	bl	8000d7a <_fstat>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	d102      	bne.n	80050f8 <_fstat_r+0x1c>
 80050f2:	682b      	ldr	r3, [r5, #0]
 80050f4:	b103      	cbz	r3, 80050f8 <_fstat_r+0x1c>
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	bd38      	pop	{r3, r4, r5, pc}
 80050fa:	bf00      	nop
 80050fc:	20000278 	.word	0x20000278

08005100 <_isatty_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d06      	ldr	r5, [pc, #24]	; (800511c <_isatty_r+0x1c>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fb fe45 	bl	8000d9a <_isatty>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_isatty_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_isatty_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000278 	.word	0x20000278

08005120 <_malloc_usable_size_r>:
 8005120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005124:	1f18      	subs	r0, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfbc      	itt	lt
 800512a:	580b      	ldrlt	r3, [r1, r0]
 800512c:	18c0      	addlt	r0, r0, r3
 800512e:	4770      	bx	lr

08005130 <_init>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr

0800513c <_fini>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr
