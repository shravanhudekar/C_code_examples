
UART_DMA_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800593c  0800593c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005944  08005944  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800594c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000298  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef14  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210b  00000000  00000000  0002efd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  000310e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00031e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fe1  00000000  00000000  00032a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df16  00000000  00000000  00054a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc15a  00000000  00000000  0006298f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012eae9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040fc  00000000  00000000  0012eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005678 	.word	0x08005678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005678 	.word	0x08005678

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fe89 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f9a7 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 faa3 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f000 fa79 	bl	8000aa0 <MX_DMA_Init>
  MX_TIM6_Init();
 80005ae:	f000 fa15 	bl	80009dc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 fa49 	bl	8000a48 <MX_USART2_UART_Init>

#ifdef TELNET

  //printf("A");
 // HAL_UART_Transmit(&huart2,(uint8_t *)"A", 1, 50);
  printf("*********************************************\r\n"
 80005b6:	48ae      	ldr	r0, [pc, #696]	; (8000870 <main+0x2d8>)
 80005b8:	f003 ff54 	bl	8004464 <puts>
  while (1)
  {

#ifdef TELNET

	  if(stage==INIT)
 80005bc:	4bad      	ldr	r3, [pc, #692]	; (8000874 <main+0x2dc>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <main+0x30>
	  {
		  telnet_init();
 80005c4:	f000 fb96 	bl	8000cf4 <telnet_init>
	  }

	  if(recieved)
 80005c8:	4bab      	ldr	r3, [pc, #684]	; (8000878 <main+0x2e0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	f000 814c 	beq.w	800086a <main+0x2d2>
	  	{
	  		switch(stage)
 80005d2:	4ba8      	ldr	r3, [pc, #672]	; (8000874 <main+0x2dc>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d8ef      	bhi.n	80005bc <main+0x24>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <main+0x4c>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080005f5 	.word	0x080005f5
 80005e8:	08000667 	.word	0x08000667
 80005ec:	0800078b 	.word	0x0800078b
 80005f0:	08000843 	.word	0x08000843
	  			{
	  				case START:
	  					if(strcmp(input,"telnet"))
 80005f4:	49a1      	ldr	r1, [pc, #644]	; (800087c <main+0x2e4>)
 80005f6:	48a2      	ldr	r0, [pc, #648]	; (8000880 <main+0x2e8>)
 80005f8:	f7ff fdea 	bl	80001d0 <strcmp>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <main+0x6e>
	  					{
	  						telnet_init();
 8000602:	f000 fb77 	bl	8000cf4 <telnet_init>
	  					}

	  					if(strlen(input)>8)
 8000606:	489e      	ldr	r0, [pc, #632]	; (8000880 <main+0x2e8>)
 8000608:	f7ff fdec 	bl	80001e4 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	2b08      	cmp	r3, #8
 8000610:	d906      	bls.n	8000620 <main+0x88>
	  					{
	  						printf("input out of range!!\r\n");
 8000612:	489c      	ldr	r0, [pc, #624]	; (8000884 <main+0x2ec>)
 8000614:	f003 ff26 	bl	8004464 <puts>
	  						stage=INIT;
 8000618:	4b96      	ldr	r3, [pc, #600]	; (8000874 <main+0x2dc>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	  #endif
	  						stage=AUTH;
	  						HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
	  						recieved=FALSE;
	  					}
	  					break;
 800061e:	e125      	b.n	800086c <main+0x2d4>
	  						memcpy(input_user,input,strlen(input));
 8000620:	4897      	ldr	r0, [pc, #604]	; (8000880 <main+0x2e8>)
 8000622:	f7ff fddf 	bl	80001e4 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4995      	ldr	r1, [pc, #596]	; (8000880 <main+0x2e8>)
 800062c:	4896      	ldr	r0, [pc, #600]	; (8000888 <main+0x2f0>)
 800062e:	f003 fe7d 	bl	800432c <memcpy>
	  						memset(input,0,sizeof(input));
 8000632:	2214      	movs	r2, #20
 8000634:	2100      	movs	r1, #0
 8000636:	4892      	ldr	r0, [pc, #584]	; (8000880 <main+0x2e8>)
 8000638:	f003 fe86 	bl	8004348 <memset>
	  						sprintf(DMA_buff,"\n\rPassword: ");
 800063c:	4993      	ldr	r1, [pc, #588]	; (800088c <main+0x2f4>)
 800063e:	4894      	ldr	r0, [pc, #592]	; (8000890 <main+0x2f8>)
 8000640:	f003 ff18 	bl	8004474 <siprintf>
	  						HAL_UART_Transmit_DMA(&huart2, (uint8_t *)DMA_buff, sizeof(DMA_buff));
 8000644:	2214      	movs	r2, #20
 8000646:	4992      	ldr	r1, [pc, #584]	; (8000890 <main+0x2f8>)
 8000648:	4892      	ldr	r0, [pc, #584]	; (8000894 <main+0x2fc>)
 800064a:	f002 fed9 	bl	8003400 <HAL_UART_Transmit_DMA>
	  						stage=AUTH;
 800064e:	4b89      	ldr	r3, [pc, #548]	; (8000874 <main+0x2dc>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
	  						HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	4990      	ldr	r1, [pc, #576]	; (8000898 <main+0x300>)
 8000658:	488e      	ldr	r0, [pc, #568]	; (8000894 <main+0x2fc>)
 800065a:	f002 ff3d 	bl	80034d8 <HAL_UART_Receive_DMA>
	  						recieved=FALSE;
 800065e:	4b86      	ldr	r3, [pc, #536]	; (8000878 <main+0x2e0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	  					break;
 8000664:	e102      	b.n	800086c <main+0x2d4>

	  				case AUTH:
	  					if(strlen(input)>8)
 8000666:	4886      	ldr	r0, [pc, #536]	; (8000880 <main+0x2e8>)
 8000668:	f7ff fdbc 	bl	80001e4 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	2b08      	cmp	r3, #8
 8000670:	d906      	bls.n	8000680 <main+0xe8>
	  					{
	  						printf("input out of range!!\r\n");
 8000672:	4884      	ldr	r0, [pc, #528]	; (8000884 <main+0x2ec>)
 8000674:	f003 fef6 	bl	8004464 <puts>
	  						stage=INIT;
 8000678:	4b7e      	ldr	r3, [pc, #504]	; (8000874 <main+0x2dc>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e07e      	b.n	800077e <main+0x1e6>
	  					}

	  					else
	  					{
	  						memcpy(input_pass,input,strlen(input));
 8000680:	487f      	ldr	r0, [pc, #508]	; (8000880 <main+0x2e8>)
 8000682:	f7ff fdaf 	bl	80001e4 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	497d      	ldr	r1, [pc, #500]	; (8000880 <main+0x2e8>)
 800068c:	4883      	ldr	r0, [pc, #524]	; (800089c <main+0x304>)
 800068e:	f003 fe4d 	bl	800432c <memcpy>

	  						for(uint8_t i=0;i<4;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e053      	b.n	8000740 <main+0x1a8>
	  						{
	  							if((strcmp(*(user+i),input_user)==0) && (strcmp(pass[i],input_pass)==0))
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4a80      	ldr	r2, [pc, #512]	; (80008a0 <main+0x308>)
 800069e:	4413      	add	r3, r2
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4979      	ldr	r1, [pc, #484]	; (8000888 <main+0x2f0>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd93 	bl	80001d0 <strcmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d144      	bne.n	800073a <main+0x1a2>
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4a7c      	ldr	r2, [pc, #496]	; (80008a4 <main+0x30c>)
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	4978      	ldr	r1, [pc, #480]	; (800089c <main+0x304>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd88 	bl	80001d0 <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d139      	bne.n	800073a <main+0x1a2>
	  							{
	  								 prev=__HAL_TIM_GET_COUNTER(&htim6);
 80006c6:	4b78      	ldr	r3, [pc, #480]	; (80008a8 <main+0x310>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b77      	ldr	r3, [pc, #476]	; (80008ac <main+0x314>)
 80006d0:	701a      	strb	r2, [r3, #0]
	  								printf("\r\nSuccessfully Authenticated!\r\n");
 80006d2:	4877      	ldr	r0, [pc, #476]	; (80008b0 <main+0x318>)
 80006d4:	f003 fec6 	bl	8004464 <puts>
	  								 curr=__HAL_TIM_GET_COUNTER(&htim6);
 80006d8:	4b73      	ldr	r3, [pc, #460]	; (80008a8 <main+0x310>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b74      	ldr	r3, [pc, #464]	; (80008b4 <main+0x31c>)
 80006e2:	701a      	strb	r2, [r3, #0]
	  								 tim=curr-prev;
 80006e4:	4b73      	ldr	r3, [pc, #460]	; (80008b4 <main+0x31c>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b70      	ldr	r3, [pc, #448]	; (80008ac <main+0x314>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b71      	ldr	r3, [pc, #452]	; (80008b8 <main+0x320>)
 80006f2:	701a      	strb	r2, [r3, #0]
	  								 printf("time taken for print is: %d\r\n",tim);
 80006f4:	4b70      	ldr	r3, [pc, #448]	; (80008b8 <main+0x320>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4870      	ldr	r0, [pc, #448]	; (80008bc <main+0x324>)
 80006fc:	f003 fe2c 	bl	8004358 <iprintf>
	  #ifdef SPRINTF
	  								sprintf(DMA_buff,"\r\nConfig> ");
 8000700:	496f      	ldr	r1, [pc, #444]	; (80008c0 <main+0x328>)
 8000702:	4863      	ldr	r0, [pc, #396]	; (8000890 <main+0x2f8>)
 8000704:	f003 feb6 	bl	8004474 <siprintf>
	  								HAL_UART_Transmit_DMA(&huart2,(uint8_t *) DMA_buff, strlen(DMA_buff));
 8000708:	4861      	ldr	r0, [pc, #388]	; (8000890 <main+0x2f8>)
 800070a:	f7ff fd6b 	bl	80001e4 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29b      	uxth	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	495e      	ldr	r1, [pc, #376]	; (8000890 <main+0x2f8>)
 8000716:	485f      	ldr	r0, [pc, #380]	; (8000894 <main+0x2fc>)
 8000718:	f002 fe72 	bl	8003400 <HAL_UART_Transmit_DMA>
	  #else
	  								printf("Config> ");
	  #endif
	  								HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	495e      	ldr	r1, [pc, #376]	; (8000898 <main+0x300>)
 8000720:	485c      	ldr	r0, [pc, #368]	; (8000894 <main+0x2fc>)
 8000722:	f002 fed9 	bl	80034d8 <HAL_UART_Receive_DMA>
	  								recieved=FALSE;
 8000726:	4b54      	ldr	r3, [pc, #336]	; (8000878 <main+0x2e0>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	  								flag=TRUE;
 800072c:	4b65      	ldr	r3, [pc, #404]	; (80008c4 <main+0x32c>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
	  								stage=CONFIG;
 8000732:	4b50      	ldr	r3, [pc, #320]	; (8000874 <main+0x2dc>)
 8000734:	2203      	movs	r2, #3
 8000736:	701a      	strb	r2, [r3, #0]
	  								break;
 8000738:	e005      	b.n	8000746 <main+0x1ae>
	  						for(uint8_t i=0;i<4;i++)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d9a8      	bls.n	8000698 <main+0x100>
	  							}
	  						}

	  						if(!flag)
 8000746:	4b5f      	ldr	r3, [pc, #380]	; (80008c4 <main+0x32c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d117      	bne.n	800077e <main+0x1e6>
	  						{
	  							stage=INIT;
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <main+0x2dc>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
	  							count++;
 8000754:	4b5c      	ldr	r3, [pc, #368]	; (80008c8 <main+0x330>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <main+0x330>)
 800075e:	701a      	strb	r2, [r3, #0]
	  							//j=0;

	  							if(count>3)
 8000760:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <main+0x330>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d90a      	bls.n	800077e <main+0x1e6>
	  							{
	  								printf("\r\nlogin attempt exceeded!!\r\n");
 8000768:	4858      	ldr	r0, [pc, #352]	; (80008cc <main+0x334>)
 800076a:	f003 fe7b 	bl	8004464 <puts>
	  								HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4857      	ldr	r0, [pc, #348]	; (80008d0 <main+0x338>)
 8000774:	f001 fc79 	bl	800206a <HAL_GPIO_TogglePin>
	  								stage=EXIT;
 8000778:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <main+0x2dc>)
 800077a:	2204      	movs	r2, #4
 800077c:	701a      	strb	r2, [r3, #0]
	  							}
	  						}
	  					}
	  						memset(input,0,sizeof(input));
 800077e:	2214      	movs	r2, #20
 8000780:	2100      	movs	r1, #0
 8000782:	483f      	ldr	r0, [pc, #252]	; (8000880 <main+0x2e8>)
 8000784:	f003 fde0 	bl	8004348 <memset>
	  						break;
 8000788:	e070      	b.n	800086c <main+0x2d4>

	  				case CONFIG:
	  					if(strcmp(input,"exit")==0 ||  strcmp(input,"Z")==0 )
 800078a:	4952      	ldr	r1, [pc, #328]	; (80008d4 <main+0x33c>)
 800078c:	483c      	ldr	r0, [pc, #240]	; (8000880 <main+0x2e8>)
 800078e:	f7ff fd1f 	bl	80001d0 <strcmp>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <main+0x20e>
 8000798:	494f      	ldr	r1, [pc, #316]	; (80008d8 <main+0x340>)
 800079a:	4839      	ldr	r0, [pc, #228]	; (8000880 <main+0x2e8>)
 800079c:	f7ff fd18 	bl	80001d0 <strcmp>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10c      	bne.n	80007c0 <main+0x228>
	  					{
	  						printf("\r\nsession ended!!\r\n");
 80007a6:	484d      	ldr	r0, [pc, #308]	; (80008dc <main+0x344>)
 80007a8:	f003 fe5c 	bl	8004464 <puts>
	  						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	4847      	ldr	r0, [pc, #284]	; (80008d0 <main+0x338>)
 80007b4:	f001 fc40 	bl	8002038 <HAL_GPIO_WritePin>
	  						stage=EXIT;
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <main+0x2dc>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	e03a      	b.n	8000836 <main+0x29e>
	  					}
	  					else
	  					{
	  						if(strcmp(input,"turn ON LED")==0)
 80007c0:	4947      	ldr	r1, [pc, #284]	; (80008e0 <main+0x348>)
 80007c2:	482f      	ldr	r0, [pc, #188]	; (8000880 <main+0x2e8>)
 80007c4:	f7ff fd04 	bl	80001d0 <strcmp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d109      	bne.n	80007e2 <main+0x24a>
	  						{
	  							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	483e      	ldr	r0, [pc, #248]	; (80008d0 <main+0x338>)
 80007d6:	f001 fc2f 	bl	8002038 <HAL_GPIO_WritePin>
	  							printf("\r\nLED turned ON...\r\n");
 80007da:	4842      	ldr	r0, [pc, #264]	; (80008e4 <main+0x34c>)
 80007dc:	f003 fe42 	bl	8004464 <puts>
 80007e0:	e013      	b.n	800080a <main+0x272>
	  						}

	  						else if(strcmp(input,"turn OFF LED")==0)
 80007e2:	4941      	ldr	r1, [pc, #260]	; (80008e8 <main+0x350>)
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <main+0x2e8>)
 80007e6:	f7ff fcf3 	bl	80001d0 <strcmp>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d109      	bne.n	8000804 <main+0x26c>
	  						{
	  							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4836      	ldr	r0, [pc, #216]	; (80008d0 <main+0x338>)
 80007f8:	f001 fc1e 	bl	8002038 <HAL_GPIO_WritePin>
	  							printf("\r\nLED turned OFF...\r\n");
 80007fc:	483b      	ldr	r0, [pc, #236]	; (80008ec <main+0x354>)
 80007fe:	f003 fe31 	bl	8004464 <puts>
 8000802:	e002      	b.n	800080a <main+0x272>
	  						}

	  						else
	  						{
	  							printf("\r\ninput is invalid\r\n");
 8000804:	483a      	ldr	r0, [pc, #232]	; (80008f0 <main+0x358>)
 8000806:	f003 fe2d 	bl	8004464 <puts>
	  						}
	  #ifdef SPRINTF
	  						sprintf(DMA_buff,"\r\nConfig> ");
 800080a:	492d      	ldr	r1, [pc, #180]	; (80008c0 <main+0x328>)
 800080c:	4820      	ldr	r0, [pc, #128]	; (8000890 <main+0x2f8>)
 800080e:	f003 fe31 	bl	8004474 <siprintf>
	  						HAL_UART_Transmit_DMA(&huart2, (uint8_t *)DMA_buff, strlen(DMA_buff));
 8000812:	481f      	ldr	r0, [pc, #124]	; (8000890 <main+0x2f8>)
 8000814:	f7ff fce6 	bl	80001e4 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29b      	uxth	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	491c      	ldr	r1, [pc, #112]	; (8000890 <main+0x2f8>)
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <main+0x2fc>)
 8000822:	f002 fded 	bl	8003400 <HAL_UART_Transmit_DMA>
	  #else
	  						printf("Config> ");
	  #endif
	  						HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	491b      	ldr	r1, [pc, #108]	; (8000898 <main+0x300>)
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <main+0x2fc>)
 800082c:	f002 fe54 	bl	80034d8 <HAL_UART_Receive_DMA>
	  						recieved=FALSE;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <main+0x2e0>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	  					}
	  					memset(input,0,sizeof(input));
 8000836:	2214      	movs	r2, #20
 8000838:	2100      	movs	r1, #0
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <main+0x2e8>)
 800083c:	f003 fd84 	bl	8004348 <memset>
	  					break;
 8000840:	e014      	b.n	800086c <main+0x2d4>

	  				case EXIT:
	  					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	4821      	ldr	r0, [pc, #132]	; (80008d0 <main+0x338>)
 800084a:	f001 fbf5 	bl	8002038 <HAL_GPIO_WritePin>
	  					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800084e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000852:	481f      	ldr	r0, [pc, #124]	; (80008d0 <main+0x338>)
 8000854:	f001 fc09 	bl	800206a <HAL_GPIO_TogglePin>
	  					memset(input,0,sizeof(input));
 8000858:	2214      	movs	r2, #20
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <main+0x2e8>)
 800085e:	f003 fd73 	bl	8004348 <memset>

	  					recieved=FALSE;
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <main+0x2e0>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	  					break;
 8000868:	e000      	b.n	800086c <main+0x2d4>
	  			}
	  	}
 800086a:	bf00      	nop
	  if(stage==INIT)
 800086c:	e6a6      	b.n	80005bc <main+0x24>
 800086e:	bf00      	nop
 8000870:	080056d0 	.word	0x080056d0
 8000874:	200000ac 	.word	0x200000ac
 8000878:	200000af 	.word	0x200000af
 800087c:	08005760 	.word	0x08005760
 8000880:	20000124 	.word	0x20000124
 8000884:	08005768 	.word	0x08005768
 8000888:	20000218 	.word	0x20000218
 800088c:	08005780 	.word	0x08005780
 8000890:	200002b8 	.word	0x200002b8
 8000894:	20000270 	.word	0x20000270
 8000898:	2000026d 	.word	0x2000026d
 800089c:	2000013c 	.word	0x2000013c
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000010 	.word	0x20000010
 80008a8:	20000224 	.word	0x20000224
 80008ac:	2000026c 	.word	0x2000026c
 80008b0:	08005790 	.word	0x08005790
 80008b4:	20000138 	.word	0x20000138
 80008b8:	200000c0 	.word	0x200000c0
 80008bc:	080057b0 	.word	0x080057b0
 80008c0:	080057d0 	.word	0x080057d0
 80008c4:	200000ad 	.word	0x200000ad
 80008c8:	200000b0 	.word	0x200000b0
 80008cc:	080057dc 	.word	0x080057dc
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	080057f8 	.word	0x080057f8
 80008d8:	08005800 	.word	0x08005800
 80008dc:	08005804 	.word	0x08005804
 80008e0:	08005818 	.word	0x08005818
 80008e4:	08005824 	.word	0x08005824
 80008e8:	08005838 	.word	0x08005838
 80008ec:	08005848 	.word	0x08005848
 80008f0:	08005860 	.word	0x08005860

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fd20 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <SystemClock_Config+0xe0>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a2c      	ldr	r2, [pc, #176]	; (80009d4 <SystemClock_Config+0xe0>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <SystemClock_Config+0xe0>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <SystemClock_Config+0xe4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <SystemClock_Config+0xe4>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <SystemClock_Config+0xe4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000954:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	2310      	movs	r3, #16
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000970:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800097a:	2307      	movs	r3, #7
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb8c 	bl	80020a0 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800098e:	f000 f9ff 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2302      	movs	r3, #2
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800099e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2105      	movs	r1, #5
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fded 	bl	8002590 <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009bc:	f000 f9e8 	bl	8000d90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 fec9 	bl	800275c <HAL_RCC_MCOConfig>
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_TIM6_Init+0x64>)
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_TIM6_Init+0x68>)
 80009ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_TIM6_Init+0x64>)
 80009f2:	2254      	movs	r2, #84	; 0x54
 80009f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_TIM6_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_TIM6_Init+0x64>)
 80009fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_TIM6_Init+0x64>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_TIM6_Init+0x64>)
 8000a0c:	f002 f856 	bl	8002abc <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a16:	f000 f9bb 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_TIM6_Init+0x64>)
 8000a28:	f002 fad8 	bl	8002fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a32:	f000 f9ad 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000224 	.word	0x20000224
 8000a44:	40001000 	.word	0x40001000

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_USART2_UART_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a70:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a74:	220c      	movs	r2, #12
 8000a76:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a86:	f002 fb39 	bl	80030fc <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 f97e 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000270 	.word	0x20000270
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_DMA_Init+0x4c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <MX_DMA_Init+0x4c>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <MX_DMA_Init+0x4c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2010      	movs	r0, #16
 8000ac8:	f000 fcee 	bl	80014a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000acc:	2010      	movs	r0, #16
 8000ace:	f000 fd07 	bl	80014e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	f000 fce6 	bl	80014a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 fcff 	bl	80014e0 <HAL_NVIC_EnableIRQ>

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b60:	481a      	ldr	r0, [pc, #104]	; (8000bcc <MX_GPIO_Init+0xdc>)
 8000b62:	f001 fa69 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <MX_GPIO_Init+0xe0>)
 8000b7a:	f001 f8c1 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b7e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_GPIO_Init+0xdc>)
 8000b98:	f001 f8b2 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_GPIO_Init+0xe0>)
 8000bba:	f001 f8a1 	bl	8001d00 <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);   return ch; }
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	1d39      	adds	r1, r7, #4
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <__io_putchar+0x20>)
 8000be6:	f002 fad6 	bl	8003196 <HAL_UART_Transmit>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000270 	.word	0x20000270

08000bf8 <__io_getchar>:

GETCHAR_PROTOTYPE
{ 	uint8_t ch = 0;
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71fb      	strb	r3, [r7, #7]
/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <__io_getchar+0x38>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <__io_getchar+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <__io_getchar+0x38>)
 8000c22:	f002 fb4a 	bl	80032ba <HAL_UART_Receive>
	return ch;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000270 	.word	0x20000270

08000c34 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_UART_TxCpltCallback+0x24>)
 8000c40:	f001 fa13 	bl	800206a <HAL_GPIO_TogglePin>
	memset(DMA_buff,0,sizeof(DMA_buff));
 8000c44:	2214      	movs	r2, #20
 8000c46:	2100      	movs	r1, #0
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <HAL_UART_TxCpltCallback+0x28>)
 8000c4a:	f003 fb7d 	bl	8004348 <memset>
//	if(recieved==TRUE)
//	{
//		memset(test_input,0,sizeof(test_input));
//	}

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	200002b8 	.word	0x200002b8

08000c60 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
//			HAL_UART_Transmit(&huart2, erase, sizeof(erase), 50);
//			memset(erase,0,sizeof(erase));
//			rx_data=0;
//		}

	if((rx_data != '\r') || j>(sizeof(input)) )
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_UART_RxCpltCallback+0x64>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b0d      	cmp	r3, #13
 8000c6e:	d103      	bne.n	8000c78 <HAL_UART_RxCpltCallback+0x18>
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_RxCpltCallback+0x68>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b14      	cmp	r3, #20
 8000c76:	d917      	bls.n	8000ca8 <HAL_UART_RxCpltCallback+0x48>
		{
			input[j]=rx_data;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_UART_RxCpltCallback+0x68>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_RxCpltCallback+0x64>)
 8000c80:	7819      	ldrb	r1, [r3, #0]
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_UART_RxCpltCallback+0x6c>)
 8000c84:	5499      	strb	r1, [r3, r2]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <HAL_UART_RxCpltCallback+0x70>)
 8000c8c:	f001 f9ed 	bl	800206a <HAL_GPIO_TogglePin>
			HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <HAL_UART_RxCpltCallback+0x64>)
 8000c94:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <HAL_UART_RxCpltCallback+0x74>)
 8000c96:	f002 fc1f 	bl	80034d8 <HAL_UART_Receive_DMA>
			j++;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_UART_RxCpltCallback+0x68>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_UART_RxCpltCallback+0x68>)
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e009      	b.n	8000cbc <HAL_UART_RxCpltCallback+0x5c>
		}

	else
	{
		recieved=TRUE;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_UART_RxCpltCallback+0x78>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
		rx_data=0;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_UART_RxCpltCallback+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
		j=0;
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_UART_RxCpltCallback+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//	}
	HAL_UART_Receive_DMA(&huart2, &rx_data, 1);
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
#endif
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000026d 	.word	0x2000026d
 8000cc8:	200000ae 	.word	0x200000ae
 8000ccc:	20000124 	.word	0x20000124
 8000cd0:	40020c00 	.word	0x40020c00
 8000cd4:	20000270 	.word	0x20000270
 8000cd8:	200000af 	.word	0x200000af

08000cdc <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	huart->ErrorCode;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <telnet_init>:

#ifdef TELNET
static void telnet_init(void)
  {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
#ifdef SPRINTF
	  sprintf(DMA_buff,"\r\nUsername: ");
 8000cf8:	4912      	ldr	r1, [pc, #72]	; (8000d44 <telnet_init+0x50>)
 8000cfa:	4813      	ldr	r0, [pc, #76]	; (8000d48 <telnet_init+0x54>)
 8000cfc:	f003 fbba 	bl	8004474 <siprintf>
	  //HAL_UART_Transmit(&huart2, input, sizeof(input), 50);
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)DMA_buff, sizeof(DMA_buff));
 8000d00:	2214      	movs	r2, #20
 8000d02:	4911      	ldr	r1, [pc, #68]	; (8000d48 <telnet_init+0x54>)
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <telnet_init+0x58>)
 8000d06:	f002 fb7b 	bl	8003400 <HAL_UART_Transmit_DMA>
#else
	  printf("Username :");

#endif

	  stage=START;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <telnet_init+0x5c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
	  flag=FALSE;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <telnet_init+0x60>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
	  rx_data=0;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <telnet_init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
	  recieved=FALSE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <telnet_init+0x68>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]

	  //memset(input,0,sizeof(input));
	  memset(input_user,0,sizeof(input_user));
 8000d22:	220a      	movs	r2, #10
 8000d24:	2100      	movs	r1, #0
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <telnet_init+0x6c>)
 8000d28:	f003 fb0e 	bl	8004348 <memset>
	  memset(input_pass,0,sizeof(input_pass));
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	2100      	movs	r1, #0
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <telnet_init+0x70>)
 8000d32:	f003 fb09 	bl	8004348 <memset>
	 // HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, input, sizeof(input));
 8000d36:	2214      	movs	r2, #20
 8000d38:	490b      	ldr	r1, [pc, #44]	; (8000d68 <telnet_init+0x74>)
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <telnet_init+0x58>)
 8000d3c:	f002 fbfc 	bl	8003538 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	08005874 	.word	0x08005874
 8000d48:	200002b8 	.word	0x200002b8
 8000d4c:	20000270 	.word	0x20000270
 8000d50:	200000ac 	.word	0x200000ac
 8000d54:	200000ad 	.word	0x200000ad
 8000d58:	2000026d 	.word	0x2000026d
 8000d5c:	200000af 	.word	0x200000af
 8000d60:	20000218 	.word	0x20000218
 8000d64:	2000013c 	.word	0x2000013c
 8000d68:	20000124 	.word	0x20000124

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7e:	f000 fabb 	bl	80012f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010000 	.word	0x40010000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f000 fb59 	bl	8001492 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x40>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_TIM_Base_MspInit+0x40>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_TIM_Base_MspInit+0x40>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40001000 	.word	0x40001000
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_UART_MspInit+0x14c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	f040 8090 	bne.w	8000f74 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <HAL_UART_MspInit+0x150>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	4a48      	ldr	r2, [pc, #288]	; (8000f80 <HAL_UART_MspInit+0x150>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e62:	6413      	str	r3, [r2, #64]	; 0x40
 8000e64:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <HAL_UART_MspInit+0x150>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <HAL_UART_MspInit+0x150>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a41      	ldr	r2, [pc, #260]	; (8000f80 <HAL_UART_MspInit+0x150>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <HAL_UART_MspInit+0x150>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4837      	ldr	r0, [pc, #220]	; (8000f84 <HAL_UART_MspInit+0x154>)
 8000ea8:	f000 ff2a 	bl	8001d00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000eae:	4a37      	ldr	r2, [pc, #220]	; (8000f8c <HAL_UART_MspInit+0x15c>)
 8000eb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000eb2:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000eb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eba:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec0:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000eec:	4826      	ldr	r0, [pc, #152]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000eee:	f000 fb05 	bl	80014fc <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ef8:	f7ff ff4a 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <HAL_UART_MspInit+0x158>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f14:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f28:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f48:	4811      	ldr	r0, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f4a:	f000 fad7 	bl	80014fc <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000f54:	f7ff ff1c 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2026      	movs	r0, #38	; 0x26
 8000f6a:	f000 fa9d 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f6e:	2026      	movs	r0, #38	; 0x26
 8000f70:	f000 fab6 	bl	80014e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	200000c4 	.word	0x200000c4
 8000f8c:	40026088 	.word	0x40026088
 8000f90:	20000180 	.word	0x20000180
 8000f94:	400260a0 	.word	0x400260a0

08000f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2019      	movs	r0, #25
 8000fae:	f000 fa7b 	bl	80014a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fb2:	2019      	movs	r0, #25
 8000fb4:	f000 fa94 	bl	80014e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_InitTick+0xa4>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	; (800103c <HAL_InitTick+0xa4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_InitTick+0xa4>)
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd4:	f107 0210 	add.w	r2, r7, #16
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fd3a 	bl	8002a58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fe4:	f001 fd24 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <HAL_InitTick+0xa8>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9b      	lsrs	r3, r3, #18
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_InitTick+0xac>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_InitTick+0xb0>)
 8001000:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_InitTick+0xac>)
 8001004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001008:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_InitTick+0xac>)
 800100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_InitTick+0xac>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_InitTick+0xac>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_InitTick+0xac>)
 800101e:	f001 fd4d 	bl	8002abc <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d104      	bne.n	8001032 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <HAL_InitTick+0xac>)
 800102a:	f001 fd97 	bl	8002b5c <HAL_TIM_Base_Start_IT>
 800102e:	4603      	mov	r3, r0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3730      	adds	r7, #48	; 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	431bde83 	.word	0x431bde83
 8001044:	200002cc 	.word	0x200002cc
 8001048:	40010000 	.word	0x40010000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Stream5_IRQHandler+0x10>)
 80010aa:	f000 fbbf 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000c4 	.word	0x200000c4

080010b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA1_Stream6_IRQHandler+0x10>)
 80010be:	f000 fbb5 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000180 	.word	0x20000180

080010cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010d2:	f001 fdb3 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200002cc 	.word	0x200002cc

080010e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <USART2_IRQHandler+0x10>)
 80010e6:	f002 fa77 	bl	80035d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000270 	.word	0x20000270

080010f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e00a      	b.n	800111c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001106:	f7ff fd77 	bl	8000bf8 <__io_getchar>
 800110a:	4601      	mov	r1, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf0      	blt.n	8001106 <_read+0x12>
	}

return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e009      	b.n	8001154 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fd43 	bl	8000bd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf1      	blt.n	8001140 <_write+0x12>
	}
	return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_close>:

int _close(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118e:	605a      	str	r2, [r3, #4]
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f003 f86a 	bl	80042d8 <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20020000 	.word	0x20020000
 8001230:	00000400 	.word	0x00000400
 8001234:	200000b4 	.word	0x200000b4
 8001238:	20000328 	.word	0x20000328

0800123c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <SystemInit+0x20>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <SystemInit+0x20>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001266:	490e      	ldr	r1, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800127c:	4c0b      	ldr	r4, [pc, #44]	; (80012ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128a:	f7ff ffd7 	bl	800123c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f003 f829 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff f981 	bl	8000598 <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012a4:	0800594c 	.word	0x0800594c
  ldr r2, =_sbss
 80012a8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012ac:	20000328 	.word	0x20000328

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f8d8 	bl	8001492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fe58 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fd58 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000028 	.word	0x20000028
 800131c:	20000314 	.word	0x20000314

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000314 	.word	0x20000314

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff4c 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ba:	f7ff ff61 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f7ff ffb1 	bl	800142c <NVIC_EncodePriority>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff80 	bl	80013d8 <__NVIC_SetPriority>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff54 	bl	800139c <__NVIC_EnableIRQ>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ff0a 	bl	8001320 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e099      	b.n	800164c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	e00f      	b.n	800155a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153a:	f7ff fef1 	bl	8001320 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b05      	cmp	r3, #5
 8001546:	d908      	bls.n	800155a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e078      	b.n	800164c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e8      	bne.n	800153a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_DMA_Init+0x158>)
 8001574:	4013      	ands	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d107      	bne.n	80015c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4313      	orrs	r3, r2
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d117      	bne.n	800161e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00e      	beq.n	800161e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fb01 	bl	8001c08 <DMA_CheckFifoParam>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800161a:	2301      	movs	r3, #1
 800161c:	e016      	b.n	800164c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fab8 	bl	8001b9c <DMA_CalcBaseAndBitshift>
 800162c:	4603      	mov	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	223f      	movs	r2, #63	; 0x3f
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	f010803f 	.word	0xf010803f

08001658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_DMA_Start_IT+0x26>
 800167a:	2302      	movs	r3, #2
 800167c:	e040      	b.n	8001700 <HAL_DMA_Start_IT+0xa8>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d12f      	bne.n	80016f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 fa4a 	bl	8001b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0216 	orr.w	r2, r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e005      	b.n	80016fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001716:	f7ff fe03 	bl	8001320 <HAL_GetTick>
 800171a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d008      	beq.n	800173a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e052      	b.n	80017e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0216 	bic.w	r2, r2, #22
 8001748:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001758:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <HAL_DMA_Abort+0x62>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0208 	bic.w	r2, r2, #8
 8001778:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800178a:	e013      	b.n	80017b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800178c:	f7ff fdc8 	bl	8001320 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b05      	cmp	r3, #5
 8001798:	d90c      	bls.n	80017b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2220      	movs	r2, #32
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2203      	movs	r2, #3
 80017ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e015      	b.n	80017e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e4      	bne.n	800178c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	223f      	movs	r2, #63	; 0x3f
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d004      	beq.n	8001806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00c      	b.n	8001820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2205      	movs	r2, #5
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_DMA_IRQHandler+0x258>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a92      	ldr	r2, [pc, #584]	; (8001a88 <HAL_DMA_IRQHandler+0x25c>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0a9b      	lsrs	r3, r3, #10
 8001844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2208      	movs	r2, #8
 8001858:	409a      	lsls	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01a      	beq.n	8001898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0204 	bic.w	r2, r2, #4
 800187e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2208      	movs	r2, #8
 8001886:	409a      	lsls	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2201      	movs	r2, #1
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2201      	movs	r2, #1
 80018bc:	409a      	lsls	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f043 0202 	orr.w	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2204      	movs	r2, #4
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	2204      	movs	r2, #4
 80018f2:	409a      	lsls	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	2210      	movs	r2, #16
 800190a:	409a      	lsls	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d043      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d03c      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2210      	movs	r2, #16
 8001928:	409a      	lsls	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d018      	beq.n	800196e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d024      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
 800195a:	e01f      	b.n	800199c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01b      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
 800196c:	e016      	b.n	800199c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0208 	bic.w	r2, r2, #8
 800198a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a0:	2220      	movs	r2, #32
 80019a2:	409a      	lsls	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 808e 	beq.w	8001aca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8086 	beq.w	8001aca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2220      	movs	r2, #32
 80019c4:	409a      	lsls	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d136      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0216 	bic.w	r2, r2, #22
 80019e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x1da>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0208 	bic.w	r2, r2, #8
 8001a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	223f      	movs	r2, #63	; 0x3f
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d07d      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
        }
        return;
 8001a42:	e078      	b.n	8001b36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01c      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d030      	beq.n	8001aca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
 8001a70:	e02b      	b.n	8001aca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d027      	beq.n	8001aca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
 8001a82:	e022      	b.n	8001aca <HAL_DMA_IRQHandler+0x29e>
 8001a84:	20000020 	.word	0x20000020
 8001a88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0210 	bic.w	r2, r2, #16
 8001aa8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d032      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d022      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d307      	bcc.n	8001b12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f2      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x2ca>
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b36:	bf00      	nop
    }
  }
}
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b40      	cmp	r3, #64	; 0x40
 8001b6c:	d108      	bne.n	8001b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b7e:	e007      	b.n	8001b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3b10      	subs	r3, #16
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <DMA_CalcBaseAndBitshift+0x64>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <DMA_CalcBaseAndBitshift+0x68>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d909      	bls.n	8001bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	1d1a      	adds	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58
 8001bdc:	e007      	b.n	8001bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	aaaaaaab 	.word	0xaaaaaaab
 8001c04:	0800589c 	.word	0x0800589c

08001c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11f      	bne.n	8001c62 <DMA_CheckFifoParam+0x5a>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d856      	bhi.n	8001cd6 <DMA_CheckFifoParam+0xce>
 8001c28:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <DMA_CheckFifoParam+0x28>)
 8001c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2e:	bf00      	nop
 8001c30:	08001c41 	.word	0x08001c41
 8001c34:	08001c53 	.word	0x08001c53
 8001c38:	08001c41 	.word	0x08001c41
 8001c3c:	08001cd7 	.word	0x08001cd7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d046      	beq.n	8001cda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c50:	e043      	b.n	8001cda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c5a:	d140      	bne.n	8001cde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c60:	e03d      	b.n	8001cde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6a:	d121      	bne.n	8001cb0 <DMA_CheckFifoParam+0xa8>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d837      	bhi.n	8001ce2 <DMA_CheckFifoParam+0xda>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <DMA_CheckFifoParam+0x70>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001c8f 	.word	0x08001c8f
 8001c80:	08001c89 	.word	0x08001c89
 8001c84:	08001ca1 	.word	0x08001ca1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c8c:	e030      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d025      	beq.n	8001ce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9e:	e022      	b.n	8001ce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca8:	d11f      	bne.n	8001cea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cae:	e01c      	b.n	8001cea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d903      	bls.n	8001cbe <DMA_CheckFifoParam+0xb6>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d003      	beq.n	8001cc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cbc:	e018      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc2:	e015      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd4:	e00b      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;
 8001cd6:	bf00      	nop
 8001cd8:	e00a      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
 8001cdc:	e008      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e006      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e004      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e002      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cea:	bf00      	nop
 8001cec:	e000      	b.n	8001cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
    }
  } 
  
  return status; 
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e16b      	b.n	8001ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 815a 	bne.w	8001fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80b4 	beq.w	8001fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b60      	ldr	r3, [pc, #384]	; (800200c <HAL_GPIO_Init+0x30c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a5f      	ldr	r2, [pc, #380]	; (800200c <HAL_GPIO_Init+0x30c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b5d      	ldr	r3, [pc, #372]	; (800200c <HAL_GPIO_Init+0x30c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_GPIO_Init+0x314>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02b      	beq.n	8001f26 <HAL_GPIO_Init+0x226>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a51      	ldr	r2, [pc, #324]	; (8002018 <HAL_GPIO_Init+0x318>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d025      	beq.n	8001f22 <HAL_GPIO_Init+0x222>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a50      	ldr	r2, [pc, #320]	; (800201c <HAL_GPIO_Init+0x31c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x21e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4f      	ldr	r2, [pc, #316]	; (8002020 <HAL_GPIO_Init+0x320>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x21a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4e      	ldr	r2, [pc, #312]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x216>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4d      	ldr	r2, [pc, #308]	; (8002028 <HAL_GPIO_Init+0x328>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x212>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	; (800202c <HAL_GPIO_Init+0x32c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x20e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x20a>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e00e      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00c      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e00a      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	; (8002010 <HAL_GPIO_Init+0x310>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6a:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f94:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f ae90 	bls.w	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43d9      	mvns	r1, r3
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	400b      	ands	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e264      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d075      	beq.n	80021aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	4ba3      	ldr	r3, [pc, #652]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d00c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ca:	4ba0      	ldr	r3, [pc, #640]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d112      	bne.n	80020fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b9d      	ldr	r3, [pc, #628]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e2:	d10b      	bne.n	80020fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	4b99      	ldr	r3, [pc, #612]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d05b      	beq.n	80021a8 <HAL_RCC_OscConfig+0x108>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d157      	bne.n	80021a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e23f      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x74>
 8002106:	4b91      	ldr	r3, [pc, #580]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a90      	ldr	r2, [pc, #576]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xb0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b8b      	ldr	r3, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a8a      	ldr	r2, [pc, #552]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b88      	ldr	r3, [pc, #544]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a87      	ldr	r2, [pc, #540]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xb0>
 8002138:	4b84      	ldr	r3, [pc, #528]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a83      	ldr	r2, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a80      	ldr	r2, [pc, #512]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff f8e2 	bl	8001320 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff f8de 	bl	8001320 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e204      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xc0>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff f8ce 	bl	8001320 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff f8ca 	bl	8001320 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1f0      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0xe8>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	4b65      	ldr	r3, [pc, #404]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c2:	4b62      	ldr	r3, [pc, #392]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x152>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1c4      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b56      	ldr	r3, [pc, #344]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4952      	ldr	r1, [pc, #328]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <HAL_RCC_OscConfig+0x2b0>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7ff f883 	bl	8001320 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221e:	f7ff f87f 	bl	8001320 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1a5      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4940      	ldr	r1, [pc, #256]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x2b0>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7ff f862 	bl	8001320 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff f85e 	bl	8001320 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e184      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d030      	beq.n	80022ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d016      	beq.n	80022c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCC_OscConfig+0x2b4>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f842 	bl	8001320 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7ff f83e 	bl	8001320 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e164      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x200>
 80022be:	e015      	b.n	80022ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c0:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCC_OscConfig+0x2b4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7ff f82b 	bl	8001320 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ce:	f7ff f827 	bl	8001320 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e14d      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a0 	beq.w	800243a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x2b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d121      	bne.n	800237a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_RCC_OscConfig+0x2b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_RCC_OscConfig+0x2b8>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7fe ffed 	bl	8001320 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	e011      	b.n	800236e <HAL_RCC_OscConfig+0x2ce>
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	42470000 	.word	0x42470000
 8002354:	42470e80 	.word	0x42470e80
 8002358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235c:	f7fe ffe0 	bl	8001320 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e106      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b85      	ldr	r3, [pc, #532]	; (8002584 <HAL_RCC_OscConfig+0x4e4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x2f0>
 8002382:	4b81      	ldr	r3, [pc, #516]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a80      	ldr	r2, [pc, #512]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	e01c      	b.n	80023ca <HAL_RCC_OscConfig+0x32a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 8002398:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	4b78      	ldr	r3, [pc, #480]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x32a>
 80023b2:	4b75      	ldr	r3, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a74      	ldr	r2, [pc, #464]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a71      	ldr	r2, [pc, #452]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d015      	beq.n	80023fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe ffa5 	bl	8001320 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe ffa1 	bl	8001320 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0c5      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ee      	beq.n	80023da <HAL_RCC_OscConfig+0x33a>
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe ff8f 	bl	8001320 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe ff8b 	bl	8001320 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0af      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ee      	bne.n	8002406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b56      	ldr	r3, [pc, #344]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a55      	ldr	r2, [pc, #340]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 809b 	beq.w	800257a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d05c      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d141      	bne.n	80024dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_OscConfig+0x4ec>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe ff5f 	bl	8001320 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe ff5b 	bl	8001320 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e081      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002478:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_RCC_OscConfig+0x4ec>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe ff34 	bl	8001320 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe ff30 	bl	8001320 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e056      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x41c>
 80024da:	e04e      	b.n	800257a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x4ec>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe ff1d 	bl	8001320 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe ff19 	bl	8001320 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e03f      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x44a>
 8002508:	e037      	b.n	800257a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e032      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_OscConfig+0x4e8>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d028      	beq.n	8002576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d121      	bne.n	8002576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d11a      	bne.n	8002576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800254c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40007000 	.word	0x40007000
 8002588:	40023800 	.word	0x40023800
 800258c:	42470060 	.word	0x42470060

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0cc      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d90c      	bls.n	80025cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b8      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a58      	ldr	r2, [pc, #352]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	494d      	ldr	r1, [pc, #308]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d044      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d119      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d003      	beq.n	800264e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	2b03      	cmp	r3, #3
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e067      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4934      	ldr	r1, [pc, #208]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002680:	f7fe fe4e 	bl	8001320 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe fe4a 	bl	8001320 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e04f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 020c 	and.w	r2, r3, #12
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1eb      	bne.n	8002688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d20c      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e032      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4916      	ldr	r1, [pc, #88]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	490e      	ldr	r1, [pc, #56]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002716:	f000 f889 	bl	800282c <HAL_RCC_GetSysClockFreq>
 800271a:	4602      	mov	r2, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	490a      	ldr	r1, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	5ccb      	ldrb	r3, [r1, r3]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fc2e 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00
 800274c:	40023800 	.word	0x40023800
 8002750:	08005884 	.word	0x08005884
 8002754:	20000020 	.word	0x20000020
 8002758:	20000024 	.word	0x20000024

0800275c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d129      	bne.n	80027c2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800278a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	481f      	ldr	r0, [pc, #124]	; (8002824 <HAL_RCC_MCOConfig+0xc8>)
 80027a8:	f7ff faaa 	bl	8001d00 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	4919      	ldr	r1, [pc, #100]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80027c0:	e029      	b.n	8002816 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a15      	ldr	r2, [pc, #84]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80027de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	4619      	mov	r1, r3
 80027fa:	480b      	ldr	r0, [pc, #44]	; (8002828 <HAL_RCC_MCOConfig+0xcc>)
 80027fc:	f7ff fa80 	bl	8001d00 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	00d9      	lsls	r1, r3, #3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	430b      	orrs	r3, r1
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_MCOConfig+0xc4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
}
 8002816:	bf00      	nop
 8002818:	3730      	adds	r7, #48	; 0x30
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020800 	.word	0x40020800

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	2300      	movs	r3, #0
 800283e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002844:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d00d      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x40>
 8002850:	2b08      	cmp	r3, #8
 8002852:	f200 80bd 	bhi.w	80029d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x34>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x3a>
 800285e:	e0b7      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002862:	60bb      	str	r3, [r7, #8]
       break;
 8002864:	e0b7      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002868:	60bb      	str	r3, [r7, #8]
      break;
 800286a:	e0b4      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800286c:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04d      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002882:	4b58      	ldr	r3, [pc, #352]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	461a      	mov	r2, r3
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	ea02 0800 	and.w	r8, r2, r0
 800289a:	ea03 0901 	and.w	r9, r3, r1
 800289e:	4640      	mov	r0, r8
 80028a0:	4649      	mov	r1, r9
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	014b      	lsls	r3, r1, #5
 80028ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028b0:	0142      	lsls	r2, r0, #5
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	ebb0 0008 	subs.w	r0, r0, r8
 80028ba:	eb61 0109 	sbc.w	r1, r1, r9
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	018b      	lsls	r3, r1, #6
 80028c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028cc:	0182      	lsls	r2, r0, #6
 80028ce:	1a12      	subs	r2, r2, r0
 80028d0:	eb63 0301 	sbc.w	r3, r3, r1
 80028d4:	f04f 0000 	mov.w	r0, #0
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	00d9      	lsls	r1, r3, #3
 80028de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e2:	00d0      	lsls	r0, r2, #3
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	eb12 0208 	adds.w	r2, r2, r8
 80028ec:	eb43 0309 	adc.w	r3, r3, r9
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	0259      	lsls	r1, r3, #9
 80028fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028fe:	0250      	lsls	r0, r2, #9
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f7fd fcc6 	bl	80002a0 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e04a      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	461a      	mov	r2, r3
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	ea02 0400 	and.w	r4, r2, r0
 8002936:	ea03 0501 	and.w	r5, r3, r1
 800293a:	4620      	mov	r0, r4
 800293c:	4629      	mov	r1, r5
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	014b      	lsls	r3, r1, #5
 8002948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800294c:	0142      	lsls	r2, r0, #5
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	1b00      	subs	r0, r0, r4
 8002954:	eb61 0105 	sbc.w	r1, r1, r5
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	018b      	lsls	r3, r1, #6
 8002962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002966:	0182      	lsls	r2, r0, #6
 8002968:	1a12      	subs	r2, r2, r0
 800296a:	eb63 0301 	sbc.w	r3, r3, r1
 800296e:	f04f 0000 	mov.w	r0, #0
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	00d9      	lsls	r1, r3, #3
 8002978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800297c:	00d0      	lsls	r0, r2, #3
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	1912      	adds	r2, r2, r4
 8002984:	eb45 0303 	adc.w	r3, r5, r3
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0299      	lsls	r1, r3, #10
 8002992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002996:	0290      	lsls	r0, r2, #10
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f7fd fc7a 	bl	80002a0 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4613      	mov	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	3301      	adds	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	60bb      	str	r3, [r7, #8]
      break;
 80029ce:	e002      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029d2:	60bb      	str	r3, [r7, #8]
      break;
 80029d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d6:	68bb      	ldr	r3, [r7, #8]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000020 	.word	0x20000020

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff0 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08005894 	.word	0x08005894

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffdc 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0b5b      	lsrs	r3, r3, #13
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08005894 	.word	0x08005894

08002a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	220f      	movs	r2, #15
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_RCC_GetClockConfig+0x60>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0207 	and.w	r2, r3, #7
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe f982 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 f9ce 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04e      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d010      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e007      	b.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40001800 	.word	0x40001800

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8ee 	bl	8002e60 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8e0 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8f1 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8c4 	bl	8002e60 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8b6 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f8c7 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0208 	mvn.w	r2, #8
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f89a 	bl	8002e60 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f88c 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f89d 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0210 	mvn.w	r2, #16
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f870 	bl	8002e60 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f862 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f873 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd ffd6 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f97e 	bl	80030e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f838 	bl	8002e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f948 	bl	80030d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a40      	ldr	r2, [pc, #256]	; (8002fb0 <TIM_Base_SetConfig+0x114>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d00f      	beq.n	8002edc <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <TIM_Base_SetConfig+0x118>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3c      	ldr	r2, [pc, #240]	; (8002fb8 <TIM_Base_SetConfig+0x11c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <TIM_Base_SetConfig+0x120>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <TIM_Base_SetConfig+0x124>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d108      	bne.n	8002eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <TIM_Base_SetConfig+0x114>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02b      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d027      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <TIM_Base_SetConfig+0x118>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d023      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <TIM_Base_SetConfig+0x11c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01f      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <TIM_Base_SetConfig+0x120>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01b      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a29      	ldr	r2, [pc, #164]	; (8002fc0 <TIM_Base_SetConfig+0x124>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d017      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a28      	ldr	r2, [pc, #160]	; (8002fc4 <TIM_Base_SetConfig+0x128>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <TIM_Base_SetConfig+0x12c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00f      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <TIM_Base_SetConfig+0x130>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <TIM_Base_SetConfig+0x134>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <TIM_Base_SetConfig+0x138>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <TIM_Base_SetConfig+0x13c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d108      	bne.n	8002f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <TIM_Base_SetConfig+0x114>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0xf8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <TIM_Base_SetConfig+0x124>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d103      	bne.n	8002f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	615a      	str	r2, [r3, #20]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40010400 	.word	0x40010400
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800
 8002fd0:	40001800 	.word	0x40001800
 8002fd4:	40001c00 	.word	0x40001c00
 8002fd8:	40002000 	.word	0x40002000

08002fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e05a      	b.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d01d      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10c      	bne.n	8003098 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40001800 	.word	0x40001800

080030d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e03f      	b.n	800318e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd fe84 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 ff01 	bl	8003f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08a      	sub	sp, #40	; 0x28
 800319a:	af02      	add	r7, sp, #8
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d17c      	bne.n	80032b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_Transmit+0x2c>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e075      	b.n	80032b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_UART_Transmit+0x3e>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e06e      	b.n	80032b2 <HAL_UART_Transmit+0x11c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2221      	movs	r2, #33	; 0x21
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ea:	f7fe f899 	bl	8001320 <HAL_GetTick>
 80031ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	d108      	bne.n	8003218 <HAL_UART_Transmit+0x82>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	e003      	b.n	8003220 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003228:	e02a      	b.n	8003280 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fc82 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e036      	b.n	80032b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003258:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3302      	adds	r3, #2
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	e007      	b.n	8003272 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	3301      	adds	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
      }

      huart->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1cf      	bne.n	800322a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2140      	movs	r1, #64	; 0x40
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fc52 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e006      	b.n	80032b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b08a      	sub	sp, #40	; 0x28
 80032be:	af02      	add	r7, sp, #8
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	f040 808c 	bne.w	80033f4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Receive+0x2e>
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e084      	b.n	80033f6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Receive+0x40>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e07d      	b.n	80033f6 <HAL_UART_Receive+0x13c>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2222      	movs	r2, #34	; 0x22
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003316:	f7fe f803 	bl	8001320 <HAL_GetTick>
 800331a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d108      	bne.n	8003344 <HAL_UART_Receive+0x8a>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e003      	b.n	800334c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003354:	e043      	b.n	80033de <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2200      	movs	r2, #0
 800335e:	2120      	movs	r1, #32
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fbec 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e042      	b.n	80033f6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003382:	b29a      	uxth	r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	3302      	adds	r3, #2
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e01f      	b.n	80033d0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d007      	beq.n	80033aa <HAL_UART_Receive+0xf0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_UART_Receive+0xfe>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e008      	b.n	80033ca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1b6      	bne.n	8003356 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b20      	cmp	r3, #32
 8003418:	d153      	bne.n	80034c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_UART_Transmit_DMA+0x26>
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e04c      	b.n	80034c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_UART_Transmit_DMA+0x38>
 8003434:	2302      	movs	r3, #2
 8003436:	e045      	b.n	80034c4 <HAL_UART_Transmit_DMA+0xc4>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2221      	movs	r2, #33	; 0x21
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_UART_Transmit_DMA+0xcc>)
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_UART_Transmit_DMA+0xd0>)
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_UART_Transmit_DMA+0xd4>)
 8003476:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347c:	2200      	movs	r2, #0
 800347e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3304      	adds	r3, #4
 8003494:	461a      	mov	r2, r3
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	f7fe f8de 	bl	8001658 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	08003971 	.word	0x08003971
 80034d0:	080039c3 	.word	0x080039c3
 80034d4:	08003aab 	.word	0x08003aab

080034d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d11d      	bne.n	800352e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_UART_Receive_DMA+0x26>
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e016      	b.n	8003530 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_UART_Receive_DMA+0x38>
 800350c:	2302      	movs	r3, #2
 800350e:	e00f      	b.n	8003530 <HAL_UART_Receive_DMA+0x58>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	461a      	mov	r2, r3
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fb55 	bl	8003bd4 <UART_Start_Receive_DMA>
 800352a:	4603      	mov	r3, r0
 800352c:	e000      	b.n	8003530 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d13c      	bne.n	80035cc <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e035      	b.n	80035ce <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800356c:	2302      	movs	r3, #2
 800356e:	e02e      	b.n	80035ce <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	461a      	mov	r2, r3
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb25 	bl	8003bd4 <UART_Start_Receive_DMA>
 800358a:	4603      	mov	r3, r0
 800358c:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d119      	bne.n	80035c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	d113      	bne.n	80035c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0210 	orr.w	r2, r2, #16
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e001      	b.n	80035c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	e000      	b.n	80035ce <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_UART_IRQHandler+0x52>
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fbf9 	bl	8003e1a <UART_Receive_IT>
      return;
 8003628:	e17c      	b.n	8003924 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80b1 	beq.w	8003794 <HAL_UART_IRQHandler+0x1bc>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <HAL_UART_IRQHandler+0x70>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80a6 	beq.w	8003794 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_UART_IRQHandler+0x90>
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_UART_IRQHandler+0xb0>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_UART_IRQHandler+0xd0>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0204 	orr.w	r2, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00f      	beq.n	80036d2 <HAL_UART_IRQHandler+0xfa>
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <HAL_UART_IRQHandler+0xee>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0208 	orr.w	r2, r3, #8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 811f 	beq.w	800391a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_UART_IRQHandler+0x11e>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fb92 	bl	8003e1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_UART_IRQHandler+0x146>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d031      	beq.n	8003782 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fad2 	bl	8003cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d123      	bne.n	800377a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003740:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	2b00      	cmp	r3, #0
 8003748:	d013      	beq.n	8003772 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	4a77      	ldr	r2, [pc, #476]	; (800392c <HAL_UART_IRQHandler+0x354>)
 8003750:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe f846 	bl	80017e8 <HAL_DMA_Abort_IT>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800376c:	4610      	mov	r0, r2
 800376e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00e      	b.n	8003790 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fab2 	bl	8000cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00a      	b.n	8003790 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd faae 	bl	8000cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e006      	b.n	8003790 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd faaa 	bl	8000cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800378e:	e0c4      	b.n	800391a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	bf00      	nop
    return;
 8003792:	e0c2      	b.n	800391a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 80a2 	bne.w	80038e2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 809c 	beq.w	80038e2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8096 	beq.w	80038e2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d14f      	bne.n	800387a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037e4:	8a3b      	ldrh	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8099 	beq.w	800391e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037f0:	8a3a      	ldrh	r2, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	f080 8093 	bcs.w	800391e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8a3a      	ldrh	r2, [r7, #16]
 80037fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003808:	d02b      	beq.n	8003862 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003818:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003838:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0210 	bic.w	r2, r2, #16
 8003856:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd ff53 	bl	8001708 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386a:	b29b      	uxth	r3, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	b29b      	uxth	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f870 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003878:	e051      	b.n	800391e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003882:	b29b      	uxth	r3, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d047      	beq.n	8003922 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003892:	8a7b      	ldrh	r3, [r7, #18]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d044      	beq.n	8003922 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038a6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0210 	bic.w	r2, r2, #16
 80038d4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038d6:	8a7b      	ldrh	r3, [r7, #18]
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f83c 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038e0:	e01f      	b.n	8003922 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_UART_IRQHandler+0x326>
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa27 	bl	8003d4a <UART_Transmit_IT>
    return;
 80038fc:	e012      	b.n	8003924 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <HAL_UART_IRQHandler+0x34c>
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa69 	bl	8003dea <UART_EndTransmit_IT>
    return;
 8003918:	e004      	b.n	8003924 <HAL_UART_IRQHandler+0x34c>
    return;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_UART_IRQHandler+0x34c>
      return;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_UART_IRQHandler+0x34c>
      return;
 8003922:	bf00      	nop
  }
}
 8003924:	3728      	adds	r7, #40	; 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	08003d23 	.word	0x08003d23

08003930 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d113      	bne.n	80039b4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039b2:	e002      	b.n	80039ba <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7fd f93d 	bl	8000c34 <HAL_UART_TxCpltCallback>
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7ff ffad 	bl	8003930 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d12a      	bne.n	8003a50 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff7a 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a64:	e002      	b.n	8003a6c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7fd f8fa 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff ff5f 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a9a:	e002      	b.n	8003aa2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff ff51 	bl	8003944 <HAL_UART_RxHalfCpltCallback>
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b21      	cmp	r3, #33	; 0x21
 8003adc:	d108      	bne.n	8003af0 <UART_DMAError+0x46>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003aea:	68b8      	ldr	r0, [r7, #8]
 8003aec:	f000 f8d6 	bl	8003c9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b22      	cmp	r3, #34	; 0x22
 8003b10:	d108      	bne.n	8003b24 <UART_DMAError+0x7a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b1e:	68b8      	ldr	r0, [r7, #8]
 8003b20:	f000 f8d2 	bl	8003cc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b30:	68b8      	ldr	r0, [r7, #8]
 8003b32:	f7fd f8d3 	bl	8000cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	e02c      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d028      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5e:	f7fd fbdf 	bl	8001320 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d21d      	bcs.n	8003baa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00f      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d0c3      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2222      	movs	r2, #34	; 0x22
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <UART_Start_Receive_DMA+0xbc>)
 8003c02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <UART_Start_Receive_DMA+0xc0>)
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <UART_Start_Receive_DMA+0xc4>)
 8003c12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	2200      	movs	r2, #0
 8003c1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c1c:	f107 0308 	add.w	r3, r7, #8
 8003c20:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f7fd fd10 	bl	8001658 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c84:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	080039df 	.word	0x080039df
 8003c94:	08003a75 	.word	0x08003a75
 8003c98:	08003aab 	.word	0x08003aab

08003c9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cb2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0210 	bic.w	r2, r2, #16
 8003d06:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7fc ffcd 	bl	8000cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b21      	cmp	r3, #33	; 0x21
 8003d5c:	d13e      	bne.n	8003ddc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d114      	bne.n	8003d92 <UART_Transmit_IT+0x48>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d110      	bne.n	8003d92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	1c9a      	adds	r2, r3, #2
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	621a      	str	r2, [r3, #32]
 8003d90:	e008      	b.n	8003da4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6211      	str	r1, [r2, #32]
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4619      	mov	r1, r3
 8003db2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10f      	bne.n	8003dd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fc ff12 	bl	8000c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b22      	cmp	r3, #34	; 0x22
 8003e2c:	f040 8087 	bne.w	8003f3e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d117      	bne.n	8003e6a <UART_Receive_IT+0x50>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
 8003e68:	e026      	b.n	8003eb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7c:	d007      	beq.n	8003e8e <UART_Receive_IT+0x74>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <UART_Receive_IT+0x82>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e008      	b.n	8003eae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d136      	bne.n	8003f3a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0220 	bic.w	r2, r2, #32
 8003eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10e      	bne.n	8003f2a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0210 	bic.w	r2, r2, #16
 8003f1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fd18 	bl	8003958 <HAL_UARTEx_RxEventCallback>
 8003f28:	e002      	b.n	8003f30 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fc fe98 	bl	8000c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e002      	b.n	8003f40 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	b09f      	sub	sp, #124	; 0x7c
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	68d9      	ldr	r1, [r3, #12]
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	ea40 0301 	orr.w	r3, r0, r1
 8003f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f8c:	f021 010c 	bic.w	r1, r1, #12
 8003f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f96:	430b      	orrs	r3, r1
 8003f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa6:	6999      	ldr	r1, [r3, #24]
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	ea40 0301 	orr.w	r3, r0, r1
 8003fb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4bc5      	ldr	r3, [pc, #788]	; (80042cc <UART_SetConfig+0x384>)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d004      	beq.n	8003fc6 <UART_SetConfig+0x7e>
 8003fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4bc3      	ldr	r3, [pc, #780]	; (80042d0 <UART_SetConfig+0x388>)
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d103      	bne.n	8003fce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fc6:	f7fe fd33 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8003fca:	6778      	str	r0, [r7, #116]	; 0x74
 8003fcc:	e002      	b.n	8003fd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fce:	f7fe fd1b 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8003fd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	f040 80b6 	bne.w	800414c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	f04f 0500 	mov.w	r5, #0
 8003fe8:	4622      	mov	r2, r4
 8003fea:	462b      	mov	r3, r5
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	6439      	str	r1, [r7, #64]	; 0x40
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ff8:	1912      	adds	r2, r2, r4
 8003ffa:	eb45 0303 	adc.w	r3, r5, r3
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	00d9      	lsls	r1, r3, #3
 8004008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800400c:	00d0      	lsls	r0, r2, #3
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	1911      	adds	r1, r2, r4
 8004014:	6639      	str	r1, [r7, #96]	; 0x60
 8004016:	416b      	adcs	r3, r5
 8004018:	667b      	str	r3, [r7, #100]	; 0x64
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	461a      	mov	r2, r3
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	1891      	adds	r1, r2, r2
 8004026:	63b9      	str	r1, [r7, #56]	; 0x38
 8004028:	415b      	adcs	r3, r3
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004030:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004034:	f7fc f934 	bl	80002a0 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4ba5      	ldr	r3, [pc, #660]	; (80042d4 <UART_SetConfig+0x38c>)
 800403e:	fba3 2302 	umull	r2, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	011e      	lsls	r6, r3, #4
 8004046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004048:	461c      	mov	r4, r3
 800404a:	f04f 0500 	mov.w	r5, #0
 800404e:	4622      	mov	r2, r4
 8004050:	462b      	mov	r3, r5
 8004052:	1891      	adds	r1, r2, r2
 8004054:	6339      	str	r1, [r7, #48]	; 0x30
 8004056:	415b      	adcs	r3, r3
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800405e:	1912      	adds	r2, r2, r4
 8004060:	eb45 0303 	adc.w	r3, r5, r3
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	00d9      	lsls	r1, r3, #3
 800406e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004072:	00d0      	lsls	r0, r2, #3
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	1911      	adds	r1, r2, r4
 800407a:	65b9      	str	r1, [r7, #88]	; 0x58
 800407c:	416b      	adcs	r3, r5
 800407e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	461a      	mov	r2, r3
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	1891      	adds	r1, r2, r2
 800408c:	62b9      	str	r1, [r7, #40]	; 0x28
 800408e:	415b      	adcs	r3, r3
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004096:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800409a:	f7fc f901 	bl	80002a0 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4b8c      	ldr	r3, [pc, #560]	; (80042d4 <UART_SetConfig+0x38c>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2164      	movs	r1, #100	; 0x64
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	3332      	adds	r3, #50	; 0x32
 80040b6:	4a87      	ldr	r2, [pc, #540]	; (80042d4 <UART_SetConfig+0x38c>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c4:	441e      	add	r6, r3
 80040c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c8:	4618      	mov	r0, r3
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	1894      	adds	r4, r2, r2
 80040d4:	623c      	str	r4, [r7, #32]
 80040d6:	415b      	adcs	r3, r3
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
 80040da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040de:	1812      	adds	r2, r2, r0
 80040e0:	eb41 0303 	adc.w	r3, r1, r3
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	f04f 0500 	mov.w	r5, #0
 80040ec:	00dd      	lsls	r5, r3, #3
 80040ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040f2:	00d4      	lsls	r4, r2, #3
 80040f4:	4622      	mov	r2, r4
 80040f6:	462b      	mov	r3, r5
 80040f8:	1814      	adds	r4, r2, r0
 80040fa:	653c      	str	r4, [r7, #80]	; 0x50
 80040fc:	414b      	adcs	r3, r1
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	461a      	mov	r2, r3
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	1891      	adds	r1, r2, r2
 800410c:	61b9      	str	r1, [r7, #24]
 800410e:	415b      	adcs	r3, r3
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004116:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800411a:	f7fc f8c1 	bl	80002a0 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <UART_SetConfig+0x38c>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	2164      	movs	r1, #100	; 0x64
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3332      	adds	r3, #50	; 0x32
 8004136:	4a67      	ldr	r2, [pc, #412]	; (80042d4 <UART_SetConfig+0x38c>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f003 0207 	and.w	r2, r3, #7
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4432      	add	r2, r6
 8004148:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800414a:	e0b9      	b.n	80042c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414e:	461c      	mov	r4, r3
 8004150:	f04f 0500 	mov.w	r5, #0
 8004154:	4622      	mov	r2, r4
 8004156:	462b      	mov	r3, r5
 8004158:	1891      	adds	r1, r2, r2
 800415a:	6139      	str	r1, [r7, #16]
 800415c:	415b      	adcs	r3, r3
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004164:	1912      	adds	r2, r2, r4
 8004166:	eb45 0303 	adc.w	r3, r5, r3
 800416a:	f04f 0000 	mov.w	r0, #0
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	00d9      	lsls	r1, r3, #3
 8004174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004178:	00d0      	lsls	r0, r2, #3
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	eb12 0804 	adds.w	r8, r2, r4
 8004182:	eb43 0905 	adc.w	r9, r3, r5
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	008b      	lsls	r3, r1, #2
 800419a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800419e:	0082      	lsls	r2, r0, #2
 80041a0:	4640      	mov	r0, r8
 80041a2:	4649      	mov	r1, r9
 80041a4:	f7fc f87c 	bl	80002a0 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <UART_SetConfig+0x38c>)
 80041ae:	fba3 2302 	umull	r2, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	011e      	lsls	r6, r3, #4
 80041b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b8:	4618      	mov	r0, r3
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	1894      	adds	r4, r2, r2
 80041c4:	60bc      	str	r4, [r7, #8]
 80041c6:	415b      	adcs	r3, r3
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ce:	1812      	adds	r2, r2, r0
 80041d0:	eb41 0303 	adc.w	r3, r1, r3
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	f04f 0500 	mov.w	r5, #0
 80041dc:	00dd      	lsls	r5, r3, #3
 80041de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041e2:	00d4      	lsls	r4, r2, #3
 80041e4:	4622      	mov	r2, r4
 80041e6:	462b      	mov	r3, r5
 80041e8:	1814      	adds	r4, r2, r0
 80041ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80041ec:	414b      	adcs	r3, r1
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004208:	0082      	lsls	r2, r0, #2
 800420a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800420e:	f7fc f847 	bl	80002a0 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <UART_SetConfig+0x38c>)
 8004218:	fba3 1302 	umull	r1, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	2164      	movs	r1, #100	; 0x64
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	3332      	adds	r3, #50	; 0x32
 800422a:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <UART_SetConfig+0x38c>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004236:	441e      	add	r6, r3
 8004238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423a:	4618      	mov	r0, r3
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	1894      	adds	r4, r2, r2
 8004246:	603c      	str	r4, [r7, #0]
 8004248:	415b      	adcs	r3, r3
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004250:	1812      	adds	r2, r2, r0
 8004252:	eb41 0303 	adc.w	r3, r1, r3
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	f04f 0500 	mov.w	r5, #0
 800425e:	00dd      	lsls	r5, r3, #3
 8004260:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004264:	00d4      	lsls	r4, r2, #3
 8004266:	4622      	mov	r2, r4
 8004268:	462b      	mov	r3, r5
 800426a:	eb12 0a00 	adds.w	sl, r2, r0
 800426e:	eb43 0b01 	adc.w	fp, r3, r1
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	008b      	lsls	r3, r1, #2
 8004286:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800428a:	0082      	lsls	r2, r0, #2
 800428c:	4650      	mov	r0, sl
 800428e:	4659      	mov	r1, fp
 8004290:	f7fc f806 	bl	80002a0 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <UART_SetConfig+0x38c>)
 800429a:	fba3 1302 	umull	r1, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2164      	movs	r1, #100	; 0x64
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	3332      	adds	r3, #50	; 0x32
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <UART_SetConfig+0x38c>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4432      	add	r2, r6
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	377c      	adds	r7, #124	; 0x7c
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40011000 	.word	0x40011000
 80042d0:	40011400 	.word	0x40011400
 80042d4:	51eb851f 	.word	0x51eb851f

080042d8 <__errno>:
 80042d8:	4b01      	ldr	r3, [pc, #4]	; (80042e0 <__errno+0x8>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	2000002c 	.word	0x2000002c

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f001 f9be 	bl	8005678 <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08005944 	.word	0x08005944
 8004320:	08005944 	.word	0x08005944
 8004324:	08005944 	.word	0x08005944
 8004328:	08005948 	.word	0x08005948

0800432c <memcpy>:
 800432c:	440a      	add	r2, r1
 800432e:	4291      	cmp	r1, r2
 8004330:	f100 33ff 	add.w	r3, r0, #4294967295
 8004334:	d100      	bne.n	8004338 <memcpy+0xc>
 8004336:	4770      	bx	lr
 8004338:	b510      	push	{r4, lr}
 800433a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800433e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004342:	4291      	cmp	r1, r2
 8004344:	d1f9      	bne.n	800433a <memcpy+0xe>
 8004346:	bd10      	pop	{r4, pc}

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <iprintf>:
 8004358:	b40f      	push	{r0, r1, r2, r3}
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <iprintf+0x2c>)
 800435c:	b513      	push	{r0, r1, r4, lr}
 800435e:	681c      	ldr	r4, [r3, #0]
 8004360:	b124      	cbz	r4, 800436c <iprintf+0x14>
 8004362:	69a3      	ldr	r3, [r4, #24]
 8004364:	b913      	cbnz	r3, 800436c <iprintf+0x14>
 8004366:	4620      	mov	r0, r4
 8004368:	f000 fa7e 	bl	8004868 <__sinit>
 800436c:	ab05      	add	r3, sp, #20
 800436e:	9a04      	ldr	r2, [sp, #16]
 8004370:	68a1      	ldr	r1, [r4, #8]
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	4620      	mov	r0, r4
 8004376:	f000 fdab 	bl	8004ed0 <_vfiprintf_r>
 800437a:	b002      	add	sp, #8
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	b004      	add	sp, #16
 8004382:	4770      	bx	lr
 8004384:	2000002c 	.word	0x2000002c

08004388 <_puts_r>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	460e      	mov	r6, r1
 800438c:	4605      	mov	r5, r0
 800438e:	b118      	cbz	r0, 8004398 <_puts_r+0x10>
 8004390:	6983      	ldr	r3, [r0, #24]
 8004392:	b90b      	cbnz	r3, 8004398 <_puts_r+0x10>
 8004394:	f000 fa68 	bl	8004868 <__sinit>
 8004398:	69ab      	ldr	r3, [r5, #24]
 800439a:	68ac      	ldr	r4, [r5, #8]
 800439c:	b913      	cbnz	r3, 80043a4 <_puts_r+0x1c>
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 fa62 	bl	8004868 <__sinit>
 80043a4:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <_puts_r+0xd0>)
 80043a6:	429c      	cmp	r4, r3
 80043a8:	d120      	bne.n	80043ec <_puts_r+0x64>
 80043aa:	686c      	ldr	r4, [r5, #4]
 80043ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ae:	07db      	lsls	r3, r3, #31
 80043b0:	d405      	bmi.n	80043be <_puts_r+0x36>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	0598      	lsls	r0, r3, #22
 80043b6:	d402      	bmi.n	80043be <_puts_r+0x36>
 80043b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ba:	f000 faf3 	bl	80049a4 <__retarget_lock_acquire_recursive>
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	0719      	lsls	r1, r3, #28
 80043c2:	d51d      	bpl.n	8004400 <_puts_r+0x78>
 80043c4:	6923      	ldr	r3, [r4, #16]
 80043c6:	b1db      	cbz	r3, 8004400 <_puts_r+0x78>
 80043c8:	3e01      	subs	r6, #1
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043d0:	3b01      	subs	r3, #1
 80043d2:	60a3      	str	r3, [r4, #8]
 80043d4:	bb39      	cbnz	r1, 8004426 <_puts_r+0x9e>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da38      	bge.n	800444c <_puts_r+0xc4>
 80043da:	4622      	mov	r2, r4
 80043dc:	210a      	movs	r1, #10
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 f868 	bl	80044b4 <__swbuf_r>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d011      	beq.n	800440c <_puts_r+0x84>
 80043e8:	250a      	movs	r5, #10
 80043ea:	e011      	b.n	8004410 <_puts_r+0x88>
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <_puts_r+0xd4>)
 80043ee:	429c      	cmp	r4, r3
 80043f0:	d101      	bne.n	80043f6 <_puts_r+0x6e>
 80043f2:	68ac      	ldr	r4, [r5, #8]
 80043f4:	e7da      	b.n	80043ac <_puts_r+0x24>
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <_puts_r+0xd8>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	bf08      	it	eq
 80043fc:	68ec      	ldreq	r4, [r5, #12]
 80043fe:	e7d5      	b.n	80043ac <_puts_r+0x24>
 8004400:	4621      	mov	r1, r4
 8004402:	4628      	mov	r0, r5
 8004404:	f000 f8a8 	bl	8004558 <__swsetup_r>
 8004408:	2800      	cmp	r0, #0
 800440a:	d0dd      	beq.n	80043c8 <_puts_r+0x40>
 800440c:	f04f 35ff 	mov.w	r5, #4294967295
 8004410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004412:	07da      	lsls	r2, r3, #31
 8004414:	d405      	bmi.n	8004422 <_puts_r+0x9a>
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	059b      	lsls	r3, r3, #22
 800441a:	d402      	bmi.n	8004422 <_puts_r+0x9a>
 800441c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800441e:	f000 fac2 	bl	80049a6 <__retarget_lock_release_recursive>
 8004422:	4628      	mov	r0, r5
 8004424:	bd70      	pop	{r4, r5, r6, pc}
 8004426:	2b00      	cmp	r3, #0
 8004428:	da04      	bge.n	8004434 <_puts_r+0xac>
 800442a:	69a2      	ldr	r2, [r4, #24]
 800442c:	429a      	cmp	r2, r3
 800442e:	dc06      	bgt.n	800443e <_puts_r+0xb6>
 8004430:	290a      	cmp	r1, #10
 8004432:	d004      	beq.n	800443e <_puts_r+0xb6>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	6022      	str	r2, [r4, #0]
 800443a:	7019      	strb	r1, [r3, #0]
 800443c:	e7c5      	b.n	80043ca <_puts_r+0x42>
 800443e:	4622      	mov	r2, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f837 	bl	80044b4 <__swbuf_r>
 8004446:	3001      	adds	r0, #1
 8004448:	d1bf      	bne.n	80043ca <_puts_r+0x42>
 800444a:	e7df      	b.n	800440c <_puts_r+0x84>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	250a      	movs	r5, #10
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	6022      	str	r2, [r4, #0]
 8004454:	701d      	strb	r5, [r3, #0]
 8004456:	e7db      	b.n	8004410 <_puts_r+0x88>
 8004458:	080058c8 	.word	0x080058c8
 800445c:	080058e8 	.word	0x080058e8
 8004460:	080058a8 	.word	0x080058a8

08004464 <puts>:
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <puts+0xc>)
 8004466:	4601      	mov	r1, r0
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f7ff bf8d 	b.w	8004388 <_puts_r>
 800446e:	bf00      	nop
 8004470:	2000002c 	.word	0x2000002c

08004474 <siprintf>:
 8004474:	b40e      	push	{r1, r2, r3}
 8004476:	b500      	push	{lr}
 8004478:	b09c      	sub	sp, #112	; 0x70
 800447a:	ab1d      	add	r3, sp, #116	; 0x74
 800447c:	9002      	str	r0, [sp, #8]
 800447e:	9006      	str	r0, [sp, #24]
 8004480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004484:	4809      	ldr	r0, [pc, #36]	; (80044ac <siprintf+0x38>)
 8004486:	9107      	str	r1, [sp, #28]
 8004488:	9104      	str	r1, [sp, #16]
 800448a:	4909      	ldr	r1, [pc, #36]	; (80044b0 <siprintf+0x3c>)
 800448c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004490:	9105      	str	r1, [sp, #20]
 8004492:	6800      	ldr	r0, [r0, #0]
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	a902      	add	r1, sp, #8
 8004498:	f000 fbf0 	bl	8004c7c <_svfiprintf_r>
 800449c:	9b02      	ldr	r3, [sp, #8]
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	b01c      	add	sp, #112	; 0x70
 80044a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a8:	b003      	add	sp, #12
 80044aa:	4770      	bx	lr
 80044ac:	2000002c 	.word	0x2000002c
 80044b0:	ffff0208 	.word	0xffff0208

080044b4 <__swbuf_r>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	460e      	mov	r6, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	4605      	mov	r5, r0
 80044bc:	b118      	cbz	r0, 80044c6 <__swbuf_r+0x12>
 80044be:	6983      	ldr	r3, [r0, #24]
 80044c0:	b90b      	cbnz	r3, 80044c6 <__swbuf_r+0x12>
 80044c2:	f000 f9d1 	bl	8004868 <__sinit>
 80044c6:	4b21      	ldr	r3, [pc, #132]	; (800454c <__swbuf_r+0x98>)
 80044c8:	429c      	cmp	r4, r3
 80044ca:	d12b      	bne.n	8004524 <__swbuf_r+0x70>
 80044cc:	686c      	ldr	r4, [r5, #4]
 80044ce:	69a3      	ldr	r3, [r4, #24]
 80044d0:	60a3      	str	r3, [r4, #8]
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	071a      	lsls	r2, r3, #28
 80044d6:	d52f      	bpl.n	8004538 <__swbuf_r+0x84>
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	b36b      	cbz	r3, 8004538 <__swbuf_r+0x84>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1ac0      	subs	r0, r0, r3
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	b2f6      	uxtb	r6, r6
 80044e6:	4283      	cmp	r3, r0
 80044e8:	4637      	mov	r7, r6
 80044ea:	dc04      	bgt.n	80044f6 <__swbuf_r+0x42>
 80044ec:	4621      	mov	r1, r4
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 f926 	bl	8004740 <_fflush_r>
 80044f4:	bb30      	cbnz	r0, 8004544 <__swbuf_r+0x90>
 80044f6:	68a3      	ldr	r3, [r4, #8]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	701e      	strb	r6, [r3, #0]
 8004504:	6963      	ldr	r3, [r4, #20]
 8004506:	3001      	adds	r0, #1
 8004508:	4283      	cmp	r3, r0
 800450a:	d004      	beq.n	8004516 <__swbuf_r+0x62>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d506      	bpl.n	8004520 <__swbuf_r+0x6c>
 8004512:	2e0a      	cmp	r6, #10
 8004514:	d104      	bne.n	8004520 <__swbuf_r+0x6c>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f911 	bl	8004740 <_fflush_r>
 800451e:	b988      	cbnz	r0, 8004544 <__swbuf_r+0x90>
 8004520:	4638      	mov	r0, r7
 8004522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <__swbuf_r+0x9c>)
 8004526:	429c      	cmp	r4, r3
 8004528:	d101      	bne.n	800452e <__swbuf_r+0x7a>
 800452a:	68ac      	ldr	r4, [r5, #8]
 800452c:	e7cf      	b.n	80044ce <__swbuf_r+0x1a>
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <__swbuf_r+0xa0>)
 8004530:	429c      	cmp	r4, r3
 8004532:	bf08      	it	eq
 8004534:	68ec      	ldreq	r4, [r5, #12]
 8004536:	e7ca      	b.n	80044ce <__swbuf_r+0x1a>
 8004538:	4621      	mov	r1, r4
 800453a:	4628      	mov	r0, r5
 800453c:	f000 f80c 	bl	8004558 <__swsetup_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	d0cb      	beq.n	80044dc <__swbuf_r+0x28>
 8004544:	f04f 37ff 	mov.w	r7, #4294967295
 8004548:	e7ea      	b.n	8004520 <__swbuf_r+0x6c>
 800454a:	bf00      	nop
 800454c:	080058c8 	.word	0x080058c8
 8004550:	080058e8 	.word	0x080058e8
 8004554:	080058a8 	.word	0x080058a8

08004558 <__swsetup_r>:
 8004558:	4b32      	ldr	r3, [pc, #200]	; (8004624 <__swsetup_r+0xcc>)
 800455a:	b570      	push	{r4, r5, r6, lr}
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	4606      	mov	r6, r0
 8004560:	460c      	mov	r4, r1
 8004562:	b125      	cbz	r5, 800456e <__swsetup_r+0x16>
 8004564:	69ab      	ldr	r3, [r5, #24]
 8004566:	b913      	cbnz	r3, 800456e <__swsetup_r+0x16>
 8004568:	4628      	mov	r0, r5
 800456a:	f000 f97d 	bl	8004868 <__sinit>
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <__swsetup_r+0xd0>)
 8004570:	429c      	cmp	r4, r3
 8004572:	d10f      	bne.n	8004594 <__swsetup_r+0x3c>
 8004574:	686c      	ldr	r4, [r5, #4]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800457c:	0719      	lsls	r1, r3, #28
 800457e:	d42c      	bmi.n	80045da <__swsetup_r+0x82>
 8004580:	06dd      	lsls	r5, r3, #27
 8004582:	d411      	bmi.n	80045a8 <__swsetup_r+0x50>
 8004584:	2309      	movs	r3, #9
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	f04f 30ff 	mov.w	r0, #4294967295
 8004592:	e03e      	b.n	8004612 <__swsetup_r+0xba>
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <__swsetup_r+0xd4>)
 8004596:	429c      	cmp	r4, r3
 8004598:	d101      	bne.n	800459e <__swsetup_r+0x46>
 800459a:	68ac      	ldr	r4, [r5, #8]
 800459c:	e7eb      	b.n	8004576 <__swsetup_r+0x1e>
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <__swsetup_r+0xd8>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	bf08      	it	eq
 80045a4:	68ec      	ldreq	r4, [r5, #12]
 80045a6:	e7e6      	b.n	8004576 <__swsetup_r+0x1e>
 80045a8:	0758      	lsls	r0, r3, #29
 80045aa:	d512      	bpl.n	80045d2 <__swsetup_r+0x7a>
 80045ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ae:	b141      	cbz	r1, 80045c2 <__swsetup_r+0x6a>
 80045b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d002      	beq.n	80045be <__swsetup_r+0x66>
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 fa59 	bl	8004a70 <_free_r>
 80045be:	2300      	movs	r3, #0
 80045c0:	6363      	str	r3, [r4, #52]	; 0x34
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	2300      	movs	r3, #0
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	b94b      	cbnz	r3, 80045f2 <__swsetup_r+0x9a>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d003      	beq.n	80045f2 <__swsetup_r+0x9a>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4630      	mov	r0, r6
 80045ee:	f000 f9ff 	bl	80049f0 <__smakebuf_r>
 80045f2:	89a0      	ldrh	r0, [r4, #12]
 80045f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045f8:	f010 0301 	ands.w	r3, r0, #1
 80045fc:	d00a      	beq.n	8004614 <__swsetup_r+0xbc>
 80045fe:	2300      	movs	r3, #0
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	6963      	ldr	r3, [r4, #20]
 8004604:	425b      	negs	r3, r3
 8004606:	61a3      	str	r3, [r4, #24]
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	b943      	cbnz	r3, 800461e <__swsetup_r+0xc6>
 800460c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004610:	d1ba      	bne.n	8004588 <__swsetup_r+0x30>
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	0781      	lsls	r1, r0, #30
 8004616:	bf58      	it	pl
 8004618:	6963      	ldrpl	r3, [r4, #20]
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	e7f4      	b.n	8004608 <__swsetup_r+0xb0>
 800461e:	2000      	movs	r0, #0
 8004620:	e7f7      	b.n	8004612 <__swsetup_r+0xba>
 8004622:	bf00      	nop
 8004624:	2000002c 	.word	0x2000002c
 8004628:	080058c8 	.word	0x080058c8
 800462c:	080058e8 	.word	0x080058e8
 8004630:	080058a8 	.word	0x080058a8

08004634 <__sflush_r>:
 8004634:	898a      	ldrh	r2, [r1, #12]
 8004636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	4605      	mov	r5, r0
 800463c:	0710      	lsls	r0, r2, #28
 800463e:	460c      	mov	r4, r1
 8004640:	d458      	bmi.n	80046f4 <__sflush_r+0xc0>
 8004642:	684b      	ldr	r3, [r1, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	dc05      	bgt.n	8004654 <__sflush_r+0x20>
 8004648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	dc02      	bgt.n	8004654 <__sflush_r+0x20>
 800464e:	2000      	movs	r0, #0
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004656:	2e00      	cmp	r6, #0
 8004658:	d0f9      	beq.n	800464e <__sflush_r+0x1a>
 800465a:	2300      	movs	r3, #0
 800465c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004660:	682f      	ldr	r7, [r5, #0]
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	d032      	beq.n	80046cc <__sflush_r+0x98>
 8004666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	075a      	lsls	r2, r3, #29
 800466c:	d505      	bpl.n	800467a <__sflush_r+0x46>
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	1ac0      	subs	r0, r0, r3
 8004672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004674:	b10b      	cbz	r3, 800467a <__sflush_r+0x46>
 8004676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004678:	1ac0      	subs	r0, r0, r3
 800467a:	2300      	movs	r3, #0
 800467c:	4602      	mov	r2, r0
 800467e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004680:	6a21      	ldr	r1, [r4, #32]
 8004682:	4628      	mov	r0, r5
 8004684:	47b0      	blx	r6
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	d106      	bne.n	800469a <__sflush_r+0x66>
 800468c:	6829      	ldr	r1, [r5, #0]
 800468e:	291d      	cmp	r1, #29
 8004690:	d82c      	bhi.n	80046ec <__sflush_r+0xb8>
 8004692:	4a2a      	ldr	r2, [pc, #168]	; (800473c <__sflush_r+0x108>)
 8004694:	40ca      	lsrs	r2, r1
 8004696:	07d6      	lsls	r6, r2, #31
 8004698:	d528      	bpl.n	80046ec <__sflush_r+0xb8>
 800469a:	2200      	movs	r2, #0
 800469c:	6062      	str	r2, [r4, #4]
 800469e:	04d9      	lsls	r1, r3, #19
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	6022      	str	r2, [r4, #0]
 80046a4:	d504      	bpl.n	80046b0 <__sflush_r+0x7c>
 80046a6:	1c42      	adds	r2, r0, #1
 80046a8:	d101      	bne.n	80046ae <__sflush_r+0x7a>
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	b903      	cbnz	r3, 80046b0 <__sflush_r+0x7c>
 80046ae:	6560      	str	r0, [r4, #84]	; 0x54
 80046b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b2:	602f      	str	r7, [r5, #0]
 80046b4:	2900      	cmp	r1, #0
 80046b6:	d0ca      	beq.n	800464e <__sflush_r+0x1a>
 80046b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046bc:	4299      	cmp	r1, r3
 80046be:	d002      	beq.n	80046c6 <__sflush_r+0x92>
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 f9d5 	bl	8004a70 <_free_r>
 80046c6:	2000      	movs	r0, #0
 80046c8:	6360      	str	r0, [r4, #52]	; 0x34
 80046ca:	e7c1      	b.n	8004650 <__sflush_r+0x1c>
 80046cc:	6a21      	ldr	r1, [r4, #32]
 80046ce:	2301      	movs	r3, #1
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b0      	blx	r6
 80046d4:	1c41      	adds	r1, r0, #1
 80046d6:	d1c7      	bne.n	8004668 <__sflush_r+0x34>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0c4      	beq.n	8004668 <__sflush_r+0x34>
 80046de:	2b1d      	cmp	r3, #29
 80046e0:	d001      	beq.n	80046e6 <__sflush_r+0xb2>
 80046e2:	2b16      	cmp	r3, #22
 80046e4:	d101      	bne.n	80046ea <__sflush_r+0xb6>
 80046e6:	602f      	str	r7, [r5, #0]
 80046e8:	e7b1      	b.n	800464e <__sflush_r+0x1a>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	e7ad      	b.n	8004650 <__sflush_r+0x1c>
 80046f4:	690f      	ldr	r7, [r1, #16]
 80046f6:	2f00      	cmp	r7, #0
 80046f8:	d0a9      	beq.n	800464e <__sflush_r+0x1a>
 80046fa:	0793      	lsls	r3, r2, #30
 80046fc:	680e      	ldr	r6, [r1, #0]
 80046fe:	bf08      	it	eq
 8004700:	694b      	ldreq	r3, [r1, #20]
 8004702:	600f      	str	r7, [r1, #0]
 8004704:	bf18      	it	ne
 8004706:	2300      	movne	r3, #0
 8004708:	eba6 0807 	sub.w	r8, r6, r7
 800470c:	608b      	str	r3, [r1, #8]
 800470e:	f1b8 0f00 	cmp.w	r8, #0
 8004712:	dd9c      	ble.n	800464e <__sflush_r+0x1a>
 8004714:	6a21      	ldr	r1, [r4, #32]
 8004716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004718:	4643      	mov	r3, r8
 800471a:	463a      	mov	r2, r7
 800471c:	4628      	mov	r0, r5
 800471e:	47b0      	blx	r6
 8004720:	2800      	cmp	r0, #0
 8004722:	dc06      	bgt.n	8004732 <__sflush_r+0xfe>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	e78e      	b.n	8004650 <__sflush_r+0x1c>
 8004732:	4407      	add	r7, r0
 8004734:	eba8 0800 	sub.w	r8, r8, r0
 8004738:	e7e9      	b.n	800470e <__sflush_r+0xda>
 800473a:	bf00      	nop
 800473c:	20400001 	.word	0x20400001

08004740 <_fflush_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	690b      	ldr	r3, [r1, #16]
 8004744:	4605      	mov	r5, r0
 8004746:	460c      	mov	r4, r1
 8004748:	b913      	cbnz	r3, 8004750 <_fflush_r+0x10>
 800474a:	2500      	movs	r5, #0
 800474c:	4628      	mov	r0, r5
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	b118      	cbz	r0, 800475a <_fflush_r+0x1a>
 8004752:	6983      	ldr	r3, [r0, #24]
 8004754:	b90b      	cbnz	r3, 800475a <_fflush_r+0x1a>
 8004756:	f000 f887 	bl	8004868 <__sinit>
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <_fflush_r+0x6c>)
 800475c:	429c      	cmp	r4, r3
 800475e:	d11b      	bne.n	8004798 <_fflush_r+0x58>
 8004760:	686c      	ldr	r4, [r5, #4]
 8004762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ef      	beq.n	800474a <_fflush_r+0xa>
 800476a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800476c:	07d0      	lsls	r0, r2, #31
 800476e:	d404      	bmi.n	800477a <_fflush_r+0x3a>
 8004770:	0599      	lsls	r1, r3, #22
 8004772:	d402      	bmi.n	800477a <_fflush_r+0x3a>
 8004774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004776:	f000 f915 	bl	80049a4 <__retarget_lock_acquire_recursive>
 800477a:	4628      	mov	r0, r5
 800477c:	4621      	mov	r1, r4
 800477e:	f7ff ff59 	bl	8004634 <__sflush_r>
 8004782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004784:	07da      	lsls	r2, r3, #31
 8004786:	4605      	mov	r5, r0
 8004788:	d4e0      	bmi.n	800474c <_fflush_r+0xc>
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	059b      	lsls	r3, r3, #22
 800478e:	d4dd      	bmi.n	800474c <_fflush_r+0xc>
 8004790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004792:	f000 f908 	bl	80049a6 <__retarget_lock_release_recursive>
 8004796:	e7d9      	b.n	800474c <_fflush_r+0xc>
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <_fflush_r+0x70>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <_fflush_r+0x62>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7df      	b.n	8004762 <_fflush_r+0x22>
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <_fflush_r+0x74>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7da      	b.n	8004762 <_fflush_r+0x22>
 80047ac:	080058c8 	.word	0x080058c8
 80047b0:	080058e8 	.word	0x080058e8
 80047b4:	080058a8 	.word	0x080058a8

080047b8 <std>:
 80047b8:	2300      	movs	r3, #0
 80047ba:	b510      	push	{r4, lr}
 80047bc:	4604      	mov	r4, r0
 80047be:	e9c0 3300 	strd	r3, r3, [r0]
 80047c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047c6:	6083      	str	r3, [r0, #8]
 80047c8:	8181      	strh	r1, [r0, #12]
 80047ca:	6643      	str	r3, [r0, #100]	; 0x64
 80047cc:	81c2      	strh	r2, [r0, #14]
 80047ce:	6183      	str	r3, [r0, #24]
 80047d0:	4619      	mov	r1, r3
 80047d2:	2208      	movs	r2, #8
 80047d4:	305c      	adds	r0, #92	; 0x5c
 80047d6:	f7ff fdb7 	bl	8004348 <memset>
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <std+0x38>)
 80047dc:	6263      	str	r3, [r4, #36]	; 0x24
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <std+0x3c>)
 80047e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <std+0x40>)
 80047e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <std+0x44>)
 80047e8:	6224      	str	r4, [r4, #32]
 80047ea:	6323      	str	r3, [r4, #48]	; 0x30
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	bf00      	nop
 80047f0:	08005479 	.word	0x08005479
 80047f4:	0800549b 	.word	0x0800549b
 80047f8:	080054d3 	.word	0x080054d3
 80047fc:	080054f7 	.word	0x080054f7

08004800 <_cleanup_r>:
 8004800:	4901      	ldr	r1, [pc, #4]	; (8004808 <_cleanup_r+0x8>)
 8004802:	f000 b8af 	b.w	8004964 <_fwalk_reent>
 8004806:	bf00      	nop
 8004808:	08004741 	.word	0x08004741

0800480c <__sfmoreglue>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	1e4a      	subs	r2, r1, #1
 8004810:	2568      	movs	r5, #104	; 0x68
 8004812:	4355      	muls	r5, r2
 8004814:	460e      	mov	r6, r1
 8004816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800481a:	f000 f979 	bl	8004b10 <_malloc_r>
 800481e:	4604      	mov	r4, r0
 8004820:	b140      	cbz	r0, 8004834 <__sfmoreglue+0x28>
 8004822:	2100      	movs	r1, #0
 8004824:	e9c0 1600 	strd	r1, r6, [r0]
 8004828:	300c      	adds	r0, #12
 800482a:	60a0      	str	r0, [r4, #8]
 800482c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004830:	f7ff fd8a 	bl	8004348 <memset>
 8004834:	4620      	mov	r0, r4
 8004836:	bd70      	pop	{r4, r5, r6, pc}

08004838 <__sfp_lock_acquire>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__sfp_lock_acquire+0x8>)
 800483a:	f000 b8b3 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 800483e:	bf00      	nop
 8004840:	20000320 	.word	0x20000320

08004844 <__sfp_lock_release>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__sfp_lock_release+0x8>)
 8004846:	f000 b8ae 	b.w	80049a6 <__retarget_lock_release_recursive>
 800484a:	bf00      	nop
 800484c:	20000320 	.word	0x20000320

08004850 <__sinit_lock_acquire>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__sinit_lock_acquire+0x8>)
 8004852:	f000 b8a7 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	2000031b 	.word	0x2000031b

0800485c <__sinit_lock_release>:
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <__sinit_lock_release+0x8>)
 800485e:	f000 b8a2 	b.w	80049a6 <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	2000031b 	.word	0x2000031b

08004868 <__sinit>:
 8004868:	b510      	push	{r4, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	f7ff fff0 	bl	8004850 <__sinit_lock_acquire>
 8004870:	69a3      	ldr	r3, [r4, #24]
 8004872:	b11b      	cbz	r3, 800487c <__sinit+0x14>
 8004874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004878:	f7ff bff0 	b.w	800485c <__sinit_lock_release>
 800487c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004880:	6523      	str	r3, [r4, #80]	; 0x50
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <__sinit+0x68>)
 8004884:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <__sinit+0x6c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	62a2      	str	r2, [r4, #40]	; 0x28
 800488a:	42a3      	cmp	r3, r4
 800488c:	bf04      	itt	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	61a3      	streq	r3, [r4, #24]
 8004892:	4620      	mov	r0, r4
 8004894:	f000 f820 	bl	80048d8 <__sfp>
 8004898:	6060      	str	r0, [r4, #4]
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f81c 	bl	80048d8 <__sfp>
 80048a0:	60a0      	str	r0, [r4, #8]
 80048a2:	4620      	mov	r0, r4
 80048a4:	f000 f818 	bl	80048d8 <__sfp>
 80048a8:	2200      	movs	r2, #0
 80048aa:	60e0      	str	r0, [r4, #12]
 80048ac:	2104      	movs	r1, #4
 80048ae:	6860      	ldr	r0, [r4, #4]
 80048b0:	f7ff ff82 	bl	80047b8 <std>
 80048b4:	68a0      	ldr	r0, [r4, #8]
 80048b6:	2201      	movs	r2, #1
 80048b8:	2109      	movs	r1, #9
 80048ba:	f7ff ff7d 	bl	80047b8 <std>
 80048be:	68e0      	ldr	r0, [r4, #12]
 80048c0:	2202      	movs	r2, #2
 80048c2:	2112      	movs	r1, #18
 80048c4:	f7ff ff78 	bl	80047b8 <std>
 80048c8:	2301      	movs	r3, #1
 80048ca:	61a3      	str	r3, [r4, #24]
 80048cc:	e7d2      	b.n	8004874 <__sinit+0xc>
 80048ce:	bf00      	nop
 80048d0:	080058a4 	.word	0x080058a4
 80048d4:	08004801 	.word	0x08004801

080048d8 <__sfp>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	4607      	mov	r7, r0
 80048dc:	f7ff ffac 	bl	8004838 <__sfp_lock_acquire>
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <__sfp+0x84>)
 80048e2:	681e      	ldr	r6, [r3, #0]
 80048e4:	69b3      	ldr	r3, [r6, #24]
 80048e6:	b913      	cbnz	r3, 80048ee <__sfp+0x16>
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7ff ffbd 	bl	8004868 <__sinit>
 80048ee:	3648      	adds	r6, #72	; 0x48
 80048f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	d503      	bpl.n	8004900 <__sfp+0x28>
 80048f8:	6833      	ldr	r3, [r6, #0]
 80048fa:	b30b      	cbz	r3, 8004940 <__sfp+0x68>
 80048fc:	6836      	ldr	r6, [r6, #0]
 80048fe:	e7f7      	b.n	80048f0 <__sfp+0x18>
 8004900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004904:	b9d5      	cbnz	r5, 800493c <__sfp+0x64>
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <__sfp+0x88>)
 8004908:	60e3      	str	r3, [r4, #12]
 800490a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800490e:	6665      	str	r5, [r4, #100]	; 0x64
 8004910:	f000 f847 	bl	80049a2 <__retarget_lock_init_recursive>
 8004914:	f7ff ff96 	bl	8004844 <__sfp_lock_release>
 8004918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800491c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004920:	6025      	str	r5, [r4, #0]
 8004922:	61a5      	str	r5, [r4, #24]
 8004924:	2208      	movs	r2, #8
 8004926:	4629      	mov	r1, r5
 8004928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800492c:	f7ff fd0c 	bl	8004348 <memset>
 8004930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004938:	4620      	mov	r0, r4
 800493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800493c:	3468      	adds	r4, #104	; 0x68
 800493e:	e7d9      	b.n	80048f4 <__sfp+0x1c>
 8004940:	2104      	movs	r1, #4
 8004942:	4638      	mov	r0, r7
 8004944:	f7ff ff62 	bl	800480c <__sfmoreglue>
 8004948:	4604      	mov	r4, r0
 800494a:	6030      	str	r0, [r6, #0]
 800494c:	2800      	cmp	r0, #0
 800494e:	d1d5      	bne.n	80048fc <__sfp+0x24>
 8004950:	f7ff ff78 	bl	8004844 <__sfp_lock_release>
 8004954:	230c      	movs	r3, #12
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	e7ee      	b.n	8004938 <__sfp+0x60>
 800495a:	bf00      	nop
 800495c:	080058a4 	.word	0x080058a4
 8004960:	ffff0001 	.word	0xffff0001

08004964 <_fwalk_reent>:
 8004964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004968:	4606      	mov	r6, r0
 800496a:	4688      	mov	r8, r1
 800496c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004970:	2700      	movs	r7, #0
 8004972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004976:	f1b9 0901 	subs.w	r9, r9, #1
 800497a:	d505      	bpl.n	8004988 <_fwalk_reent+0x24>
 800497c:	6824      	ldr	r4, [r4, #0]
 800497e:	2c00      	cmp	r4, #0
 8004980:	d1f7      	bne.n	8004972 <_fwalk_reent+0xe>
 8004982:	4638      	mov	r0, r7
 8004984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004988:	89ab      	ldrh	r3, [r5, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d907      	bls.n	800499e <_fwalk_reent+0x3a>
 800498e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004992:	3301      	adds	r3, #1
 8004994:	d003      	beq.n	800499e <_fwalk_reent+0x3a>
 8004996:	4629      	mov	r1, r5
 8004998:	4630      	mov	r0, r6
 800499a:	47c0      	blx	r8
 800499c:	4307      	orrs	r7, r0
 800499e:	3568      	adds	r5, #104	; 0x68
 80049a0:	e7e9      	b.n	8004976 <_fwalk_reent+0x12>

080049a2 <__retarget_lock_init_recursive>:
 80049a2:	4770      	bx	lr

080049a4 <__retarget_lock_acquire_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_release_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <__swhatbuf_r>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	460e      	mov	r6, r1
 80049ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b0:	2900      	cmp	r1, #0
 80049b2:	b096      	sub	sp, #88	; 0x58
 80049b4:	4614      	mov	r4, r2
 80049b6:	461d      	mov	r5, r3
 80049b8:	da07      	bge.n	80049ca <__swhatbuf_r+0x22>
 80049ba:	2300      	movs	r3, #0
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	89b3      	ldrh	r3, [r6, #12]
 80049c0:	061a      	lsls	r2, r3, #24
 80049c2:	d410      	bmi.n	80049e6 <__swhatbuf_r+0x3e>
 80049c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c8:	e00e      	b.n	80049e8 <__swhatbuf_r+0x40>
 80049ca:	466a      	mov	r2, sp
 80049cc:	f000 fdba 	bl	8005544 <_fstat_r>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	dbf2      	blt.n	80049ba <__swhatbuf_r+0x12>
 80049d4:	9a01      	ldr	r2, [sp, #4]
 80049d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049de:	425a      	negs	r2, r3
 80049e0:	415a      	adcs	r2, r3
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	e7ee      	b.n	80049c4 <__swhatbuf_r+0x1c>
 80049e6:	2340      	movs	r3, #64	; 0x40
 80049e8:	2000      	movs	r0, #0
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	b016      	add	sp, #88	; 0x58
 80049ee:	bd70      	pop	{r4, r5, r6, pc}

080049f0 <__smakebuf_r>:
 80049f0:	898b      	ldrh	r3, [r1, #12]
 80049f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049f4:	079d      	lsls	r5, r3, #30
 80049f6:	4606      	mov	r6, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	d507      	bpl.n	8004a0c <__smakebuf_r+0x1c>
 80049fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	6123      	str	r3, [r4, #16]
 8004a04:	2301      	movs	r3, #1
 8004a06:	6163      	str	r3, [r4, #20]
 8004a08:	b002      	add	sp, #8
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	ab01      	add	r3, sp, #4
 8004a0e:	466a      	mov	r2, sp
 8004a10:	f7ff ffca 	bl	80049a8 <__swhatbuf_r>
 8004a14:	9900      	ldr	r1, [sp, #0]
 8004a16:	4605      	mov	r5, r0
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f000 f879 	bl	8004b10 <_malloc_r>
 8004a1e:	b948      	cbnz	r0, 8004a34 <__smakebuf_r+0x44>
 8004a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a24:	059a      	lsls	r2, r3, #22
 8004a26:	d4ef      	bmi.n	8004a08 <__smakebuf_r+0x18>
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	e7e3      	b.n	80049fc <__smakebuf_r+0xc>
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <__smakebuf_r+0x7c>)
 8004a36:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	6020      	str	r0, [r4, #0]
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	9b00      	ldr	r3, [sp, #0]
 8004a44:	6163      	str	r3, [r4, #20]
 8004a46:	9b01      	ldr	r3, [sp, #4]
 8004a48:	6120      	str	r0, [r4, #16]
 8004a4a:	b15b      	cbz	r3, 8004a64 <__smakebuf_r+0x74>
 8004a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a50:	4630      	mov	r0, r6
 8004a52:	f000 fd89 	bl	8005568 <_isatty_r>
 8004a56:	b128      	cbz	r0, 8004a64 <__smakebuf_r+0x74>
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	89a0      	ldrh	r0, [r4, #12]
 8004a66:	4305      	orrs	r5, r0
 8004a68:	81a5      	strh	r5, [r4, #12]
 8004a6a:	e7cd      	b.n	8004a08 <__smakebuf_r+0x18>
 8004a6c:	08004801 	.word	0x08004801

08004a70 <_free_r>:
 8004a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a72:	2900      	cmp	r1, #0
 8004a74:	d048      	beq.n	8004b08 <_free_r+0x98>
 8004a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a7a:	9001      	str	r0, [sp, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004a82:	bfb8      	it	lt
 8004a84:	18e4      	addlt	r4, r4, r3
 8004a86:	f000 fdab 	bl	80055e0 <__malloc_lock>
 8004a8a:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <_free_r+0x9c>)
 8004a8c:	9801      	ldr	r0, [sp, #4]
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	4615      	mov	r5, r2
 8004a92:	b933      	cbnz	r3, 8004aa2 <_free_r+0x32>
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	6014      	str	r4, [r2, #0]
 8004a98:	b003      	add	sp, #12
 8004a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a9e:	f000 bda5 	b.w	80055ec <__malloc_unlock>
 8004aa2:	42a3      	cmp	r3, r4
 8004aa4:	d90b      	bls.n	8004abe <_free_r+0x4e>
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	1862      	adds	r2, r4, r1
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bf04      	itt	eq
 8004aae:	681a      	ldreq	r2, [r3, #0]
 8004ab0:	685b      	ldreq	r3, [r3, #4]
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	bf04      	itt	eq
 8004ab6:	1852      	addeq	r2, r2, r1
 8004ab8:	6022      	streq	r2, [r4, #0]
 8004aba:	602c      	str	r4, [r5, #0]
 8004abc:	e7ec      	b.n	8004a98 <_free_r+0x28>
 8004abe:	461a      	mov	r2, r3
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	b10b      	cbz	r3, 8004ac8 <_free_r+0x58>
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d9fa      	bls.n	8004abe <_free_r+0x4e>
 8004ac8:	6811      	ldr	r1, [r2, #0]
 8004aca:	1855      	adds	r5, r2, r1
 8004acc:	42a5      	cmp	r5, r4
 8004ace:	d10b      	bne.n	8004ae8 <_free_r+0x78>
 8004ad0:	6824      	ldr	r4, [r4, #0]
 8004ad2:	4421      	add	r1, r4
 8004ad4:	1854      	adds	r4, r2, r1
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	6011      	str	r1, [r2, #0]
 8004ada:	d1dd      	bne.n	8004a98 <_free_r+0x28>
 8004adc:	681c      	ldr	r4, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	6053      	str	r3, [r2, #4]
 8004ae2:	4421      	add	r1, r4
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	e7d7      	b.n	8004a98 <_free_r+0x28>
 8004ae8:	d902      	bls.n	8004af0 <_free_r+0x80>
 8004aea:	230c      	movs	r3, #12
 8004aec:	6003      	str	r3, [r0, #0]
 8004aee:	e7d3      	b.n	8004a98 <_free_r+0x28>
 8004af0:	6825      	ldr	r5, [r4, #0]
 8004af2:	1961      	adds	r1, r4, r5
 8004af4:	428b      	cmp	r3, r1
 8004af6:	bf04      	itt	eq
 8004af8:	6819      	ldreq	r1, [r3, #0]
 8004afa:	685b      	ldreq	r3, [r3, #4]
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	bf04      	itt	eq
 8004b00:	1949      	addeq	r1, r1, r5
 8004b02:	6021      	streq	r1, [r4, #0]
 8004b04:	6054      	str	r4, [r2, #4]
 8004b06:	e7c7      	b.n	8004a98 <_free_r+0x28>
 8004b08:	b003      	add	sp, #12
 8004b0a:	bd30      	pop	{r4, r5, pc}
 8004b0c:	200000b8 	.word	0x200000b8

08004b10 <_malloc_r>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	1ccd      	adds	r5, r1, #3
 8004b14:	f025 0503 	bic.w	r5, r5, #3
 8004b18:	3508      	adds	r5, #8
 8004b1a:	2d0c      	cmp	r5, #12
 8004b1c:	bf38      	it	cc
 8004b1e:	250c      	movcc	r5, #12
 8004b20:	2d00      	cmp	r5, #0
 8004b22:	4606      	mov	r6, r0
 8004b24:	db01      	blt.n	8004b2a <_malloc_r+0x1a>
 8004b26:	42a9      	cmp	r1, r5
 8004b28:	d903      	bls.n	8004b32 <_malloc_r+0x22>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	2000      	movs	r0, #0
 8004b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b32:	f000 fd55 	bl	80055e0 <__malloc_lock>
 8004b36:	4921      	ldr	r1, [pc, #132]	; (8004bbc <_malloc_r+0xac>)
 8004b38:	680a      	ldr	r2, [r1, #0]
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	b99c      	cbnz	r4, 8004b66 <_malloc_r+0x56>
 8004b3e:	4f20      	ldr	r7, [pc, #128]	; (8004bc0 <_malloc_r+0xb0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	b923      	cbnz	r3, 8004b4e <_malloc_r+0x3e>
 8004b44:	4621      	mov	r1, r4
 8004b46:	4630      	mov	r0, r6
 8004b48:	f000 fc86 	bl	8005458 <_sbrk_r>
 8004b4c:	6038      	str	r0, [r7, #0]
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4630      	mov	r0, r6
 8004b52:	f000 fc81 	bl	8005458 <_sbrk_r>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	d123      	bne.n	8004ba2 <_malloc_r+0x92>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	6033      	str	r3, [r6, #0]
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f000 fd44 	bl	80055ec <__malloc_unlock>
 8004b64:	e7e3      	b.n	8004b2e <_malloc_r+0x1e>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	1b5b      	subs	r3, r3, r5
 8004b6a:	d417      	bmi.n	8004b9c <_malloc_r+0x8c>
 8004b6c:	2b0b      	cmp	r3, #11
 8004b6e:	d903      	bls.n	8004b78 <_malloc_r+0x68>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	441c      	add	r4, r3
 8004b74:	6025      	str	r5, [r4, #0]
 8004b76:	e004      	b.n	8004b82 <_malloc_r+0x72>
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	42a2      	cmp	r2, r4
 8004b7c:	bf0c      	ite	eq
 8004b7e:	600b      	streq	r3, [r1, #0]
 8004b80:	6053      	strne	r3, [r2, #4]
 8004b82:	4630      	mov	r0, r6
 8004b84:	f000 fd32 	bl	80055ec <__malloc_unlock>
 8004b88:	f104 000b 	add.w	r0, r4, #11
 8004b8c:	1d23      	adds	r3, r4, #4
 8004b8e:	f020 0007 	bic.w	r0, r0, #7
 8004b92:	1ac2      	subs	r2, r0, r3
 8004b94:	d0cc      	beq.n	8004b30 <_malloc_r+0x20>
 8004b96:	1a1b      	subs	r3, r3, r0
 8004b98:	50a3      	str	r3, [r4, r2]
 8004b9a:	e7c9      	b.n	8004b30 <_malloc_r+0x20>
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	6864      	ldr	r4, [r4, #4]
 8004ba0:	e7cc      	b.n	8004b3c <_malloc_r+0x2c>
 8004ba2:	1cc4      	adds	r4, r0, #3
 8004ba4:	f024 0403 	bic.w	r4, r4, #3
 8004ba8:	42a0      	cmp	r0, r4
 8004baa:	d0e3      	beq.n	8004b74 <_malloc_r+0x64>
 8004bac:	1a21      	subs	r1, r4, r0
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f000 fc52 	bl	8005458 <_sbrk_r>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d1dd      	bne.n	8004b74 <_malloc_r+0x64>
 8004bb8:	e7cf      	b.n	8004b5a <_malloc_r+0x4a>
 8004bba:	bf00      	nop
 8004bbc:	200000b8 	.word	0x200000b8
 8004bc0:	200000bc 	.word	0x200000bc

08004bc4 <__ssputs_r>:
 8004bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	688e      	ldr	r6, [r1, #8]
 8004bca:	429e      	cmp	r6, r3
 8004bcc:	4682      	mov	sl, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4690      	mov	r8, r2
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	d838      	bhi.n	8004c48 <__ssputs_r+0x84>
 8004bd6:	898a      	ldrh	r2, [r1, #12]
 8004bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bdc:	d032      	beq.n	8004c44 <__ssputs_r+0x80>
 8004bde:	6825      	ldr	r5, [r4, #0]
 8004be0:	6909      	ldr	r1, [r1, #16]
 8004be2:	eba5 0901 	sub.w	r9, r5, r1
 8004be6:	6965      	ldr	r5, [r4, #20]
 8004be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	444b      	add	r3, r9
 8004bf4:	106d      	asrs	r5, r5, #1
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	bf38      	it	cc
 8004bfa:	461d      	movcc	r5, r3
 8004bfc:	0553      	lsls	r3, r2, #21
 8004bfe:	d531      	bpl.n	8004c64 <__ssputs_r+0xa0>
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7ff ff85 	bl	8004b10 <_malloc_r>
 8004c06:	4606      	mov	r6, r0
 8004c08:	b950      	cbnz	r0, 8004c20 <__ssputs_r+0x5c>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	f8ca 3000 	str.w	r3, [sl]
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	6921      	ldr	r1, [r4, #16]
 8004c22:	464a      	mov	r2, r9
 8004c24:	f7ff fb82 	bl	800432c <memcpy>
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	6126      	str	r6, [r4, #16]
 8004c36:	6165      	str	r5, [r4, #20]
 8004c38:	444e      	add	r6, r9
 8004c3a:	eba5 0509 	sub.w	r5, r5, r9
 8004c3e:	6026      	str	r6, [r4, #0]
 8004c40:	60a5      	str	r5, [r4, #8]
 8004c42:	463e      	mov	r6, r7
 8004c44:	42be      	cmp	r6, r7
 8004c46:	d900      	bls.n	8004c4a <__ssputs_r+0x86>
 8004c48:	463e      	mov	r6, r7
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	4641      	mov	r1, r8
 8004c50:	f000 fcac 	bl	80055ac <memmove>
 8004c54:	68a3      	ldr	r3, [r4, #8]
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	1b9b      	subs	r3, r3, r6
 8004c5a:	4432      	add	r2, r6
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6022      	str	r2, [r4, #0]
 8004c60:	2000      	movs	r0, #0
 8004c62:	e7db      	b.n	8004c1c <__ssputs_r+0x58>
 8004c64:	462a      	mov	r2, r5
 8004c66:	f000 fcc7 	bl	80055f8 <_realloc_r>
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d1e1      	bne.n	8004c34 <__ssputs_r+0x70>
 8004c70:	6921      	ldr	r1, [r4, #16]
 8004c72:	4650      	mov	r0, sl
 8004c74:	f7ff fefc 	bl	8004a70 <_free_r>
 8004c78:	e7c7      	b.n	8004c0a <__ssputs_r+0x46>
	...

08004c7c <_svfiprintf_r>:
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	4698      	mov	r8, r3
 8004c82:	898b      	ldrh	r3, [r1, #12]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	b09d      	sub	sp, #116	; 0x74
 8004c88:	4607      	mov	r7, r0
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	d50e      	bpl.n	8004cae <_svfiprintf_r+0x32>
 8004c90:	690b      	ldr	r3, [r1, #16]
 8004c92:	b963      	cbnz	r3, 8004cae <_svfiprintf_r+0x32>
 8004c94:	2140      	movs	r1, #64	; 0x40
 8004c96:	f7ff ff3b 	bl	8004b10 <_malloc_r>
 8004c9a:	6028      	str	r0, [r5, #0]
 8004c9c:	6128      	str	r0, [r5, #16]
 8004c9e:	b920      	cbnz	r0, 8004caa <_svfiprintf_r+0x2e>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	e0d1      	b.n	8004e4e <_svfiprintf_r+0x1d2>
 8004caa:	2340      	movs	r3, #64	; 0x40
 8004cac:	616b      	str	r3, [r5, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e68 <_svfiprintf_r+0x1ec>
 8004cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc6:	f04f 0901 	mov.w	r9, #1
 8004cca:	4623      	mov	r3, r4
 8004ccc:	469a      	mov	sl, r3
 8004cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd2:	b10a      	cbz	r2, 8004cd8 <_svfiprintf_r+0x5c>
 8004cd4:	2a25      	cmp	r2, #37	; 0x25
 8004cd6:	d1f9      	bne.n	8004ccc <_svfiprintf_r+0x50>
 8004cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cdc:	d00b      	beq.n	8004cf6 <_svfiprintf_r+0x7a>
 8004cde:	465b      	mov	r3, fp
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff ff6d 	bl	8004bc4 <__ssputs_r>
 8004cea:	3001      	adds	r0, #1
 8004cec:	f000 80aa 	beq.w	8004e44 <_svfiprintf_r+0x1c8>
 8004cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf2:	445a      	add	r2, fp
 8004cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80a2 	beq.w	8004e44 <_svfiprintf_r+0x1c8>
 8004d00:	2300      	movs	r3, #0
 8004d02:	f04f 32ff 	mov.w	r2, #4294967295
 8004d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0a:	f10a 0a01 	add.w	sl, sl, #1
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	9307      	str	r3, [sp, #28]
 8004d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d16:	931a      	str	r3, [sp, #104]	; 0x68
 8004d18:	4654      	mov	r4, sl
 8004d1a:	2205      	movs	r2, #5
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	4851      	ldr	r0, [pc, #324]	; (8004e68 <_svfiprintf_r+0x1ec>)
 8004d22:	f7fb fa6d 	bl	8000200 <memchr>
 8004d26:	9a04      	ldr	r2, [sp, #16]
 8004d28:	b9d8      	cbnz	r0, 8004d62 <_svfiprintf_r+0xe6>
 8004d2a:	06d0      	lsls	r0, r2, #27
 8004d2c:	bf44      	itt	mi
 8004d2e:	2320      	movmi	r3, #32
 8004d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d34:	0711      	lsls	r1, r2, #28
 8004d36:	bf44      	itt	mi
 8004d38:	232b      	movmi	r3, #43	; 0x2b
 8004d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d42:	2b2a      	cmp	r3, #42	; 0x2a
 8004d44:	d015      	beq.n	8004d72 <_svfiprintf_r+0xf6>
 8004d46:	9a07      	ldr	r2, [sp, #28]
 8004d48:	4654      	mov	r4, sl
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f04f 0c0a 	mov.w	ip, #10
 8004d50:	4621      	mov	r1, r4
 8004d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d56:	3b30      	subs	r3, #48	; 0x30
 8004d58:	2b09      	cmp	r3, #9
 8004d5a:	d94e      	bls.n	8004dfa <_svfiprintf_r+0x17e>
 8004d5c:	b1b0      	cbz	r0, 8004d8c <_svfiprintf_r+0x110>
 8004d5e:	9207      	str	r2, [sp, #28]
 8004d60:	e014      	b.n	8004d8c <_svfiprintf_r+0x110>
 8004d62:	eba0 0308 	sub.w	r3, r0, r8
 8004d66:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	46a2      	mov	sl, r4
 8004d70:	e7d2      	b.n	8004d18 <_svfiprintf_r+0x9c>
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	1d19      	adds	r1, r3, #4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	9103      	str	r1, [sp, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bfbb      	ittet	lt
 8004d7e:	425b      	neglt	r3, r3
 8004d80:	f042 0202 	orrlt.w	r2, r2, #2
 8004d84:	9307      	strge	r3, [sp, #28]
 8004d86:	9307      	strlt	r3, [sp, #28]
 8004d88:	bfb8      	it	lt
 8004d8a:	9204      	strlt	r2, [sp, #16]
 8004d8c:	7823      	ldrb	r3, [r4, #0]
 8004d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d90:	d10c      	bne.n	8004dac <_svfiprintf_r+0x130>
 8004d92:	7863      	ldrb	r3, [r4, #1]
 8004d94:	2b2a      	cmp	r3, #42	; 0x2a
 8004d96:	d135      	bne.n	8004e04 <_svfiprintf_r+0x188>
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	9203      	str	r2, [sp, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfb8      	it	lt
 8004da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004da8:	3402      	adds	r4, #2
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e78 <_svfiprintf_r+0x1fc>
 8004db0:	7821      	ldrb	r1, [r4, #0]
 8004db2:	2203      	movs	r2, #3
 8004db4:	4650      	mov	r0, sl
 8004db6:	f7fb fa23 	bl	8000200 <memchr>
 8004dba:	b140      	cbz	r0, 8004dce <_svfiprintf_r+0x152>
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	eba0 000a 	sub.w	r0, r0, sl
 8004dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8004dc6:	9b04      	ldr	r3, [sp, #16]
 8004dc8:	4303      	orrs	r3, r0
 8004dca:	3401      	adds	r4, #1
 8004dcc:	9304      	str	r3, [sp, #16]
 8004dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd2:	4826      	ldr	r0, [pc, #152]	; (8004e6c <_svfiprintf_r+0x1f0>)
 8004dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd8:	2206      	movs	r2, #6
 8004dda:	f7fb fa11 	bl	8000200 <memchr>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d038      	beq.n	8004e54 <_svfiprintf_r+0x1d8>
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <_svfiprintf_r+0x1f4>)
 8004de4:	bb1b      	cbnz	r3, 8004e2e <_svfiprintf_r+0x1b2>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	3307      	adds	r3, #7
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	3308      	adds	r3, #8
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df4:	4433      	add	r3, r6
 8004df6:	9309      	str	r3, [sp, #36]	; 0x24
 8004df8:	e767      	b.n	8004cca <_svfiprintf_r+0x4e>
 8004dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfe:	460c      	mov	r4, r1
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7a5      	b.n	8004d50 <_svfiprintf_r+0xd4>
 8004e04:	2300      	movs	r3, #0
 8004e06:	3401      	adds	r4, #1
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f04f 0c0a 	mov.w	ip, #10
 8004e10:	4620      	mov	r0, r4
 8004e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e16:	3a30      	subs	r2, #48	; 0x30
 8004e18:	2a09      	cmp	r2, #9
 8004e1a:	d903      	bls.n	8004e24 <_svfiprintf_r+0x1a8>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0c5      	beq.n	8004dac <_svfiprintf_r+0x130>
 8004e20:	9105      	str	r1, [sp, #20]
 8004e22:	e7c3      	b.n	8004dac <_svfiprintf_r+0x130>
 8004e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e28:	4604      	mov	r4, r0
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e7f0      	b.n	8004e10 <_svfiprintf_r+0x194>
 8004e2e:	ab03      	add	r3, sp, #12
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	462a      	mov	r2, r5
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <_svfiprintf_r+0x1f8>)
 8004e36:	a904      	add	r1, sp, #16
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f3af 8000 	nop.w
 8004e3e:	1c42      	adds	r2, r0, #1
 8004e40:	4606      	mov	r6, r0
 8004e42:	d1d6      	bne.n	8004df2 <_svfiprintf_r+0x176>
 8004e44:	89ab      	ldrh	r3, [r5, #12]
 8004e46:	065b      	lsls	r3, r3, #25
 8004e48:	f53f af2c 	bmi.w	8004ca4 <_svfiprintf_r+0x28>
 8004e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e4e:	b01d      	add	sp, #116	; 0x74
 8004e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e54:	ab03      	add	r3, sp, #12
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <_svfiprintf_r+0x1f8>)
 8004e5c:	a904      	add	r1, sp, #16
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f000 f9d4 	bl	800520c <_printf_i>
 8004e64:	e7eb      	b.n	8004e3e <_svfiprintf_r+0x1c2>
 8004e66:	bf00      	nop
 8004e68:	08005908 	.word	0x08005908
 8004e6c:	08005912 	.word	0x08005912
 8004e70:	00000000 	.word	0x00000000
 8004e74:	08004bc5 	.word	0x08004bc5
 8004e78:	0800590e 	.word	0x0800590e

08004e7c <__sfputc_r>:
 8004e7c:	6893      	ldr	r3, [r2, #8]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	b410      	push	{r4}
 8004e84:	6093      	str	r3, [r2, #8]
 8004e86:	da08      	bge.n	8004e9a <__sfputc_r+0x1e>
 8004e88:	6994      	ldr	r4, [r2, #24]
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	db01      	blt.n	8004e92 <__sfputc_r+0x16>
 8004e8e:	290a      	cmp	r1, #10
 8004e90:	d103      	bne.n	8004e9a <__sfputc_r+0x1e>
 8004e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e96:	f7ff bb0d 	b.w	80044b4 <__swbuf_r>
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	1c58      	adds	r0, r3, #1
 8004e9e:	6010      	str	r0, [r2, #0]
 8004ea0:	7019      	strb	r1, [r3, #0]
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <__sfputs_r>:
 8004eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	18d5      	adds	r5, r2, r3
 8004eb4:	42ac      	cmp	r4, r5
 8004eb6:	d101      	bne.n	8004ebc <__sfputs_r+0x12>
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e007      	b.n	8004ecc <__sfputs_r+0x22>
 8004ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec0:	463a      	mov	r2, r7
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f7ff ffda 	bl	8004e7c <__sfputc_r>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d1f3      	bne.n	8004eb4 <__sfputs_r+0xa>
 8004ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed0 <_vfiprintf_r>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	460d      	mov	r5, r1
 8004ed6:	b09d      	sub	sp, #116	; 0x74
 8004ed8:	4614      	mov	r4, r2
 8004eda:	4698      	mov	r8, r3
 8004edc:	4606      	mov	r6, r0
 8004ede:	b118      	cbz	r0, 8004ee8 <_vfiprintf_r+0x18>
 8004ee0:	6983      	ldr	r3, [r0, #24]
 8004ee2:	b90b      	cbnz	r3, 8004ee8 <_vfiprintf_r+0x18>
 8004ee4:	f7ff fcc0 	bl	8004868 <__sinit>
 8004ee8:	4b89      	ldr	r3, [pc, #548]	; (8005110 <_vfiprintf_r+0x240>)
 8004eea:	429d      	cmp	r5, r3
 8004eec:	d11b      	bne.n	8004f26 <_vfiprintf_r+0x56>
 8004eee:	6875      	ldr	r5, [r6, #4]
 8004ef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef2:	07d9      	lsls	r1, r3, #31
 8004ef4:	d405      	bmi.n	8004f02 <_vfiprintf_r+0x32>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	059a      	lsls	r2, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_vfiprintf_r+0x32>
 8004efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004efe:	f7ff fd51 	bl	80049a4 <__retarget_lock_acquire_recursive>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	d501      	bpl.n	8004f0c <_vfiprintf_r+0x3c>
 8004f08:	692b      	ldr	r3, [r5, #16]
 8004f0a:	b9eb      	cbnz	r3, 8004f48 <_vfiprintf_r+0x78>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f7ff fb22 	bl	8004558 <__swsetup_r>
 8004f14:	b1c0      	cbz	r0, 8004f48 <_vfiprintf_r+0x78>
 8004f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f18:	07dc      	lsls	r4, r3, #31
 8004f1a:	d50e      	bpl.n	8004f3a <_vfiprintf_r+0x6a>
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	b01d      	add	sp, #116	; 0x74
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	4b7b      	ldr	r3, [pc, #492]	; (8005114 <_vfiprintf_r+0x244>)
 8004f28:	429d      	cmp	r5, r3
 8004f2a:	d101      	bne.n	8004f30 <_vfiprintf_r+0x60>
 8004f2c:	68b5      	ldr	r5, [r6, #8]
 8004f2e:	e7df      	b.n	8004ef0 <_vfiprintf_r+0x20>
 8004f30:	4b79      	ldr	r3, [pc, #484]	; (8005118 <_vfiprintf_r+0x248>)
 8004f32:	429d      	cmp	r5, r3
 8004f34:	bf08      	it	eq
 8004f36:	68f5      	ldreq	r5, [r6, #12]
 8004f38:	e7da      	b.n	8004ef0 <_vfiprintf_r+0x20>
 8004f3a:	89ab      	ldrh	r3, [r5, #12]
 8004f3c:	0598      	lsls	r0, r3, #22
 8004f3e:	d4ed      	bmi.n	8004f1c <_vfiprintf_r+0x4c>
 8004f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f42:	f7ff fd30 	bl	80049a6 <__retarget_lock_release_recursive>
 8004f46:	e7e9      	b.n	8004f1c <_vfiprintf_r+0x4c>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f56:	2330      	movs	r3, #48	; 0x30
 8004f58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800511c <_vfiprintf_r+0x24c>
 8004f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f60:	f04f 0901 	mov.w	r9, #1
 8004f64:	4623      	mov	r3, r4
 8004f66:	469a      	mov	sl, r3
 8004f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6c:	b10a      	cbz	r2, 8004f72 <_vfiprintf_r+0xa2>
 8004f6e:	2a25      	cmp	r2, #37	; 0x25
 8004f70:	d1f9      	bne.n	8004f66 <_vfiprintf_r+0x96>
 8004f72:	ebba 0b04 	subs.w	fp, sl, r4
 8004f76:	d00b      	beq.n	8004f90 <_vfiprintf_r+0xc0>
 8004f78:	465b      	mov	r3, fp
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff ff93 	bl	8004eaa <__sfputs_r>
 8004f84:	3001      	adds	r0, #1
 8004f86:	f000 80aa 	beq.w	80050de <_vfiprintf_r+0x20e>
 8004f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f8c:	445a      	add	r2, fp
 8004f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8004f90:	f89a 3000 	ldrb.w	r3, [sl]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a2 	beq.w	80050de <_vfiprintf_r+0x20e>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa4:	f10a 0a01 	add.w	sl, sl, #1
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	9307      	str	r3, [sp, #28]
 8004fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb2:	4654      	mov	r4, sl
 8004fb4:	2205      	movs	r2, #5
 8004fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fba:	4858      	ldr	r0, [pc, #352]	; (800511c <_vfiprintf_r+0x24c>)
 8004fbc:	f7fb f920 	bl	8000200 <memchr>
 8004fc0:	9a04      	ldr	r2, [sp, #16]
 8004fc2:	b9d8      	cbnz	r0, 8004ffc <_vfiprintf_r+0x12c>
 8004fc4:	06d1      	lsls	r1, r2, #27
 8004fc6:	bf44      	itt	mi
 8004fc8:	2320      	movmi	r3, #32
 8004fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fce:	0713      	lsls	r3, r2, #28
 8004fd0:	bf44      	itt	mi
 8004fd2:	232b      	movmi	r3, #43	; 0x2b
 8004fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d015      	beq.n	800500c <_vfiprintf_r+0x13c>
 8004fe0:	9a07      	ldr	r2, [sp, #28]
 8004fe2:	4654      	mov	r4, sl
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f04f 0c0a 	mov.w	ip, #10
 8004fea:	4621      	mov	r1, r4
 8004fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff0:	3b30      	subs	r3, #48	; 0x30
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	d94e      	bls.n	8005094 <_vfiprintf_r+0x1c4>
 8004ff6:	b1b0      	cbz	r0, 8005026 <_vfiprintf_r+0x156>
 8004ff8:	9207      	str	r2, [sp, #28]
 8004ffa:	e014      	b.n	8005026 <_vfiprintf_r+0x156>
 8004ffc:	eba0 0308 	sub.w	r3, r0, r8
 8005000:	fa09 f303 	lsl.w	r3, r9, r3
 8005004:	4313      	orrs	r3, r2
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	46a2      	mov	sl, r4
 800500a:	e7d2      	b.n	8004fb2 <_vfiprintf_r+0xe2>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	1d19      	adds	r1, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	9103      	str	r1, [sp, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	bfbb      	ittet	lt
 8005018:	425b      	neglt	r3, r3
 800501a:	f042 0202 	orrlt.w	r2, r2, #2
 800501e:	9307      	strge	r3, [sp, #28]
 8005020:	9307      	strlt	r3, [sp, #28]
 8005022:	bfb8      	it	lt
 8005024:	9204      	strlt	r2, [sp, #16]
 8005026:	7823      	ldrb	r3, [r4, #0]
 8005028:	2b2e      	cmp	r3, #46	; 0x2e
 800502a:	d10c      	bne.n	8005046 <_vfiprintf_r+0x176>
 800502c:	7863      	ldrb	r3, [r4, #1]
 800502e:	2b2a      	cmp	r3, #42	; 0x2a
 8005030:	d135      	bne.n	800509e <_vfiprintf_r+0x1ce>
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	1d1a      	adds	r2, r3, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	9203      	str	r2, [sp, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005042:	3402      	adds	r4, #2
 8005044:	9305      	str	r3, [sp, #20]
 8005046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800512c <_vfiprintf_r+0x25c>
 800504a:	7821      	ldrb	r1, [r4, #0]
 800504c:	2203      	movs	r2, #3
 800504e:	4650      	mov	r0, sl
 8005050:	f7fb f8d6 	bl	8000200 <memchr>
 8005054:	b140      	cbz	r0, 8005068 <_vfiprintf_r+0x198>
 8005056:	2340      	movs	r3, #64	; 0x40
 8005058:	eba0 000a 	sub.w	r0, r0, sl
 800505c:	fa03 f000 	lsl.w	r0, r3, r0
 8005060:	9b04      	ldr	r3, [sp, #16]
 8005062:	4303      	orrs	r3, r0
 8005064:	3401      	adds	r4, #1
 8005066:	9304      	str	r3, [sp, #16]
 8005068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506c:	482c      	ldr	r0, [pc, #176]	; (8005120 <_vfiprintf_r+0x250>)
 800506e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005072:	2206      	movs	r2, #6
 8005074:	f7fb f8c4 	bl	8000200 <memchr>
 8005078:	2800      	cmp	r0, #0
 800507a:	d03f      	beq.n	80050fc <_vfiprintf_r+0x22c>
 800507c:	4b29      	ldr	r3, [pc, #164]	; (8005124 <_vfiprintf_r+0x254>)
 800507e:	bb1b      	cbnz	r3, 80050c8 <_vfiprintf_r+0x1f8>
 8005080:	9b03      	ldr	r3, [sp, #12]
 8005082:	3307      	adds	r3, #7
 8005084:	f023 0307 	bic.w	r3, r3, #7
 8005088:	3308      	adds	r3, #8
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508e:	443b      	add	r3, r7
 8005090:	9309      	str	r3, [sp, #36]	; 0x24
 8005092:	e767      	b.n	8004f64 <_vfiprintf_r+0x94>
 8005094:	fb0c 3202 	mla	r2, ip, r2, r3
 8005098:	460c      	mov	r4, r1
 800509a:	2001      	movs	r0, #1
 800509c:	e7a5      	b.n	8004fea <_vfiprintf_r+0x11a>
 800509e:	2300      	movs	r3, #0
 80050a0:	3401      	adds	r4, #1
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	4619      	mov	r1, r3
 80050a6:	f04f 0c0a 	mov.w	ip, #10
 80050aa:	4620      	mov	r0, r4
 80050ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b0:	3a30      	subs	r2, #48	; 0x30
 80050b2:	2a09      	cmp	r2, #9
 80050b4:	d903      	bls.n	80050be <_vfiprintf_r+0x1ee>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0c5      	beq.n	8005046 <_vfiprintf_r+0x176>
 80050ba:	9105      	str	r1, [sp, #20]
 80050bc:	e7c3      	b.n	8005046 <_vfiprintf_r+0x176>
 80050be:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c2:	4604      	mov	r4, r0
 80050c4:	2301      	movs	r3, #1
 80050c6:	e7f0      	b.n	80050aa <_vfiprintf_r+0x1da>
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	462a      	mov	r2, r5
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <_vfiprintf_r+0x258>)
 80050d0:	a904      	add	r1, sp, #16
 80050d2:	4630      	mov	r0, r6
 80050d4:	f3af 8000 	nop.w
 80050d8:	4607      	mov	r7, r0
 80050da:	1c78      	adds	r0, r7, #1
 80050dc:	d1d6      	bne.n	800508c <_vfiprintf_r+0x1bc>
 80050de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e0:	07d9      	lsls	r1, r3, #31
 80050e2:	d405      	bmi.n	80050f0 <_vfiprintf_r+0x220>
 80050e4:	89ab      	ldrh	r3, [r5, #12]
 80050e6:	059a      	lsls	r2, r3, #22
 80050e8:	d402      	bmi.n	80050f0 <_vfiprintf_r+0x220>
 80050ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ec:	f7ff fc5b 	bl	80049a6 <__retarget_lock_release_recursive>
 80050f0:	89ab      	ldrh	r3, [r5, #12]
 80050f2:	065b      	lsls	r3, r3, #25
 80050f4:	f53f af12 	bmi.w	8004f1c <_vfiprintf_r+0x4c>
 80050f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050fa:	e711      	b.n	8004f20 <_vfiprintf_r+0x50>
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	462a      	mov	r2, r5
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <_vfiprintf_r+0x258>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	4630      	mov	r0, r6
 8005108:	f000 f880 	bl	800520c <_printf_i>
 800510c:	e7e4      	b.n	80050d8 <_vfiprintf_r+0x208>
 800510e:	bf00      	nop
 8005110:	080058c8 	.word	0x080058c8
 8005114:	080058e8 	.word	0x080058e8
 8005118:	080058a8 	.word	0x080058a8
 800511c:	08005908 	.word	0x08005908
 8005120:	08005912 	.word	0x08005912
 8005124:	00000000 	.word	0x00000000
 8005128:	08004eab 	.word	0x08004eab
 800512c:	0800590e 	.word	0x0800590e

08005130 <_printf_common>:
 8005130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	4616      	mov	r6, r2
 8005136:	4699      	mov	r9, r3
 8005138:	688a      	ldr	r2, [r1, #8]
 800513a:	690b      	ldr	r3, [r1, #16]
 800513c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005140:	4293      	cmp	r3, r2
 8005142:	bfb8      	it	lt
 8005144:	4613      	movlt	r3, r2
 8005146:	6033      	str	r3, [r6, #0]
 8005148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800514c:	4607      	mov	r7, r0
 800514e:	460c      	mov	r4, r1
 8005150:	b10a      	cbz	r2, 8005156 <_printf_common+0x26>
 8005152:	3301      	adds	r3, #1
 8005154:	6033      	str	r3, [r6, #0]
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	0699      	lsls	r1, r3, #26
 800515a:	bf42      	ittt	mi
 800515c:	6833      	ldrmi	r3, [r6, #0]
 800515e:	3302      	addmi	r3, #2
 8005160:	6033      	strmi	r3, [r6, #0]
 8005162:	6825      	ldr	r5, [r4, #0]
 8005164:	f015 0506 	ands.w	r5, r5, #6
 8005168:	d106      	bne.n	8005178 <_printf_common+0x48>
 800516a:	f104 0a19 	add.w	sl, r4, #25
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	6832      	ldr	r2, [r6, #0]
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	42ab      	cmp	r3, r5
 8005176:	dc26      	bgt.n	80051c6 <_printf_common+0x96>
 8005178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800517c:	1e13      	subs	r3, r2, #0
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	bf18      	it	ne
 8005182:	2301      	movne	r3, #1
 8005184:	0692      	lsls	r2, r2, #26
 8005186:	d42b      	bmi.n	80051e0 <_printf_common+0xb0>
 8005188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800518c:	4649      	mov	r1, r9
 800518e:	4638      	mov	r0, r7
 8005190:	47c0      	blx	r8
 8005192:	3001      	adds	r0, #1
 8005194:	d01e      	beq.n	80051d4 <_printf_common+0xa4>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	68e5      	ldr	r5, [r4, #12]
 800519a:	6832      	ldr	r2, [r6, #0]
 800519c:	f003 0306 	and.w	r3, r3, #6
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	bf08      	it	eq
 80051a4:	1aad      	subeq	r5, r5, r2
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	6922      	ldr	r2, [r4, #16]
 80051aa:	bf0c      	ite	eq
 80051ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b0:	2500      	movne	r5, #0
 80051b2:	4293      	cmp	r3, r2
 80051b4:	bfc4      	itt	gt
 80051b6:	1a9b      	subgt	r3, r3, r2
 80051b8:	18ed      	addgt	r5, r5, r3
 80051ba:	2600      	movs	r6, #0
 80051bc:	341a      	adds	r4, #26
 80051be:	42b5      	cmp	r5, r6
 80051c0:	d11a      	bne.n	80051f8 <_printf_common+0xc8>
 80051c2:	2000      	movs	r0, #0
 80051c4:	e008      	b.n	80051d8 <_printf_common+0xa8>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4652      	mov	r2, sl
 80051ca:	4649      	mov	r1, r9
 80051cc:	4638      	mov	r0, r7
 80051ce:	47c0      	blx	r8
 80051d0:	3001      	adds	r0, #1
 80051d2:	d103      	bne.n	80051dc <_printf_common+0xac>
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051dc:	3501      	adds	r5, #1
 80051de:	e7c6      	b.n	800516e <_printf_common+0x3e>
 80051e0:	18e1      	adds	r1, r4, r3
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	2030      	movs	r0, #48	; 0x30
 80051e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ea:	4422      	add	r2, r4
 80051ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f4:	3302      	adds	r3, #2
 80051f6:	e7c7      	b.n	8005188 <_printf_common+0x58>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4622      	mov	r2, r4
 80051fc:	4649      	mov	r1, r9
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	3001      	adds	r0, #1
 8005204:	d0e6      	beq.n	80051d4 <_printf_common+0xa4>
 8005206:	3601      	adds	r6, #1
 8005208:	e7d9      	b.n	80051be <_printf_common+0x8e>
	...

0800520c <_printf_i>:
 800520c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	460c      	mov	r4, r1
 8005212:	4691      	mov	r9, r2
 8005214:	7e27      	ldrb	r7, [r4, #24]
 8005216:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005218:	2f78      	cmp	r7, #120	; 0x78
 800521a:	4680      	mov	r8, r0
 800521c:	469a      	mov	sl, r3
 800521e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005222:	d807      	bhi.n	8005234 <_printf_i+0x28>
 8005224:	2f62      	cmp	r7, #98	; 0x62
 8005226:	d80a      	bhi.n	800523e <_printf_i+0x32>
 8005228:	2f00      	cmp	r7, #0
 800522a:	f000 80d8 	beq.w	80053de <_printf_i+0x1d2>
 800522e:	2f58      	cmp	r7, #88	; 0x58
 8005230:	f000 80a3 	beq.w	800537a <_printf_i+0x16e>
 8005234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800523c:	e03a      	b.n	80052b4 <_printf_i+0xa8>
 800523e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005242:	2b15      	cmp	r3, #21
 8005244:	d8f6      	bhi.n	8005234 <_printf_i+0x28>
 8005246:	a001      	add	r0, pc, #4	; (adr r0, 800524c <_printf_i+0x40>)
 8005248:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800524c:	080052a5 	.word	0x080052a5
 8005250:	080052b9 	.word	0x080052b9
 8005254:	08005235 	.word	0x08005235
 8005258:	08005235 	.word	0x08005235
 800525c:	08005235 	.word	0x08005235
 8005260:	08005235 	.word	0x08005235
 8005264:	080052b9 	.word	0x080052b9
 8005268:	08005235 	.word	0x08005235
 800526c:	08005235 	.word	0x08005235
 8005270:	08005235 	.word	0x08005235
 8005274:	08005235 	.word	0x08005235
 8005278:	080053c5 	.word	0x080053c5
 800527c:	080052e9 	.word	0x080052e9
 8005280:	080053a7 	.word	0x080053a7
 8005284:	08005235 	.word	0x08005235
 8005288:	08005235 	.word	0x08005235
 800528c:	080053e7 	.word	0x080053e7
 8005290:	08005235 	.word	0x08005235
 8005294:	080052e9 	.word	0x080052e9
 8005298:	08005235 	.word	0x08005235
 800529c:	08005235 	.word	0x08005235
 80052a0:	080053af 	.word	0x080053af
 80052a4:	680b      	ldr	r3, [r1, #0]
 80052a6:	1d1a      	adds	r2, r3, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	600a      	str	r2, [r1, #0]
 80052ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0a3      	b.n	8005400 <_printf_i+0x1f4>
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	6808      	ldr	r0, [r1, #0]
 80052bc:	062e      	lsls	r6, r5, #24
 80052be:	f100 0304 	add.w	r3, r0, #4
 80052c2:	d50a      	bpl.n	80052da <_printf_i+0xce>
 80052c4:	6805      	ldr	r5, [r0, #0]
 80052c6:	600b      	str	r3, [r1, #0]
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	da03      	bge.n	80052d4 <_printf_i+0xc8>
 80052cc:	232d      	movs	r3, #45	; 0x2d
 80052ce:	426d      	negs	r5, r5
 80052d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d4:	485e      	ldr	r0, [pc, #376]	; (8005450 <_printf_i+0x244>)
 80052d6:	230a      	movs	r3, #10
 80052d8:	e019      	b.n	800530e <_printf_i+0x102>
 80052da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052de:	6805      	ldr	r5, [r0, #0]
 80052e0:	600b      	str	r3, [r1, #0]
 80052e2:	bf18      	it	ne
 80052e4:	b22d      	sxthne	r5, r5
 80052e6:	e7ef      	b.n	80052c8 <_printf_i+0xbc>
 80052e8:	680b      	ldr	r3, [r1, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	1d18      	adds	r0, r3, #4
 80052ee:	6008      	str	r0, [r1, #0]
 80052f0:	0628      	lsls	r0, r5, #24
 80052f2:	d501      	bpl.n	80052f8 <_printf_i+0xec>
 80052f4:	681d      	ldr	r5, [r3, #0]
 80052f6:	e002      	b.n	80052fe <_printf_i+0xf2>
 80052f8:	0669      	lsls	r1, r5, #25
 80052fa:	d5fb      	bpl.n	80052f4 <_printf_i+0xe8>
 80052fc:	881d      	ldrh	r5, [r3, #0]
 80052fe:	4854      	ldr	r0, [pc, #336]	; (8005450 <_printf_i+0x244>)
 8005300:	2f6f      	cmp	r7, #111	; 0x6f
 8005302:	bf0c      	ite	eq
 8005304:	2308      	moveq	r3, #8
 8005306:	230a      	movne	r3, #10
 8005308:	2100      	movs	r1, #0
 800530a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800530e:	6866      	ldr	r6, [r4, #4]
 8005310:	60a6      	str	r6, [r4, #8]
 8005312:	2e00      	cmp	r6, #0
 8005314:	bfa2      	ittt	ge
 8005316:	6821      	ldrge	r1, [r4, #0]
 8005318:	f021 0104 	bicge.w	r1, r1, #4
 800531c:	6021      	strge	r1, [r4, #0]
 800531e:	b90d      	cbnz	r5, 8005324 <_printf_i+0x118>
 8005320:	2e00      	cmp	r6, #0
 8005322:	d04d      	beq.n	80053c0 <_printf_i+0x1b4>
 8005324:	4616      	mov	r6, r2
 8005326:	fbb5 f1f3 	udiv	r1, r5, r3
 800532a:	fb03 5711 	mls	r7, r3, r1, r5
 800532e:	5dc7      	ldrb	r7, [r0, r7]
 8005330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005334:	462f      	mov	r7, r5
 8005336:	42bb      	cmp	r3, r7
 8005338:	460d      	mov	r5, r1
 800533a:	d9f4      	bls.n	8005326 <_printf_i+0x11a>
 800533c:	2b08      	cmp	r3, #8
 800533e:	d10b      	bne.n	8005358 <_printf_i+0x14c>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	07df      	lsls	r7, r3, #31
 8005344:	d508      	bpl.n	8005358 <_printf_i+0x14c>
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	4299      	cmp	r1, r3
 800534c:	bfde      	ittt	le
 800534e:	2330      	movle	r3, #48	; 0x30
 8005350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005354:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005358:	1b92      	subs	r2, r2, r6
 800535a:	6122      	str	r2, [r4, #16]
 800535c:	f8cd a000 	str.w	sl, [sp]
 8005360:	464b      	mov	r3, r9
 8005362:	aa03      	add	r2, sp, #12
 8005364:	4621      	mov	r1, r4
 8005366:	4640      	mov	r0, r8
 8005368:	f7ff fee2 	bl	8005130 <_printf_common>
 800536c:	3001      	adds	r0, #1
 800536e:	d14c      	bne.n	800540a <_printf_i+0x1fe>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	b004      	add	sp, #16
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537a:	4835      	ldr	r0, [pc, #212]	; (8005450 <_printf_i+0x244>)
 800537c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	680e      	ldr	r6, [r1, #0]
 8005384:	061f      	lsls	r7, r3, #24
 8005386:	f856 5b04 	ldr.w	r5, [r6], #4
 800538a:	600e      	str	r6, [r1, #0]
 800538c:	d514      	bpl.n	80053b8 <_printf_i+0x1ac>
 800538e:	07d9      	lsls	r1, r3, #31
 8005390:	bf44      	itt	mi
 8005392:	f043 0320 	orrmi.w	r3, r3, #32
 8005396:	6023      	strmi	r3, [r4, #0]
 8005398:	b91d      	cbnz	r5, 80053a2 <_printf_i+0x196>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f023 0320 	bic.w	r3, r3, #32
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	2310      	movs	r3, #16
 80053a4:	e7b0      	b.n	8005308 <_printf_i+0xfc>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f043 0320 	orr.w	r3, r3, #32
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	2378      	movs	r3, #120	; 0x78
 80053b0:	4828      	ldr	r0, [pc, #160]	; (8005454 <_printf_i+0x248>)
 80053b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053b6:	e7e3      	b.n	8005380 <_printf_i+0x174>
 80053b8:	065e      	lsls	r6, r3, #25
 80053ba:	bf48      	it	mi
 80053bc:	b2ad      	uxthmi	r5, r5
 80053be:	e7e6      	b.n	800538e <_printf_i+0x182>
 80053c0:	4616      	mov	r6, r2
 80053c2:	e7bb      	b.n	800533c <_printf_i+0x130>
 80053c4:	680b      	ldr	r3, [r1, #0]
 80053c6:	6826      	ldr	r6, [r4, #0]
 80053c8:	6960      	ldr	r0, [r4, #20]
 80053ca:	1d1d      	adds	r5, r3, #4
 80053cc:	600d      	str	r5, [r1, #0]
 80053ce:	0635      	lsls	r5, r6, #24
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0x1cc>
 80053d4:	6018      	str	r0, [r3, #0]
 80053d6:	e002      	b.n	80053de <_printf_i+0x1d2>
 80053d8:	0671      	lsls	r1, r6, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0x1c8>
 80053dc:	8018      	strh	r0, [r3, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	6123      	str	r3, [r4, #16]
 80053e2:	4616      	mov	r6, r2
 80053e4:	e7ba      	b.n	800535c <_printf_i+0x150>
 80053e6:	680b      	ldr	r3, [r1, #0]
 80053e8:	1d1a      	adds	r2, r3, #4
 80053ea:	600a      	str	r2, [r1, #0]
 80053ec:	681e      	ldr	r6, [r3, #0]
 80053ee:	6862      	ldr	r2, [r4, #4]
 80053f0:	2100      	movs	r1, #0
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7fa ff04 	bl	8000200 <memchr>
 80053f8:	b108      	cbz	r0, 80053fe <_printf_i+0x1f2>
 80053fa:	1b80      	subs	r0, r0, r6
 80053fc:	6060      	str	r0, [r4, #4]
 80053fe:	6863      	ldr	r3, [r4, #4]
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	2300      	movs	r3, #0
 8005404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005408:	e7a8      	b.n	800535c <_printf_i+0x150>
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	4632      	mov	r2, r6
 800540e:	4649      	mov	r1, r9
 8005410:	4640      	mov	r0, r8
 8005412:	47d0      	blx	sl
 8005414:	3001      	adds	r0, #1
 8005416:	d0ab      	beq.n	8005370 <_printf_i+0x164>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	079b      	lsls	r3, r3, #30
 800541c:	d413      	bmi.n	8005446 <_printf_i+0x23a>
 800541e:	68e0      	ldr	r0, [r4, #12]
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	4298      	cmp	r0, r3
 8005424:	bfb8      	it	lt
 8005426:	4618      	movlt	r0, r3
 8005428:	e7a4      	b.n	8005374 <_printf_i+0x168>
 800542a:	2301      	movs	r3, #1
 800542c:	4632      	mov	r2, r6
 800542e:	4649      	mov	r1, r9
 8005430:	4640      	mov	r0, r8
 8005432:	47d0      	blx	sl
 8005434:	3001      	adds	r0, #1
 8005436:	d09b      	beq.n	8005370 <_printf_i+0x164>
 8005438:	3501      	adds	r5, #1
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	9903      	ldr	r1, [sp, #12]
 800543e:	1a5b      	subs	r3, r3, r1
 8005440:	42ab      	cmp	r3, r5
 8005442:	dcf2      	bgt.n	800542a <_printf_i+0x21e>
 8005444:	e7eb      	b.n	800541e <_printf_i+0x212>
 8005446:	2500      	movs	r5, #0
 8005448:	f104 0619 	add.w	r6, r4, #25
 800544c:	e7f5      	b.n	800543a <_printf_i+0x22e>
 800544e:	bf00      	nop
 8005450:	08005919 	.word	0x08005919
 8005454:	0800592a 	.word	0x0800592a

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	; (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb feb4 	bl	80011d0 <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000324 	.word	0x20000324

08005478 <__sread>:
 8005478:	b510      	push	{r4, lr}
 800547a:	460c      	mov	r4, r1
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	f000 f8e0 	bl	8005644 <_read_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	bfab      	itete	ge
 8005488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800548a:	89a3      	ldrhlt	r3, [r4, #12]
 800548c:	181b      	addge	r3, r3, r0
 800548e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005492:	bfac      	ite	ge
 8005494:	6563      	strge	r3, [r4, #84]	; 0x54
 8005496:	81a3      	strhlt	r3, [r4, #12]
 8005498:	bd10      	pop	{r4, pc}

0800549a <__swrite>:
 800549a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549e:	461f      	mov	r7, r3
 80054a0:	898b      	ldrh	r3, [r1, #12]
 80054a2:	05db      	lsls	r3, r3, #23
 80054a4:	4605      	mov	r5, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	4616      	mov	r6, r2
 80054aa:	d505      	bpl.n	80054b8 <__swrite+0x1e>
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	2302      	movs	r3, #2
 80054b2:	2200      	movs	r2, #0
 80054b4:	f000 f868 	bl	8005588 <_lseek_r>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	4628      	mov	r0, r5
 80054ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ce:	f000 b817 	b.w	8005500 <_write_r>

080054d2 <__sseek>:
 80054d2:	b510      	push	{r4, lr}
 80054d4:	460c      	mov	r4, r1
 80054d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054da:	f000 f855 	bl	8005588 <_lseek_r>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	bf15      	itete	ne
 80054e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80054e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ee:	81a3      	strheq	r3, [r4, #12]
 80054f0:	bf18      	it	ne
 80054f2:	81a3      	strhne	r3, [r4, #12]
 80054f4:	bd10      	pop	{r4, pc}

080054f6 <__sclose>:
 80054f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fa:	f000 b813 	b.w	8005524 <_close_r>
	...

08005500 <_write_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_write_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fb fe0d 	bl	800112e <_write>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_write_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_write_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000324 	.word	0x20000324

08005524 <_close_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d06      	ldr	r5, [pc, #24]	; (8005540 <_close_r+0x1c>)
 8005528:	2300      	movs	r3, #0
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fb fe19 	bl	8001166 <_close>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_close_r+0x1a>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_close_r+0x1a>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20000324 	.word	0x20000324

08005544 <_fstat_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d07      	ldr	r5, [pc, #28]	; (8005564 <_fstat_r+0x20>)
 8005548:	2300      	movs	r3, #0
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	f7fb fe14 	bl	800117e <_fstat>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d102      	bne.n	8005560 <_fstat_r+0x1c>
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	b103      	cbz	r3, 8005560 <_fstat_r+0x1c>
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	bd38      	pop	{r3, r4, r5, pc}
 8005562:	bf00      	nop
 8005564:	20000324 	.word	0x20000324

08005568 <_isatty_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d06      	ldr	r5, [pc, #24]	; (8005584 <_isatty_r+0x1c>)
 800556c:	2300      	movs	r3, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fb fe13 	bl	800119e <_isatty>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_isatty_r+0x1a>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_isatty_r+0x1a>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20000324 	.word	0x20000324

08005588 <_lseek_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	; (80055a8 <_lseek_r+0x20>)
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	2200      	movs	r2, #0
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f7fb fe0c 	bl	80011b4 <_lseek>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_lseek_r+0x1e>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_lseek_r+0x1e>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	20000324 	.word	0x20000324

080055ac <memmove>:
 80055ac:	4288      	cmp	r0, r1
 80055ae:	b510      	push	{r4, lr}
 80055b0:	eb01 0402 	add.w	r4, r1, r2
 80055b4:	d902      	bls.n	80055bc <memmove+0x10>
 80055b6:	4284      	cmp	r4, r0
 80055b8:	4623      	mov	r3, r4
 80055ba:	d807      	bhi.n	80055cc <memmove+0x20>
 80055bc:	1e43      	subs	r3, r0, #1
 80055be:	42a1      	cmp	r1, r4
 80055c0:	d008      	beq.n	80055d4 <memmove+0x28>
 80055c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ca:	e7f8      	b.n	80055be <memmove+0x12>
 80055cc:	4402      	add	r2, r0
 80055ce:	4601      	mov	r1, r0
 80055d0:	428a      	cmp	r2, r1
 80055d2:	d100      	bne.n	80055d6 <memmove+0x2a>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055de:	e7f7      	b.n	80055d0 <memmove+0x24>

080055e0 <__malloc_lock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__malloc_lock+0x8>)
 80055e2:	f7ff b9df 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	2000031c 	.word	0x2000031c

080055ec <__malloc_unlock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <__malloc_unlock+0x8>)
 80055ee:	f7ff b9da 	b.w	80049a6 <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	2000031c 	.word	0x2000031c

080055f8 <_realloc_r>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	4607      	mov	r7, r0
 80055fc:	4614      	mov	r4, r2
 80055fe:	460e      	mov	r6, r1
 8005600:	b921      	cbnz	r1, 800560c <_realloc_r+0x14>
 8005602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005606:	4611      	mov	r1, r2
 8005608:	f7ff ba82 	b.w	8004b10 <_malloc_r>
 800560c:	b922      	cbnz	r2, 8005618 <_realloc_r+0x20>
 800560e:	f7ff fa2f 	bl	8004a70 <_free_r>
 8005612:	4625      	mov	r5, r4
 8005614:	4628      	mov	r0, r5
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005618:	f000 f826 	bl	8005668 <_malloc_usable_size_r>
 800561c:	42a0      	cmp	r0, r4
 800561e:	d20f      	bcs.n	8005640 <_realloc_r+0x48>
 8005620:	4621      	mov	r1, r4
 8005622:	4638      	mov	r0, r7
 8005624:	f7ff fa74 	bl	8004b10 <_malloc_r>
 8005628:	4605      	mov	r5, r0
 800562a:	2800      	cmp	r0, #0
 800562c:	d0f2      	beq.n	8005614 <_realloc_r+0x1c>
 800562e:	4631      	mov	r1, r6
 8005630:	4622      	mov	r2, r4
 8005632:	f7fe fe7b 	bl	800432c <memcpy>
 8005636:	4631      	mov	r1, r6
 8005638:	4638      	mov	r0, r7
 800563a:	f7ff fa19 	bl	8004a70 <_free_r>
 800563e:	e7e9      	b.n	8005614 <_realloc_r+0x1c>
 8005640:	4635      	mov	r5, r6
 8005642:	e7e7      	b.n	8005614 <_realloc_r+0x1c>

08005644 <_read_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d07      	ldr	r5, [pc, #28]	; (8005664 <_read_r+0x20>)
 8005648:	4604      	mov	r4, r0
 800564a:	4608      	mov	r0, r1
 800564c:	4611      	mov	r1, r2
 800564e:	2200      	movs	r2, #0
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f7fb fd4e 	bl	80010f4 <_read>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_read_r+0x1e>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_read_r+0x1e>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20000324 	.word	0x20000324

08005668 <_malloc_usable_size_r>:
 8005668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800566c:	1f18      	subs	r0, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	bfbc      	itt	lt
 8005672:	580b      	ldrlt	r3, [r1, r0]
 8005674:	18c0      	addlt	r0, r0, r3
 8005676:	4770      	bx	lr

08005678 <_init>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr

08005684 <_fini>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr
