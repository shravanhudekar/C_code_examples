
SPI_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005448  08005448  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005450  08005450  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000238  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a8  200002a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012920  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002479  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e58  00000000  00000000  00035d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022438  00000000  00000000  00036bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c71  00000000  00000000  00059000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce2e3  00000000  00000000  00069c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137f54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004794  00000000  00000000  00137fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005358 	.word	0x08005358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005358 	.word	0x08005358

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fd8c 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f846 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f96c 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f942 	bl	8000800 <MX_DMA_Init>
  MX_SPI1_Init();
 800057c:	f000 f8aa 	bl	80006d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f914 	bl	80007ac <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000584:	f000 f8dc 	bl	8000740 <MX_TIM6_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 8000588:	4815      	ldr	r0, [pc, #84]	; (80005e0 <main+0x78>)
 800058a:	f003 f8d5 	bl	8003738 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  //*******************************TRANSMIT*****************************************
  //1. bring slave select to low
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4814      	ldr	r0, [pc, #80]	; (80005e4 <main+0x7c>)
 8000594:	f001 fb44 	bl	8001c20 <HAL_GPIO_WritePin>

  //2. set transmit register and data (to enable accelerometer x-axis and output data to 3Hz)
  	  Tx_buff[0]=0x20; //transmit register
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <main+0x80>)
 800059a:	2220      	movs	r2, #32
 800059c:	701a      	strb	r2, [r3, #0]
  	  Tx_buff[1]=0x17; //Data
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <main+0x80>)
 80005a0:	2217      	movs	r2, #23
 80005a2:	705a      	strb	r2, [r3, #1]

  //3. transmit
  	  HAL_SPI_Transmit_IT(&hspi1, Tx_buff, 2);
 80005a4:	2202      	movs	r2, #2
 80005a6:	4910      	ldr	r1, [pc, #64]	; (80005e8 <main+0x80>)
 80005a8:	4810      	ldr	r0, [pc, #64]	; (80005ec <main+0x84>)
 80005aa:	f002 f9fd 	bl	80029a8 <HAL_SPI_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(count==16)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <main+0x88>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b10      	cmp	r3, #16
 80005b4:	d1fb      	bne.n	80005ae <main+0x46>
	  		{
	  			printf("X: %4d     Y: %4d    Z: %4d\r\n",Rx_buff[0],Rx_buff[2],Rx_buff[4]);
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x8c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <main+0x8c>)
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <main+0x8c>)
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <main+0x90>)
 80005c8:	f003 ff70 	bl	80044ac <iprintf>
	  			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <main+0x94>)
 80005d2:	f001 fb3e 	bl	8001c52 <HAL_GPIO_TogglePin>
	  			count=0;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <main+0x88>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	  if(count==16)
 80005dc:	e7e7      	b.n	80005ae <main+0x46>
 80005de:	bf00      	nop
 80005e0:	200000a0 	.word	0x200000a0
 80005e4:	40021000 	.word	0x40021000
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	200000e8 	.word	0x200000e8
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	200001e4 	.word	0x200001e4
 80005f8:	08005370 	.word	0x08005370
 80005fc:	40020c00 	.word	0x40020c00

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 ff44 	bl	800449c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fb22 	bl	8001cd0 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f000 fa09 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2105      	movs	r1, #5
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fd83 	bl	80021c0 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c0:	f000 f9f2 	bl	8000aa8 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2228      	movs	r2, #40	; 0x28
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f001 ff79 	bl	800261c <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f9ba 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000e8 	.word	0x200000e8
 800073c:	40013000 	.word	0x40013000

08000740 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_TIM6_Init+0x64>)
 8000750:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_TIM6_Init+0x68>)
 8000752:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_TIM6_Init+0x64>)
 8000756:	2254      	movs	r2, #84	; 0x54
 8000758:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_TIM6_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_TIM6_Init+0x64>)
 8000762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000766:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_TIM6_Init+0x64>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_TIM6_Init+0x64>)
 8000770:	f002 ff92 	bl	8003698 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800077a:	f000 f995 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_TIM6_Init+0x64>)
 800078c:	f003 fa14 	bl	8003bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000796:	f000 f987 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	40001000 	.word	0x40001000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f003 fa78 	bl	8003cd8 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f95b 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000140 	.word	0x20000140
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_DMA_Init+0x4c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_DMA_Init+0x4c>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_DMA_Init+0x4c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2038      	movs	r0, #56	; 0x38
 8000828:	f000 fd28 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800082c:	2038      	movs	r0, #56	; 0x38
 800082e:	f000 fd41 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	203b      	movs	r0, #59	; 0x3b
 8000838:	f000 fd20 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800083c:	203b      	movs	r0, #59	; 0x3b
 800083e:	f000 fd39 	bl	80012b4 <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b41      	ldr	r3, [pc, #260]	; (8000970 <MX_GPIO_Init+0x120>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a40      	ldr	r2, [pc, #256]	; (8000970 <MX_GPIO_Init+0x120>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_GPIO_Init+0x120>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <MX_GPIO_Init+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a39      	ldr	r2, [pc, #228]	; (8000970 <MX_GPIO_Init+0x120>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b37      	ldr	r3, [pc, #220]	; (8000970 <MX_GPIO_Init+0x120>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <MX_GPIO_Init+0x120>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a32      	ldr	r2, [pc, #200]	; (8000970 <MX_GPIO_Init+0x120>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <MX_GPIO_Init+0x120>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <MX_GPIO_Init+0x120>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <MX_GPIO_Init+0x120>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_GPIO_Init+0x120>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2108      	movs	r1, #8
 80008da:	4826      	ldr	r0, [pc, #152]	; (8000974 <MX_GPIO_Init+0x124>)
 80008dc:	f001 f9a0 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008e6:	4824      	ldr	r0, [pc, #144]	; (8000978 <MX_GPIO_Init+0x128>)
 80008e8:	f001 f99a 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008ec:	2308      	movs	r3, #8
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_GPIO_Init+0x124>)
 8000904:	f000 fff0 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000908:	2301      	movs	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0x12c>)
 800091c:	f000 ffe4 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000920:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	480f      	ldr	r0, [pc, #60]	; (8000978 <MX_GPIO_Init+0x128>)
 800093a:	f000 ffd5 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_GPIO_Init+0x124>)
 8000954:	f000 ffc8 	bl	80018e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2006      	movs	r0, #6
 800095e:	f000 fc8d 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000962:	2006      	movs	r0, #6
 8000964:	f000 fca6 	bl	80012b4 <HAL_NVIC_EnableIRQ>

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000

08000980 <receive_sensor>:

/* USER CODE BEGIN 4 */
void receive_sensor(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	//1. SS to low
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2108      	movs	r1, #8
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <receive_sensor+0x30>)
 800098a:	f001 f949 	bl	8001c20 <HAL_GPIO_WritePin>

	//2. set register value to read mode
	Tx_buff[0]=0x29|0x80; //to set MSB bit to high read mode
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <receive_sensor+0x34>)
 8000990:	22a9      	movs	r2, #169	; 0xa9
 8000992:	701a      	strb	r2, [r3, #0]
	//Tx_buff[1]=0x2B|0x80; //to set MSB bit to high read mode
	//Tx_buff[2]=0x2D|0x80; //to set MSB bit to high read mode

	//3. transmit
	HAL_SPI_Transmit(&hspi1, Tx_buff, 3, 50);
 8000994:	2332      	movs	r3, #50	; 0x32
 8000996:	2203      	movs	r2, #3
 8000998:	4906      	ldr	r1, [pc, #24]	; (80009b4 <receive_sensor+0x34>)
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <receive_sensor+0x38>)
 800099c:	f001 fec7 	bl	800272e <HAL_SPI_Transmit>

	//4. Receive
	HAL_SPI_Receive_IT(&hspi1, Rx_buff, 5);
 80009a0:	2205      	movs	r2, #5
 80009a2:	4906      	ldr	r1, [pc, #24]	; (80009bc <receive_sensor+0x3c>)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <receive_sensor+0x38>)
 80009a6:	f002 f889 	bl	8002abc <HAL_SPI_Receive_IT>
	//	HAL_SPI_Receive_IT(&hspi1, Rx_buff, 1); // as in this case its only 1byte register

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	2000009c 	.word	0x2000009c
 80009b8:	200000e8 	.word	0x200000e8
 80009bc:	200001e4 	.word	0x200001e4

080009c0 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	//5. SS to high
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2108      	movs	r1, #8
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <HAL_SPI_RxCpltCallback+0x20>)
 80009ce:	f001 f927 	bl	8001c20 <HAL_GPIO_WritePin>
		receive_sensor();
 80009d2:	f7ff ffd5 	bl	8000980 <receive_sensor>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  //4. bring slave select pin to High
	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2108      	movs	r1, #8
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <HAL_SPI_TxCpltCallback+0x20>)
 80009f2:	f001 f915 	bl	8001c20 <HAL_GPIO_WritePin>
	  	receive_sensor();
 80009f6:	f7ff ffc3 	bl	8000980 <receive_sensor>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <__io_putchar>:
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//}

PUTCHAR_PROTOTYPE
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a10:	1d39      	adds	r1, r7, #4
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	2201      	movs	r2, #1
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <__io_putchar+0x20>)
 8000a1a:	f003 f9aa 	bl	8003d72 <HAL_UART_Transmit>

  return ch;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000140 	.word	0x20000140

08000a2c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]

	  /* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <__io_getchar+0x38>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <__io_getchar+0x38>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]


  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a4c:	1df9      	adds	r1, r7, #7
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	2201      	movs	r2, #1
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <__io_getchar+0x38>)
 8000a56:	f003 fa1e 	bl	8003e96 <HAL_UART_Receive>

  return ch;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000140 	.word	0x20000140

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7a:	f000 fb27 	bl	80010cc <HAL_IncTick>
  }

  if(htim->Instance == TIM6) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d105      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  	  count++;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a92:	701a      	strb	r2, [r3, #0]
	  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	2000008c 	.word	0x2000008c

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fbb7 	bl	8001266 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a4b      	ldr	r2, [pc, #300]	; (8000c50 <HAL_SPI_MspInit+0x14c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f040 8090 	bne.w	8000c48 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	4b49      	ldr	r3, [pc, #292]	; (8000c54 <HAL_SPI_MspInit+0x150>)
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_SPI_MspInit+0x150>)
 8000b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b36:	6453      	str	r3, [r2, #68]	; 0x44
 8000b38:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <HAL_SPI_MspInit+0x150>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <HAL_SPI_MspInit+0x150>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a41      	ldr	r2, [pc, #260]	; (8000c54 <HAL_SPI_MspInit+0x150>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <HAL_SPI_MspInit+0x150>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b60:	23f0      	movs	r3, #240	; 0xf0
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b70:	2305      	movs	r3, #5
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4837      	ldr	r0, [pc, #220]	; (8000c58 <HAL_SPI_MspInit+0x154>)
 8000b7c:	f000 feb4 	bl	80018e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000b82:	4a37      	ldr	r2, [pc, #220]	; (8000c60 <HAL_SPI_MspInit+0x15c>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000b88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b8c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000bc0:	4826      	ldr	r0, [pc, #152]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000bc2:	f000 fb85 	bl	80012d0 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000bcc:	f7ff ff6c 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <HAL_SPI_MspInit+0x158>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_SPI_MspInit+0x164>)
 8000be0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000be4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000bec:	2240      	movs	r2, #64	; 0x40
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c1e:	f000 fb57 	bl	80012d0 <HAL_DMA_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000c28:	f7ff ff3e 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c30:	649a      	str	r2, [r3, #72]	; 0x48
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <HAL_SPI_MspInit+0x160>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2023      	movs	r0, #35	; 0x23
 8000c3e:	f000 fb1d 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c42:	2023      	movs	r0, #35	; 0x23
 8000c44:	f000 fb36 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	20000184 	.word	0x20000184
 8000c60:	40026410 	.word	0x40026410
 8000c64:	200001ec 	.word	0x200001ec
 8000c68:	40026458 	.word	0x40026458

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_TIM_Base_MspInit+0x48>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d115      	bne.n	8000caa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2036      	movs	r0, #54	; 0x36
 8000ca0:	f000 faec 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca4:	2036      	movs	r0, #54	; 0x36
 8000ca6:	f000 fb05 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40001000 	.word	0x40001000
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d32:	f000 fdd9 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2019      	movs	r0, #25
 8000d62:	f000 fa8b 	bl	800127c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d66:	2019      	movs	r0, #25
 8000d68:	f000 faa4 	bl	80012b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_InitTick+0xa4>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_InitTick+0xa4>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_InitTick+0xa4>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d88:	f107 0210 	add.w	r2, r7, #16
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fc10 	bl	80025b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d98:	f001 fbfa 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_InitTick+0xa8>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	0c9b      	lsrs	r3, r3, #18
 8000dac:	3b01      	subs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_InitTick+0xac>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <HAL_InitTick+0xb0>)
 8000db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_InitTick+0xac>)
 8000db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dbc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_InitTick+0xac>)
 8000dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_InitTick+0xac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_InitTick+0xac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <HAL_InitTick+0xac>)
 8000dd2:	f002 fc61 	bl	8003698 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d104      	bne.n	8000de6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <HAL_InitTick+0xac>)
 8000dde:	f002 fcab 	bl	8003738 <HAL_TIM_Base_Start_IT>
 8000de2:	4603      	mov	r3, r0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	2000024c 	.word	0x2000024c
 8000dfc:	40010000 	.word	0x40010000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 ff14 	bl	8001c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e6a:	f002 fcd5 	bl	8003818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000024c 	.word	0x2000024c

08000e78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <SPI1_IRQHandler+0x10>)
 8000e7e:	f001 ff4f 	bl	8002d20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000e8 	.word	0x200000e8

08000e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM6_DAC_IRQHandler+0x10>)
 8000e92:	f002 fcc1 	bl	8003818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000a0 	.word	0x200000a0

08000ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ea6:	f000 fae3 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000184 	.word	0x20000184

08000eb4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA2_Stream3_IRQHandler+0x10>)
 8000eba:	f000 fad9 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001ec 	.word	0x200001ec

08000ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e00a      	b.n	8000ef0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eda:	f7ff fda7 	bl	8000a2c <__io_getchar>
 8000ede:	4601      	mov	r1, r0
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf0      	blt.n	8000eda <_read+0x12>
	}

return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e009      	b.n	8000f28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fd73 	bl	8000a08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf1      	blt.n	8000f14 <_write+0x12>
	}
	return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_close>:

int _close(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	605a      	str	r2, [r3, #4]
	return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_isatty>:

int _isatty(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f003 fa38 	bl	8004448 <__errno>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20020000 	.word	0x20020000
 8001004:	00000400 	.word	0x00000400
 8001008:	20000090 	.word	0x20000090
 800100c:	200002a8 	.word	0x200002a8

08001010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800105e:	f7ff ffd7 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f003 f9f7 	bl	8004454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fa7f 	bl	8000568 <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800106c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001078:	08005458 	.word	0x08005458
  ldr r2, =_sbss
 800107c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001080:	200002a8 	.word	0x200002a8

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_Init+0x40>)
 8001092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_Init+0x40>)
 800109e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_Init+0x40>)
 80010aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f8d8 	bl	8001266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fe48 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fcfa 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023c00 	.word	0x40023c00

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000294 	.word	0x20000294

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000294 	.word	0x20000294

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff4c 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128e:	f7ff ff61 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	6978      	ldr	r0, [r7, #20]
 800129a:	f7ff ffb1 	bl	8001200 <NVIC_EncodePriority>
 800129e:	4602      	mov	r2, r0
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff80 	bl	80011ac <__NVIC_SetPriority>
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff54 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ff0a 	bl	80010f4 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e099      	b.n	8001420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130c:	e00f      	b.n	800132e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800130e:	f7ff fef1 	bl	80010f4 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b05      	cmp	r3, #5
 800131a:	d908      	bls.n	800132e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e078      	b.n	8001420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e8      	bne.n	800130e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <HAL_DMA_Init+0x158>)
 8001348:	4013      	ands	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2b04      	cmp	r3, #4
 8001386:	d107      	bne.n	8001398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4313      	orrs	r3, r2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f023 0307 	bic.w	r3, r3, #7
 80013ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d117      	bne.n	80013f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00e      	beq.n	80013f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fa0b 	bl	80017f0 <DMA_CheckFifoParam>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013ee:	2301      	movs	r3, #1
 80013f0:	e016      	b.n	8001420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f9c2 	bl	8001784 <DMA_CalcBaseAndBitshift>
 8001400:	4603      	mov	r3, r0
 8001402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	223f      	movs	r2, #63	; 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	f010803f 	.word	0xf010803f

0800142c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d004      	beq.n	800144a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00c      	b.n	8001464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2205      	movs	r2, #5
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800147c:	4b92      	ldr	r3, [pc, #584]	; (80016c8 <HAL_DMA_IRQHandler+0x258>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a92      	ldr	r2, [pc, #584]	; (80016cc <HAL_DMA_IRQHandler+0x25c>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149a:	2208      	movs	r2, #8
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01a      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2208      	movs	r2, #8
 80014ca:	409a      	lsls	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2201      	movs	r2, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2201      	movs	r2, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2204      	movs	r2, #4
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	2204      	movs	r2, #4
 8001536:	409a      	lsls	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2210      	movs	r2, #16
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d043      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03c      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	2210      	movs	r2, #16
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d024      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
 800159e:	e01f      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0208 	bic.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2220      	movs	r2, #32
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 808e 	beq.w	800170e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8086 	beq.w	800170e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2220      	movs	r2, #32
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b05      	cmp	r3, #5
 8001618:	d136      	bne.n	8001688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0216 	bic.w	r2, r2, #22
 8001628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <HAL_DMA_IRQHandler+0x1da>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	223f      	movs	r2, #63	; 0x3f
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07d      	beq.n	800177a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
        }
        return;
 8001686:	e078      	b.n	800177a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01c      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d108      	bne.n	80016b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d030      	beq.n	800170e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e02b      	b.n	800170e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d027      	beq.n	800170e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
 80016c6:	e022      	b.n	800170e <HAL_DMA_IRQHandler+0x29e>
 80016c8:	20000000 	.word	0x20000000
 80016cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10f      	bne.n	80016fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0210 	bic.w	r2, r2, #16
 80016ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	2b00      	cmp	r3, #0
 8001714:	d032      	beq.n	800177c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d022      	beq.n	8001768 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	429a      	cmp	r2, r3
 8001744:	d307      	bcc.n	8001756 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f2      	bne.n	800173a <HAL_DMA_IRQHandler+0x2ca>
 8001754:	e000      	b.n	8001758 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001756:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
 8001778:	e000      	b.n	800177c <HAL_DMA_IRQHandler+0x30c>
        return;
 800177a:	bf00      	nop
    }
  }
}
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop

08001784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3b10      	subs	r3, #16
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <DMA_CalcBaseAndBitshift+0x64>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <DMA_CalcBaseAndBitshift+0x68>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d909      	bls.n	80017c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	; 0x58
 80017c4:	e007      	b.n	80017d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	aaaaaaab 	.word	0xaaaaaaab
 80017ec:	080053a8 	.word	0x080053a8

080017f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11f      	bne.n	800184a <DMA_CheckFifoParam+0x5a>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d856      	bhi.n	80018be <DMA_CheckFifoParam+0xce>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <DMA_CheckFifoParam+0x28>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001829 	.word	0x08001829
 800181c:	0800183b 	.word	0x0800183b
 8001820:	08001829 	.word	0x08001829
 8001824:	080018bf 	.word	0x080018bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d046      	beq.n	80018c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001838:	e043      	b.n	80018c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001842:	d140      	bne.n	80018c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e03d      	b.n	80018c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001852:	d121      	bne.n	8001898 <DMA_CheckFifoParam+0xa8>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d837      	bhi.n	80018ca <DMA_CheckFifoParam+0xda>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <DMA_CheckFifoParam+0x70>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001871 	.word	0x08001871
 8001864:	08001877 	.word	0x08001877
 8001868:	08001871 	.word	0x08001871
 800186c:	08001889 	.word	0x08001889
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
      break;
 8001874:	e030      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d025      	beq.n	80018ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001886:	e022      	b.n	80018ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001890:	d11f      	bne.n	80018d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001896:	e01c      	b.n	80018d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d903      	bls.n	80018a6 <DMA_CheckFifoParam+0xb6>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d003      	beq.n	80018ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018a4:	e018      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      break;
 80018aa:	e015      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e00b      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018be:	bf00      	nop
 80018c0:	e00a      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
 80018c4:	e008      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e006      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e004      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ce:	bf00      	nop
 80018d0:	e002      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018d2:	bf00      	nop
 80018d4:	e000      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
    }
  } 
  
  return status; 
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e16b      	b.n	8001bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 815a 	bne.w	8001bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80b4 	beq.w	8001bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <HAL_GPIO_Init+0x30c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a5f      	ldr	r2, [pc, #380]	; (8001bf4 <HAL_GPIO_Init+0x30c>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_GPIO_Init+0x30c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_GPIO_Init+0x310>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_GPIO_Init+0x314>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x318>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x222>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_GPIO_Init+0x31c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x21e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4f      	ldr	r2, [pc, #316]	; (8001c08 <HAL_GPIO_Init+0x320>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4e      	ldr	r2, [pc, #312]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x216>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4d      	ldr	r2, [pc, #308]	; (8001c10 <HAL_GPIO_Init+0x328>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x212>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4c      	ldr	r2, [pc, #304]	; (8001c14 <HAL_GPIO_Init+0x32c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x20e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4b      	ldr	r2, [pc, #300]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x20a>
 8001aee:	2307      	movs	r3, #7
 8001af0:	e00e      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001af2:	2308      	movs	r3, #8
 8001af4:	e00c      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001af6:	2306      	movs	r3, #6
 8001af8:	e00a      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x228>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x310>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b52:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b58:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f ae90 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021400 	.word	0x40021400
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40021c00 	.word	0x40021c00
 8001c1c:	40013c00 	.word	0x40013c00

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	400b      	ands	r3, r1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f806 	bl	8001cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e264      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d075      	beq.n	8001dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cee:	4ba3      	ldr	r3, [pc, #652]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d00c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfa:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d112      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d06:	4b9d      	ldr	r3, [pc, #628]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d12:	d10b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	4b99      	ldr	r3, [pc, #612]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x108>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d157      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e23f      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0x74>
 8001d36:	4b91      	ldr	r3, [pc, #580]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a90      	ldr	r2, [pc, #576]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xb0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a8a      	ldr	r2, [pc, #552]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a87      	ldr	r2, [pc, #540]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xb0>
 8001d68:	4b84      	ldr	r3, [pc, #528]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a83      	ldr	r2, [pc, #524]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a80      	ldr	r2, [pc, #512]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff f9b4 	bl	80010f4 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff f9b0 	bl	80010f4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e204      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xc0>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f9a0 	bl	80010f4 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f99c 	bl	80010f4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1f0      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b6c      	ldr	r3, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0xe8>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d063      	beq.n	8001eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001de6:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x152>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1c4      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b56      	ldr	r3, [pc, #344]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4952      	ldr	r1, [pc, #328]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e03a      	b.n	8001eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <HAL_RCC_OscConfig+0x2b0>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff f955 	bl	80010f4 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f951 	bl	80010f4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1a5      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4940      	ldr	r1, [pc, #256]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_RCC_OscConfig+0x2b0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f934 	bl	80010f4 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff f930 	bl	80010f4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e184      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d030      	beq.n	8001f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x2b4>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f914 	bl	80010f4 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f910 	bl	80010f4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e164      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x200>
 8001eee:	e015      	b.n	8001f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x2b4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f8fd 	bl	80010f4 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff f8f9 	bl	80010f4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e14d      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a0 	beq.w	800206a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x2b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCC_OscConfig+0x2b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <HAL_RCC_OscConfig+0x2b8>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7ff f8bf 	bl	80010f4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e011      	b.n	8001f9e <HAL_RCC_OscConfig+0x2ce>
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470000 	.word	0x42470000
 8001f84:	42470e80 	.word	0x42470e80
 8001f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7ff f8b2 	bl	80010f4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e106      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_OscConfig+0x4e4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2f0>
 8001fb2:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4a80      	ldr	r2, [pc, #512]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x32a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x312>
 8001fc8:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a7a      	ldr	r2, [pc, #488]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	4b78      	ldr	r3, [pc, #480]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a77      	ldr	r2, [pc, #476]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x32a>
 8001fe2:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a74      	ldr	r2, [pc, #464]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a71      	ldr	r2, [pc, #452]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff f877 	bl	80010f4 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff f873 	bl	80010f4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0c5      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x33a>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff f861 	bl	80010f4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff f85d 	bl	80010f4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0af      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 809b 	beq.w	80021aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d05c      	beq.n	800213a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d141      	bne.n	800210c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x4ec>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff f831 	bl	80010f4 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff f82d 	bl	80010f4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e081      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	019b      	lsls	r3, r3, #6
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	061b      	lsls	r3, r3, #24
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0x4ec>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff f806 	bl	80010f4 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f802 	bl	80010f4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e056      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x41c>
 800210a:	e04e      	b.n	80021aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x4ec>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe ffef 	bl	80010f4 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe ffeb 	bl	80010f4 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e03f      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x44a>
 8002138:	e037      	b.n	80021aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e032      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_RCC_OscConfig+0x4e8>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d028      	beq.n	80021a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d11a      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800217c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40007000 	.word	0x40007000
 80021b8:	40023800 	.word	0x40023800
 80021bc:	42470060 	.word	0x42470060

080021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0cc      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d90c      	bls.n	80021fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0b8      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800221e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	494d      	ldr	r1, [pc, #308]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d044      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d119      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d003      	beq.n	800227e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	2b03      	cmp	r3, #3
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e067      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4934      	ldr	r1, [pc, #208]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7fe ff20 	bl	80010f4 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe ff1c 	bl	80010f4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e04f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d20c      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e032      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4916      	ldr	r1, [pc, #88]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002346:	f000 f821 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800234a:	4602      	mov	r2, r0
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fcf0 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00
 800237c:	40023800 	.word	0x40023800
 8002380:	08005390 	.word	0x08005390
 8002384:	20000000 	.word	0x20000000
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	2300      	movs	r3, #0
 800239e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a4:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d00d      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x40>
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	f200 80bd 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x1a4>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023be:	e0b7      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b61      	ldr	r3, [pc, #388]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023c2:	60bb      	str	r3, [r7, #8]
       break;
 80023c4:	e0b7      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80023c8:	60bb      	str	r3, [r7, #8]
      break;
 80023ca:	e0b4      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023cc:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d04d      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	461a      	mov	r2, r3
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	ea02 0800 	and.w	r8, r2, r0
 80023fa:	ea03 0901 	and.w	r9, r3, r1
 80023fe:	4640      	mov	r0, r8
 8002400:	4649      	mov	r1, r9
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	014b      	lsls	r3, r1, #5
 800240c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002410:	0142      	lsls	r2, r0, #5
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	ebb0 0008 	subs.w	r0, r0, r8
 800241a:	eb61 0109 	sbc.w	r1, r1, r9
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800242c:	0182      	lsls	r2, r0, #6
 800242e:	1a12      	subs	r2, r2, r0
 8002430:	eb63 0301 	sbc.w	r3, r3, r1
 8002434:	f04f 0000 	mov.w	r0, #0
 8002438:	f04f 0100 	mov.w	r1, #0
 800243c:	00d9      	lsls	r1, r3, #3
 800243e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002442:	00d0      	lsls	r0, r2, #3
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	eb12 0208 	adds.w	r2, r2, r8
 800244c:	eb43 0309 	adc.w	r3, r3, r9
 8002450:	f04f 0000 	mov.w	r0, #0
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	0259      	lsls	r1, r3, #9
 800245a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800245e:	0250      	lsls	r0, r2, #9
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f7fd fefe 	bl	8000270 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e04a      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	461a      	mov	r2, r3
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	ea02 0400 	and.w	r4, r2, r0
 8002496:	ea03 0501 	and.w	r5, r3, r1
 800249a:	4620      	mov	r0, r4
 800249c:	4629      	mov	r1, r5
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	014b      	lsls	r3, r1, #5
 80024a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024ac:	0142      	lsls	r2, r0, #5
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	1b00      	subs	r0, r0, r4
 80024b4:	eb61 0105 	sbc.w	r1, r1, r5
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	018b      	lsls	r3, r1, #6
 80024c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024c6:	0182      	lsls	r2, r0, #6
 80024c8:	1a12      	subs	r2, r2, r0
 80024ca:	eb63 0301 	sbc.w	r3, r3, r1
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	00d9      	lsls	r1, r3, #3
 80024d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024dc:	00d0      	lsls	r0, r2, #3
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	1912      	adds	r2, r2, r4
 80024e4:	eb45 0303 	adc.w	r3, r5, r3
 80024e8:	f04f 0000 	mov.w	r0, #0
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	0299      	lsls	r1, r3, #10
 80024f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024f6:	0290      	lsls	r0, r2, #10
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f7fd feb2 	bl	8000270 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	60bb      	str	r3, [r7, #8]
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002532:	60bb      	str	r3, [r7, #8]
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	68bb      	ldr	r3, [r7, #8]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	080053a0 	.word	0x080053a0

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0b5b      	lsrs	r3, r3, #13
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	080053a0 	.word	0x080053a0

080025b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	220f      	movs	r2, #15
 80025c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCC_GetClockConfig+0x60>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	601a      	str	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40023c00 	.word	0x40023c00

0800261c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07b      	b.n	8002726 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800263e:	d009      	beq.n	8002654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
 8002646:	e005      	b.n	8002654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fa48 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	ea42 0103 	orr.w	r1, r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0104 	and.w	r1, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f003 0210 	and.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002714:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b088      	sub	sp, #32
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_SPI_Transmit+0x22>
 800274c:	2302      	movs	r3, #2
 800274e:	e126      	b.n	800299e <HAL_SPI_Transmit+0x270>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002758:	f7fe fccc 	bl	80010f4 <HAL_GetTick>
 800275c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002772:	e10b      	b.n	800298c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_SPI_Transmit+0x52>
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002784:	e102      	b.n	800298c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027cc:	d10f      	bne.n	80027ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d007      	beq.n	800280c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002814:	d14b      	bne.n	80028ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_SPI_Transmit+0xf6>
 800281e:	8afb      	ldrh	r3, [r7, #22]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d13e      	bne.n	80028a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002848:	e02b      	b.n	80028a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b02      	cmp	r3, #2
 8002856:	d112      	bne.n	800287e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	1c9a      	adds	r2, r3, #2
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	86da      	strh	r2, [r3, #54]	; 0x36
 800287c:	e011      	b.n	80028a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800287e:	f7fe fc39 	bl	80010f4 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d803      	bhi.n	8002896 <HAL_SPI_Transmit+0x168>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d102      	bne.n	800289c <HAL_SPI_Transmit+0x16e>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028a0:	e074      	b.n	800298c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ce      	bne.n	800284a <HAL_SPI_Transmit+0x11c>
 80028ac:	e04c      	b.n	8002948 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_SPI_Transmit+0x18e>
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d140      	bne.n	800293e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028e2:	e02c      	b.n	800293e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d113      	bne.n	800291a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	86da      	strh	r2, [r3, #54]	; 0x36
 8002918:	e011      	b.n	800293e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800291a:	f7fe fbeb 	bl	80010f4 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d803      	bhi.n	8002932 <HAL_SPI_Transmit+0x204>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d102      	bne.n	8002938 <HAL_SPI_Transmit+0x20a>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800293c:	e026      	b.n	800298c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1cd      	bne.n	80028e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fd4b 	bl	80033e8 <SPI_EndRxTxTransaction>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e000      	b.n	800298c <HAL_SPI_Transmit+0x25e>
  }

error:
 800298a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800299c:	7ffb      	ldrb	r3, [r7, #31]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_SPI_Transmit_IT+0x20>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e06f      	b.n	8002aa8 <HAL_SPI_Transmit_IT+0x100>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Transmit_IT+0x34>
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029e0:	e05d      	b.n	8002a9e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
 80029f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029f2:	e054      	b.n	8002a9e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2203      	movs	r2, #3
 80029f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_SPI_Transmit_IT+0x10c>)
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
 8002a3a:	e002      	b.n	8002a42 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_SPI_Transmit_IT+0x110>)
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4a:	d10f      	bne.n	8002a6c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002a7a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d008      	beq.n	8002a9c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e000      	b.n	8002a9e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8002a9c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	080031c9 	.word	0x080031c9
 8002ab8:	08003183 	.word	0x08003183

08002abc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d110      	bne.n	8002af8 <HAL_SPI_Receive_IT+0x3c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ade:	d10b      	bne.n	8002af8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f882 	bl	8002bf8 <HAL_SPI_TransmitReceive_IT>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e076      	b.n	8002be6 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_SPI_Receive_IT+0x4a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e06f      	b.n	8002be6 <HAL_SPI_Receive_IT+0x12a>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b1e:	e05d      	b.n	8002bdc <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_SPI_Receive_IT+0x70>
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b30:	e054      	b.n	8002bdc <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2204      	movs	r2, #4
 8002b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_SPI_Receive_IT+0x134>)
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
 8002b78:	e002      	b.n	8002b80 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <HAL_SPI_Receive_IT+0x138>)
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	d10f      	bne.n	8002baa <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ba8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002bb8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d008      	beq.n	8002bda <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e000      	b.n	8002bdc <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002bda:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0800313d 	.word	0x0800313d
 8002bf4:	080030f3 	.word	0x080030f3

08002bf8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_SPI_TransmitReceive_IT+0x20>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e075      	b.n	8002d04 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c26:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c2e:	7dbb      	ldrb	r3, [r7, #22]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d00d      	beq.n	8002c50 <HAL_SPI_TransmitReceive_IT+0x58>
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c3a:	d106      	bne.n	8002c4a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <HAL_SPI_TransmitReceive_IT+0x52>
 8002c44:	7dbb      	ldrb	r3, [r7, #22]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c4e:	e054      	b.n	8002cfa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c66:	e048      	b.n	8002cfa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d003      	beq.n	8002c7c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2205      	movs	r2, #5
 8002c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	887a      	ldrh	r2, [r7, #2]
 8002c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	887a      	ldrh	r2, [r7, #2]
 8002c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8002cba:	e005      	b.n	8002cc8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_SPI_TransmitReceive_IT+0x124>)
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002cd6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d008      	beq.n	8002cf8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e000      	b.n	8002cfa <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002cf8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	08003035 	.word	0x08003035
 8002d14:	08003095 	.word	0x08003095
 8002d18:	08002f71 	.word	0x08002f71
 8002d1c:	08002fd5 	.word	0x08002fd5

08002d20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10f      	bne.n	8002d64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    return;
 8002d62:	e0d7      	b.n	8002f14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_SPI_IRQHandler+0x66>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	09db      	lsrs	r3, r3, #7
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
    return;
 8002d84:	e0c6      	b.n	8002f14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_SPI_IRQHandler+0x8c>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80b4 	beq.w	8002f14 <HAL_SPI_IRQHandler+0x1f4>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80ad 	beq.w	8002f14 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d023      	beq.n	8002e0e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d011      	beq.n	8002df6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	e00b      	b.n	8002e0e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
        return;
 8002e0c:	e082      	b.n	8002f14 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0208 	orr.w	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04f      	beq.n	8002f12 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e80:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_SPI_IRQHandler+0x17e>
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d034      	beq.n	8002f08 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0203 	bic.w	r2, r2, #3
 8002eac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_SPI_IRQHandler+0x1fc>)
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fab2 	bl	800142c <HAL_DMA_Abort_IT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee6:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_SPI_IRQHandler+0x1fc>)
 8002ee8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fa9c 	bl	800142c <HAL_DMA_Abort_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002f06:	e003      	b.n	8002f10 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f813 	bl	8002f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f0e:	e000      	b.n	8002f12 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002f10:	bf00      	nop
    return;
 8002f12:	bf00      	nop
  }
}
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08002f49 	.word	0x08002f49

08002f20 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff ffe6 	bl	8002f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f103 020c 	add.w	r2, r3, #12
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10f      	bne.n	8002fcc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa50 	bl	800346c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10f      	bne.n	800302c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa20 	bl	800346c <SPI_CloseRxTx_ISR>
    }
  }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	b292      	uxth	r2, r2
 8003048:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	1c9a      	adds	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10f      	bne.n	800308c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9f0 	bl	800346c <SPI_CloseRxTx_ISR>
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f9c1 	bl	800346c <SPI_CloseRxTx_ISR>
    }
  }
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f103 020c 	add.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa10 	bl	8003554 <SPI_CloseRx_ISR>
  }
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	b292      	uxth	r2, r2
 8003150:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f9ed 	bl	8003554 <SPI_CloseRx_ISR>
  }
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa0a 	bl	80035d4 <SPI_CloseTx_ISR>
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	1c9a      	adds	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9e8 	bl	80035d4 <SPI_CloseTx_ISR>
  }
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800321c:	f7fd ff6a 	bl	80010f4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	4413      	add	r3, r2
 800322a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800322c:	f7fd ff62 	bl	80010f4 <HAL_GetTick>
 8003230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	015b      	lsls	r3, r3, #5
 8003238:	0d1b      	lsrs	r3, r3, #20
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003242:	e054      	b.n	80032ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d050      	beq.n	80032ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800324c:	f7fd ff52 	bl	80010f4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	d902      	bls.n	8003262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d13d      	bne.n	80032de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327a:	d111      	bne.n	80032a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	d004      	beq.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328e:	d107      	bne.n	80032a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a8:	d10f      	bne.n	80032ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e017      	b.n	800330e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4013      	ands	r3, r2
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	bf0c      	ite	eq
 80032fe:	2301      	moveq	r3, #1
 8003300:	2300      	movne	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	429a      	cmp	r2, r3
 800330a:	d19b      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000000 	.word	0x20000000

0800331c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003330:	d111      	bne.n	8003356 <SPI_EndRxTransaction+0x3a>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333a:	d004      	beq.n	8003346 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d107      	bne.n	8003356 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335e:	d12a      	bne.n	80033b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003368:	d012      	beq.n	8003390 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2200      	movs	r2, #0
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff ff49 	bl	800320c <SPI_WaitFlagStateUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02d      	beq.n	80033dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e026      	b.n	80033de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	2101      	movs	r1, #1
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff ff36 	bl	800320c <SPI_WaitFlagStateUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01a      	beq.n	80033dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e013      	b.n	80033de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	2101      	movs	r1, #1
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff ff23 	bl	800320c <SPI_WaitFlagStateUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e000      	b.n	80033de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <SPI_EndRxTxTransaction+0x7c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <SPI_EndRxTxTransaction+0x80>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	0d5b      	lsrs	r3, r3, #21
 8003400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003412:	d112      	bne.n	800343a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff fef4 	bl	800320c <SPI_WaitFlagStateUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e00f      	b.n	800345a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3b01      	subs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d0f2      	beq.n	800343a <SPI_EndRxTxTransaction+0x52>
 8003454:	e000      	b.n	8003458 <SPI_EndRxTxTransaction+0x70>
        break;
 8003456:	bf00      	nop
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000
 8003468:	165e9f81 	.word	0x165e9f81

0800346c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <SPI_CloseRxTx_ISR+0xe0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a35      	ldr	r2, [pc, #212]	; (8003550 <SPI_CloseRxTx_ISR+0xe4>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a5b      	lsrs	r3, r3, #9
 8003480:	2264      	movs	r2, #100	; 0x64
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003488:	f7fd fe34 	bl	80010f4 <HAL_GetTick>
 800348c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0220 	bic.w	r2, r2, #32
 800349c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034b0:	e009      	b.n	80034c6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0eb      	beq.n	800349e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	2164      	movs	r1, #100	; 0x64
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ff8c 	bl	80033e8 <SPI_EndRxTxTransaction>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	d115      	bne.n	8003534 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b04      	cmp	r3, #4
 8003512:	d107      	bne.n	8003524 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fd fa4f 	bl	80009c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003522:	e00e      	b.n	8003542 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fcf7 	bl	8002f20 <HAL_SPI_TxRxCpltCallback>
}
 8003532:	e006      	b.n	8003542 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fcf9 	bl	8002f34 <HAL_SPI_ErrorCallback>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000
 8003550:	057619f1 	.word	0x057619f1

08003554 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800356a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800356c:	f7fd fdc2 	bl	80010f4 <HAL_GetTick>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	2164      	movs	r1, #100	; 0x64
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fed0 	bl	800331c <SPI_EndRxTransaction>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd f9ff 	bl	80009c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80035c2:	e002      	b.n	80035ca <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fcb5 	bl	8002f34 <HAL_SPI_ErrorCallback>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <SPI_CloseTx_ISR+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <SPI_CloseTx_ISR+0xc0>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0a5b      	lsrs	r3, r3, #9
 80035e8:	2264      	movs	r2, #100	; 0x64
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f0:	f7fd fd80 	bl	80010f4 <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003608:	e009      	b.n	800361e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	3b01      	subs	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0eb      	beq.n	80035f6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	2164      	movs	r1, #100	; 0x64
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fed8 	bl	80033e8 <SPI_EndRxTxTransaction>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f043 0220 	orr.w	r2, r3, #32
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fc5b 	bl	8002f34 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800367e:	e002      	b.n	8003686 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd f9af 	bl	80009e4 <HAL_SPI_TxCpltCallback>
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000
 8003694:	057619f1 	.word	0x057619f1

08003698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e041      	b.n	800372e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fad4 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 f9ce 	bl	8003a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e04e      	b.n	80037ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_TIM_Base_Start_IT+0xc4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d01d      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_TIM_Base_Start_IT+0xc8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_TIM_Base_Start_IT+0xcc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <HAL_TIM_Base_Start_IT+0xd0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1b      	ldr	r2, [pc, #108]	; (800380c <HAL_TIM_Base_Start_IT+0xd4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_TIM_Base_Start_IT+0xd8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_TIM_Base_Start_IT+0xdc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d111      	bne.n	80037dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d010      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e007      	b.n	80037ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40001800 	.word	0x40001800

08003818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b02      	cmp	r3, #2
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0202 	mvn.w	r2, #2
 8003844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8ee 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8e0 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f8f1 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0204 	mvn.w	r2, #4
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8c4 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8b6 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8c7 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0208 	mvn.w	r2, #8
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f89a 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f88c 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f89d 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0210 	mvn.w	r2, #16
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2208      	movs	r2, #8
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f870 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f862 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f873 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0201 	mvn.w	r2, #1
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd f866 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f97e 	bl	8003cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f838 	bl	8003a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d10e      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d107      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0220 	mvn.w	r2, #32
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f948 	bl	8003cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <TIM_Base_SetConfig+0x114>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d00f      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <TIM_Base_SetConfig+0x118>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <TIM_Base_SetConfig+0x11c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <TIM_Base_SetConfig+0x120>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3a      	ldr	r2, [pc, #232]	; (8003b9c <TIM_Base_SetConfig+0x124>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <TIM_Base_SetConfig+0x114>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02b      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d027      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <TIM_Base_SetConfig+0x118>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d023      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <TIM_Base_SetConfig+0x11c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01f      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <TIM_Base_SetConfig+0x120>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01b      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <TIM_Base_SetConfig+0x124>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d017      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <TIM_Base_SetConfig+0x128>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <TIM_Base_SetConfig+0x12c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00f      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <TIM_Base_SetConfig+0x130>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a25      	ldr	r2, [pc, #148]	; (8003bac <TIM_Base_SetConfig+0x134>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <TIM_Base_SetConfig+0x138>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <TIM_Base_SetConfig+0x13c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d108      	bne.n	8003b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <TIM_Base_SetConfig+0x114>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0xf8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <TIM_Base_SetConfig+0x124>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40010400 	.word	0x40010400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800
 8003bac:	40001800 	.word	0x40001800
 8003bb0:	40001c00 	.word	0x40001c00
 8003bb4:	40002000 	.word	0x40002000

08003bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e05a      	b.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a21      	ldr	r2, [pc, #132]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d01d      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d018      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10c      	bne.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40010000 	.word	0x40010000
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	40000c00 	.word	0x40000c00
 8003ca4:	40010400 	.word	0x40010400
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40001800 	.word	0x40001800

08003cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e03f      	b.n	8003d6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc ffdc 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f9cb 	bl	80040b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b08a      	sub	sp, #40	; 0x28
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d17c      	bne.n	8003e8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_Transmit+0x2c>
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e075      	b.n	8003e8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Transmit+0x3e>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e06e      	b.n	8003e8e <HAL_UART_Transmit+0x11c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2221      	movs	r2, #33	; 0x21
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd f995 	bl	80010f4 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de0:	d108      	bne.n	8003df4 <HAL_UART_Transmit+0x82>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e003      	b.n	8003dfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e04:	e02a      	b.n	8003e5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2180      	movs	r1, #128	; 0x80
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f8e2 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e036      	b.n	8003e8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3302      	adds	r3, #2
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	e007      	b.n	8003e4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1cf      	bne.n	8003e06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2140      	movs	r1, #64	; 0x40
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f8b2 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b08a      	sub	sp, #40	; 0x28
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 808c 	bne.w	8003fd0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Receive+0x2e>
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e084      	b.n	8003fd2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Receive+0x40>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e07d      	b.n	8003fd2 <HAL_UART_Receive+0x13c>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2222      	movs	r2, #34	; 0x22
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef2:	f7fd f8ff 	bl	80010f4 <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0c:	d108      	bne.n	8003f20 <HAL_UART_Receive+0x8a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e003      	b.n	8003f28 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f30:	e043      	b.n	8003fba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f84c 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e042      	b.n	8003fd2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	3302      	adds	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e01f      	b.n	8003fac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f74:	d007      	beq.n	8003f86 <HAL_UART_Receive+0xf0>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_UART_Receive+0xfe>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e008      	b.n	8003fa6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1b6      	bne.n	8003f32 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b090      	sub	sp, #64	; 0x40
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	e050      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d04c      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	f7fd f87b 	bl	80010f4 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004006:	429a      	cmp	r2, r3
 8004008:	d241      	bcs.n	800408e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800402a:	637a      	str	r2, [r7, #52]	; 0x34
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e5      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	613b      	str	r3, [r7, #16]
   return(result);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405e:	623a      	str	r2, [r7, #32]
 8004060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	69f9      	ldr	r1, [r7, #28]
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	61bb      	str	r3, [r7, #24]
   return(result);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d09f      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3740      	adds	r7, #64	; 0x40
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	b09f      	sub	sp, #124	; 0x7c
 80040be:	af00      	add	r7, sp, #0
 80040c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	68d9      	ldr	r1, [r3, #12]
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	ea40 0301 	orr.w	r3, r0, r1
 80040d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040fc:	f021 010c 	bic.w	r1, r1, #12
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004106:	430b      	orrs	r3, r1
 8004108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	ea40 0301 	orr.w	r3, r0, r1
 8004120:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4bc5      	ldr	r3, [pc, #788]	; (800443c <UART_SetConfig+0x384>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d004      	beq.n	8004136 <UART_SetConfig+0x7e>
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4bc3      	ldr	r3, [pc, #780]	; (8004440 <UART_SetConfig+0x388>)
 8004132:	429a      	cmp	r2, r3
 8004134:	d103      	bne.n	800413e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004136:	f7fe fa2b 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 800413a:	6778      	str	r0, [r7, #116]	; 0x74
 800413c:	e002      	b.n	8004144 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800413e:	f7fe fa13 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8004142:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	f040 80b6 	bne.w	80042bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004152:	461c      	mov	r4, r3
 8004154:	f04f 0500 	mov.w	r5, #0
 8004158:	4622      	mov	r2, r4
 800415a:	462b      	mov	r3, r5
 800415c:	1891      	adds	r1, r2, r2
 800415e:	6439      	str	r1, [r7, #64]	; 0x40
 8004160:	415b      	adcs	r3, r3
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
 8004164:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004168:	1912      	adds	r2, r2, r4
 800416a:	eb45 0303 	adc.w	r3, r5, r3
 800416e:	f04f 0000 	mov.w	r0, #0
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	00d9      	lsls	r1, r3, #3
 8004178:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800417c:	00d0      	lsls	r0, r2, #3
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	1911      	adds	r1, r2, r4
 8004184:	6639      	str	r1, [r7, #96]	; 0x60
 8004186:	416b      	adcs	r3, r5
 8004188:	667b      	str	r3, [r7, #100]	; 0x64
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	1891      	adds	r1, r2, r2
 8004196:	63b9      	str	r1, [r7, #56]	; 0x38
 8004198:	415b      	adcs	r3, r3
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041a4:	f7fc f864 	bl	8000270 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4ba5      	ldr	r3, [pc, #660]	; (8004444 <UART_SetConfig+0x38c>)
 80041ae:	fba3 2302 	umull	r2, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	011e      	lsls	r6, r3, #4
 80041b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b8:	461c      	mov	r4, r3
 80041ba:	f04f 0500 	mov.w	r5, #0
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	1891      	adds	r1, r2, r2
 80041c4:	6339      	str	r1, [r7, #48]	; 0x30
 80041c6:	415b      	adcs	r3, r3
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041ce:	1912      	adds	r2, r2, r4
 80041d0:	eb45 0303 	adc.w	r3, r5, r3
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	00d9      	lsls	r1, r3, #3
 80041de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041e2:	00d0      	lsls	r0, r2, #3
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	1911      	adds	r1, r2, r4
 80041ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80041ec:	416b      	adcs	r3, r5
 80041ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	461a      	mov	r2, r3
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	1891      	adds	r1, r2, r2
 80041fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80041fe:	415b      	adcs	r3, r3
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004206:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800420a:	f7fc f831 	bl	8000270 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4b8c      	ldr	r3, [pc, #560]	; (8004444 <UART_SetConfig+0x38c>)
 8004214:	fba3 1302 	umull	r1, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	2164      	movs	r1, #100	; 0x64
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	3332      	adds	r3, #50	; 0x32
 8004226:	4a87      	ldr	r2, [pc, #540]	; (8004444 <UART_SetConfig+0x38c>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004234:	441e      	add	r6, r3
 8004236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004238:	4618      	mov	r0, r3
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	1894      	adds	r4, r2, r2
 8004244:	623c      	str	r4, [r7, #32]
 8004246:	415b      	adcs	r3, r3
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424e:	1812      	adds	r2, r2, r0
 8004250:	eb41 0303 	adc.w	r3, r1, r3
 8004254:	f04f 0400 	mov.w	r4, #0
 8004258:	f04f 0500 	mov.w	r5, #0
 800425c:	00dd      	lsls	r5, r3, #3
 800425e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004262:	00d4      	lsls	r4, r2, #3
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	1814      	adds	r4, r2, r0
 800426a:	653c      	str	r4, [r7, #80]	; 0x50
 800426c:	414b      	adcs	r3, r1
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	461a      	mov	r2, r3
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	1891      	adds	r1, r2, r2
 800427c:	61b9      	str	r1, [r7, #24]
 800427e:	415b      	adcs	r3, r3
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004286:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800428a:	f7fb fff1 	bl	8000270 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4b6c      	ldr	r3, [pc, #432]	; (8004444 <UART_SetConfig+0x38c>)
 8004294:	fba3 1302 	umull	r1, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2164      	movs	r1, #100	; 0x64
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	3332      	adds	r3, #50	; 0x32
 80042a6:	4a67      	ldr	r2, [pc, #412]	; (8004444 <UART_SetConfig+0x38c>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 0207 	and.w	r2, r3, #7
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4432      	add	r2, r6
 80042b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042ba:	e0b9      	b.n	8004430 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042be:	461c      	mov	r4, r3
 80042c0:	f04f 0500 	mov.w	r5, #0
 80042c4:	4622      	mov	r2, r4
 80042c6:	462b      	mov	r3, r5
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	6139      	str	r1, [r7, #16]
 80042cc:	415b      	adcs	r3, r3
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042d4:	1912      	adds	r2, r2, r4
 80042d6:	eb45 0303 	adc.w	r3, r5, r3
 80042da:	f04f 0000 	mov.w	r0, #0
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	00d9      	lsls	r1, r3, #3
 80042e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e8:	00d0      	lsls	r0, r2, #3
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	eb12 0804 	adds.w	r8, r2, r4
 80042f2:	eb43 0905 	adc.w	r9, r3, r5
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800430e:	0082      	lsls	r2, r0, #2
 8004310:	4640      	mov	r0, r8
 8004312:	4649      	mov	r1, r9
 8004314:	f7fb ffac 	bl	8000270 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4b49      	ldr	r3, [pc, #292]	; (8004444 <UART_SetConfig+0x38c>)
 800431e:	fba3 2302 	umull	r2, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	011e      	lsls	r6, r3, #4
 8004326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004328:	4618      	mov	r0, r3
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	1894      	adds	r4, r2, r2
 8004334:	60bc      	str	r4, [r7, #8]
 8004336:	415b      	adcs	r3, r3
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800433e:	1812      	adds	r2, r2, r0
 8004340:	eb41 0303 	adc.w	r3, r1, r3
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	f04f 0500 	mov.w	r5, #0
 800434c:	00dd      	lsls	r5, r3, #3
 800434e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004352:	00d4      	lsls	r4, r2, #3
 8004354:	4622      	mov	r2, r4
 8004356:	462b      	mov	r3, r5
 8004358:	1814      	adds	r4, r2, r0
 800435a:	64bc      	str	r4, [r7, #72]	; 0x48
 800435c:	414b      	adcs	r3, r1
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	008b      	lsls	r3, r1, #2
 8004374:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004378:	0082      	lsls	r2, r0, #2
 800437a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800437e:	f7fb ff77 	bl	8000270 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <UART_SetConfig+0x38c>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <UART_SetConfig+0x38c>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a6:	441e      	add	r6, r3
 80043a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043aa:	4618      	mov	r0, r3
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	1894      	adds	r4, r2, r2
 80043b6:	603c      	str	r4, [r7, #0]
 80043b8:	415b      	adcs	r3, r3
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c0:	1812      	adds	r2, r2, r0
 80043c2:	eb41 0303 	adc.w	r3, r1, r3
 80043c6:	f04f 0400 	mov.w	r4, #0
 80043ca:	f04f 0500 	mov.w	r5, #0
 80043ce:	00dd      	lsls	r5, r3, #3
 80043d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043d4:	00d4      	lsls	r4, r2, #3
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	eb12 0a00 	adds.w	sl, r2, r0
 80043de:	eb43 0b01 	adc.w	fp, r3, r1
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	008b      	lsls	r3, r1, #2
 80043f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043fa:	0082      	lsls	r2, r0, #2
 80043fc:	4650      	mov	r0, sl
 80043fe:	4659      	mov	r1, fp
 8004400:	f7fb ff36 	bl	8000270 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <UART_SetConfig+0x38c>)
 800440a:	fba3 1302 	umull	r1, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2164      	movs	r1, #100	; 0x64
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	3332      	adds	r3, #50	; 0x32
 800441c:	4a09      	ldr	r2, [pc, #36]	; (8004444 <UART_SetConfig+0x38c>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	f003 020f 	and.w	r2, r3, #15
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4432      	add	r2, r6
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	377c      	adds	r7, #124	; 0x7c
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443a:	bf00      	nop
 800443c:	40011000 	.word	0x40011000
 8004440:	40011400 	.word	0x40011400
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <__errno>:
 8004448:	4b01      	ldr	r3, [pc, #4]	; (8004450 <__errno+0x8>)
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	2000000c 	.word	0x2000000c

08004454 <__libc_init_array>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	4d0d      	ldr	r5, [pc, #52]	; (800448c <__libc_init_array+0x38>)
 8004458:	4c0d      	ldr	r4, [pc, #52]	; (8004490 <__libc_init_array+0x3c>)
 800445a:	1b64      	subs	r4, r4, r5
 800445c:	10a4      	asrs	r4, r4, #2
 800445e:	2600      	movs	r6, #0
 8004460:	42a6      	cmp	r6, r4
 8004462:	d109      	bne.n	8004478 <__libc_init_array+0x24>
 8004464:	4d0b      	ldr	r5, [pc, #44]	; (8004494 <__libc_init_array+0x40>)
 8004466:	4c0c      	ldr	r4, [pc, #48]	; (8004498 <__libc_init_array+0x44>)
 8004468:	f000 ff76 	bl	8005358 <_init>
 800446c:	1b64      	subs	r4, r4, r5
 800446e:	10a4      	asrs	r4, r4, #2
 8004470:	2600      	movs	r6, #0
 8004472:	42a6      	cmp	r6, r4
 8004474:	d105      	bne.n	8004482 <__libc_init_array+0x2e>
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	f855 3b04 	ldr.w	r3, [r5], #4
 800447c:	4798      	blx	r3
 800447e:	3601      	adds	r6, #1
 8004480:	e7ee      	b.n	8004460 <__libc_init_array+0xc>
 8004482:	f855 3b04 	ldr.w	r3, [r5], #4
 8004486:	4798      	blx	r3
 8004488:	3601      	adds	r6, #1
 800448a:	e7f2      	b.n	8004472 <__libc_init_array+0x1e>
 800448c:	08005450 	.word	0x08005450
 8004490:	08005450 	.word	0x08005450
 8004494:	08005450 	.word	0x08005450
 8004498:	08005454 	.word	0x08005454

0800449c <memset>:
 800449c:	4402      	add	r2, r0
 800449e:	4603      	mov	r3, r0
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d100      	bne.n	80044a6 <memset+0xa>
 80044a4:	4770      	bx	lr
 80044a6:	f803 1b01 	strb.w	r1, [r3], #1
 80044aa:	e7f9      	b.n	80044a0 <memset+0x4>

080044ac <iprintf>:
 80044ac:	b40f      	push	{r0, r1, r2, r3}
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <iprintf+0x2c>)
 80044b0:	b513      	push	{r0, r1, r4, lr}
 80044b2:	681c      	ldr	r4, [r3, #0]
 80044b4:	b124      	cbz	r4, 80044c0 <iprintf+0x14>
 80044b6:	69a3      	ldr	r3, [r4, #24]
 80044b8:	b913      	cbnz	r3, 80044c0 <iprintf+0x14>
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f866 	bl	800458c <__sinit>
 80044c0:	ab05      	add	r3, sp, #20
 80044c2:	9a04      	ldr	r2, [sp, #16]
 80044c4:	68a1      	ldr	r1, [r4, #8]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	4620      	mov	r0, r4
 80044ca:	f000 f983 	bl	80047d4 <_vfiprintf_r>
 80044ce:	b002      	add	sp, #8
 80044d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr
 80044d8:	2000000c 	.word	0x2000000c

080044dc <std>:
 80044dc:	2300      	movs	r3, #0
 80044de:	b510      	push	{r4, lr}
 80044e0:	4604      	mov	r4, r0
 80044e2:	e9c0 3300 	strd	r3, r3, [r0]
 80044e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ea:	6083      	str	r3, [r0, #8]
 80044ec:	8181      	strh	r1, [r0, #12]
 80044ee:	6643      	str	r3, [r0, #100]	; 0x64
 80044f0:	81c2      	strh	r2, [r0, #14]
 80044f2:	6183      	str	r3, [r0, #24]
 80044f4:	4619      	mov	r1, r3
 80044f6:	2208      	movs	r2, #8
 80044f8:	305c      	adds	r0, #92	; 0x5c
 80044fa:	f7ff ffcf 	bl	800449c <memset>
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <std+0x38>)
 8004500:	6263      	str	r3, [r4, #36]	; 0x24
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <std+0x3c>)
 8004504:	62a3      	str	r3, [r4, #40]	; 0x28
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <std+0x40>)
 8004508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <std+0x44>)
 800450c:	6224      	str	r4, [r4, #32]
 800450e:	6323      	str	r3, [r4, #48]	; 0x30
 8004510:	bd10      	pop	{r4, pc}
 8004512:	bf00      	nop
 8004514:	08004d7d 	.word	0x08004d7d
 8004518:	08004d9f 	.word	0x08004d9f
 800451c:	08004dd7 	.word	0x08004dd7
 8004520:	08004dfb 	.word	0x08004dfb

08004524 <_cleanup_r>:
 8004524:	4901      	ldr	r1, [pc, #4]	; (800452c <_cleanup_r+0x8>)
 8004526:	f000 b8af 	b.w	8004688 <_fwalk_reent>
 800452a:	bf00      	nop
 800452c:	080050d5 	.word	0x080050d5

08004530 <__sfmoreglue>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	1e4a      	subs	r2, r1, #1
 8004534:	2568      	movs	r5, #104	; 0x68
 8004536:	4355      	muls	r5, r2
 8004538:	460e      	mov	r6, r1
 800453a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800453e:	f000 f8c5 	bl	80046cc <_malloc_r>
 8004542:	4604      	mov	r4, r0
 8004544:	b140      	cbz	r0, 8004558 <__sfmoreglue+0x28>
 8004546:	2100      	movs	r1, #0
 8004548:	e9c0 1600 	strd	r1, r6, [r0]
 800454c:	300c      	adds	r0, #12
 800454e:	60a0      	str	r0, [r4, #8]
 8004550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004554:	f7ff ffa2 	bl	800449c <memset>
 8004558:	4620      	mov	r0, r4
 800455a:	bd70      	pop	{r4, r5, r6, pc}

0800455c <__sfp_lock_acquire>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__sfp_lock_acquire+0x8>)
 800455e:	f000 b8b3 	b.w	80046c8 <__retarget_lock_acquire_recursive>
 8004562:	bf00      	nop
 8004564:	200002a0 	.word	0x200002a0

08004568 <__sfp_lock_release>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__sfp_lock_release+0x8>)
 800456a:	f000 b8ae 	b.w	80046ca <__retarget_lock_release_recursive>
 800456e:	bf00      	nop
 8004570:	200002a0 	.word	0x200002a0

08004574 <__sinit_lock_acquire>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__sinit_lock_acquire+0x8>)
 8004576:	f000 b8a7 	b.w	80046c8 <__retarget_lock_acquire_recursive>
 800457a:	bf00      	nop
 800457c:	2000029b 	.word	0x2000029b

08004580 <__sinit_lock_release>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__sinit_lock_release+0x8>)
 8004582:	f000 b8a2 	b.w	80046ca <__retarget_lock_release_recursive>
 8004586:	bf00      	nop
 8004588:	2000029b 	.word	0x2000029b

0800458c <__sinit>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4604      	mov	r4, r0
 8004590:	f7ff fff0 	bl	8004574 <__sinit_lock_acquire>
 8004594:	69a3      	ldr	r3, [r4, #24]
 8004596:	b11b      	cbz	r3, 80045a0 <__sinit+0x14>
 8004598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459c:	f7ff bff0 	b.w	8004580 <__sinit_lock_release>
 80045a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045a4:	6523      	str	r3, [r4, #80]	; 0x50
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <__sinit+0x68>)
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <__sinit+0x6c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	bf04      	itt	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	61a3      	streq	r3, [r4, #24]
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 f820 	bl	80045fc <__sfp>
 80045bc:	6060      	str	r0, [r4, #4]
 80045be:	4620      	mov	r0, r4
 80045c0:	f000 f81c 	bl	80045fc <__sfp>
 80045c4:	60a0      	str	r0, [r4, #8]
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 f818 	bl	80045fc <__sfp>
 80045cc:	2200      	movs	r2, #0
 80045ce:	60e0      	str	r0, [r4, #12]
 80045d0:	2104      	movs	r1, #4
 80045d2:	6860      	ldr	r0, [r4, #4]
 80045d4:	f7ff ff82 	bl	80044dc <std>
 80045d8:	68a0      	ldr	r0, [r4, #8]
 80045da:	2201      	movs	r2, #1
 80045dc:	2109      	movs	r1, #9
 80045de:	f7ff ff7d 	bl	80044dc <std>
 80045e2:	68e0      	ldr	r0, [r4, #12]
 80045e4:	2202      	movs	r2, #2
 80045e6:	2112      	movs	r1, #18
 80045e8:	f7ff ff78 	bl	80044dc <std>
 80045ec:	2301      	movs	r3, #1
 80045ee:	61a3      	str	r3, [r4, #24]
 80045f0:	e7d2      	b.n	8004598 <__sinit+0xc>
 80045f2:	bf00      	nop
 80045f4:	080053b0 	.word	0x080053b0
 80045f8:	08004525 	.word	0x08004525

080045fc <__sfp>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	4607      	mov	r7, r0
 8004600:	f7ff ffac 	bl	800455c <__sfp_lock_acquire>
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <__sfp+0x84>)
 8004606:	681e      	ldr	r6, [r3, #0]
 8004608:	69b3      	ldr	r3, [r6, #24]
 800460a:	b913      	cbnz	r3, 8004612 <__sfp+0x16>
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff ffbd 	bl	800458c <__sinit>
 8004612:	3648      	adds	r6, #72	; 0x48
 8004614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004618:	3b01      	subs	r3, #1
 800461a:	d503      	bpl.n	8004624 <__sfp+0x28>
 800461c:	6833      	ldr	r3, [r6, #0]
 800461e:	b30b      	cbz	r3, 8004664 <__sfp+0x68>
 8004620:	6836      	ldr	r6, [r6, #0]
 8004622:	e7f7      	b.n	8004614 <__sfp+0x18>
 8004624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004628:	b9d5      	cbnz	r5, 8004660 <__sfp+0x64>
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <__sfp+0x88>)
 800462c:	60e3      	str	r3, [r4, #12]
 800462e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004632:	6665      	str	r5, [r4, #100]	; 0x64
 8004634:	f000 f847 	bl	80046c6 <__retarget_lock_init_recursive>
 8004638:	f7ff ff96 	bl	8004568 <__sfp_lock_release>
 800463c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004640:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004644:	6025      	str	r5, [r4, #0]
 8004646:	61a5      	str	r5, [r4, #24]
 8004648:	2208      	movs	r2, #8
 800464a:	4629      	mov	r1, r5
 800464c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004650:	f7ff ff24 	bl	800449c <memset>
 8004654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800465c:	4620      	mov	r0, r4
 800465e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004660:	3468      	adds	r4, #104	; 0x68
 8004662:	e7d9      	b.n	8004618 <__sfp+0x1c>
 8004664:	2104      	movs	r1, #4
 8004666:	4638      	mov	r0, r7
 8004668:	f7ff ff62 	bl	8004530 <__sfmoreglue>
 800466c:	4604      	mov	r4, r0
 800466e:	6030      	str	r0, [r6, #0]
 8004670:	2800      	cmp	r0, #0
 8004672:	d1d5      	bne.n	8004620 <__sfp+0x24>
 8004674:	f7ff ff78 	bl	8004568 <__sfp_lock_release>
 8004678:	230c      	movs	r3, #12
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	e7ee      	b.n	800465c <__sfp+0x60>
 800467e:	bf00      	nop
 8004680:	080053b0 	.word	0x080053b0
 8004684:	ffff0001 	.word	0xffff0001

08004688 <_fwalk_reent>:
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	4606      	mov	r6, r0
 800468e:	4688      	mov	r8, r1
 8004690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004694:	2700      	movs	r7, #0
 8004696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800469a:	f1b9 0901 	subs.w	r9, r9, #1
 800469e:	d505      	bpl.n	80046ac <_fwalk_reent+0x24>
 80046a0:	6824      	ldr	r4, [r4, #0]
 80046a2:	2c00      	cmp	r4, #0
 80046a4:	d1f7      	bne.n	8004696 <_fwalk_reent+0xe>
 80046a6:	4638      	mov	r0, r7
 80046a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ac:	89ab      	ldrh	r3, [r5, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d907      	bls.n	80046c2 <_fwalk_reent+0x3a>
 80046b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b6:	3301      	adds	r3, #1
 80046b8:	d003      	beq.n	80046c2 <_fwalk_reent+0x3a>
 80046ba:	4629      	mov	r1, r5
 80046bc:	4630      	mov	r0, r6
 80046be:	47c0      	blx	r8
 80046c0:	4307      	orrs	r7, r0
 80046c2:	3568      	adds	r5, #104	; 0x68
 80046c4:	e7e9      	b.n	800469a <_fwalk_reent+0x12>

080046c6 <__retarget_lock_init_recursive>:
 80046c6:	4770      	bx	lr

080046c8 <__retarget_lock_acquire_recursive>:
 80046c8:	4770      	bx	lr

080046ca <__retarget_lock_release_recursive>:
 80046ca:	4770      	bx	lr

080046cc <_malloc_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	1ccd      	adds	r5, r1, #3
 80046d0:	f025 0503 	bic.w	r5, r5, #3
 80046d4:	3508      	adds	r5, #8
 80046d6:	2d0c      	cmp	r5, #12
 80046d8:	bf38      	it	cc
 80046da:	250c      	movcc	r5, #12
 80046dc:	2d00      	cmp	r5, #0
 80046de:	4606      	mov	r6, r0
 80046e0:	db01      	blt.n	80046e6 <_malloc_r+0x1a>
 80046e2:	42a9      	cmp	r1, r5
 80046e4:	d903      	bls.n	80046ee <_malloc_r+0x22>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	2000      	movs	r0, #0
 80046ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ee:	f000 fda3 	bl	8005238 <__malloc_lock>
 80046f2:	4921      	ldr	r1, [pc, #132]	; (8004778 <_malloc_r+0xac>)
 80046f4:	680a      	ldr	r2, [r1, #0]
 80046f6:	4614      	mov	r4, r2
 80046f8:	b99c      	cbnz	r4, 8004722 <_malloc_r+0x56>
 80046fa:	4f20      	ldr	r7, [pc, #128]	; (800477c <_malloc_r+0xb0>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b923      	cbnz	r3, 800470a <_malloc_r+0x3e>
 8004700:	4621      	mov	r1, r4
 8004702:	4630      	mov	r0, r6
 8004704:	f000 fb2a 	bl	8004d5c <_sbrk_r>
 8004708:	6038      	str	r0, [r7, #0]
 800470a:	4629      	mov	r1, r5
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fb25 	bl	8004d5c <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d123      	bne.n	800475e <_malloc_r+0x92>
 8004716:	230c      	movs	r3, #12
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	4630      	mov	r0, r6
 800471c:	f000 fd92 	bl	8005244 <__malloc_unlock>
 8004720:	e7e3      	b.n	80046ea <_malloc_r+0x1e>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	1b5b      	subs	r3, r3, r5
 8004726:	d417      	bmi.n	8004758 <_malloc_r+0x8c>
 8004728:	2b0b      	cmp	r3, #11
 800472a:	d903      	bls.n	8004734 <_malloc_r+0x68>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	441c      	add	r4, r3
 8004730:	6025      	str	r5, [r4, #0]
 8004732:	e004      	b.n	800473e <_malloc_r+0x72>
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	42a2      	cmp	r2, r4
 8004738:	bf0c      	ite	eq
 800473a:	600b      	streq	r3, [r1, #0]
 800473c:	6053      	strne	r3, [r2, #4]
 800473e:	4630      	mov	r0, r6
 8004740:	f000 fd80 	bl	8005244 <__malloc_unlock>
 8004744:	f104 000b 	add.w	r0, r4, #11
 8004748:	1d23      	adds	r3, r4, #4
 800474a:	f020 0007 	bic.w	r0, r0, #7
 800474e:	1ac2      	subs	r2, r0, r3
 8004750:	d0cc      	beq.n	80046ec <_malloc_r+0x20>
 8004752:	1a1b      	subs	r3, r3, r0
 8004754:	50a3      	str	r3, [r4, r2]
 8004756:	e7c9      	b.n	80046ec <_malloc_r+0x20>
 8004758:	4622      	mov	r2, r4
 800475a:	6864      	ldr	r4, [r4, #4]
 800475c:	e7cc      	b.n	80046f8 <_malloc_r+0x2c>
 800475e:	1cc4      	adds	r4, r0, #3
 8004760:	f024 0403 	bic.w	r4, r4, #3
 8004764:	42a0      	cmp	r0, r4
 8004766:	d0e3      	beq.n	8004730 <_malloc_r+0x64>
 8004768:	1a21      	subs	r1, r4, r0
 800476a:	4630      	mov	r0, r6
 800476c:	f000 faf6 	bl	8004d5c <_sbrk_r>
 8004770:	3001      	adds	r0, #1
 8004772:	d1dd      	bne.n	8004730 <_malloc_r+0x64>
 8004774:	e7cf      	b.n	8004716 <_malloc_r+0x4a>
 8004776:	bf00      	nop
 8004778:	20000094 	.word	0x20000094
 800477c:	20000098 	.word	0x20000098

08004780 <__sfputc_r>:
 8004780:	6893      	ldr	r3, [r2, #8]
 8004782:	3b01      	subs	r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	b410      	push	{r4}
 8004788:	6093      	str	r3, [r2, #8]
 800478a:	da08      	bge.n	800479e <__sfputc_r+0x1e>
 800478c:	6994      	ldr	r4, [r2, #24]
 800478e:	42a3      	cmp	r3, r4
 8004790:	db01      	blt.n	8004796 <__sfputc_r+0x16>
 8004792:	290a      	cmp	r1, #10
 8004794:	d103      	bne.n	800479e <__sfputc_r+0x1e>
 8004796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479a:	f000 bb33 	b.w	8004e04 <__swbuf_r>
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	1c58      	adds	r0, r3, #1
 80047a2:	6010      	str	r0, [r2, #0]
 80047a4:	7019      	strb	r1, [r3, #0]
 80047a6:	4608      	mov	r0, r1
 80047a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <__sfputs_r>:
 80047ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b0:	4606      	mov	r6, r0
 80047b2:	460f      	mov	r7, r1
 80047b4:	4614      	mov	r4, r2
 80047b6:	18d5      	adds	r5, r2, r3
 80047b8:	42ac      	cmp	r4, r5
 80047ba:	d101      	bne.n	80047c0 <__sfputs_r+0x12>
 80047bc:	2000      	movs	r0, #0
 80047be:	e007      	b.n	80047d0 <__sfputs_r+0x22>
 80047c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c4:	463a      	mov	r2, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	f7ff ffda 	bl	8004780 <__sfputc_r>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d1f3      	bne.n	80047b8 <__sfputs_r+0xa>
 80047d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d4 <_vfiprintf_r>:
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	460d      	mov	r5, r1
 80047da:	b09d      	sub	sp, #116	; 0x74
 80047dc:	4614      	mov	r4, r2
 80047de:	4698      	mov	r8, r3
 80047e0:	4606      	mov	r6, r0
 80047e2:	b118      	cbz	r0, 80047ec <_vfiprintf_r+0x18>
 80047e4:	6983      	ldr	r3, [r0, #24]
 80047e6:	b90b      	cbnz	r3, 80047ec <_vfiprintf_r+0x18>
 80047e8:	f7ff fed0 	bl	800458c <__sinit>
 80047ec:	4b89      	ldr	r3, [pc, #548]	; (8004a14 <_vfiprintf_r+0x240>)
 80047ee:	429d      	cmp	r5, r3
 80047f0:	d11b      	bne.n	800482a <_vfiprintf_r+0x56>
 80047f2:	6875      	ldr	r5, [r6, #4]
 80047f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f6:	07d9      	lsls	r1, r3, #31
 80047f8:	d405      	bmi.n	8004806 <_vfiprintf_r+0x32>
 80047fa:	89ab      	ldrh	r3, [r5, #12]
 80047fc:	059a      	lsls	r2, r3, #22
 80047fe:	d402      	bmi.n	8004806 <_vfiprintf_r+0x32>
 8004800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004802:	f7ff ff61 	bl	80046c8 <__retarget_lock_acquire_recursive>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	d501      	bpl.n	8004810 <_vfiprintf_r+0x3c>
 800480c:	692b      	ldr	r3, [r5, #16]
 800480e:	b9eb      	cbnz	r3, 800484c <_vfiprintf_r+0x78>
 8004810:	4629      	mov	r1, r5
 8004812:	4630      	mov	r0, r6
 8004814:	f000 fb5a 	bl	8004ecc <__swsetup_r>
 8004818:	b1c0      	cbz	r0, 800484c <_vfiprintf_r+0x78>
 800481a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800481c:	07dc      	lsls	r4, r3, #31
 800481e:	d50e      	bpl.n	800483e <_vfiprintf_r+0x6a>
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	b01d      	add	sp, #116	; 0x74
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <_vfiprintf_r+0x244>)
 800482c:	429d      	cmp	r5, r3
 800482e:	d101      	bne.n	8004834 <_vfiprintf_r+0x60>
 8004830:	68b5      	ldr	r5, [r6, #8]
 8004832:	e7df      	b.n	80047f4 <_vfiprintf_r+0x20>
 8004834:	4b79      	ldr	r3, [pc, #484]	; (8004a1c <_vfiprintf_r+0x248>)
 8004836:	429d      	cmp	r5, r3
 8004838:	bf08      	it	eq
 800483a:	68f5      	ldreq	r5, [r6, #12]
 800483c:	e7da      	b.n	80047f4 <_vfiprintf_r+0x20>
 800483e:	89ab      	ldrh	r3, [r5, #12]
 8004840:	0598      	lsls	r0, r3, #22
 8004842:	d4ed      	bmi.n	8004820 <_vfiprintf_r+0x4c>
 8004844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004846:	f7ff ff40 	bl	80046ca <__retarget_lock_release_recursive>
 800484a:	e7e9      	b.n	8004820 <_vfiprintf_r+0x4c>
 800484c:	2300      	movs	r3, #0
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	2320      	movs	r3, #32
 8004852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004856:	f8cd 800c 	str.w	r8, [sp, #12]
 800485a:	2330      	movs	r3, #48	; 0x30
 800485c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a20 <_vfiprintf_r+0x24c>
 8004860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004864:	f04f 0901 	mov.w	r9, #1
 8004868:	4623      	mov	r3, r4
 800486a:	469a      	mov	sl, r3
 800486c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004870:	b10a      	cbz	r2, 8004876 <_vfiprintf_r+0xa2>
 8004872:	2a25      	cmp	r2, #37	; 0x25
 8004874:	d1f9      	bne.n	800486a <_vfiprintf_r+0x96>
 8004876:	ebba 0b04 	subs.w	fp, sl, r4
 800487a:	d00b      	beq.n	8004894 <_vfiprintf_r+0xc0>
 800487c:	465b      	mov	r3, fp
 800487e:	4622      	mov	r2, r4
 8004880:	4629      	mov	r1, r5
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff ff93 	bl	80047ae <__sfputs_r>
 8004888:	3001      	adds	r0, #1
 800488a:	f000 80aa 	beq.w	80049e2 <_vfiprintf_r+0x20e>
 800488e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004890:	445a      	add	r2, fp
 8004892:	9209      	str	r2, [sp, #36]	; 0x24
 8004894:	f89a 3000 	ldrb.w	r3, [sl]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a2 	beq.w	80049e2 <_vfiprintf_r+0x20e>
 800489e:	2300      	movs	r3, #0
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a8:	f10a 0a01 	add.w	sl, sl, #1
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	9307      	str	r3, [sp, #28]
 80048b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b4:	931a      	str	r3, [sp, #104]	; 0x68
 80048b6:	4654      	mov	r4, sl
 80048b8:	2205      	movs	r2, #5
 80048ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048be:	4858      	ldr	r0, [pc, #352]	; (8004a20 <_vfiprintf_r+0x24c>)
 80048c0:	f7fb fc86 	bl	80001d0 <memchr>
 80048c4:	9a04      	ldr	r2, [sp, #16]
 80048c6:	b9d8      	cbnz	r0, 8004900 <_vfiprintf_r+0x12c>
 80048c8:	06d1      	lsls	r1, r2, #27
 80048ca:	bf44      	itt	mi
 80048cc:	2320      	movmi	r3, #32
 80048ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d2:	0713      	lsls	r3, r2, #28
 80048d4:	bf44      	itt	mi
 80048d6:	232b      	movmi	r3, #43	; 0x2b
 80048d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048dc:	f89a 3000 	ldrb.w	r3, [sl]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d015      	beq.n	8004910 <_vfiprintf_r+0x13c>
 80048e4:	9a07      	ldr	r2, [sp, #28]
 80048e6:	4654      	mov	r4, sl
 80048e8:	2000      	movs	r0, #0
 80048ea:	f04f 0c0a 	mov.w	ip, #10
 80048ee:	4621      	mov	r1, r4
 80048f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f4:	3b30      	subs	r3, #48	; 0x30
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d94e      	bls.n	8004998 <_vfiprintf_r+0x1c4>
 80048fa:	b1b0      	cbz	r0, 800492a <_vfiprintf_r+0x156>
 80048fc:	9207      	str	r2, [sp, #28]
 80048fe:	e014      	b.n	800492a <_vfiprintf_r+0x156>
 8004900:	eba0 0308 	sub.w	r3, r0, r8
 8004904:	fa09 f303 	lsl.w	r3, r9, r3
 8004908:	4313      	orrs	r3, r2
 800490a:	9304      	str	r3, [sp, #16]
 800490c:	46a2      	mov	sl, r4
 800490e:	e7d2      	b.n	80048b6 <_vfiprintf_r+0xe2>
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	1d19      	adds	r1, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	9103      	str	r1, [sp, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfbb      	ittet	lt
 800491c:	425b      	neglt	r3, r3
 800491e:	f042 0202 	orrlt.w	r2, r2, #2
 8004922:	9307      	strge	r3, [sp, #28]
 8004924:	9307      	strlt	r3, [sp, #28]
 8004926:	bfb8      	it	lt
 8004928:	9204      	strlt	r2, [sp, #16]
 800492a:	7823      	ldrb	r3, [r4, #0]
 800492c:	2b2e      	cmp	r3, #46	; 0x2e
 800492e:	d10c      	bne.n	800494a <_vfiprintf_r+0x176>
 8004930:	7863      	ldrb	r3, [r4, #1]
 8004932:	2b2a      	cmp	r3, #42	; 0x2a
 8004934:	d135      	bne.n	80049a2 <_vfiprintf_r+0x1ce>
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	1d1a      	adds	r2, r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	9203      	str	r2, [sp, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	f04f 33ff 	movlt.w	r3, #4294967295
 8004946:	3402      	adds	r4, #2
 8004948:	9305      	str	r3, [sp, #20]
 800494a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a30 <_vfiprintf_r+0x25c>
 800494e:	7821      	ldrb	r1, [r4, #0]
 8004950:	2203      	movs	r2, #3
 8004952:	4650      	mov	r0, sl
 8004954:	f7fb fc3c 	bl	80001d0 <memchr>
 8004958:	b140      	cbz	r0, 800496c <_vfiprintf_r+0x198>
 800495a:	2340      	movs	r3, #64	; 0x40
 800495c:	eba0 000a 	sub.w	r0, r0, sl
 8004960:	fa03 f000 	lsl.w	r0, r3, r0
 8004964:	9b04      	ldr	r3, [sp, #16]
 8004966:	4303      	orrs	r3, r0
 8004968:	3401      	adds	r4, #1
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004970:	482c      	ldr	r0, [pc, #176]	; (8004a24 <_vfiprintf_r+0x250>)
 8004972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004976:	2206      	movs	r2, #6
 8004978:	f7fb fc2a 	bl	80001d0 <memchr>
 800497c:	2800      	cmp	r0, #0
 800497e:	d03f      	beq.n	8004a00 <_vfiprintf_r+0x22c>
 8004980:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <_vfiprintf_r+0x254>)
 8004982:	bb1b      	cbnz	r3, 80049cc <_vfiprintf_r+0x1f8>
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	3307      	adds	r3, #7
 8004988:	f023 0307 	bic.w	r3, r3, #7
 800498c:	3308      	adds	r3, #8
 800498e:	9303      	str	r3, [sp, #12]
 8004990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004992:	443b      	add	r3, r7
 8004994:	9309      	str	r3, [sp, #36]	; 0x24
 8004996:	e767      	b.n	8004868 <_vfiprintf_r+0x94>
 8004998:	fb0c 3202 	mla	r2, ip, r2, r3
 800499c:	460c      	mov	r4, r1
 800499e:	2001      	movs	r0, #1
 80049a0:	e7a5      	b.n	80048ee <_vfiprintf_r+0x11a>
 80049a2:	2300      	movs	r3, #0
 80049a4:	3401      	adds	r4, #1
 80049a6:	9305      	str	r3, [sp, #20]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f04f 0c0a 	mov.w	ip, #10
 80049ae:	4620      	mov	r0, r4
 80049b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b4:	3a30      	subs	r2, #48	; 0x30
 80049b6:	2a09      	cmp	r2, #9
 80049b8:	d903      	bls.n	80049c2 <_vfiprintf_r+0x1ee>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0c5      	beq.n	800494a <_vfiprintf_r+0x176>
 80049be:	9105      	str	r1, [sp, #20]
 80049c0:	e7c3      	b.n	800494a <_vfiprintf_r+0x176>
 80049c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049c6:	4604      	mov	r4, r0
 80049c8:	2301      	movs	r3, #1
 80049ca:	e7f0      	b.n	80049ae <_vfiprintf_r+0x1da>
 80049cc:	ab03      	add	r3, sp, #12
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	462a      	mov	r2, r5
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <_vfiprintf_r+0x258>)
 80049d4:	a904      	add	r1, sp, #16
 80049d6:	4630      	mov	r0, r6
 80049d8:	f3af 8000 	nop.w
 80049dc:	4607      	mov	r7, r0
 80049de:	1c78      	adds	r0, r7, #1
 80049e0:	d1d6      	bne.n	8004990 <_vfiprintf_r+0x1bc>
 80049e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049e4:	07d9      	lsls	r1, r3, #31
 80049e6:	d405      	bmi.n	80049f4 <_vfiprintf_r+0x220>
 80049e8:	89ab      	ldrh	r3, [r5, #12]
 80049ea:	059a      	lsls	r2, r3, #22
 80049ec:	d402      	bmi.n	80049f4 <_vfiprintf_r+0x220>
 80049ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049f0:	f7ff fe6b 	bl	80046ca <__retarget_lock_release_recursive>
 80049f4:	89ab      	ldrh	r3, [r5, #12]
 80049f6:	065b      	lsls	r3, r3, #25
 80049f8:	f53f af12 	bmi.w	8004820 <_vfiprintf_r+0x4c>
 80049fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049fe:	e711      	b.n	8004824 <_vfiprintf_r+0x50>
 8004a00:	ab03      	add	r3, sp, #12
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	462a      	mov	r2, r5
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <_vfiprintf_r+0x258>)
 8004a08:	a904      	add	r1, sp, #16
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 f880 	bl	8004b10 <_printf_i>
 8004a10:	e7e4      	b.n	80049dc <_vfiprintf_r+0x208>
 8004a12:	bf00      	nop
 8004a14:	080053d4 	.word	0x080053d4
 8004a18:	080053f4 	.word	0x080053f4
 8004a1c:	080053b4 	.word	0x080053b4
 8004a20:	08005414 	.word	0x08005414
 8004a24:	0800541e 	.word	0x0800541e
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	080047af 	.word	0x080047af
 8004a30:	0800541a 	.word	0x0800541a

08004a34 <_printf_common>:
 8004a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	4616      	mov	r6, r2
 8004a3a:	4699      	mov	r9, r3
 8004a3c:	688a      	ldr	r2, [r1, #8]
 8004a3e:	690b      	ldr	r3, [r1, #16]
 8004a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a44:	4293      	cmp	r3, r2
 8004a46:	bfb8      	it	lt
 8004a48:	4613      	movlt	r3, r2
 8004a4a:	6033      	str	r3, [r6, #0]
 8004a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a50:	4607      	mov	r7, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	b10a      	cbz	r2, 8004a5a <_printf_common+0x26>
 8004a56:	3301      	adds	r3, #1
 8004a58:	6033      	str	r3, [r6, #0]
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	0699      	lsls	r1, r3, #26
 8004a5e:	bf42      	ittt	mi
 8004a60:	6833      	ldrmi	r3, [r6, #0]
 8004a62:	3302      	addmi	r3, #2
 8004a64:	6033      	strmi	r3, [r6, #0]
 8004a66:	6825      	ldr	r5, [r4, #0]
 8004a68:	f015 0506 	ands.w	r5, r5, #6
 8004a6c:	d106      	bne.n	8004a7c <_printf_common+0x48>
 8004a6e:	f104 0a19 	add.w	sl, r4, #25
 8004a72:	68e3      	ldr	r3, [r4, #12]
 8004a74:	6832      	ldr	r2, [r6, #0]
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	42ab      	cmp	r3, r5
 8004a7a:	dc26      	bgt.n	8004aca <_printf_common+0x96>
 8004a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a80:	1e13      	subs	r3, r2, #0
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	bf18      	it	ne
 8004a86:	2301      	movne	r3, #1
 8004a88:	0692      	lsls	r2, r2, #26
 8004a8a:	d42b      	bmi.n	8004ae4 <_printf_common+0xb0>
 8004a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a90:	4649      	mov	r1, r9
 8004a92:	4638      	mov	r0, r7
 8004a94:	47c0      	blx	r8
 8004a96:	3001      	adds	r0, #1
 8004a98:	d01e      	beq.n	8004ad8 <_printf_common+0xa4>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	68e5      	ldr	r5, [r4, #12]
 8004a9e:	6832      	ldr	r2, [r6, #0]
 8004aa0:	f003 0306 	and.w	r3, r3, #6
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	bf08      	it	eq
 8004aa8:	1aad      	subeq	r5, r5, r2
 8004aaa:	68a3      	ldr	r3, [r4, #8]
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	bf0c      	ite	eq
 8004ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab4:	2500      	movne	r5, #0
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bfc4      	itt	gt
 8004aba:	1a9b      	subgt	r3, r3, r2
 8004abc:	18ed      	addgt	r5, r5, r3
 8004abe:	2600      	movs	r6, #0
 8004ac0:	341a      	adds	r4, #26
 8004ac2:	42b5      	cmp	r5, r6
 8004ac4:	d11a      	bne.n	8004afc <_printf_common+0xc8>
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	e008      	b.n	8004adc <_printf_common+0xa8>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4652      	mov	r2, sl
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	47c0      	blx	r8
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d103      	bne.n	8004ae0 <_printf_common+0xac>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	e7c6      	b.n	8004a72 <_printf_common+0x3e>
 8004ae4:	18e1      	adds	r1, r4, r3
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	2030      	movs	r0, #48	; 0x30
 8004aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aee:	4422      	add	r2, r4
 8004af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af8:	3302      	adds	r3, #2
 8004afa:	e7c7      	b.n	8004a8c <_printf_common+0x58>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4622      	mov	r2, r4
 8004b00:	4649      	mov	r1, r9
 8004b02:	4638      	mov	r0, r7
 8004b04:	47c0      	blx	r8
 8004b06:	3001      	adds	r0, #1
 8004b08:	d0e6      	beq.n	8004ad8 <_printf_common+0xa4>
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7d9      	b.n	8004ac2 <_printf_common+0x8e>
	...

08004b10 <_printf_i>:
 8004b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	460c      	mov	r4, r1
 8004b16:	4691      	mov	r9, r2
 8004b18:	7e27      	ldrb	r7, [r4, #24]
 8004b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b1c:	2f78      	cmp	r7, #120	; 0x78
 8004b1e:	4680      	mov	r8, r0
 8004b20:	469a      	mov	sl, r3
 8004b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b26:	d807      	bhi.n	8004b38 <_printf_i+0x28>
 8004b28:	2f62      	cmp	r7, #98	; 0x62
 8004b2a:	d80a      	bhi.n	8004b42 <_printf_i+0x32>
 8004b2c:	2f00      	cmp	r7, #0
 8004b2e:	f000 80d8 	beq.w	8004ce2 <_printf_i+0x1d2>
 8004b32:	2f58      	cmp	r7, #88	; 0x58
 8004b34:	f000 80a3 	beq.w	8004c7e <_printf_i+0x16e>
 8004b38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b40:	e03a      	b.n	8004bb8 <_printf_i+0xa8>
 8004b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b46:	2b15      	cmp	r3, #21
 8004b48:	d8f6      	bhi.n	8004b38 <_printf_i+0x28>
 8004b4a:	a001      	add	r0, pc, #4	; (adr r0, 8004b50 <_printf_i+0x40>)
 8004b4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b50:	08004ba9 	.word	0x08004ba9
 8004b54:	08004bbd 	.word	0x08004bbd
 8004b58:	08004b39 	.word	0x08004b39
 8004b5c:	08004b39 	.word	0x08004b39
 8004b60:	08004b39 	.word	0x08004b39
 8004b64:	08004b39 	.word	0x08004b39
 8004b68:	08004bbd 	.word	0x08004bbd
 8004b6c:	08004b39 	.word	0x08004b39
 8004b70:	08004b39 	.word	0x08004b39
 8004b74:	08004b39 	.word	0x08004b39
 8004b78:	08004b39 	.word	0x08004b39
 8004b7c:	08004cc9 	.word	0x08004cc9
 8004b80:	08004bed 	.word	0x08004bed
 8004b84:	08004cab 	.word	0x08004cab
 8004b88:	08004b39 	.word	0x08004b39
 8004b8c:	08004b39 	.word	0x08004b39
 8004b90:	08004ceb 	.word	0x08004ceb
 8004b94:	08004b39 	.word	0x08004b39
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b39 	.word	0x08004b39
 8004ba0:	08004b39 	.word	0x08004b39
 8004ba4:	08004cb3 	.word	0x08004cb3
 8004ba8:	680b      	ldr	r3, [r1, #0]
 8004baa:	1d1a      	adds	r2, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	600a      	str	r2, [r1, #0]
 8004bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0a3      	b.n	8004d04 <_printf_i+0x1f4>
 8004bbc:	6825      	ldr	r5, [r4, #0]
 8004bbe:	6808      	ldr	r0, [r1, #0]
 8004bc0:	062e      	lsls	r6, r5, #24
 8004bc2:	f100 0304 	add.w	r3, r0, #4
 8004bc6:	d50a      	bpl.n	8004bde <_printf_i+0xce>
 8004bc8:	6805      	ldr	r5, [r0, #0]
 8004bca:	600b      	str	r3, [r1, #0]
 8004bcc:	2d00      	cmp	r5, #0
 8004bce:	da03      	bge.n	8004bd8 <_printf_i+0xc8>
 8004bd0:	232d      	movs	r3, #45	; 0x2d
 8004bd2:	426d      	negs	r5, r5
 8004bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd8:	485e      	ldr	r0, [pc, #376]	; (8004d54 <_printf_i+0x244>)
 8004bda:	230a      	movs	r3, #10
 8004bdc:	e019      	b.n	8004c12 <_printf_i+0x102>
 8004bde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004be2:	6805      	ldr	r5, [r0, #0]
 8004be4:	600b      	str	r3, [r1, #0]
 8004be6:	bf18      	it	ne
 8004be8:	b22d      	sxthne	r5, r5
 8004bea:	e7ef      	b.n	8004bcc <_printf_i+0xbc>
 8004bec:	680b      	ldr	r3, [r1, #0]
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	1d18      	adds	r0, r3, #4
 8004bf2:	6008      	str	r0, [r1, #0]
 8004bf4:	0628      	lsls	r0, r5, #24
 8004bf6:	d501      	bpl.n	8004bfc <_printf_i+0xec>
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <_printf_i+0xf2>
 8004bfc:	0669      	lsls	r1, r5, #25
 8004bfe:	d5fb      	bpl.n	8004bf8 <_printf_i+0xe8>
 8004c00:	881d      	ldrh	r5, [r3, #0]
 8004c02:	4854      	ldr	r0, [pc, #336]	; (8004d54 <_printf_i+0x244>)
 8004c04:	2f6f      	cmp	r7, #111	; 0x6f
 8004c06:	bf0c      	ite	eq
 8004c08:	2308      	moveq	r3, #8
 8004c0a:	230a      	movne	r3, #10
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c12:	6866      	ldr	r6, [r4, #4]
 8004c14:	60a6      	str	r6, [r4, #8]
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	bfa2      	ittt	ge
 8004c1a:	6821      	ldrge	r1, [r4, #0]
 8004c1c:	f021 0104 	bicge.w	r1, r1, #4
 8004c20:	6021      	strge	r1, [r4, #0]
 8004c22:	b90d      	cbnz	r5, 8004c28 <_printf_i+0x118>
 8004c24:	2e00      	cmp	r6, #0
 8004c26:	d04d      	beq.n	8004cc4 <_printf_i+0x1b4>
 8004c28:	4616      	mov	r6, r2
 8004c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c32:	5dc7      	ldrb	r7, [r0, r7]
 8004c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c38:	462f      	mov	r7, r5
 8004c3a:	42bb      	cmp	r3, r7
 8004c3c:	460d      	mov	r5, r1
 8004c3e:	d9f4      	bls.n	8004c2a <_printf_i+0x11a>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d10b      	bne.n	8004c5c <_printf_i+0x14c>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	07df      	lsls	r7, r3, #31
 8004c48:	d508      	bpl.n	8004c5c <_printf_i+0x14c>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	6861      	ldr	r1, [r4, #4]
 8004c4e:	4299      	cmp	r1, r3
 8004c50:	bfde      	ittt	le
 8004c52:	2330      	movle	r3, #48	; 0x30
 8004c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c5c:	1b92      	subs	r2, r2, r6
 8004c5e:	6122      	str	r2, [r4, #16]
 8004c60:	f8cd a000 	str.w	sl, [sp]
 8004c64:	464b      	mov	r3, r9
 8004c66:	aa03      	add	r2, sp, #12
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f7ff fee2 	bl	8004a34 <_printf_common>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d14c      	bne.n	8004d0e <_printf_i+0x1fe>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	b004      	add	sp, #16
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	4835      	ldr	r0, [pc, #212]	; (8004d54 <_printf_i+0x244>)
 8004c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	680e      	ldr	r6, [r1, #0]
 8004c88:	061f      	lsls	r7, r3, #24
 8004c8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c8e:	600e      	str	r6, [r1, #0]
 8004c90:	d514      	bpl.n	8004cbc <_printf_i+0x1ac>
 8004c92:	07d9      	lsls	r1, r3, #31
 8004c94:	bf44      	itt	mi
 8004c96:	f043 0320 	orrmi.w	r3, r3, #32
 8004c9a:	6023      	strmi	r3, [r4, #0]
 8004c9c:	b91d      	cbnz	r5, 8004ca6 <_printf_i+0x196>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f023 0320 	bic.w	r3, r3, #32
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	e7b0      	b.n	8004c0c <_printf_i+0xfc>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	2378      	movs	r3, #120	; 0x78
 8004cb4:	4828      	ldr	r0, [pc, #160]	; (8004d58 <_printf_i+0x248>)
 8004cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cba:	e7e3      	b.n	8004c84 <_printf_i+0x174>
 8004cbc:	065e      	lsls	r6, r3, #25
 8004cbe:	bf48      	it	mi
 8004cc0:	b2ad      	uxthmi	r5, r5
 8004cc2:	e7e6      	b.n	8004c92 <_printf_i+0x182>
 8004cc4:	4616      	mov	r6, r2
 8004cc6:	e7bb      	b.n	8004c40 <_printf_i+0x130>
 8004cc8:	680b      	ldr	r3, [r1, #0]
 8004cca:	6826      	ldr	r6, [r4, #0]
 8004ccc:	6960      	ldr	r0, [r4, #20]
 8004cce:	1d1d      	adds	r5, r3, #4
 8004cd0:	600d      	str	r5, [r1, #0]
 8004cd2:	0635      	lsls	r5, r6, #24
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0x1cc>
 8004cd8:	6018      	str	r0, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0x1d2>
 8004cdc:	0671      	lsls	r1, r6, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0x1c8>
 8004ce0:	8018      	strh	r0, [r3, #0]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	4616      	mov	r6, r2
 8004ce8:	e7ba      	b.n	8004c60 <_printf_i+0x150>
 8004cea:	680b      	ldr	r3, [r1, #0]
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	600a      	str	r2, [r1, #0]
 8004cf0:	681e      	ldr	r6, [r3, #0]
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f7fb fa6a 	bl	80001d0 <memchr>
 8004cfc:	b108      	cbz	r0, 8004d02 <_printf_i+0x1f2>
 8004cfe:	1b80      	subs	r0, r0, r6
 8004d00:	6060      	str	r0, [r4, #4]
 8004d02:	6863      	ldr	r3, [r4, #4]
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	2300      	movs	r3, #0
 8004d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0c:	e7a8      	b.n	8004c60 <_printf_i+0x150>
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	4632      	mov	r2, r6
 8004d12:	4649      	mov	r1, r9
 8004d14:	4640      	mov	r0, r8
 8004d16:	47d0      	blx	sl
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d0ab      	beq.n	8004c74 <_printf_i+0x164>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	079b      	lsls	r3, r3, #30
 8004d20:	d413      	bmi.n	8004d4a <_printf_i+0x23a>
 8004d22:	68e0      	ldr	r0, [r4, #12]
 8004d24:	9b03      	ldr	r3, [sp, #12]
 8004d26:	4298      	cmp	r0, r3
 8004d28:	bfb8      	it	lt
 8004d2a:	4618      	movlt	r0, r3
 8004d2c:	e7a4      	b.n	8004c78 <_printf_i+0x168>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4632      	mov	r2, r6
 8004d32:	4649      	mov	r1, r9
 8004d34:	4640      	mov	r0, r8
 8004d36:	47d0      	blx	sl
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d09b      	beq.n	8004c74 <_printf_i+0x164>
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	68e3      	ldr	r3, [r4, #12]
 8004d40:	9903      	ldr	r1, [sp, #12]
 8004d42:	1a5b      	subs	r3, r3, r1
 8004d44:	42ab      	cmp	r3, r5
 8004d46:	dcf2      	bgt.n	8004d2e <_printf_i+0x21e>
 8004d48:	e7eb      	b.n	8004d22 <_printf_i+0x212>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	f104 0619 	add.w	r6, r4, #25
 8004d50:	e7f5      	b.n	8004d3e <_printf_i+0x22e>
 8004d52:	bf00      	nop
 8004d54:	08005425 	.word	0x08005425
 8004d58:	08005436 	.word	0x08005436

08004d5c <_sbrk_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <_sbrk_r+0x1c>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fc f91c 	bl	8000fa4 <_sbrk>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_sbrk_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_sbrk_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	200002a4 	.word	0x200002a4

08004d7c <__sread>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	460c      	mov	r4, r1
 8004d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d84:	f000 fab4 	bl	80052f0 <_read_r>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	bfab      	itete	ge
 8004d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d90:	181b      	addge	r3, r3, r0
 8004d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d96:	bfac      	ite	ge
 8004d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d9a:	81a3      	strhlt	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__swrite>:
 8004d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da2:	461f      	mov	r7, r3
 8004da4:	898b      	ldrh	r3, [r1, #12]
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	4605      	mov	r5, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4616      	mov	r6, r2
 8004dae:	d505      	bpl.n	8004dbc <__swrite+0x1e>
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	2302      	movs	r3, #2
 8004db6:	2200      	movs	r2, #0
 8004db8:	f000 f9c8 	bl	800514c <_lseek_r>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	4632      	mov	r2, r6
 8004dca:	463b      	mov	r3, r7
 8004dcc:	4628      	mov	r0, r5
 8004dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	f000 b869 	b.w	8004ea8 <_write_r>

08004dd6 <__sseek>:
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	460c      	mov	r4, r1
 8004dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dde:	f000 f9b5 	bl	800514c <_lseek_r>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	bf15      	itete	ne
 8004de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004df2:	81a3      	strheq	r3, [r4, #12]
 8004df4:	bf18      	it	ne
 8004df6:	81a3      	strhne	r3, [r4, #12]
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <__sclose>:
 8004dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfe:	f000 b8d3 	b.w	8004fa8 <_close_r>
	...

08004e04 <__swbuf_r>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	460e      	mov	r6, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	b118      	cbz	r0, 8004e16 <__swbuf_r+0x12>
 8004e0e:	6983      	ldr	r3, [r0, #24]
 8004e10:	b90b      	cbnz	r3, 8004e16 <__swbuf_r+0x12>
 8004e12:	f7ff fbbb 	bl	800458c <__sinit>
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <__swbuf_r+0x98>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	d12b      	bne.n	8004e74 <__swbuf_r+0x70>
 8004e1c:	686c      	ldr	r4, [r5, #4]
 8004e1e:	69a3      	ldr	r3, [r4, #24]
 8004e20:	60a3      	str	r3, [r4, #8]
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	071a      	lsls	r2, r3, #28
 8004e26:	d52f      	bpl.n	8004e88 <__swbuf_r+0x84>
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	b36b      	cbz	r3, 8004e88 <__swbuf_r+0x84>
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	6963      	ldr	r3, [r4, #20]
 8004e34:	b2f6      	uxtb	r6, r6
 8004e36:	4283      	cmp	r3, r0
 8004e38:	4637      	mov	r7, r6
 8004e3a:	dc04      	bgt.n	8004e46 <__swbuf_r+0x42>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 f948 	bl	80050d4 <_fflush_r>
 8004e44:	bb30      	cbnz	r0, 8004e94 <__swbuf_r+0x90>
 8004e46:	68a3      	ldr	r3, [r4, #8]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60a3      	str	r3, [r4, #8]
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	701e      	strb	r6, [r3, #0]
 8004e54:	6963      	ldr	r3, [r4, #20]
 8004e56:	3001      	adds	r0, #1
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	d004      	beq.n	8004e66 <__swbuf_r+0x62>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d506      	bpl.n	8004e70 <__swbuf_r+0x6c>
 8004e62:	2e0a      	cmp	r6, #10
 8004e64:	d104      	bne.n	8004e70 <__swbuf_r+0x6c>
 8004e66:	4621      	mov	r1, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f933 	bl	80050d4 <_fflush_r>
 8004e6e:	b988      	cbnz	r0, 8004e94 <__swbuf_r+0x90>
 8004e70:	4638      	mov	r0, r7
 8004e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <__swbuf_r+0x9c>)
 8004e76:	429c      	cmp	r4, r3
 8004e78:	d101      	bne.n	8004e7e <__swbuf_r+0x7a>
 8004e7a:	68ac      	ldr	r4, [r5, #8]
 8004e7c:	e7cf      	b.n	8004e1e <__swbuf_r+0x1a>
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <__swbuf_r+0xa0>)
 8004e80:	429c      	cmp	r4, r3
 8004e82:	bf08      	it	eq
 8004e84:	68ec      	ldreq	r4, [r5, #12]
 8004e86:	e7ca      	b.n	8004e1e <__swbuf_r+0x1a>
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 f81e 	bl	8004ecc <__swsetup_r>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d0cb      	beq.n	8004e2c <__swbuf_r+0x28>
 8004e94:	f04f 37ff 	mov.w	r7, #4294967295
 8004e98:	e7ea      	b.n	8004e70 <__swbuf_r+0x6c>
 8004e9a:	bf00      	nop
 8004e9c:	080053d4 	.word	0x080053d4
 8004ea0:	080053f4 	.word	0x080053f4
 8004ea4:	080053b4 	.word	0x080053b4

08004ea8 <_write_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4d07      	ldr	r5, [pc, #28]	; (8004ec8 <_write_r+0x20>)
 8004eac:	4604      	mov	r4, r0
 8004eae:	4608      	mov	r0, r1
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	602a      	str	r2, [r5, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f7fc f823 	bl	8000f02 <_write>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_write_r+0x1e>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_write_r+0x1e>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	200002a4 	.word	0x200002a4

08004ecc <__swsetup_r>:
 8004ecc:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <__swsetup_r+0xcc>)
 8004ece:	b570      	push	{r4, r5, r6, lr}
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	b125      	cbz	r5, 8004ee2 <__swsetup_r+0x16>
 8004ed8:	69ab      	ldr	r3, [r5, #24]
 8004eda:	b913      	cbnz	r3, 8004ee2 <__swsetup_r+0x16>
 8004edc:	4628      	mov	r0, r5
 8004ede:	f7ff fb55 	bl	800458c <__sinit>
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <__swsetup_r+0xd0>)
 8004ee4:	429c      	cmp	r4, r3
 8004ee6:	d10f      	bne.n	8004f08 <__swsetup_r+0x3c>
 8004ee8:	686c      	ldr	r4, [r5, #4]
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ef0:	0719      	lsls	r1, r3, #28
 8004ef2:	d42c      	bmi.n	8004f4e <__swsetup_r+0x82>
 8004ef4:	06dd      	lsls	r5, r3, #27
 8004ef6:	d411      	bmi.n	8004f1c <__swsetup_r+0x50>
 8004ef8:	2309      	movs	r3, #9
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	f04f 30ff 	mov.w	r0, #4294967295
 8004f06:	e03e      	b.n	8004f86 <__swsetup_r+0xba>
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <__swsetup_r+0xd4>)
 8004f0a:	429c      	cmp	r4, r3
 8004f0c:	d101      	bne.n	8004f12 <__swsetup_r+0x46>
 8004f0e:	68ac      	ldr	r4, [r5, #8]
 8004f10:	e7eb      	b.n	8004eea <__swsetup_r+0x1e>
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <__swsetup_r+0xd8>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	bf08      	it	eq
 8004f18:	68ec      	ldreq	r4, [r5, #12]
 8004f1a:	e7e6      	b.n	8004eea <__swsetup_r+0x1e>
 8004f1c:	0758      	lsls	r0, r3, #29
 8004f1e:	d512      	bpl.n	8004f46 <__swsetup_r+0x7a>
 8004f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f22:	b141      	cbz	r1, 8004f36 <__swsetup_r+0x6a>
 8004f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f28:	4299      	cmp	r1, r3
 8004f2a:	d002      	beq.n	8004f32 <__swsetup_r+0x66>
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f000 f98f 	bl	8005250 <_free_r>
 8004f32:	2300      	movs	r3, #0
 8004f34:	6363      	str	r3, [r4, #52]	; 0x34
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	f043 0308 	orr.w	r3, r3, #8
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	b94b      	cbnz	r3, 8004f66 <__swsetup_r+0x9a>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5c:	d003      	beq.n	8004f66 <__swsetup_r+0x9a>
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4630      	mov	r0, r6
 8004f62:	f000 f929 	bl	80051b8 <__smakebuf_r>
 8004f66:	89a0      	ldrh	r0, [r4, #12]
 8004f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f6c:	f010 0301 	ands.w	r3, r0, #1
 8004f70:	d00a      	beq.n	8004f88 <__swsetup_r+0xbc>
 8004f72:	2300      	movs	r3, #0
 8004f74:	60a3      	str	r3, [r4, #8]
 8004f76:	6963      	ldr	r3, [r4, #20]
 8004f78:	425b      	negs	r3, r3
 8004f7a:	61a3      	str	r3, [r4, #24]
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	b943      	cbnz	r3, 8004f92 <__swsetup_r+0xc6>
 8004f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f84:	d1ba      	bne.n	8004efc <__swsetup_r+0x30>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	0781      	lsls	r1, r0, #30
 8004f8a:	bf58      	it	pl
 8004f8c:	6963      	ldrpl	r3, [r4, #20]
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	e7f4      	b.n	8004f7c <__swsetup_r+0xb0>
 8004f92:	2000      	movs	r0, #0
 8004f94:	e7f7      	b.n	8004f86 <__swsetup_r+0xba>
 8004f96:	bf00      	nop
 8004f98:	2000000c 	.word	0x2000000c
 8004f9c:	080053d4 	.word	0x080053d4
 8004fa0:	080053f4 	.word	0x080053f4
 8004fa4:	080053b4 	.word	0x080053b4

08004fa8 <_close_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_close_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fb ffc1 	bl	8000f3a <_close>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_close_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_close_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200002a4 	.word	0x200002a4

08004fc8 <__sflush_r>:
 8004fc8:	898a      	ldrh	r2, [r1, #12]
 8004fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fce:	4605      	mov	r5, r0
 8004fd0:	0710      	lsls	r0, r2, #28
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	d458      	bmi.n	8005088 <__sflush_r+0xc0>
 8004fd6:	684b      	ldr	r3, [r1, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	dc05      	bgt.n	8004fe8 <__sflush_r+0x20>
 8004fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	dc02      	bgt.n	8004fe8 <__sflush_r+0x20>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	d0f9      	beq.n	8004fe2 <__sflush_r+0x1a>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ff4:	682f      	ldr	r7, [r5, #0]
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	d032      	beq.n	8005060 <__sflush_r+0x98>
 8004ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	075a      	lsls	r2, r3, #29
 8005000:	d505      	bpl.n	800500e <__sflush_r+0x46>
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	1ac0      	subs	r0, r0, r3
 8005006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005008:	b10b      	cbz	r3, 800500e <__sflush_r+0x46>
 800500a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800500c:	1ac0      	subs	r0, r0, r3
 800500e:	2300      	movs	r3, #0
 8005010:	4602      	mov	r2, r0
 8005012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005014:	6a21      	ldr	r1, [r4, #32]
 8005016:	4628      	mov	r0, r5
 8005018:	47b0      	blx	r6
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	d106      	bne.n	800502e <__sflush_r+0x66>
 8005020:	6829      	ldr	r1, [r5, #0]
 8005022:	291d      	cmp	r1, #29
 8005024:	d82c      	bhi.n	8005080 <__sflush_r+0xb8>
 8005026:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <__sflush_r+0x108>)
 8005028:	40ca      	lsrs	r2, r1
 800502a:	07d6      	lsls	r6, r2, #31
 800502c:	d528      	bpl.n	8005080 <__sflush_r+0xb8>
 800502e:	2200      	movs	r2, #0
 8005030:	6062      	str	r2, [r4, #4]
 8005032:	04d9      	lsls	r1, r3, #19
 8005034:	6922      	ldr	r2, [r4, #16]
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	d504      	bpl.n	8005044 <__sflush_r+0x7c>
 800503a:	1c42      	adds	r2, r0, #1
 800503c:	d101      	bne.n	8005042 <__sflush_r+0x7a>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b903      	cbnz	r3, 8005044 <__sflush_r+0x7c>
 8005042:	6560      	str	r0, [r4, #84]	; 0x54
 8005044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005046:	602f      	str	r7, [r5, #0]
 8005048:	2900      	cmp	r1, #0
 800504a:	d0ca      	beq.n	8004fe2 <__sflush_r+0x1a>
 800504c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005050:	4299      	cmp	r1, r3
 8005052:	d002      	beq.n	800505a <__sflush_r+0x92>
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f8fb 	bl	8005250 <_free_r>
 800505a:	2000      	movs	r0, #0
 800505c:	6360      	str	r0, [r4, #52]	; 0x34
 800505e:	e7c1      	b.n	8004fe4 <__sflush_r+0x1c>
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	2301      	movs	r3, #1
 8005064:	4628      	mov	r0, r5
 8005066:	47b0      	blx	r6
 8005068:	1c41      	adds	r1, r0, #1
 800506a:	d1c7      	bne.n	8004ffc <__sflush_r+0x34>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0c4      	beq.n	8004ffc <__sflush_r+0x34>
 8005072:	2b1d      	cmp	r3, #29
 8005074:	d001      	beq.n	800507a <__sflush_r+0xb2>
 8005076:	2b16      	cmp	r3, #22
 8005078:	d101      	bne.n	800507e <__sflush_r+0xb6>
 800507a:	602f      	str	r7, [r5, #0]
 800507c:	e7b1      	b.n	8004fe2 <__sflush_r+0x1a>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	e7ad      	b.n	8004fe4 <__sflush_r+0x1c>
 8005088:	690f      	ldr	r7, [r1, #16]
 800508a:	2f00      	cmp	r7, #0
 800508c:	d0a9      	beq.n	8004fe2 <__sflush_r+0x1a>
 800508e:	0793      	lsls	r3, r2, #30
 8005090:	680e      	ldr	r6, [r1, #0]
 8005092:	bf08      	it	eq
 8005094:	694b      	ldreq	r3, [r1, #20]
 8005096:	600f      	str	r7, [r1, #0]
 8005098:	bf18      	it	ne
 800509a:	2300      	movne	r3, #0
 800509c:	eba6 0807 	sub.w	r8, r6, r7
 80050a0:	608b      	str	r3, [r1, #8]
 80050a2:	f1b8 0f00 	cmp.w	r8, #0
 80050a6:	dd9c      	ble.n	8004fe2 <__sflush_r+0x1a>
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050ac:	4643      	mov	r3, r8
 80050ae:	463a      	mov	r2, r7
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b0      	blx	r6
 80050b4:	2800      	cmp	r0, #0
 80050b6:	dc06      	bgt.n	80050c6 <__sflush_r+0xfe>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e78e      	b.n	8004fe4 <__sflush_r+0x1c>
 80050c6:	4407      	add	r7, r0
 80050c8:	eba8 0800 	sub.w	r8, r8, r0
 80050cc:	e7e9      	b.n	80050a2 <__sflush_r+0xda>
 80050ce:	bf00      	nop
 80050d0:	20400001 	.word	0x20400001

080050d4 <_fflush_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	4605      	mov	r5, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b913      	cbnz	r3, 80050e4 <_fflush_r+0x10>
 80050de:	2500      	movs	r5, #0
 80050e0:	4628      	mov	r0, r5
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	b118      	cbz	r0, 80050ee <_fflush_r+0x1a>
 80050e6:	6983      	ldr	r3, [r0, #24]
 80050e8:	b90b      	cbnz	r3, 80050ee <_fflush_r+0x1a>
 80050ea:	f7ff fa4f 	bl	800458c <__sinit>
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <_fflush_r+0x6c>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d11b      	bne.n	800512c <_fflush_r+0x58>
 80050f4:	686c      	ldr	r4, [r5, #4]
 80050f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ef      	beq.n	80050de <_fflush_r+0xa>
 80050fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005100:	07d0      	lsls	r0, r2, #31
 8005102:	d404      	bmi.n	800510e <_fflush_r+0x3a>
 8005104:	0599      	lsls	r1, r3, #22
 8005106:	d402      	bmi.n	800510e <_fflush_r+0x3a>
 8005108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510a:	f7ff fadd 	bl	80046c8 <__retarget_lock_acquire_recursive>
 800510e:	4628      	mov	r0, r5
 8005110:	4621      	mov	r1, r4
 8005112:	f7ff ff59 	bl	8004fc8 <__sflush_r>
 8005116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005118:	07da      	lsls	r2, r3, #31
 800511a:	4605      	mov	r5, r0
 800511c:	d4e0      	bmi.n	80050e0 <_fflush_r+0xc>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	d4dd      	bmi.n	80050e0 <_fflush_r+0xc>
 8005124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005126:	f7ff fad0 	bl	80046ca <__retarget_lock_release_recursive>
 800512a:	e7d9      	b.n	80050e0 <_fflush_r+0xc>
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <_fflush_r+0x70>)
 800512e:	429c      	cmp	r4, r3
 8005130:	d101      	bne.n	8005136 <_fflush_r+0x62>
 8005132:	68ac      	ldr	r4, [r5, #8]
 8005134:	e7df      	b.n	80050f6 <_fflush_r+0x22>
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <_fflush_r+0x74>)
 8005138:	429c      	cmp	r4, r3
 800513a:	bf08      	it	eq
 800513c:	68ec      	ldreq	r4, [r5, #12]
 800513e:	e7da      	b.n	80050f6 <_fflush_r+0x22>
 8005140:	080053d4 	.word	0x080053d4
 8005144:	080053f4 	.word	0x080053f4
 8005148:	080053b4 	.word	0x080053b4

0800514c <_lseek_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4d07      	ldr	r5, [pc, #28]	; (800516c <_lseek_r+0x20>)
 8005150:	4604      	mov	r4, r0
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7fb ff14 	bl	8000f88 <_lseek>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_lseek_r+0x1e>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_lseek_r+0x1e>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	200002a4 	.word	0x200002a4

08005170 <__swhatbuf_r>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	460e      	mov	r6, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	2900      	cmp	r1, #0
 800517a:	b096      	sub	sp, #88	; 0x58
 800517c:	4614      	mov	r4, r2
 800517e:	461d      	mov	r5, r3
 8005180:	da07      	bge.n	8005192 <__swhatbuf_r+0x22>
 8005182:	2300      	movs	r3, #0
 8005184:	602b      	str	r3, [r5, #0]
 8005186:	89b3      	ldrh	r3, [r6, #12]
 8005188:	061a      	lsls	r2, r3, #24
 800518a:	d410      	bmi.n	80051ae <__swhatbuf_r+0x3e>
 800518c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005190:	e00e      	b.n	80051b0 <__swhatbuf_r+0x40>
 8005192:	466a      	mov	r2, sp
 8005194:	f000 f8be 	bl	8005314 <_fstat_r>
 8005198:	2800      	cmp	r0, #0
 800519a:	dbf2      	blt.n	8005182 <__swhatbuf_r+0x12>
 800519c:	9a01      	ldr	r2, [sp, #4]
 800519e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051a6:	425a      	negs	r2, r3
 80051a8:	415a      	adcs	r2, r3
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	e7ee      	b.n	800518c <__swhatbuf_r+0x1c>
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	2000      	movs	r0, #0
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	b016      	add	sp, #88	; 0x58
 80051b6:	bd70      	pop	{r4, r5, r6, pc}

080051b8 <__smakebuf_r>:
 80051b8:	898b      	ldrh	r3, [r1, #12]
 80051ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051bc:	079d      	lsls	r5, r3, #30
 80051be:	4606      	mov	r6, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	d507      	bpl.n	80051d4 <__smakebuf_r+0x1c>
 80051c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	2301      	movs	r3, #1
 80051ce:	6163      	str	r3, [r4, #20]
 80051d0:	b002      	add	sp, #8
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	ab01      	add	r3, sp, #4
 80051d6:	466a      	mov	r2, sp
 80051d8:	f7ff ffca 	bl	8005170 <__swhatbuf_r>
 80051dc:	9900      	ldr	r1, [sp, #0]
 80051de:	4605      	mov	r5, r0
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7ff fa73 	bl	80046cc <_malloc_r>
 80051e6:	b948      	cbnz	r0, 80051fc <__smakebuf_r+0x44>
 80051e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ec:	059a      	lsls	r2, r3, #22
 80051ee:	d4ef      	bmi.n	80051d0 <__smakebuf_r+0x18>
 80051f0:	f023 0303 	bic.w	r3, r3, #3
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	e7e3      	b.n	80051c4 <__smakebuf_r+0xc>
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <__smakebuf_r+0x7c>)
 80051fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	6020      	str	r0, [r4, #0]
 8005204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	9b00      	ldr	r3, [sp, #0]
 800520c:	6163      	str	r3, [r4, #20]
 800520e:	9b01      	ldr	r3, [sp, #4]
 8005210:	6120      	str	r0, [r4, #16]
 8005212:	b15b      	cbz	r3, 800522c <__smakebuf_r+0x74>
 8005214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005218:	4630      	mov	r0, r6
 800521a:	f000 f88d 	bl	8005338 <_isatty_r>
 800521e:	b128      	cbz	r0, 800522c <__smakebuf_r+0x74>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	89a0      	ldrh	r0, [r4, #12]
 800522e:	4305      	orrs	r5, r0
 8005230:	81a5      	strh	r5, [r4, #12]
 8005232:	e7cd      	b.n	80051d0 <__smakebuf_r+0x18>
 8005234:	08004525 	.word	0x08004525

08005238 <__malloc_lock>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__malloc_lock+0x8>)
 800523a:	f7ff ba45 	b.w	80046c8 <__retarget_lock_acquire_recursive>
 800523e:	bf00      	nop
 8005240:	2000029c 	.word	0x2000029c

08005244 <__malloc_unlock>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__malloc_unlock+0x8>)
 8005246:	f7ff ba40 	b.w	80046ca <__retarget_lock_release_recursive>
 800524a:	bf00      	nop
 800524c:	2000029c 	.word	0x2000029c

08005250 <_free_r>:
 8005250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005252:	2900      	cmp	r1, #0
 8005254:	d048      	beq.n	80052e8 <_free_r+0x98>
 8005256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525a:	9001      	str	r0, [sp, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f1a1 0404 	sub.w	r4, r1, #4
 8005262:	bfb8      	it	lt
 8005264:	18e4      	addlt	r4, r4, r3
 8005266:	f7ff ffe7 	bl	8005238 <__malloc_lock>
 800526a:	4a20      	ldr	r2, [pc, #128]	; (80052ec <_free_r+0x9c>)
 800526c:	9801      	ldr	r0, [sp, #4]
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	4615      	mov	r5, r2
 8005272:	b933      	cbnz	r3, 8005282 <_free_r+0x32>
 8005274:	6063      	str	r3, [r4, #4]
 8005276:	6014      	str	r4, [r2, #0]
 8005278:	b003      	add	sp, #12
 800527a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800527e:	f7ff bfe1 	b.w	8005244 <__malloc_unlock>
 8005282:	42a3      	cmp	r3, r4
 8005284:	d90b      	bls.n	800529e <_free_r+0x4e>
 8005286:	6821      	ldr	r1, [r4, #0]
 8005288:	1862      	adds	r2, r4, r1
 800528a:	4293      	cmp	r3, r2
 800528c:	bf04      	itt	eq
 800528e:	681a      	ldreq	r2, [r3, #0]
 8005290:	685b      	ldreq	r3, [r3, #4]
 8005292:	6063      	str	r3, [r4, #4]
 8005294:	bf04      	itt	eq
 8005296:	1852      	addeq	r2, r2, r1
 8005298:	6022      	streq	r2, [r4, #0]
 800529a:	602c      	str	r4, [r5, #0]
 800529c:	e7ec      	b.n	8005278 <_free_r+0x28>
 800529e:	461a      	mov	r2, r3
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	b10b      	cbz	r3, 80052a8 <_free_r+0x58>
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d9fa      	bls.n	800529e <_free_r+0x4e>
 80052a8:	6811      	ldr	r1, [r2, #0]
 80052aa:	1855      	adds	r5, r2, r1
 80052ac:	42a5      	cmp	r5, r4
 80052ae:	d10b      	bne.n	80052c8 <_free_r+0x78>
 80052b0:	6824      	ldr	r4, [r4, #0]
 80052b2:	4421      	add	r1, r4
 80052b4:	1854      	adds	r4, r2, r1
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	6011      	str	r1, [r2, #0]
 80052ba:	d1dd      	bne.n	8005278 <_free_r+0x28>
 80052bc:	681c      	ldr	r4, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	6053      	str	r3, [r2, #4]
 80052c2:	4421      	add	r1, r4
 80052c4:	6011      	str	r1, [r2, #0]
 80052c6:	e7d7      	b.n	8005278 <_free_r+0x28>
 80052c8:	d902      	bls.n	80052d0 <_free_r+0x80>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	e7d3      	b.n	8005278 <_free_r+0x28>
 80052d0:	6825      	ldr	r5, [r4, #0]
 80052d2:	1961      	adds	r1, r4, r5
 80052d4:	428b      	cmp	r3, r1
 80052d6:	bf04      	itt	eq
 80052d8:	6819      	ldreq	r1, [r3, #0]
 80052da:	685b      	ldreq	r3, [r3, #4]
 80052dc:	6063      	str	r3, [r4, #4]
 80052de:	bf04      	itt	eq
 80052e0:	1949      	addeq	r1, r1, r5
 80052e2:	6021      	streq	r1, [r4, #0]
 80052e4:	6054      	str	r4, [r2, #4]
 80052e6:	e7c7      	b.n	8005278 <_free_r+0x28>
 80052e8:	b003      	add	sp, #12
 80052ea:	bd30      	pop	{r4, r5, pc}
 80052ec:	20000094 	.word	0x20000094

080052f0 <_read_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_read_r+0x20>)
 80052f4:	4604      	mov	r4, r0
 80052f6:	4608      	mov	r0, r1
 80052f8:	4611      	mov	r1, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fb fde2 	bl	8000ec8 <_read>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_read_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_read_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	200002a4 	.word	0x200002a4

08005314 <_fstat_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d07      	ldr	r5, [pc, #28]	; (8005334 <_fstat_r+0x20>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	f7fb fe16 	bl	8000f52 <_fstat>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	d102      	bne.n	8005330 <_fstat_r+0x1c>
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	b103      	cbz	r3, 8005330 <_fstat_r+0x1c>
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	bd38      	pop	{r3, r4, r5, pc}
 8005332:	bf00      	nop
 8005334:	200002a4 	.word	0x200002a4

08005338 <_isatty_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d06      	ldr	r5, [pc, #24]	; (8005354 <_isatty_r+0x1c>)
 800533c:	2300      	movs	r3, #0
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	f7fb fe15 	bl	8000f72 <_isatty>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_isatty_r+0x1a>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_isatty_r+0x1a>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	200002a4 	.word	0x200002a4

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
