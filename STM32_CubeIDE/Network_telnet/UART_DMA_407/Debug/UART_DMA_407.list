
UART_DMA_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005340  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005760  08005760  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000020c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bf0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219f  00000000  00000000  00030cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  00033b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022050  00000000  00000000  000347f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efac  00000000  00000000  00056848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc75b  00000000  00000000  000657f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131f4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fc8  00000000  00000000  00131fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054b8 	.word	0x080054b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080054b8 	.word	0x080054b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fe88 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f818 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f908 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 f8de 	bl	8000768 <MX_DMA_Init>
  MX_TIM6_Init();
 80005ac:	f000 f87c 	bl	80006a8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8b0 	bl	8000714 <MX_USART2_UART_Init>
  HAL_UART_Receive_DMA(&huart2, rx_buff, 20);
  /* USER CODE END 2 */
#endif

#ifdef TELNET
  printf("*********************************************\r\n"
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <main+0x34>)
 80005b6:	f003 ffcf 	bl	8004558 <puts>
		 "*     Telnet connection started....         *\r\n "
		 "*********************************************\r\n");
  telnet_init();
 80005ba:	f000 fb95 	bl	8000ce8 <telnet_init>
  while (1)
  {

#ifdef TELNET

	  if(stage==INIT)
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <main+0x38>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1fb      	bne.n	80005be <main+0x26>
	  {
		  telnet_init();
 80005c6:	f000 fb8f 	bl	8000ce8 <telnet_init>
	  if(stage==INIT)
 80005ca:	e7f8      	b.n	80005be <main+0x26>
 80005cc:	08005510 	.word	0x08005510
 80005d0:	200000ac 	.word	0x200000ac

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 ff42 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000648:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fd1e 	bl	800209c <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000666:	f000 fb91 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f001 ff7f 	bl	800258c <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000694:	f000 fb7a 	bl	8000d8c <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_TIM6_Init+0x64>)
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_TIM6_Init+0x68>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_TIM6_Init+0x64>)
 80006be:	2254      	movs	r2, #84	; 0x54
 80006c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_TIM6_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_TIM6_Init+0x64>)
 80006ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_TIM6_Init+0x64>)
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_TIM6_Init+0x64>)
 80006d8:	f002 f986 	bl	80029e8 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006e2:	f000 fb53 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_TIM6_Init+0x64>)
 80006f4:	f002 fc08 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006fe:	f000 fb45 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200001ac 	.word	0x200001ac
 8000710:	40001000 	.word	0x40001000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f002 fc6c 	bl	8003028 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 fb19 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001f8 	.word	0x200001f8
 8000764:	40004400 	.word	0x40004400

08000768 <MX_DMA_Init>:

/**
  * Enable IT controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* IT controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* IT interrupt init */
  /* IT1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f000 fe88 	bl	80014a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f000 fea1 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* IT1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2011      	movs	r0, #17
 80007a0:	f000 fe80 	bl	80014a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007a4:	2011      	movs	r0, #17
 80007a6:	f000 fe99 	bl	80014dc <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_GPIO_Init+0xb4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <MX_GPIO_Init+0xb4>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_GPIO_Init+0xb4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_GPIO_Init+0xb4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a1e      	ldr	r2, [pc, #120]	; (800086c <MX_GPIO_Init+0xb4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_GPIO_Init+0xb4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_GPIO_Init+0xb4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_GPIO_Init+0xb4>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_GPIO_Init+0xb4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <MX_GPIO_Init+0xb8>)
 800082a:	f001 fc03 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082e:	2301      	movs	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0xbc>)
 8000842:	f001 fa5b 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000846:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0xb8>)
 8000860:	f001 fa4c 	bl	8001cfc <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020c00 	.word	0x40020c00
 8000874:	40020000 	.word	0x40020000

08000878 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); return ch; }
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	1d39      	adds	r1, r7, #4
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	2201      	movs	r2, #1
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <__io_putchar+0x20>)
 800088a:	f002 fc1a 	bl	80030c2 <HAL_UART_Transmit>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001f8 	.word	0x200001f8

0800089c <__io_getchar>:

GETCHAR_PROTOTYPE
{ 	uint8_t ch = 0;
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <__io_getchar+0x38>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <__io_getchar+0x38>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008bc:	1df9      	adds	r1, r7, #7
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	2201      	movs	r2, #1
 80008c4:	4803      	ldr	r0, [pc, #12]	; (80008d4 <__io_getchar+0x38>)
 80008c6:	f002 fc8e 	bl	80031e6 <HAL_UART_Receive>
	return ch;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001f8 	.word	0x200001f8

080008d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
#endif

#ifdef TELNET

	if(rx_data == '\b' && j>0)
 80008e0:	4bac      	ldr	r3, [pc, #688]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d121      	bne.n	800092c <HAL_UART_RxCpltCallback+0x54>
 80008e8:	4bab      	ldr	r3, [pc, #684]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01d      	beq.n	800092c <HAL_UART_RxCpltCallback+0x54>
		{
			input[j]=0;
 80008f0:	4ba9      	ldr	r3, [pc, #676]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4ba9      	ldr	r3, [pc, #676]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	5499      	strb	r1, [r3, r2]
			j=j-2;
 80008fc:	4ba6      	ldr	r3, [pc, #664]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3b02      	subs	r3, #2
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4ba4      	ldr	r3, [pc, #656]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000906:	701a      	strb	r2, [r3, #0]
			sprintf(erase," \b");
 8000908:	49a5      	ldr	r1, [pc, #660]	; (8000ba0 <HAL_UART_RxCpltCallback+0x2c8>)
 800090a:	48a6      	ldr	r0, [pc, #664]	; (8000ba4 <HAL_UART_RxCpltCallback+0x2cc>)
 800090c:	f003 fe2c 	bl	8004568 <siprintf>
			HAL_UART_Transmit(&huart2, erase, sizeof(erase), 50);
 8000910:	2332      	movs	r3, #50	; 0x32
 8000912:	2204      	movs	r2, #4
 8000914:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <HAL_UART_RxCpltCallback+0x2cc>)
 8000916:	48a4      	ldr	r0, [pc, #656]	; (8000ba8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000918:	f002 fbd3 	bl	80030c2 <HAL_UART_Transmit>
			memset(erase,0,sizeof(erase));
 800091c:	2204      	movs	r2, #4
 800091e:	2100      	movs	r1, #0
 8000920:	48a0      	ldr	r0, [pc, #640]	; (8000ba4 <HAL_UART_RxCpltCallback+0x2cc>)
 8000922:	f003 fda3 	bl	800446c <memset>
			rx_data=0;
 8000926:	4b9b      	ldr	r3, [pc, #620]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
		}

	if((rx_data != '\r') || j>(sizeof(input)) )
 800092c:	4b99      	ldr	r3, [pc, #612]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b0d      	cmp	r3, #13
 8000932:	d103      	bne.n	800093c <HAL_UART_RxCpltCallback+0x64>
 8000934:	4b98      	ldr	r3, [pc, #608]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b14      	cmp	r3, #20
 800093a:	d917      	bls.n	800096c <HAL_UART_RxCpltCallback+0x94>
		{
			input[j]=rx_data;
 800093c:	4b96      	ldr	r3, [pc, #600]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b94      	ldr	r3, [pc, #592]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 8000944:	7819      	ldrb	r1, [r3, #0]
 8000946:	4b95      	ldr	r3, [pc, #596]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000948:	5499      	strb	r1, [r3, r2]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800094a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094e:	4897      	ldr	r0, [pc, #604]	; (8000bac <HAL_UART_RxCpltCallback+0x2d4>)
 8000950:	f001 fb89 	bl	8002066 <HAL_GPIO_TogglePin>
			HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	498f      	ldr	r1, [pc, #572]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 8000958:	4893      	ldr	r0, [pc, #588]	; (8000ba8 <HAL_UART_RxCpltCallback+0x2d0>)
 800095a:	f002 fce6 	bl	800332a <HAL_UART_Receive_DMA>

			j++;
 800095e:	4b8e      	ldr	r3, [pc, #568]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b8c      	ldr	r3, [pc, #560]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e002      	b.n	8000972 <HAL_UART_RxCpltCallback+0x9a>
		}

	else
	{
		recieved=TRUE;
 800096c:	4b90      	ldr	r3, [pc, #576]	; (8000bb0 <HAL_UART_RxCpltCallback+0x2d8>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
		//printf("\r\n");
	}
	if(recieved)
 8000972:	4b8f      	ldr	r3, [pc, #572]	; (8000bb0 <HAL_UART_RxCpltCallback+0x2d8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 818c 	beq.w	8000c94 <HAL_UART_RxCpltCallback+0x3bc>
	{
		switch(stage)
 800097c:	4b8d      	ldr	r3, [pc, #564]	; (8000bb4 <HAL_UART_RxCpltCallback+0x2dc>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	2b03      	cmp	r3, #3
 8000984:	f200 818f 	bhi.w	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>
 8000988:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <HAL_UART_RxCpltCallback+0xb8>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009a1 	.word	0x080009a1
 8000994:	08000a13 	.word	0x08000a13
 8000998:	08000b19 	.word	0x08000b19
 800099c:	08000c57 	.word	0x08000c57
//					if(strcmp(input,"telnet"))
//					{
//						telnet_init();
//					}

					if(strlen(input)>8)
 80009a0:	487e      	ldr	r0, [pc, #504]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009a2:	f7ff fc1f 	bl	80001e4 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d903      	bls.n	80009b4 <HAL_UART_RxCpltCallback+0xdc>
					{
						printf("input out of range!!\r\n");
 80009ac:	4882      	ldr	r0, [pc, #520]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 80009ae:	f003 fdd3 	bl	8004558 <puts>
						HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
						rx_data=0;
						j=0;
						recieved=FALSE;
					}
					break;
 80009b2:	e178      	b.n	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>
						memcpy(input_user,input,strlen(input));
 80009b4:	4879      	ldr	r0, [pc, #484]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009b6:	f7ff fc15 	bl	80001e4 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4977      	ldr	r1, [pc, #476]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009c0:	487e      	ldr	r0, [pc, #504]	; (8000bbc <HAL_UART_RxCpltCallback+0x2e4>)
 80009c2:	f003 fd45 	bl	8004450 <memcpy>
						memset(input,0,sizeof(input));
 80009c6:	2214      	movs	r2, #20
 80009c8:	2100      	movs	r1, #0
 80009ca:	4874      	ldr	r0, [pc, #464]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009cc:	f003 fd4e 	bl	800446c <memset>
						sprintf(input,"\n\rPassword: ");
 80009d0:	497b      	ldr	r1, [pc, #492]	; (8000bc0 <HAL_UART_RxCpltCallback+0x2e8>)
 80009d2:	4872      	ldr	r0, [pc, #456]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009d4:	f003 fdc8 	bl	8004568 <siprintf>
						HAL_UART_Transmit(&huart2, input, sizeof(input), 50);
 80009d8:	2332      	movs	r3, #50	; 0x32
 80009da:	2214      	movs	r2, #20
 80009dc:	496f      	ldr	r1, [pc, #444]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009de:	4872      	ldr	r0, [pc, #456]	; (8000ba8 <HAL_UART_RxCpltCallback+0x2d0>)
 80009e0:	f002 fb6f 	bl	80030c2 <HAL_UART_Transmit>
						memset(input,0,sizeof(input));
 80009e4:	2214      	movs	r2, #20
 80009e6:	2100      	movs	r1, #0
 80009e8:	486c      	ldr	r0, [pc, #432]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 80009ea:	f003 fd3f 	bl	800446c <memset>
						stage=AUTH;
 80009ee:	4b71      	ldr	r3, [pc, #452]	; (8000bb4 <HAL_UART_RxCpltCallback+0x2dc>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
						HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	4967      	ldr	r1, [pc, #412]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 80009f8:	486b      	ldr	r0, [pc, #428]	; (8000ba8 <HAL_UART_RxCpltCallback+0x2d0>)
 80009fa:	f002 fc96 	bl	800332a <HAL_UART_Receive_DMA>
						rx_data=0;
 80009fe:	4b65      	ldr	r3, [pc, #404]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
						j=0;
 8000a04:	4b64      	ldr	r3, [pc, #400]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
						recieved=FALSE;
 8000a0a:	4b69      	ldr	r3, [pc, #420]	; (8000bb0 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
					break;
 8000a10:	e149      	b.n	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>

				case AUTH:
					if(strlen(input)>8)
 8000a12:	4862      	ldr	r0, [pc, #392]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a14:	f7ff fbe6 	bl	80001e4 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d903      	bls.n	8000a26 <HAL_UART_RxCpltCallback+0x14e>
					{
						printf("input out of range!!\r\n");
 8000a1e:	4866      	ldr	r0, [pc, #408]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000a20:	f003 fd9a 	bl	8004558 <puts>
 8000a24:	e072      	b.n	8000b0c <HAL_UART_RxCpltCallback+0x234>
					}

					else
					{
						memcpy(input_pass,input,strlen(input));
 8000a26:	485d      	ldr	r0, [pc, #372]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a28:	f7ff fbdc 	bl	80001e4 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	495a      	ldr	r1, [pc, #360]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a32:	4864      	ldr	r0, [pc, #400]	; (8000bc4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000a34:	f003 fd0c 	bl	8004450 <memcpy>
						memset(input,0,sizeof(input));
 8000a38:	2214      	movs	r2, #20
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4857      	ldr	r0, [pc, #348]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a3e:	f003 fd15 	bl	800446c <memset>

						for(uint8_t i=0;i<4;i++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e041      	b.n	8000acc <HAL_UART_RxCpltCallback+0x1f4>
						{
							if((strcmp(*(user+i),input_user)==0) && (strcmp(*(pass+i),input_pass)==0))
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4a5e      	ldr	r2, [pc, #376]	; (8000bc8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000a4e:	4413      	add	r3, r2
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	495a      	ldr	r1, [pc, #360]	; (8000bbc <HAL_UART_RxCpltCallback+0x2e4>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fbbb 	bl	80001d0 <strcmp>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d132      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x1ee>
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4a59      	ldr	r2, [pc, #356]	; (8000bcc <HAL_UART_RxCpltCallback+0x2f4>)
 8000a66:	4413      	add	r3, r2
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4956      	ldr	r1, [pc, #344]	; (8000bc4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fbaf 	bl	80001d0 <strcmp>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d126      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x1ee>
							{
								printf("\r\nSuccessfully Authenticated!\r\n");
 8000a78:	4855      	ldr	r0, [pc, #340]	; (8000bd0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000a7a:	f003 fd6d 	bl	8004558 <puts>
								//printf("Config> ");
								sprintf(input,"\r\nConfig> ");
 8000a7e:	4955      	ldr	r1, [pc, #340]	; (8000bd4 <HAL_UART_RxCpltCallback+0x2fc>)
 8000a80:	4846      	ldr	r0, [pc, #280]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a82:	f003 fd71 	bl	8004568 <siprintf>
								HAL_UART_Transmit(&huart2, input, sizeof(input), 50);
 8000a86:	2332      	movs	r3, #50	; 0x32
 8000a88:	2214      	movs	r2, #20
 8000a8a:	4944      	ldr	r1, [pc, #272]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a8c:	4846      	ldr	r0, [pc, #280]	; (8000ba8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a8e:	f002 fb18 	bl	80030c2 <HAL_UART_Transmit>
								memset(input,0,sizeof(input));
 8000a92:	2214      	movs	r2, #20
 8000a94:	2100      	movs	r1, #0
 8000a96:	4841      	ldr	r0, [pc, #260]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a98:	f003 fce8 	bl	800446c <memset>
								HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	493d      	ldr	r1, [pc, #244]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 8000aa0:	4841      	ldr	r0, [pc, #260]	; (8000ba8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000aa2:	f002 fc42 	bl	800332a <HAL_UART_Receive_DMA>
										rx_data=0;
 8000aa6:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <HAL_UART_RxCpltCallback+0x2bc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
										j=0;
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
										recieved=FALSE;
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <HAL_UART_RxCpltCallback+0x2d8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
								flag=TRUE;
 8000ab8:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <HAL_UART_RxCpltCallback+0x300>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
								stage=CONFIG;
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <HAL_UART_RxCpltCallback+0x2dc>)
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	701a      	strb	r2, [r3, #0]
								break;
 8000ac4:	e005      	b.n	8000ad2 <HAL_UART_RxCpltCallback+0x1fa>
						for(uint8_t i=0;i<4;i++)
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d9ba      	bls.n	8000a48 <HAL_UART_RxCpltCallback+0x170>
							}
						}

						if(!flag)
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <HAL_UART_RxCpltCallback+0x300>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d118      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0x234>
						{
							stage=INIT;
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <HAL_UART_RxCpltCallback+0x2dc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
							flag=FALSE;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <HAL_UART_RxCpltCallback+0x300>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
							count++;
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <HAL_UART_RxCpltCallback+0x304>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <HAL_UART_RxCpltCallback+0x304>)
 8000af0:	701a      	strb	r2, [r3, #0]
							j=0;
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <HAL_UART_RxCpltCallback+0x2c0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]

							if(count>3)
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <HAL_UART_RxCpltCallback+0x304>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d905      	bls.n	8000b0c <HAL_UART_RxCpltCallback+0x234>
							{
								printf("\r\nlogin attempt excedded!!\r\n");
 8000b00:	4837      	ldr	r0, [pc, #220]	; (8000be0 <HAL_UART_RxCpltCallback+0x308>)
 8000b02:	f003 fd29 	bl	8004558 <puts>
								stage=EXIT;
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_UART_RxCpltCallback+0x2dc>)
 8000b08:	2204      	movs	r2, #4
 8000b0a:	701a      	strb	r2, [r3, #0]
							}
						}
					}
						memset(input,0,sizeof(input));
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4822      	ldr	r0, [pc, #136]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b12:	f003 fcab 	bl	800446c <memset>
						break;
 8000b16:	e0c6      	b.n	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>


				case CONFIG:
					if(strcmp(input,"exit")==0 ||  strcmp(input,"Z")==0 )
 8000b18:	4932      	ldr	r1, [pc, #200]	; (8000be4 <HAL_UART_RxCpltCallback+0x30c>)
 8000b1a:	4820      	ldr	r0, [pc, #128]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b1c:	f7ff fb58 	bl	80001d0 <strcmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <HAL_UART_RxCpltCallback+0x25c>
 8000b26:	4930      	ldr	r1, [pc, #192]	; (8000be8 <HAL_UART_RxCpltCallback+0x310>)
 8000b28:	481c      	ldr	r0, [pc, #112]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b2a:	f7ff fb51 	bl	80001d0 <strcmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x276>
					{
						printf("\r\nsession ended!!\r\n");
 8000b34:	482d      	ldr	r0, [pc, #180]	; (8000bec <HAL_UART_RxCpltCallback+0x314>)
 8000b36:	f003 fd0f 	bl	8004558 <puts>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	481a      	ldr	r0, [pc, #104]	; (8000bac <HAL_UART_RxCpltCallback+0x2d4>)
 8000b42:	f001 fa77 	bl	8002034 <HAL_GPIO_WritePin>
						stage=EXIT;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_UART_RxCpltCallback+0x2dc>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e07d      	b.n	8000c4a <HAL_UART_RxCpltCallback+0x372>
					}
					else
					{

						if(strcmp(input,"turn ON LED")==0)
 8000b4e:	4928      	ldr	r1, [pc, #160]	; (8000bf0 <HAL_UART_RxCpltCallback+0x318>)
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b52:	f7ff fb3d 	bl	80001d0 <strcmp>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <HAL_UART_RxCpltCallback+0x298>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <HAL_UART_RxCpltCallback+0x2d4>)
 8000b64:	f001 fa66 	bl	8002034 <HAL_GPIO_WritePin>
							printf("\r\nLED turned ON...\r\n");
 8000b68:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <HAL_UART_RxCpltCallback+0x31c>)
 8000b6a:	f003 fcf5 	bl	8004558 <puts>
 8000b6e:	e04a      	b.n	8000c06 <HAL_UART_RxCpltCallback+0x32e>
						}

						else if(strcmp(input,"turn OFF LED")==0)
 8000b70:	4921      	ldr	r1, [pc, #132]	; (8000bf8 <HAL_UART_RxCpltCallback+0x320>)
 8000b72:	480a      	ldr	r0, [pc, #40]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b74:	f7ff fb2c 	bl	80001d0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d140      	bne.n	8000c00 <HAL_UART_RxCpltCallback+0x328>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_UART_RxCpltCallback+0x2d4>)
 8000b86:	f001 fa55 	bl	8002034 <HAL_GPIO_WritePin>
							printf("\r\nLED turned OFF...\r\n");
 8000b8a:	481c      	ldr	r0, [pc, #112]	; (8000bfc <HAL_UART_RxCpltCallback+0x324>)
 8000b8c:	f003 fce4 	bl	8004558 <puts>
 8000b90:	e039      	b.n	8000c06 <HAL_UART_RxCpltCallback+0x32e>
 8000b92:	bf00      	nop
 8000b94:	200001f4 	.word	0x200001f4
 8000b98:	200000ae 	.word	0x200000ae
 8000b9c:	20000120 	.word	0x20000120
 8000ba0:	080055a0 	.word	0x080055a0
 8000ba4:	2000023c 	.word	0x2000023c
 8000ba8:	200001f8 	.word	0x200001f8
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	200000af 	.word	0x200000af
 8000bb4:	200000ac 	.word	0x200000ac
 8000bb8:	080055a4 	.word	0x080055a4
 8000bbc:	200001a0 	.word	0x200001a0
 8000bc0:	080055bc 	.word	0x080055bc
 8000bc4:	20000134 	.word	0x20000134
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000010 	.word	0x20000010
 8000bd0:	080055cc 	.word	0x080055cc
 8000bd4:	080055ec 	.word	0x080055ec
 8000bd8:	200000ad 	.word	0x200000ad
 8000bdc:	200000b0 	.word	0x200000b0
 8000be0:	080055f8 	.word	0x080055f8
 8000be4:	08005614 	.word	0x08005614
 8000be8:	0800561c 	.word	0x0800561c
 8000bec:	08005620 	.word	0x08005620
 8000bf0:	08005634 	.word	0x08005634
 8000bf4:	08005640 	.word	0x08005640
 8000bf8:	08005654 	.word	0x08005654
 8000bfc:	08005664 	.word	0x08005664
						}

						else
						{
							printf("\r\ninput is invalid\r\n");
 8000c00:	482b      	ldr	r0, [pc, #172]	; (8000cb0 <HAL_UART_RxCpltCallback+0x3d8>)
 8000c02:	f003 fca9 	bl	8004558 <puts>
						}

						//printf("Config> ");
						memset(input,0,sizeof(input));
 8000c06:	2214      	movs	r2, #20
 8000c08:	2100      	movs	r1, #0
 8000c0a:	482a      	ldr	r0, [pc, #168]	; (8000cb4 <HAL_UART_RxCpltCallback+0x3dc>)
 8000c0c:	f003 fc2e 	bl	800446c <memset>
						sprintf(input,"\r\nConfig> ");
 8000c10:	4929      	ldr	r1, [pc, #164]	; (8000cb8 <HAL_UART_RxCpltCallback+0x3e0>)
 8000c12:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <HAL_UART_RxCpltCallback+0x3dc>)
 8000c14:	f003 fca8 	bl	8004568 <siprintf>
						HAL_UART_Transmit(&huart2, input, sizeof(input), 50);
 8000c18:	2332      	movs	r3, #50	; 0x32
 8000c1a:	2214      	movs	r2, #20
 8000c1c:	4925      	ldr	r1, [pc, #148]	; (8000cb4 <HAL_UART_RxCpltCallback+0x3dc>)
 8000c1e:	4827      	ldr	r0, [pc, #156]	; (8000cbc <HAL_UART_RxCpltCallback+0x3e4>)
 8000c20:	f002 fa4f 	bl	80030c2 <HAL_UART_Transmit>
						memset(input,0,sizeof(input));
 8000c24:	2214      	movs	r2, #20
 8000c26:	2100      	movs	r1, #0
 8000c28:	4822      	ldr	r0, [pc, #136]	; (8000cb4 <HAL_UART_RxCpltCallback+0x3dc>)
 8000c2a:	f003 fc1f 	bl	800446c <memset>
						HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4923      	ldr	r1, [pc, #140]	; (8000cc0 <HAL_UART_RxCpltCallback+0x3e8>)
 8000c32:	4822      	ldr	r0, [pc, #136]	; (8000cbc <HAL_UART_RxCpltCallback+0x3e4>)
 8000c34:	f002 fb79 	bl	800332a <HAL_UART_Receive_DMA>
										recieved=FALSE;
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_UART_RxCpltCallback+0x3ec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
										rx_data=0;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_UART_RxCpltCallback+0x3e8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
										j=0;
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_UART_RxCpltCallback+0x3f0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
					}
					memset(input,0,sizeof(input));
 8000c4a:	2214      	movs	r2, #20
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <HAL_UART_RxCpltCallback+0x3dc>)
 8000c50:	f003 fc0c 	bl	800446c <memset>
					break;
 8000c54:	e027      	b.n	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>

				case EXIT:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5c:	481b      	ldr	r0, [pc, #108]	; (8000ccc <HAL_UART_RxCpltCallback+0x3f4>)
 8000c5e:	f001 f9e9 	bl	8002034 <HAL_GPIO_WritePin>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c66:	4819      	ldr	r0, [pc, #100]	; (8000ccc <HAL_UART_RxCpltCallback+0x3f4>)
 8000c68:	f001 f9fd 	bl	8002066 <HAL_GPIO_TogglePin>

					memset(input,0,sizeof(input));
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_UART_RxCpltCallback+0x3dc>)
 8000c72:	f003 fbfb 	bl	800446c <memset>
					HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	4911      	ldr	r1, [pc, #68]	; (8000cc0 <HAL_UART_RxCpltCallback+0x3e8>)
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <HAL_UART_RxCpltCallback+0x3e4>)
 8000c7c:	f002 fb55 	bl	800332a <HAL_UART_Receive_DMA>
									recieved=FALSE;
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_UART_RxCpltCallback+0x3ec>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
									rx_data=0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_UART_RxCpltCallback+0x3e8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
									j=0;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_UART_RxCpltCallback+0x3f0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]

					break;
 8000c92:	e008      	b.n	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>
			}
	}

	else
	{
		HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <HAL_UART_RxCpltCallback+0x3e8>)
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <HAL_UART_RxCpltCallback+0x3e4>)
 8000c9a:	f002 fb46 	bl	800332a <HAL_UART_Receive_DMA>
		recieved=FALSE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_UART_RxCpltCallback+0x3ec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
	}


#endif

}
 8000ca4:	e7ff      	b.n	8000ca6 <HAL_UART_RxCpltCallback+0x3ce>
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	0800567c 	.word	0x0800567c
 8000cb4:	20000120 	.word	0x20000120
 8000cb8:	080055ec 	.word	0x080055ec
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	200001f4 	.word	0x200001f4
 8000cc4:	200000af 	.word	0x200000af
 8000cc8:	200000ae 	.word	0x200000ae
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	huart->ErrorCode;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <telnet_init>:

#ifdef TELNET
static void telnet_init(void)
  {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	  sprintf(input,"\r\nUsername: ");
 8000cec:	4915      	ldr	r1, [pc, #84]	; (8000d44 <telnet_init+0x5c>)
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <telnet_init+0x60>)
 8000cf0:	f003 fc3a 	bl	8004568 <siprintf>
	  HAL_UART_Transmit(&huart2, input, sizeof(input), 50);
 8000cf4:	2332      	movs	r3, #50	; 0x32
 8000cf6:	2214      	movs	r2, #20
 8000cf8:	4913      	ldr	r1, [pc, #76]	; (8000d48 <telnet_init+0x60>)
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <telnet_init+0x64>)
 8000cfc:	f002 f9e1 	bl	80030c2 <HAL_UART_Transmit>
	  stage=START;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <telnet_init+0x68>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
	  flag=FALSE;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <telnet_init+0x6c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
	  rx_data=0;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <telnet_init+0x70>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
	  recieved=FALSE;
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <telnet_init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]

	  memset(input,0,sizeof(input));
 8000d18:	2214      	movs	r2, #20
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <telnet_init+0x60>)
 8000d1e:	f003 fba5 	bl	800446c <memset>
	  memset(input_user,0,sizeof(input_user));
 8000d22:	220a      	movs	r2, #10
 8000d24:	2100      	movs	r1, #0
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <telnet_init+0x78>)
 8000d28:	f003 fba0 	bl	800446c <memset>
	  memset(input_pass,0,sizeof(input_pass));
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	2100      	movs	r1, #0
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <telnet_init+0x7c>)
 8000d32:	f003 fb9b 	bl	800446c <memset>
	  HAL_UART_Receive_DMA(&huart2,&rx_data, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <telnet_init+0x70>)
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <telnet_init+0x64>)
 8000d3c:	f002 faf5 	bl	800332a <HAL_UART_Receive_DMA>
  }
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	08005690 	.word	0x08005690
 8000d48:	20000120 	.word	0x20000120
 8000d4c:	200001f8 	.word	0x200001f8
 8000d50:	200000ac 	.word	0x200000ac
 8000d54:	200000ad 	.word	0x200000ad
 8000d58:	200001f4 	.word	0x200001f4
 8000d5c:	200000af 	.word	0x200000af
 8000d60:	200001a0 	.word	0x200001a0
 8000d64:	20000134 	.word	0x20000134

08000d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7a:	f000 fabb 	bl	80012f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010000 	.word	0x40010000

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f000 fb59 	bl	800148e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10d      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_TIM_Base_MspInit+0x40>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_TIM_Base_MspInit+0x40>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_TIM_Base_MspInit+0x40>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40001000 	.word	0x40001000
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a4b      	ldr	r2, [pc, #300]	; (8000f78 <HAL_UART_MspInit+0x14c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f040 8090 	bne.w	8000f70 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_UART_MspInit+0x150>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_UART_MspInit+0x150>)
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_UART_MspInit+0x150>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <HAL_UART_MspInit+0x150>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a41      	ldr	r2, [pc, #260]	; (8000f7c <HAL_UART_MspInit+0x150>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <HAL_UART_MspInit+0x150>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4837      	ldr	r0, [pc, #220]	; (8000f80 <HAL_UART_MspInit+0x154>)
 8000ea4:	f000 ff2a 	bl	8001cfc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000eaa:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <HAL_UART_MspInit+0x15c>)
 8000eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000eae:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ee8:	4826      	ldr	r0, [pc, #152]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000eea:	f000 fb05 	bl	80014f8 <HAL_DMA_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ef4:	f7ff ff4a 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38
 8000efe:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <HAL_UART_MspInit+0x158>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f14:	2240      	movs	r2, #64	; 0x40
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f46:	f000 fad7 	bl	80014f8 <HAL_DMA_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000f50:	f7ff ff1c 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2026      	movs	r0, #38	; 0x26
 8000f66:	f000 fa9d 	bl	80014a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f6a:	2026      	movs	r0, #38	; 0x26
 8000f6c:	f000 fab6 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	200000c0 	.word	0x200000c0
 8000f88:	40026088 	.word	0x40026088
 8000f8c:	20000140 	.word	0x20000140
 8000f90:	400260a0 	.word	0x400260a0

08000f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f000 fa7b 	bl	80014a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fae:	2019      	movs	r0, #25
 8000fb0:	f000 fa94 	bl	80014dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_InitTick+0xa4>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_InitTick+0xa4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_InitTick+0xa4>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd0:	f107 0210 	add.w	r2, r7, #16
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fcd2 	bl	8002984 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fe0:	f001 fcbc 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_InitTick+0xa8>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9b      	lsrs	r3, r3, #18
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_InitTick+0xac>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_InitTick+0xb0>)
 8000ffc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_InitTick+0xac>)
 8001000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001004:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_InitTick+0xac>)
 8001008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_InitTick+0xac>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_InitTick+0xac>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_InitTick+0xac>)
 800101a:	f001 fce5 	bl	80029e8 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d104      	bne.n	800102e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_InitTick+0xac>)
 8001026:	f001 fd2f 	bl	8002a88 <HAL_TIM_Base_Start_IT>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	431bde83 	.word	0x431bde83
 8001040:	20000240 	.word	0x20000240
 8001044:	40010000 	.word	0x40010000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DMA1_Stream5_IRQHandler+0x10>)
 80010a6:	f000 fbbf 	bl	8001828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000c0 	.word	0x200000c0

080010b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Stream6_IRQHandler+0x10>)
 80010ba:	f000 fbb5 	bl	8001828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000140 	.word	0x20000140

080010c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010ce:	f001 fd4b 	bl	8002b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000240 	.word	0x20000240

080010dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <USART2_IRQHandler+0x10>)
 80010e2:	f002 f953 	bl	800338c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001f8 	.word	0x200001f8

080010f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00a      	b.n	8001118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001102:	f7ff fbcb 	bl	800089c <__io_getchar>
 8001106:	4601      	mov	r1, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf0      	blt.n	8001102 <_read+0x12>
	}

return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fb97 	bl	8000878 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf1      	blt.n	800113c <_write+0x12>
	}
	return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_close>:

int _close(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	605a      	str	r2, [r3, #4]
	return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_isatty>:

int _isatty(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f003 f8fe 	bl	80043fc <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20020000 	.word	0x20020000
 800122c:	00000400 	.word	0x00000400
 8001230:	200000b4 	.word	0x200000b4
 8001234:	200002a0 	.word	0x200002a0

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f003 f8bd 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff f983 	bl	8000598 <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012a0:	08005768 	.word	0x08005768
  ldr r2, =_sbss
 80012a4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012a8:	2000029c 	.word	0x2000029c

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_Init+0x40>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x40>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x40>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f8d8 	bl	800148e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fe58 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fd58 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000028 	.word	0x20000028
 8001318:	20000288 	.word	0x20000288

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000288 	.word	0x20000288

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <__NVIC_EnableIRQ+0x38>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff4c 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b6:	f7ff ff61 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff ffb1 	bl	8001428 <NVIC_EncodePriority>
 80014c6:	4602      	mov	r2, r0
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff80 	bl	80013d4 <__NVIC_SetPriority>
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff54 	bl	8001398 <__NVIC_EnableIRQ>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ff0a 	bl	800131c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e099      	b.n	8001648 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	e00f      	b.n	8001556 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001536:	f7ff fef1 	bl	800131c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b05      	cmp	r3, #5
 8001542:	d908      	bls.n	8001556 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e078      	b.n	8001648 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e8      	bne.n	8001536 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_DMA_Init+0x158>)
 8001570:	4013      	ands	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4313      	orrs	r3, r2
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4313      	orrs	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f023 0307 	bic.w	r3, r3, #7
 80015d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4313      	orrs	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d117      	bne.n	800161a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00e      	beq.n	800161a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb01 	bl	8001c04 <DMA_CheckFifoParam>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001616:	2301      	movs	r3, #1
 8001618:	e016      	b.n	8001648 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fab8 	bl	8001b98 <DMA_CalcBaseAndBitshift>
 8001628:	4603      	mov	r3, r0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	223f      	movs	r2, #63	; 0x3f
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	f010803f 	.word	0xf010803f

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_DMA_Start_IT+0x26>
 8001676:	2302      	movs	r3, #2
 8001678:	e040      	b.n	80016fc <HAL_DMA_Start_IT+0xa8>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d12f      	bne.n	80016ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fa4a 	bl	8001b3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	223f      	movs	r2, #63	; 0x3f
 80016ae:	409a      	lsls	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0216 	orr.w	r2, r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0208 	orr.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e005      	b.n	80016fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001712:	f7ff fe03 	bl	800131c <HAL_GetTick>
 8001716:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d008      	beq.n	8001736 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e052      	b.n	80017dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0216 	bic.w	r2, r2, #22
 8001744:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001754:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d103      	bne.n	8001766 <HAL_DMA_Abort+0x62>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0208 	bic.w	r2, r2, #8
 8001774:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001786:	e013      	b.n	80017b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001788:	f7ff fdc8 	bl	800131c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b05      	cmp	r3, #5
 8001794:	d90c      	bls.n	80017b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e015      	b.n	80017dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1e4      	bne.n	8001788 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	223f      	movs	r2, #63	; 0x3f
 80017c4:	409a      	lsls	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d004      	beq.n	8001802 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00c      	b.n	800181c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2205      	movs	r2, #5
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001834:	4b92      	ldr	r3, [pc, #584]	; (8001a80 <HAL_DMA_IRQHandler+0x258>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a92      	ldr	r2, [pc, #584]	; (8001a84 <HAL_DMA_IRQHandler+0x25c>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0a9b      	lsrs	r3, r3, #10
 8001840:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001852:	2208      	movs	r2, #8
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01a      	beq.n	8001894 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	2208      	movs	r2, #8
 8001882:	409a      	lsls	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	2201      	movs	r2, #1
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2201      	movs	r2, #1
 80018b8:	409a      	lsls	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	f043 0202 	orr.w	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ce:	2204      	movs	r2, #4
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d012      	beq.n	8001900 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2204      	movs	r2, #4
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f043 0204 	orr.w	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	2210      	movs	r2, #16
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d043      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d03c      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2210      	movs	r2, #16
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d018      	beq.n	800196a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d024      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
 8001956:	e01f      	b.n	8001998 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
 8001968:	e016      	b.n	8001998 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0208 	bic.w	r2, r2, #8
 8001986:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	2220      	movs	r2, #32
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 808e 	beq.w	8001ac6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8086 	beq.w	8001ac6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	2220      	movs	r2, #32
 80019c0:	409a      	lsls	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d136      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0216 	bic.w	r2, r2, #22
 80019e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_DMA_IRQHandler+0x1da>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0208 	bic.w	r2, r2, #8
 8001a10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	223f      	movs	r2, #63	; 0x3f
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d07d      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
        }
        return;
 8001a3e:	e078      	b.n	8001b32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01c      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d108      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d030      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e02b      	b.n	8001ac6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d027      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
 8001a7e:	e022      	b.n	8001ac6 <HAL_DMA_IRQHandler+0x29e>
 8001a80:	20000020 	.word	0x20000020
 8001a84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0210 	bic.w	r2, r2, #16
 8001aa4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d032      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2205      	movs	r2, #5
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3301      	adds	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d307      	bcc.n	8001b0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f2      	bne.n	8001af2 <HAL_DMA_IRQHandler+0x2ca>
 8001b0c:	e000      	b.n	8001b10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
 8001b30:	e000      	b.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b32:	bf00      	nop
    }
  }
}
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop

08001b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b40      	cmp	r3, #64	; 0x40
 8001b68:	d108      	bne.n	8001b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b7a:	e007      	b.n	8001b8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b10      	subs	r3, #16
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <DMA_CalcBaseAndBitshift+0x64>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <DMA_CalcBaseAndBitshift+0x68>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d909      	bls.n	8001bda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	1d1a      	adds	r2, r3, #4
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bd8:	e007      	b.n	8001bea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	aaaaaaab 	.word	0xaaaaaaab
 8001c00:	080056b8 	.word	0x080056b8

08001c04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11f      	bne.n	8001c5e <DMA_CheckFifoParam+0x5a>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d856      	bhi.n	8001cd2 <DMA_CheckFifoParam+0xce>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <DMA_CheckFifoParam+0x28>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c4f 	.word	0x08001c4f
 8001c34:	08001c3d 	.word	0x08001c3d
 8001c38:	08001cd3 	.word	0x08001cd3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d046      	beq.n	8001cd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e043      	b.n	8001cd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c56:	d140      	bne.n	8001cda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c5c:	e03d      	b.n	8001cda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c66:	d121      	bne.n	8001cac <DMA_CheckFifoParam+0xa8>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d837      	bhi.n	8001cde <DMA_CheckFifoParam+0xda>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <DMA_CheckFifoParam+0x70>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c8b 	.word	0x08001c8b
 8001c7c:	08001c85 	.word	0x08001c85
 8001c80:	08001c9d 	.word	0x08001c9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      break;
 8001c88:	e030      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d025      	beq.n	8001ce2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9a:	e022      	b.n	8001ce2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca4:	d11f      	bne.n	8001ce6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001caa:	e01c      	b.n	8001ce6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d903      	bls.n	8001cba <DMA_CheckFifoParam+0xb6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d003      	beq.n	8001cc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cb8:	e018      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbe:	e015      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd0:	e00b      	b.n	8001cea <DMA_CheckFifoParam+0xe6>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e00a      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
 8001cd8:	e008      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
 8001cdc:	e006      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e004      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e002      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ce6:	bf00      	nop
 8001ce8:	e000      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
    }
  } 
  
  return status; 
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e16b      	b.n	8001ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 815a 	bne.w	8001fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80b4 	beq.w	8001fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b60      	ldr	r3, [pc, #384]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_GPIO_Init+0x310>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x216>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x32c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x20e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_GPIO_Init+0x330>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x20a>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00e      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x310>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae90 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	041a      	lsls	r2, r3, #16
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43d9      	mvns	r1, r3
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	400b      	ands	r3, r1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	619a      	str	r2, [r3, #24]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e264      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d075      	beq.n	80021a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ba:	4ba3      	ldr	r3, [pc, #652]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d00c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c6:	4ba0      	ldr	r3, [pc, #640]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d112      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d2:	4b9d      	ldr	r3, [pc, #628]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020de:	d10b      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	4b99      	ldr	r3, [pc, #612]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d05b      	beq.n	80021a4 <HAL_RCC_OscConfig+0x108>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d157      	bne.n	80021a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e23f      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d106      	bne.n	8002110 <HAL_RCC_OscConfig+0x74>
 8002102:	4b91      	ldr	r3, [pc, #580]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x98>
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8a      	ldr	r2, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a87      	ldr	r2, [pc, #540]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xb0>
 8002134:	4b84      	ldr	r3, [pc, #528]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a83      	ldr	r2, [pc, #524]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a80      	ldr	r2, [pc, #512]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff f8e2 	bl	800131c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff f8de 	bl	800131c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e204      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xc0>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff f8ce 	bl	800131c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff f8ca 	bl	800131c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1f0      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0xe8>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b2:	4b65      	ldr	r3, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x152>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1c4      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b56      	ldr	r3, [pc, #344]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4952      	ldr	r1, [pc, #328]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e03a      	b.n	800227a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCC_OscConfig+0x2b0>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f883 	bl	800131c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff f87f 	bl	800131c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1a5      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4940      	ldr	r1, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_OscConfig+0x2b0>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7ff f862 	bl	800131c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225c:	f7ff f85e 	bl	800131c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e184      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d030      	beq.n	80022e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_OscConfig+0x2b4>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff f842 	bl	800131c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229c:	f7ff f83e 	bl	800131c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e164      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x200>
 80022ba:	e015      	b.n	80022e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_OscConfig+0x2b4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff f82b 	bl	800131c <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ca:	f7ff f827 	bl	800131c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e14d      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a0 	beq.w	8002436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_OscConfig+0x2b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d121      	bne.n	8002376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_RCC_OscConfig+0x2b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HAL_RCC_OscConfig+0x2b8>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7fe ffed 	bl	800131c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e011      	b.n	800236a <HAL_RCC_OscConfig+0x2ce>
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	42470000 	.word	0x42470000
 8002350:	42470e80 	.word	0x42470e80
 8002354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002358:	f7fe ffe0 	bl	800131c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e106      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b85      	ldr	r3, [pc, #532]	; (8002580 <HAL_RCC_OscConfig+0x4e4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x2f0>
 800237e:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	e01c      	b.n	80023c6 <HAL_RCC_OscConfig+0x32a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x312>
 8002394:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a7a      	ldr	r2, [pc, #488]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	4b78      	ldr	r3, [pc, #480]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a77      	ldr	r2, [pc, #476]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x32a>
 80023ae:	4b75      	ldr	r3, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ba:	4b72      	ldr	r3, [pc, #456]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	4a71      	ldr	r2, [pc, #452]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7fe ffa5 	bl	800131c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe ffa1 	bl	800131c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0c5      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ee      	beq.n	80023d6 <HAL_RCC_OscConfig+0x33a>
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7fe ff8f 	bl	800131c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe ff8b 	bl	800131c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0af      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ee      	bne.n	8002402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a55      	ldr	r2, [pc, #340]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 809b 	beq.w	8002576 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d05c      	beq.n	8002506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d141      	bne.n	80024d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x4ec>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe ff5f 	bl	800131c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe ff5b 	bl	800131c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e081      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	019b      	lsls	r3, r3, #6
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <HAL_RCC_OscConfig+0x4ec>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe ff34 	bl	800131c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe ff30 	bl	800131c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e056      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x41c>
 80024d6:	e04e      	b.n	8002576 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x4ec>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe ff1d 	bl	800131c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe ff19 	bl	800131c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e03f      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x44a>
 8002504:	e037      	b.n	8002576 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e032      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_RCC_OscConfig+0x4e8>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d028      	beq.n	8002572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d121      	bne.n	8002572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d11a      	bne.n	8002572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002548:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254a:	4293      	cmp	r3, r2
 800254c:	d111      	bne.n	8002572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40007000 	.word	0x40007000
 8002584:	40023800 	.word	0x40023800
 8002588:	42470060 	.word	0x42470060

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fe fe4e 	bl	800131c <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fe4a 	bl	800131c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fc2e 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	080056a0 	.word	0x080056a0
 8002750:	20000020 	.word	0x20000020
 8002754:	20000024 	.word	0x20000024

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	2300      	movs	r3, #0
 800276a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002770:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d00d      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x40>
 800277c:	2b08      	cmp	r3, #8
 800277e:	f200 80bd 	bhi.w	80028fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x34>
 8002786:	2b04      	cmp	r3, #4
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x3a>
 800278a:	e0b7      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800278e:	60bb      	str	r3, [r7, #8]
       break;
 8002790:	e0b7      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002792:	4b61      	ldr	r3, [pc, #388]	; (8002918 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002794:	60bb      	str	r3, [r7, #8]
      break;
 8002796:	e0b4      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a2:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04d      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	461a      	mov	r2, r3
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	ea02 0800 	and.w	r8, r2, r0
 80027c6:	ea03 0901 	and.w	r9, r3, r1
 80027ca:	4640      	mov	r0, r8
 80027cc:	4649      	mov	r1, r9
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	014b      	lsls	r3, r1, #5
 80027d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027dc:	0142      	lsls	r2, r0, #5
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	ebb0 0008 	subs.w	r0, r0, r8
 80027e6:	eb61 0109 	sbc.w	r1, r1, r9
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	018b      	lsls	r3, r1, #6
 80027f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027f8:	0182      	lsls	r2, r0, #6
 80027fa:	1a12      	subs	r2, r2, r0
 80027fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002800:	f04f 0000 	mov.w	r0, #0
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	00d9      	lsls	r1, r3, #3
 800280a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800280e:	00d0      	lsls	r0, r2, #3
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	eb12 0208 	adds.w	r2, r2, r8
 8002818:	eb43 0309 	adc.w	r3, r3, r9
 800281c:	f04f 0000 	mov.w	r0, #0
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	0259      	lsls	r1, r3, #9
 8002826:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800282a:	0250      	lsls	r0, r2, #9
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	461a      	mov	r2, r3
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	f7fd fd30 	bl	80002a0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e04a      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b31      	ldr	r3, [pc, #196]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	461a      	mov	r2, r3
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	ea02 0400 	and.w	r4, r2, r0
 8002862:	ea03 0501 	and.w	r5, r3, r1
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	014b      	lsls	r3, r1, #5
 8002874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002878:	0142      	lsls	r2, r0, #5
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	1b00      	subs	r0, r0, r4
 8002880:	eb61 0105 	sbc.w	r1, r1, r5
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	018b      	lsls	r3, r1, #6
 800288e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002892:	0182      	lsls	r2, r0, #6
 8002894:	1a12      	subs	r2, r2, r0
 8002896:	eb63 0301 	sbc.w	r3, r3, r1
 800289a:	f04f 0000 	mov.w	r0, #0
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	00d9      	lsls	r1, r3, #3
 80028a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028a8:	00d0      	lsls	r0, r2, #3
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	1912      	adds	r2, r2, r4
 80028b0:	eb45 0303 	adc.w	r3, r5, r3
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	0299      	lsls	r1, r3, #10
 80028be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028c2:	0290      	lsls	r0, r2, #10
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f7fd fce4 	bl	80002a0 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	60bb      	str	r3, [r7, #8]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028fe:	60bb      	str	r3, [r7, #8]
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	68bb      	ldr	r3, [r7, #8]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000020 	.word	0x20000020

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff0 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	080056b0 	.word	0x080056b0

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffdc 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	080056b0 	.word	0x080056b0

08002984 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	220f      	movs	r2, #15
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_RCC_GetClockConfig+0x60>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40023c00 	.word	0x40023c00

080029e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e041      	b.n	8002a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe f9ea 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 f9ce 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04e      	b.n	8002b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d022      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aca:	d01d      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d018      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d010      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	e007      	b.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800
 8002b58:	40000c00 	.word	0x40000c00
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	40014000 	.word	0x40014000
 8002b64:	40001800 	.word	0x40001800

08002b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d122      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0202 	mvn.w	r2, #2
 8002b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8ee 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8e0 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f8f1 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d122      	bne.n	8002c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11b      	bne.n	8002c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0204 	mvn.w	r2, #4
 8002be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8c4 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8b6 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f8c7 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0208 	mvn.w	r2, #8
 8002c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2204      	movs	r2, #4
 8002c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f89a 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f88c 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f89d 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0210 	mvn.w	r2, #16
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2208      	movs	r2, #8
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f870 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f862 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f873 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0201 	mvn.w	r2, #1
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe f83e 	bl	8000d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f97e 	bl	8003014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f838 	bl	8002db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0220 	mvn.w	r2, #32
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f948 	bl	8003000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a40      	ldr	r2, [pc, #256]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d00f      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	; (8002ee0 <TIM_Base_SetConfig+0x118>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <TIM_Base_SetConfig+0x11c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3a      	ldr	r2, [pc, #232]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d027      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <TIM_Base_SetConfig+0x118>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d023      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <TIM_Base_SetConfig+0x11c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d017      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <TIM_Base_SetConfig+0x128>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <TIM_Base_SetConfig+0x12c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <TIM_Base_SetConfig+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a25      	ldr	r2, [pc, #148]	; (8002efc <TIM_Base_SetConfig+0x134>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <TIM_Base_SetConfig+0x138>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <TIM_Base_SetConfig+0x13c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0xf8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800
 8002efc:	40001800 	.word	0x40001800
 8002f00:	40001c00 	.word	0x40001c00
 8002f04:	40002000 	.word	0x40002000

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e05a      	b.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d01d      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d018      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40010400 	.word	0x40010400
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40001800 	.word	0x40001800

08003000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e03f      	b.n	80030ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd feec 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800306a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fffd 	bl	800406c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08a      	sub	sp, #40	; 0x28
 80030c6:	af02      	add	r7, sp, #8
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d17c      	bne.n	80031dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_UART_Transmit+0x2c>
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e075      	b.n	80031de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_UART_Transmit+0x3e>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e06e      	b.n	80031de <HAL_UART_Transmit+0x11c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2221      	movs	r2, #33	; 0x21
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003116:	f7fe f901 	bl	800131c <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d108      	bne.n	8003144 <HAL_UART_Transmit+0x82>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e003      	b.n	800314c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003154:	e02a      	b.n	80031ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fcb9 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e036      	b.n	80031de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3302      	adds	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e007      	b.n	800319e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1cf      	bne.n	8003156 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2140      	movs	r1, #64	; 0x40
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fc89 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e006      	b.n	80031de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08a      	sub	sp, #40	; 0x28
 80031ea:	af02      	add	r7, sp, #8
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 808c 	bne.w	8003320 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Receive+0x2e>
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e084      	b.n	8003322 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_UART_Receive+0x40>
 8003222:	2302      	movs	r3, #2
 8003224:	e07d      	b.n	8003322 <HAL_UART_Receive+0x13c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	; 0x22
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003242:	f7fe f86b 	bl	800131c <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d108      	bne.n	8003270 <HAL_UART_Receive+0x8a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e003      	b.n	8003278 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003280:	e043      	b.n	800330a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2120      	movs	r1, #32
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc23 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e042      	b.n	8003322 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	3302      	adds	r3, #2
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e01f      	b.n	80032fc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	d007      	beq.n	80032d6 <HAL_UART_Receive+0xf0>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_UART_Receive+0xfe>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e008      	b.n	80032f6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1b6      	bne.n	8003282 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	4613      	mov	r3, r2
 8003336:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b20      	cmp	r3, #32
 8003342:	d11d      	bne.n	8003380 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_Receive_DMA+0x26>
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e016      	b.n	8003382 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_UART_Receive_DMA+0x38>
 800335e:	2302      	movs	r3, #2
 8003360:	e00f      	b.n	8003382 <HAL_UART_Receive_DMA+0x58>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	461a      	mov	r2, r3
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fc1c 	bl	8003bb4 <UART_Start_Receive_DMA>
 800337c:	4603      	mov	r3, r0
 800337e:	e000      	b.n	8003382 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0ba      	sub	sp, #232	; 0xe8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_UART_IRQHandler+0x66>
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fd83 	bl	8003ef6 <UART_Receive_IT>
      return;
 80033f0:	e256      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80de 	beq.w	80035b8 <HAL_UART_IRQHandler+0x22c>
 80033fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80d1 	beq.w	80035b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xae>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0xd2>
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_UART_IRQHandler+0xf6>
 800346a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_UART_IRQHandler+0x126>
 800348e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 81ed 	beq.w	8003896 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_UART_IRQHandler+0x14e>
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fd0e 	bl	8003ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_UART_IRQHandler+0x17a>
 80034fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04f      	beq.n	80035a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fc16 	bl	8003d38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d141      	bne.n	800359e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3314      	adds	r3, #20
 8003542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800354a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800355e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1d9      	bne.n	800351a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4a7d      	ldr	r2, [pc, #500]	; (8003768 <HAL_UART_IRQHandler+0x3dc>)
 8003574:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe f932 	bl	80017e4 <HAL_DMA_Abort_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003590:	4610      	mov	r0, r2
 8003592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	e00e      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb9a 	bl	8000cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	e00a      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fb96 	bl	8000cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	e006      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fb92 	bl	8000cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035b2:	e170      	b.n	8003896 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	bf00      	nop
    return;
 80035b6:	e16e      	b.n	8003896 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f040 814a 	bne.w	8003856 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8143 	beq.w	8003856 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 813c 	beq.w	8003856 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	f040 80b4 	bne.w	800376c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8140 	beq.w	800389a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800361e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003622:	429a      	cmp	r2, r3
 8003624:	f080 8139 	bcs.w	800389a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363a:	f000 8088 	beq.w	800374e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800365c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800366a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800366e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003676:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1d9      	bne.n	800363e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800369a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e1      	bne.n	800368a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e3      	bne.n	80036c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800371c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003730:	65ba      	str	r2, [r7, #88]	; 0x58
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800373e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e3      	bne.n	800370c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd ffdb 	bl	8001704 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003756:	b29b      	uxth	r3, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	b29b      	uxth	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8b6 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003764:	e099      	b.n	800389a <HAL_UART_IRQHandler+0x50e>
 8003766:	bf00      	nop
 8003768:	08003dff 	.word	0x08003dff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003774:	b29b      	uxth	r3, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 808b 	beq.w	800389e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8086 	beq.w	800389e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037b6:	647a      	str	r2, [r7, #68]	; 0x44
 80037b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e3      	bne.n	8003792 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	623b      	str	r3, [r7, #32]
   return(result);
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037ee:	633a      	str	r2, [r7, #48]	; 0x30
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003834:	61fa      	str	r2, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	617b      	str	r3, [r7, #20]
   return(result);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f83e 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003854:	e023      	b.n	800389e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_UART_IRQHandler+0x4ea>
 8003862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fad9 	bl	8003e26 <UART_Transmit_IT>
    return;
 8003874:	e014      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <HAL_UART_IRQHandler+0x514>
 8003882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fb19 	bl	8003ec6 <UART_EndTransmit_IT>
    return;
 8003894:	e004      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
    return;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
      return;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
      return;
 800389e:	bf00      	nop
  }
}
 80038a0:	37e8      	adds	r7, #232	; 0xe8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop

080038a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b09c      	sub	sp, #112	; 0x70
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d172      	bne.n	80039ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	2200      	movs	r2, #0
 8003908:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800390a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003920:	66bb      	str	r3, [r7, #104]	; 0x68
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800392a:	65ba      	str	r2, [r7, #88]	; 0x58
 800392c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	667b      	str	r3, [r7, #100]	; 0x64
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800395e:	647a      	str	r2, [r7, #68]	; 0x44
 8003960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	623b      	str	r3, [r7, #32]
   return(result);
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	663b      	str	r3, [r7, #96]	; 0x60
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003992:	633a      	str	r2, [r7, #48]	; 0x30
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e5      	bne.n	8003972 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d119      	bne.n	80039ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 0310 	bic.w	r3, r3, #16
 80039cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039d6:	61fa      	str	r2, [r7, #28]
 80039d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	69b9      	ldr	r1, [r7, #24]
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	617b      	str	r3, [r7, #20]
   return(result);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d106      	bne.n	8003a00 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039f6:	4619      	mov	r1, r3
 80039f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039fa:	f7ff ff69 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039fe:	e002      	b.n	8003a06 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a02:	f7fc ff69 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8003a06:	bf00      	nop
 8003a08:	3770      	adds	r7, #112	; 0x70
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff ff4e 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a34:	e002      	b.n	8003a3c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ff40 	bl	80038bc <HAL_UART_RxHalfCpltCallback>
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b21      	cmp	r3, #33	; 0x21
 8003a76:	d108      	bne.n	8003a8a <UART_DMAError+0x46>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003a84:	68b8      	ldr	r0, [r7, #8]
 8003a86:	f000 f92f 	bl	8003ce8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b22      	cmp	r3, #34	; 0x22
 8003aaa:	d108      	bne.n	8003abe <UART_DMAError+0x7a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f000 f93d 	bl	8003d38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	f7fd f900 	bl	8000cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b090      	sub	sp, #64	; 0x40
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	e050      	b.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d04c      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af8:	f7fd fc10 	bl	800131c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d241      	bcs.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b28:	637a      	str	r2, [r7, #52]	; 0x34
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5c:	623a      	str	r2, [r7, #32]
 8003b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e5      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e00f      	b.n	8003bac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d09f      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3740      	adds	r7, #64	; 0x40
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b098      	sub	sp, #96	; 0x60
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2222      	movs	r2, #34	; 0x22
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <UART_Start_Receive_DMA+0x128>)
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	4a3d      	ldr	r2, [pc, #244]	; (8003ce0 <UART_Start_Receive_DMA+0x12c>)
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <UART_Start_Receive_DMA+0x130>)
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	f7fd fd1e 	bl	8001654 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	657b      	str	r3, [r7, #84]	; 0x54
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	617b      	str	r3, [r7, #20]
   return(result);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3314      	adds	r3, #20
 8003cbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cbe:	627a      	str	r2, [r7, #36]	; 0x24
 8003cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6a39      	ldr	r1, [r7, #32]
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3760      	adds	r7, #96	; 0x60
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	080038e9 	.word	0x080038e9
 8003ce0:	08003a0f 	.word	0x08003a0f
 8003ce4:	08003a45 	.word	0x08003a45

08003ce8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	61ba      	str	r2, [r7, #24]
 8003d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6979      	ldr	r1, [r7, #20]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d2c:	bf00      	nop
 8003d2e:	3724      	adds	r7, #36	; 0x24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b095      	sub	sp, #84	; 0x54
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d60:	643a      	str	r2, [r7, #64]	; 0x40
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e5      	bne.n	8003d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3314      	adds	r3, #20
 8003d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d119      	bne.n	8003de4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f023 0310 	bic.w	r3, r3, #16
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd0:	61ba      	str	r2, [r7, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6979      	ldr	r1, [r7, #20]
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003df2:	bf00      	nop
 8003df4:	3754      	adds	r7, #84	; 0x54
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7fc ff59 	bl	8000cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b21      	cmp	r3, #33	; 0x21
 8003e38:	d13e      	bne.n	8003eb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	d114      	bne.n	8003e6e <UART_Transmit_IT+0x48>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d110      	bne.n	8003e6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	621a      	str	r2, [r3, #32]
 8003e6c:	e008      	b.n	8003e80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	1c59      	adds	r1, r3, #1
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6211      	str	r1, [r2, #32]
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fcde 	bl	80038a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b08c      	sub	sp, #48	; 0x30
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b22      	cmp	r3, #34	; 0x22
 8003f08:	f040 80ab 	bne.w	8004062 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d117      	bne.n	8003f46 <UART_Receive_IT+0x50>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d113      	bne.n	8003f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
 8003f44:	e026      	b.n	8003f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	d007      	beq.n	8003f6a <UART_Receive_IT+0x74>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <UART_Receive_IT+0x82>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e008      	b.n	8003f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d15a      	bne.n	800405e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0220 	bic.w	r2, r2, #32
 8003fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d135      	bne.n	8004054 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f023 0310 	bic.w	r3, r3, #16
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	623a      	str	r2, [r7, #32]
 8004010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	69f9      	ldr	r1, [r7, #28]
 8004014:	6a3a      	ldr	r2, [r7, #32]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	61bb      	str	r3, [r7, #24]
   return(result);
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b10      	cmp	r3, #16
 800402e:	d10a      	bne.n	8004046 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fc3f 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
 8004052:	e002      	b.n	800405a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fc fc3f 	bl	80008d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e002      	b.n	8004064 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
  }
}
 8004064:	4618      	mov	r0, r3
 8004066:	3730      	adds	r7, #48	; 0x30
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	b09f      	sub	sp, #124	; 0x7c
 8004072:	af00      	add	r7, sp, #0
 8004074:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	68d9      	ldr	r1, [r3, #12]
 8004084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	ea40 0301 	orr.w	r3, r0, r1
 800408c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	431a      	orrs	r2, r3
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	431a      	orrs	r2, r3
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040b0:	f021 010c 	bic.w	r1, r1, #12
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ba:	430b      	orrs	r3, r1
 80040bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	6999      	ldr	r1, [r3, #24]
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	ea40 0301 	orr.w	r3, r0, r1
 80040d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4bc5      	ldr	r3, [pc, #788]	; (80043f0 <UART_SetConfig+0x384>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	d004      	beq.n	80040ea <UART_SetConfig+0x7e>
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4bc3      	ldr	r3, [pc, #780]	; (80043f4 <UART_SetConfig+0x388>)
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d103      	bne.n	80040f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ea:	f7fe fc37 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 80040ee:	6778      	str	r0, [r7, #116]	; 0x74
 80040f0:	e002      	b.n	80040f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f2:	f7fe fc1f 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80040f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	f040 80b6 	bne.w	8004270 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004106:	461c      	mov	r4, r3
 8004108:	f04f 0500 	mov.w	r5, #0
 800410c:	4622      	mov	r2, r4
 800410e:	462b      	mov	r3, r5
 8004110:	1891      	adds	r1, r2, r2
 8004112:	6439      	str	r1, [r7, #64]	; 0x40
 8004114:	415b      	adcs	r3, r3
 8004116:	647b      	str	r3, [r7, #68]	; 0x44
 8004118:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800411c:	1912      	adds	r2, r2, r4
 800411e:	eb45 0303 	adc.w	r3, r5, r3
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	00d9      	lsls	r1, r3, #3
 800412c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004130:	00d0      	lsls	r0, r2, #3
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	1911      	adds	r1, r2, r4
 8004138:	6639      	str	r1, [r7, #96]	; 0x60
 800413a:	416b      	adcs	r3, r5
 800413c:	667b      	str	r3, [r7, #100]	; 0x64
 800413e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	461a      	mov	r2, r3
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	1891      	adds	r1, r2, r2
 800414a:	63b9      	str	r1, [r7, #56]	; 0x38
 800414c:	415b      	adcs	r3, r3
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004154:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004158:	f7fc f8a2 	bl	80002a0 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4ba5      	ldr	r3, [pc, #660]	; (80043f8 <UART_SetConfig+0x38c>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011e      	lsls	r6, r3, #4
 800416a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416c:	461c      	mov	r4, r3
 800416e:	f04f 0500 	mov.w	r5, #0
 8004172:	4622      	mov	r2, r4
 8004174:	462b      	mov	r3, r5
 8004176:	1891      	adds	r1, r2, r2
 8004178:	6339      	str	r1, [r7, #48]	; 0x30
 800417a:	415b      	adcs	r3, r3
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
 800417e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004182:	1912      	adds	r2, r2, r4
 8004184:	eb45 0303 	adc.w	r3, r5, r3
 8004188:	f04f 0000 	mov.w	r0, #0
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	00d9      	lsls	r1, r3, #3
 8004192:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004196:	00d0      	lsls	r0, r2, #3
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	1911      	adds	r1, r2, r4
 800419e:	65b9      	str	r1, [r7, #88]	; 0x58
 80041a0:	416b      	adcs	r3, r5
 80041a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80041b2:	415b      	adcs	r3, r3
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041be:	f7fc f86f 	bl	80002a0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4b8c      	ldr	r3, [pc, #560]	; (80043f8 <UART_SetConfig+0x38c>)
 80041c8:	fba3 1302 	umull	r1, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	2164      	movs	r1, #100	; 0x64
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	3332      	adds	r3, #50	; 0x32
 80041da:	4a87      	ldr	r2, [pc, #540]	; (80043f8 <UART_SetConfig+0x38c>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e8:	441e      	add	r6, r3
 80041ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ec:	4618      	mov	r0, r3
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	1894      	adds	r4, r2, r2
 80041f8:	623c      	str	r4, [r7, #32]
 80041fa:	415b      	adcs	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004202:	1812      	adds	r2, r2, r0
 8004204:	eb41 0303 	adc.w	r3, r1, r3
 8004208:	f04f 0400 	mov.w	r4, #0
 800420c:	f04f 0500 	mov.w	r5, #0
 8004210:	00dd      	lsls	r5, r3, #3
 8004212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004216:	00d4      	lsls	r4, r2, #3
 8004218:	4622      	mov	r2, r4
 800421a:	462b      	mov	r3, r5
 800421c:	1814      	adds	r4, r2, r0
 800421e:	653c      	str	r4, [r7, #80]	; 0x50
 8004220:	414b      	adcs	r3, r1
 8004222:	657b      	str	r3, [r7, #84]	; 0x54
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	1891      	adds	r1, r2, r2
 8004230:	61b9      	str	r1, [r7, #24]
 8004232:	415b      	adcs	r3, r3
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800423e:	f7fc f82f 	bl	80002a0 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4b6c      	ldr	r3, [pc, #432]	; (80043f8 <UART_SetConfig+0x38c>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	; 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <UART_SetConfig+0x38c>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 0207 	and.w	r2, r3, #7
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4432      	add	r2, r6
 800426c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800426e:	e0b9      	b.n	80043e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004272:	461c      	mov	r4, r3
 8004274:	f04f 0500 	mov.w	r5, #0
 8004278:	4622      	mov	r2, r4
 800427a:	462b      	mov	r3, r5
 800427c:	1891      	adds	r1, r2, r2
 800427e:	6139      	str	r1, [r7, #16]
 8004280:	415b      	adcs	r3, r3
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004288:	1912      	adds	r2, r2, r4
 800428a:	eb45 0303 	adc.w	r3, r5, r3
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	00d9      	lsls	r1, r3, #3
 8004298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800429c:	00d0      	lsls	r0, r2, #3
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	eb12 0804 	adds.w	r8, r2, r4
 80042a6:	eb43 0905 	adc.w	r9, r3, r5
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	008b      	lsls	r3, r1, #2
 80042be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042c2:	0082      	lsls	r2, r0, #2
 80042c4:	4640      	mov	r0, r8
 80042c6:	4649      	mov	r1, r9
 80042c8:	f7fb ffea 	bl	80002a0 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <UART_SetConfig+0x38c>)
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	011e      	lsls	r6, r3, #4
 80042da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042dc:	4618      	mov	r0, r3
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	1894      	adds	r4, r2, r2
 80042e8:	60bc      	str	r4, [r7, #8]
 80042ea:	415b      	adcs	r3, r3
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f2:	1812      	adds	r2, r2, r0
 80042f4:	eb41 0303 	adc.w	r3, r1, r3
 80042f8:	f04f 0400 	mov.w	r4, #0
 80042fc:	f04f 0500 	mov.w	r5, #0
 8004300:	00dd      	lsls	r5, r3, #3
 8004302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004306:	00d4      	lsls	r4, r2, #3
 8004308:	4622      	mov	r2, r4
 800430a:	462b      	mov	r3, r5
 800430c:	1814      	adds	r4, r2, r0
 800430e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004310:	414b      	adcs	r3, r1
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	008b      	lsls	r3, r1, #2
 8004328:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800432c:	0082      	lsls	r2, r0, #2
 800432e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004332:	f7fb ffb5 	bl	80002a0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <UART_SetConfig+0x38c>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <UART_SetConfig+0x38c>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435a:	441e      	add	r6, r3
 800435c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435e:	4618      	mov	r0, r3
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	1894      	adds	r4, r2, r2
 800436a:	603c      	str	r4, [r7, #0]
 800436c:	415b      	adcs	r3, r3
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004374:	1812      	adds	r2, r2, r0
 8004376:	eb41 0303 	adc.w	r3, r1, r3
 800437a:	f04f 0400 	mov.w	r4, #0
 800437e:	f04f 0500 	mov.w	r5, #0
 8004382:	00dd      	lsls	r5, r3, #3
 8004384:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004388:	00d4      	lsls	r4, r2, #3
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	eb12 0a00 	adds.w	sl, r2, r0
 8004392:	eb43 0b01 	adc.w	fp, r3, r1
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	008b      	lsls	r3, r1, #2
 80043aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043ae:	0082      	lsls	r2, r0, #2
 80043b0:	4650      	mov	r0, sl
 80043b2:	4659      	mov	r1, fp
 80043b4:	f7fb ff74 	bl	80002a0 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <UART_SetConfig+0x38c>)
 80043be:	fba3 1302 	umull	r1, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2164      	movs	r1, #100	; 0x64
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <UART_SetConfig+0x38c>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4432      	add	r2, r6
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	377c      	adds	r7, #124	; 0x7c
 80043e8:	46bd      	mov	sp, r7
 80043ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ee:	bf00      	nop
 80043f0:	40011000 	.word	0x40011000
 80043f4:	40011400 	.word	0x40011400
 80043f8:	51eb851f 	.word	0x51eb851f

080043fc <__errno>:
 80043fc:	4b01      	ldr	r3, [pc, #4]	; (8004404 <__errno+0x8>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000002c 	.word	0x2000002c

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	; (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	; (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	; (800444c <__libc_init_array+0x44>)
 800441c:	f001 f84c 	bl	80054b8 <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08005760 	.word	0x08005760
 8004444:	08005760 	.word	0x08005760
 8004448:	08005760 	.word	0x08005760
 800444c:	08005764 	.word	0x08005764

08004450 <memcpy>:
 8004450:	440a      	add	r2, r1
 8004452:	4291      	cmp	r1, r2
 8004454:	f100 33ff 	add.w	r3, r0, #4294967295
 8004458:	d100      	bne.n	800445c <memcpy+0xc>
 800445a:	4770      	bx	lr
 800445c:	b510      	push	{r4, lr}
 800445e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004466:	4291      	cmp	r1, r2
 8004468:	d1f9      	bne.n	800445e <memcpy+0xe>
 800446a:	bd10      	pop	{r4, pc}

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <_puts_r>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	460e      	mov	r6, r1
 8004480:	4605      	mov	r5, r0
 8004482:	b118      	cbz	r0, 800448c <_puts_r+0x10>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_puts_r+0x10>
 8004488:	f000 fa68 	bl	800495c <__sinit>
 800448c:	69ab      	ldr	r3, [r5, #24]
 800448e:	68ac      	ldr	r4, [r5, #8]
 8004490:	b913      	cbnz	r3, 8004498 <_puts_r+0x1c>
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fa62 	bl	800495c <__sinit>
 8004498:	4b2c      	ldr	r3, [pc, #176]	; (800454c <_puts_r+0xd0>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d120      	bne.n	80044e0 <_puts_r+0x64>
 800449e:	686c      	ldr	r4, [r5, #4]
 80044a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d405      	bmi.n	80044b2 <_puts_r+0x36>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	0598      	lsls	r0, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_puts_r+0x36>
 80044ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ae:	f000 faf3 	bl	8004a98 <__retarget_lock_acquire_recursive>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	0719      	lsls	r1, r3, #28
 80044b6:	d51d      	bpl.n	80044f4 <_puts_r+0x78>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	b1db      	cbz	r3, 80044f4 <_puts_r+0x78>
 80044bc:	3e01      	subs	r6, #1
 80044be:	68a3      	ldr	r3, [r4, #8]
 80044c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044c4:	3b01      	subs	r3, #1
 80044c6:	60a3      	str	r3, [r4, #8]
 80044c8:	bb39      	cbnz	r1, 800451a <_puts_r+0x9e>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da38      	bge.n	8004540 <_puts_r+0xc4>
 80044ce:	4622      	mov	r2, r4
 80044d0:	210a      	movs	r1, #10
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f868 	bl	80045a8 <__swbuf_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d011      	beq.n	8004500 <_puts_r+0x84>
 80044dc:	250a      	movs	r5, #10
 80044de:	e011      	b.n	8004504 <_puts_r+0x88>
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <_puts_r+0xd4>)
 80044e2:	429c      	cmp	r4, r3
 80044e4:	d101      	bne.n	80044ea <_puts_r+0x6e>
 80044e6:	68ac      	ldr	r4, [r5, #8]
 80044e8:	e7da      	b.n	80044a0 <_puts_r+0x24>
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <_puts_r+0xd8>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	bf08      	it	eq
 80044f0:	68ec      	ldreq	r4, [r5, #12]
 80044f2:	e7d5      	b.n	80044a0 <_puts_r+0x24>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f8a8 	bl	800464c <__swsetup_r>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d0dd      	beq.n	80044bc <_puts_r+0x40>
 8004500:	f04f 35ff 	mov.w	r5, #4294967295
 8004504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004506:	07da      	lsls	r2, r3, #31
 8004508:	d405      	bmi.n	8004516 <_puts_r+0x9a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	059b      	lsls	r3, r3, #22
 800450e:	d402      	bmi.n	8004516 <_puts_r+0x9a>
 8004510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004512:	f000 fac2 	bl	8004a9a <__retarget_lock_release_recursive>
 8004516:	4628      	mov	r0, r5
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	2b00      	cmp	r3, #0
 800451c:	da04      	bge.n	8004528 <_puts_r+0xac>
 800451e:	69a2      	ldr	r2, [r4, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	dc06      	bgt.n	8004532 <_puts_r+0xb6>
 8004524:	290a      	cmp	r1, #10
 8004526:	d004      	beq.n	8004532 <_puts_r+0xb6>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	6022      	str	r2, [r4, #0]
 800452e:	7019      	strb	r1, [r3, #0]
 8004530:	e7c5      	b.n	80044be <_puts_r+0x42>
 8004532:	4622      	mov	r2, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 f837 	bl	80045a8 <__swbuf_r>
 800453a:	3001      	adds	r0, #1
 800453c:	d1bf      	bne.n	80044be <_puts_r+0x42>
 800453e:	e7df      	b.n	8004500 <_puts_r+0x84>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	250a      	movs	r5, #10
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	701d      	strb	r5, [r3, #0]
 800454a:	e7db      	b.n	8004504 <_puts_r+0x88>
 800454c:	080056e4 	.word	0x080056e4
 8004550:	08005704 	.word	0x08005704
 8004554:	080056c4 	.word	0x080056c4

08004558 <puts>:
 8004558:	4b02      	ldr	r3, [pc, #8]	; (8004564 <puts+0xc>)
 800455a:	4601      	mov	r1, r0
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	f7ff bf8d 	b.w	800447c <_puts_r>
 8004562:	bf00      	nop
 8004564:	2000002c 	.word	0x2000002c

08004568 <siprintf>:
 8004568:	b40e      	push	{r1, r2, r3}
 800456a:	b500      	push	{lr}
 800456c:	b09c      	sub	sp, #112	; 0x70
 800456e:	ab1d      	add	r3, sp, #116	; 0x74
 8004570:	9002      	str	r0, [sp, #8]
 8004572:	9006      	str	r0, [sp, #24]
 8004574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004578:	4809      	ldr	r0, [pc, #36]	; (80045a0 <siprintf+0x38>)
 800457a:	9107      	str	r1, [sp, #28]
 800457c:	9104      	str	r1, [sp, #16]
 800457e:	4909      	ldr	r1, [pc, #36]	; (80045a4 <siprintf+0x3c>)
 8004580:	f853 2b04 	ldr.w	r2, [r3], #4
 8004584:	9105      	str	r1, [sp, #20]
 8004586:	6800      	ldr	r0, [r0, #0]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	a902      	add	r1, sp, #8
 800458c:	f000 fbf0 	bl	8004d70 <_svfiprintf_r>
 8004590:	9b02      	ldr	r3, [sp, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	b01c      	add	sp, #112	; 0x70
 8004598:	f85d eb04 	ldr.w	lr, [sp], #4
 800459c:	b003      	add	sp, #12
 800459e:	4770      	bx	lr
 80045a0:	2000002c 	.word	0x2000002c
 80045a4:	ffff0208 	.word	0xffff0208

080045a8 <__swbuf_r>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	460e      	mov	r6, r1
 80045ac:	4614      	mov	r4, r2
 80045ae:	4605      	mov	r5, r0
 80045b0:	b118      	cbz	r0, 80045ba <__swbuf_r+0x12>
 80045b2:	6983      	ldr	r3, [r0, #24]
 80045b4:	b90b      	cbnz	r3, 80045ba <__swbuf_r+0x12>
 80045b6:	f000 f9d1 	bl	800495c <__sinit>
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <__swbuf_r+0x98>)
 80045bc:	429c      	cmp	r4, r3
 80045be:	d12b      	bne.n	8004618 <__swbuf_r+0x70>
 80045c0:	686c      	ldr	r4, [r5, #4]
 80045c2:	69a3      	ldr	r3, [r4, #24]
 80045c4:	60a3      	str	r3, [r4, #8]
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	071a      	lsls	r2, r3, #28
 80045ca:	d52f      	bpl.n	800462c <__swbuf_r+0x84>
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	b36b      	cbz	r3, 800462c <__swbuf_r+0x84>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1ac0      	subs	r0, r0, r3
 80045d6:	6963      	ldr	r3, [r4, #20]
 80045d8:	b2f6      	uxtb	r6, r6
 80045da:	4283      	cmp	r3, r0
 80045dc:	4637      	mov	r7, r6
 80045de:	dc04      	bgt.n	80045ea <__swbuf_r+0x42>
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 f926 	bl	8004834 <_fflush_r>
 80045e8:	bb30      	cbnz	r0, 8004638 <__swbuf_r+0x90>
 80045ea:	68a3      	ldr	r3, [r4, #8]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	60a3      	str	r3, [r4, #8]
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	6022      	str	r2, [r4, #0]
 80045f6:	701e      	strb	r6, [r3, #0]
 80045f8:	6963      	ldr	r3, [r4, #20]
 80045fa:	3001      	adds	r0, #1
 80045fc:	4283      	cmp	r3, r0
 80045fe:	d004      	beq.n	800460a <__swbuf_r+0x62>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	07db      	lsls	r3, r3, #31
 8004604:	d506      	bpl.n	8004614 <__swbuf_r+0x6c>
 8004606:	2e0a      	cmp	r6, #10
 8004608:	d104      	bne.n	8004614 <__swbuf_r+0x6c>
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f911 	bl	8004834 <_fflush_r>
 8004612:	b988      	cbnz	r0, 8004638 <__swbuf_r+0x90>
 8004614:	4638      	mov	r0, r7
 8004616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <__swbuf_r+0x9c>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d101      	bne.n	8004622 <__swbuf_r+0x7a>
 800461e:	68ac      	ldr	r4, [r5, #8]
 8004620:	e7cf      	b.n	80045c2 <__swbuf_r+0x1a>
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <__swbuf_r+0xa0>)
 8004624:	429c      	cmp	r4, r3
 8004626:	bf08      	it	eq
 8004628:	68ec      	ldreq	r4, [r5, #12]
 800462a:	e7ca      	b.n	80045c2 <__swbuf_r+0x1a>
 800462c:	4621      	mov	r1, r4
 800462e:	4628      	mov	r0, r5
 8004630:	f000 f80c 	bl	800464c <__swsetup_r>
 8004634:	2800      	cmp	r0, #0
 8004636:	d0cb      	beq.n	80045d0 <__swbuf_r+0x28>
 8004638:	f04f 37ff 	mov.w	r7, #4294967295
 800463c:	e7ea      	b.n	8004614 <__swbuf_r+0x6c>
 800463e:	bf00      	nop
 8004640:	080056e4 	.word	0x080056e4
 8004644:	08005704 	.word	0x08005704
 8004648:	080056c4 	.word	0x080056c4

0800464c <__swsetup_r>:
 800464c:	4b32      	ldr	r3, [pc, #200]	; (8004718 <__swsetup_r+0xcc>)
 800464e:	b570      	push	{r4, r5, r6, lr}
 8004650:	681d      	ldr	r5, [r3, #0]
 8004652:	4606      	mov	r6, r0
 8004654:	460c      	mov	r4, r1
 8004656:	b125      	cbz	r5, 8004662 <__swsetup_r+0x16>
 8004658:	69ab      	ldr	r3, [r5, #24]
 800465a:	b913      	cbnz	r3, 8004662 <__swsetup_r+0x16>
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f97d 	bl	800495c <__sinit>
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <__swsetup_r+0xd0>)
 8004664:	429c      	cmp	r4, r3
 8004666:	d10f      	bne.n	8004688 <__swsetup_r+0x3c>
 8004668:	686c      	ldr	r4, [r5, #4]
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004670:	0719      	lsls	r1, r3, #28
 8004672:	d42c      	bmi.n	80046ce <__swsetup_r+0x82>
 8004674:	06dd      	lsls	r5, r3, #27
 8004676:	d411      	bmi.n	800469c <__swsetup_r+0x50>
 8004678:	2309      	movs	r3, #9
 800467a:	6033      	str	r3, [r6, #0]
 800467c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	e03e      	b.n	8004706 <__swsetup_r+0xba>
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <__swsetup_r+0xd4>)
 800468a:	429c      	cmp	r4, r3
 800468c:	d101      	bne.n	8004692 <__swsetup_r+0x46>
 800468e:	68ac      	ldr	r4, [r5, #8]
 8004690:	e7eb      	b.n	800466a <__swsetup_r+0x1e>
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <__swsetup_r+0xd8>)
 8004694:	429c      	cmp	r4, r3
 8004696:	bf08      	it	eq
 8004698:	68ec      	ldreq	r4, [r5, #12]
 800469a:	e7e6      	b.n	800466a <__swsetup_r+0x1e>
 800469c:	0758      	lsls	r0, r3, #29
 800469e:	d512      	bpl.n	80046c6 <__swsetup_r+0x7a>
 80046a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046a2:	b141      	cbz	r1, 80046b6 <__swsetup_r+0x6a>
 80046a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a8:	4299      	cmp	r1, r3
 80046aa:	d002      	beq.n	80046b2 <__swsetup_r+0x66>
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 fa59 	bl	8004b64 <_free_r>
 80046b2:	2300      	movs	r3, #0
 80046b4:	6363      	str	r3, [r4, #52]	; 0x34
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	2300      	movs	r3, #0
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f043 0308 	orr.w	r3, r3, #8
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	b94b      	cbnz	r3, 80046e6 <__swsetup_r+0x9a>
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046dc:	d003      	beq.n	80046e6 <__swsetup_r+0x9a>
 80046de:	4621      	mov	r1, r4
 80046e0:	4630      	mov	r0, r6
 80046e2:	f000 f9ff 	bl	8004ae4 <__smakebuf_r>
 80046e6:	89a0      	ldrh	r0, [r4, #12]
 80046e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046ec:	f010 0301 	ands.w	r3, r0, #1
 80046f0:	d00a      	beq.n	8004708 <__swsetup_r+0xbc>
 80046f2:	2300      	movs	r3, #0
 80046f4:	60a3      	str	r3, [r4, #8]
 80046f6:	6963      	ldr	r3, [r4, #20]
 80046f8:	425b      	negs	r3, r3
 80046fa:	61a3      	str	r3, [r4, #24]
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	b943      	cbnz	r3, 8004712 <__swsetup_r+0xc6>
 8004700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004704:	d1ba      	bne.n	800467c <__swsetup_r+0x30>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	0781      	lsls	r1, r0, #30
 800470a:	bf58      	it	pl
 800470c:	6963      	ldrpl	r3, [r4, #20]
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	e7f4      	b.n	80046fc <__swsetup_r+0xb0>
 8004712:	2000      	movs	r0, #0
 8004714:	e7f7      	b.n	8004706 <__swsetup_r+0xba>
 8004716:	bf00      	nop
 8004718:	2000002c 	.word	0x2000002c
 800471c:	080056e4 	.word	0x080056e4
 8004720:	08005704 	.word	0x08005704
 8004724:	080056c4 	.word	0x080056c4

08004728 <__sflush_r>:
 8004728:	898a      	ldrh	r2, [r1, #12]
 800472a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472e:	4605      	mov	r5, r0
 8004730:	0710      	lsls	r0, r2, #28
 8004732:	460c      	mov	r4, r1
 8004734:	d458      	bmi.n	80047e8 <__sflush_r+0xc0>
 8004736:	684b      	ldr	r3, [r1, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	dc05      	bgt.n	8004748 <__sflush_r+0x20>
 800473c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	dc02      	bgt.n	8004748 <__sflush_r+0x20>
 8004742:	2000      	movs	r0, #0
 8004744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800474a:	2e00      	cmp	r6, #0
 800474c:	d0f9      	beq.n	8004742 <__sflush_r+0x1a>
 800474e:	2300      	movs	r3, #0
 8004750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004754:	682f      	ldr	r7, [r5, #0]
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	d032      	beq.n	80047c0 <__sflush_r+0x98>
 800475a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	075a      	lsls	r2, r3, #29
 8004760:	d505      	bpl.n	800476e <__sflush_r+0x46>
 8004762:	6863      	ldr	r3, [r4, #4]
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004768:	b10b      	cbz	r3, 800476e <__sflush_r+0x46>
 800476a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800476c:	1ac0      	subs	r0, r0, r3
 800476e:	2300      	movs	r3, #0
 8004770:	4602      	mov	r2, r0
 8004772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004774:	6a21      	ldr	r1, [r4, #32]
 8004776:	4628      	mov	r0, r5
 8004778:	47b0      	blx	r6
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	d106      	bne.n	800478e <__sflush_r+0x66>
 8004780:	6829      	ldr	r1, [r5, #0]
 8004782:	291d      	cmp	r1, #29
 8004784:	d82c      	bhi.n	80047e0 <__sflush_r+0xb8>
 8004786:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <__sflush_r+0x108>)
 8004788:	40ca      	lsrs	r2, r1
 800478a:	07d6      	lsls	r6, r2, #31
 800478c:	d528      	bpl.n	80047e0 <__sflush_r+0xb8>
 800478e:	2200      	movs	r2, #0
 8004790:	6062      	str	r2, [r4, #4]
 8004792:	04d9      	lsls	r1, r3, #19
 8004794:	6922      	ldr	r2, [r4, #16]
 8004796:	6022      	str	r2, [r4, #0]
 8004798:	d504      	bpl.n	80047a4 <__sflush_r+0x7c>
 800479a:	1c42      	adds	r2, r0, #1
 800479c:	d101      	bne.n	80047a2 <__sflush_r+0x7a>
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	b903      	cbnz	r3, 80047a4 <__sflush_r+0x7c>
 80047a2:	6560      	str	r0, [r4, #84]	; 0x54
 80047a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047a6:	602f      	str	r7, [r5, #0]
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d0ca      	beq.n	8004742 <__sflush_r+0x1a>
 80047ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d002      	beq.n	80047ba <__sflush_r+0x92>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f9d5 	bl	8004b64 <_free_r>
 80047ba:	2000      	movs	r0, #0
 80047bc:	6360      	str	r0, [r4, #52]	; 0x34
 80047be:	e7c1      	b.n	8004744 <__sflush_r+0x1c>
 80047c0:	6a21      	ldr	r1, [r4, #32]
 80047c2:	2301      	movs	r3, #1
 80047c4:	4628      	mov	r0, r5
 80047c6:	47b0      	blx	r6
 80047c8:	1c41      	adds	r1, r0, #1
 80047ca:	d1c7      	bne.n	800475c <__sflush_r+0x34>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0c4      	beq.n	800475c <__sflush_r+0x34>
 80047d2:	2b1d      	cmp	r3, #29
 80047d4:	d001      	beq.n	80047da <__sflush_r+0xb2>
 80047d6:	2b16      	cmp	r3, #22
 80047d8:	d101      	bne.n	80047de <__sflush_r+0xb6>
 80047da:	602f      	str	r7, [r5, #0]
 80047dc:	e7b1      	b.n	8004742 <__sflush_r+0x1a>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e4:	81a3      	strh	r3, [r4, #12]
 80047e6:	e7ad      	b.n	8004744 <__sflush_r+0x1c>
 80047e8:	690f      	ldr	r7, [r1, #16]
 80047ea:	2f00      	cmp	r7, #0
 80047ec:	d0a9      	beq.n	8004742 <__sflush_r+0x1a>
 80047ee:	0793      	lsls	r3, r2, #30
 80047f0:	680e      	ldr	r6, [r1, #0]
 80047f2:	bf08      	it	eq
 80047f4:	694b      	ldreq	r3, [r1, #20]
 80047f6:	600f      	str	r7, [r1, #0]
 80047f8:	bf18      	it	ne
 80047fa:	2300      	movne	r3, #0
 80047fc:	eba6 0807 	sub.w	r8, r6, r7
 8004800:	608b      	str	r3, [r1, #8]
 8004802:	f1b8 0f00 	cmp.w	r8, #0
 8004806:	dd9c      	ble.n	8004742 <__sflush_r+0x1a>
 8004808:	6a21      	ldr	r1, [r4, #32]
 800480a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800480c:	4643      	mov	r3, r8
 800480e:	463a      	mov	r2, r7
 8004810:	4628      	mov	r0, r5
 8004812:	47b0      	blx	r6
 8004814:	2800      	cmp	r0, #0
 8004816:	dc06      	bgt.n	8004826 <__sflush_r+0xfe>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800481e:	81a3      	strh	r3, [r4, #12]
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	e78e      	b.n	8004744 <__sflush_r+0x1c>
 8004826:	4407      	add	r7, r0
 8004828:	eba8 0800 	sub.w	r8, r8, r0
 800482c:	e7e9      	b.n	8004802 <__sflush_r+0xda>
 800482e:	bf00      	nop
 8004830:	20400001 	.word	0x20400001

08004834 <_fflush_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	690b      	ldr	r3, [r1, #16]
 8004838:	4605      	mov	r5, r0
 800483a:	460c      	mov	r4, r1
 800483c:	b913      	cbnz	r3, 8004844 <_fflush_r+0x10>
 800483e:	2500      	movs	r5, #0
 8004840:	4628      	mov	r0, r5
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	b118      	cbz	r0, 800484e <_fflush_r+0x1a>
 8004846:	6983      	ldr	r3, [r0, #24]
 8004848:	b90b      	cbnz	r3, 800484e <_fflush_r+0x1a>
 800484a:	f000 f887 	bl	800495c <__sinit>
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <_fflush_r+0x6c>)
 8004850:	429c      	cmp	r4, r3
 8004852:	d11b      	bne.n	800488c <_fflush_r+0x58>
 8004854:	686c      	ldr	r4, [r5, #4]
 8004856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0ef      	beq.n	800483e <_fflush_r+0xa>
 800485e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004860:	07d0      	lsls	r0, r2, #31
 8004862:	d404      	bmi.n	800486e <_fflush_r+0x3a>
 8004864:	0599      	lsls	r1, r3, #22
 8004866:	d402      	bmi.n	800486e <_fflush_r+0x3a>
 8004868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800486a:	f000 f915 	bl	8004a98 <__retarget_lock_acquire_recursive>
 800486e:	4628      	mov	r0, r5
 8004870:	4621      	mov	r1, r4
 8004872:	f7ff ff59 	bl	8004728 <__sflush_r>
 8004876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004878:	07da      	lsls	r2, r3, #31
 800487a:	4605      	mov	r5, r0
 800487c:	d4e0      	bmi.n	8004840 <_fflush_r+0xc>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	059b      	lsls	r3, r3, #22
 8004882:	d4dd      	bmi.n	8004840 <_fflush_r+0xc>
 8004884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004886:	f000 f908 	bl	8004a9a <__retarget_lock_release_recursive>
 800488a:	e7d9      	b.n	8004840 <_fflush_r+0xc>
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <_fflush_r+0x70>)
 800488e:	429c      	cmp	r4, r3
 8004890:	d101      	bne.n	8004896 <_fflush_r+0x62>
 8004892:	68ac      	ldr	r4, [r5, #8]
 8004894:	e7df      	b.n	8004856 <_fflush_r+0x22>
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <_fflush_r+0x74>)
 8004898:	429c      	cmp	r4, r3
 800489a:	bf08      	it	eq
 800489c:	68ec      	ldreq	r4, [r5, #12]
 800489e:	e7da      	b.n	8004856 <_fflush_r+0x22>
 80048a0:	080056e4 	.word	0x080056e4
 80048a4:	08005704 	.word	0x08005704
 80048a8:	080056c4 	.word	0x080056c4

080048ac <std>:
 80048ac:	2300      	movs	r3, #0
 80048ae:	b510      	push	{r4, lr}
 80048b0:	4604      	mov	r4, r0
 80048b2:	e9c0 3300 	strd	r3, r3, [r0]
 80048b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ba:	6083      	str	r3, [r0, #8]
 80048bc:	8181      	strh	r1, [r0, #12]
 80048be:	6643      	str	r3, [r0, #100]	; 0x64
 80048c0:	81c2      	strh	r2, [r0, #14]
 80048c2:	6183      	str	r3, [r0, #24]
 80048c4:	4619      	mov	r1, r3
 80048c6:	2208      	movs	r2, #8
 80048c8:	305c      	adds	r0, #92	; 0x5c
 80048ca:	f7ff fdcf 	bl	800446c <memset>
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <std+0x38>)
 80048d0:	6263      	str	r3, [r4, #36]	; 0x24
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <std+0x3c>)
 80048d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <std+0x40>)
 80048d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <std+0x44>)
 80048dc:	6224      	str	r4, [r4, #32]
 80048de:	6323      	str	r3, [r4, #48]	; 0x30
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	080052b9 	.word	0x080052b9
 80048e8:	080052db 	.word	0x080052db
 80048ec:	08005313 	.word	0x08005313
 80048f0:	08005337 	.word	0x08005337

080048f4 <_cleanup_r>:
 80048f4:	4901      	ldr	r1, [pc, #4]	; (80048fc <_cleanup_r+0x8>)
 80048f6:	f000 b8af 	b.w	8004a58 <_fwalk_reent>
 80048fa:	bf00      	nop
 80048fc:	08004835 	.word	0x08004835

08004900 <__sfmoreglue>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	1e4a      	subs	r2, r1, #1
 8004904:	2568      	movs	r5, #104	; 0x68
 8004906:	4355      	muls	r5, r2
 8004908:	460e      	mov	r6, r1
 800490a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800490e:	f000 f979 	bl	8004c04 <_malloc_r>
 8004912:	4604      	mov	r4, r0
 8004914:	b140      	cbz	r0, 8004928 <__sfmoreglue+0x28>
 8004916:	2100      	movs	r1, #0
 8004918:	e9c0 1600 	strd	r1, r6, [r0]
 800491c:	300c      	adds	r0, #12
 800491e:	60a0      	str	r0, [r4, #8]
 8004920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004924:	f7ff fda2 	bl	800446c <memset>
 8004928:	4620      	mov	r0, r4
 800492a:	bd70      	pop	{r4, r5, r6, pc}

0800492c <__sfp_lock_acquire>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__sfp_lock_acquire+0x8>)
 800492e:	f000 b8b3 	b.w	8004a98 <__retarget_lock_acquire_recursive>
 8004932:	bf00      	nop
 8004934:	20000294 	.word	0x20000294

08004938 <__sfp_lock_release>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__sfp_lock_release+0x8>)
 800493a:	f000 b8ae 	b.w	8004a9a <__retarget_lock_release_recursive>
 800493e:	bf00      	nop
 8004940:	20000294 	.word	0x20000294

08004944 <__sinit_lock_acquire>:
 8004944:	4801      	ldr	r0, [pc, #4]	; (800494c <__sinit_lock_acquire+0x8>)
 8004946:	f000 b8a7 	b.w	8004a98 <__retarget_lock_acquire_recursive>
 800494a:	bf00      	nop
 800494c:	2000028f 	.word	0x2000028f

08004950 <__sinit_lock_release>:
 8004950:	4801      	ldr	r0, [pc, #4]	; (8004958 <__sinit_lock_release+0x8>)
 8004952:	f000 b8a2 	b.w	8004a9a <__retarget_lock_release_recursive>
 8004956:	bf00      	nop
 8004958:	2000028f 	.word	0x2000028f

0800495c <__sinit>:
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	f7ff fff0 	bl	8004944 <__sinit_lock_acquire>
 8004964:	69a3      	ldr	r3, [r4, #24]
 8004966:	b11b      	cbz	r3, 8004970 <__sinit+0x14>
 8004968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496c:	f7ff bff0 	b.w	8004950 <__sinit_lock_release>
 8004970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004974:	6523      	str	r3, [r4, #80]	; 0x50
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <__sinit+0x68>)
 8004978:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <__sinit+0x6c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	62a2      	str	r2, [r4, #40]	; 0x28
 800497e:	42a3      	cmp	r3, r4
 8004980:	bf04      	itt	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	61a3      	streq	r3, [r4, #24]
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f820 	bl	80049cc <__sfp>
 800498c:	6060      	str	r0, [r4, #4]
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f81c 	bl	80049cc <__sfp>
 8004994:	60a0      	str	r0, [r4, #8]
 8004996:	4620      	mov	r0, r4
 8004998:	f000 f818 	bl	80049cc <__sfp>
 800499c:	2200      	movs	r2, #0
 800499e:	60e0      	str	r0, [r4, #12]
 80049a0:	2104      	movs	r1, #4
 80049a2:	6860      	ldr	r0, [r4, #4]
 80049a4:	f7ff ff82 	bl	80048ac <std>
 80049a8:	68a0      	ldr	r0, [r4, #8]
 80049aa:	2201      	movs	r2, #1
 80049ac:	2109      	movs	r1, #9
 80049ae:	f7ff ff7d 	bl	80048ac <std>
 80049b2:	68e0      	ldr	r0, [r4, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	2112      	movs	r1, #18
 80049b8:	f7ff ff78 	bl	80048ac <std>
 80049bc:	2301      	movs	r3, #1
 80049be:	61a3      	str	r3, [r4, #24]
 80049c0:	e7d2      	b.n	8004968 <__sinit+0xc>
 80049c2:	bf00      	nop
 80049c4:	080056c0 	.word	0x080056c0
 80049c8:	080048f5 	.word	0x080048f5

080049cc <__sfp>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	4607      	mov	r7, r0
 80049d0:	f7ff ffac 	bl	800492c <__sfp_lock_acquire>
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <__sfp+0x84>)
 80049d6:	681e      	ldr	r6, [r3, #0]
 80049d8:	69b3      	ldr	r3, [r6, #24]
 80049da:	b913      	cbnz	r3, 80049e2 <__sfp+0x16>
 80049dc:	4630      	mov	r0, r6
 80049de:	f7ff ffbd 	bl	800495c <__sinit>
 80049e2:	3648      	adds	r6, #72	; 0x48
 80049e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	d503      	bpl.n	80049f4 <__sfp+0x28>
 80049ec:	6833      	ldr	r3, [r6, #0]
 80049ee:	b30b      	cbz	r3, 8004a34 <__sfp+0x68>
 80049f0:	6836      	ldr	r6, [r6, #0]
 80049f2:	e7f7      	b.n	80049e4 <__sfp+0x18>
 80049f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049f8:	b9d5      	cbnz	r5, 8004a30 <__sfp+0x64>
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <__sfp+0x88>)
 80049fc:	60e3      	str	r3, [r4, #12]
 80049fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a02:	6665      	str	r5, [r4, #100]	; 0x64
 8004a04:	f000 f847 	bl	8004a96 <__retarget_lock_init_recursive>
 8004a08:	f7ff ff96 	bl	8004938 <__sfp_lock_release>
 8004a0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a14:	6025      	str	r5, [r4, #0]
 8004a16:	61a5      	str	r5, [r4, #24]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a20:	f7ff fd24 	bl	800446c <memset>
 8004a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a30:	3468      	adds	r4, #104	; 0x68
 8004a32:	e7d9      	b.n	80049e8 <__sfp+0x1c>
 8004a34:	2104      	movs	r1, #4
 8004a36:	4638      	mov	r0, r7
 8004a38:	f7ff ff62 	bl	8004900 <__sfmoreglue>
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	6030      	str	r0, [r6, #0]
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d1d5      	bne.n	80049f0 <__sfp+0x24>
 8004a44:	f7ff ff78 	bl	8004938 <__sfp_lock_release>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	e7ee      	b.n	8004a2c <__sfp+0x60>
 8004a4e:	bf00      	nop
 8004a50:	080056c0 	.word	0x080056c0
 8004a54:	ffff0001 	.word	0xffff0001

08004a58 <_fwalk_reent>:
 8004a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a5c:	4606      	mov	r6, r0
 8004a5e:	4688      	mov	r8, r1
 8004a60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a64:	2700      	movs	r7, #0
 8004a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a6e:	d505      	bpl.n	8004a7c <_fwalk_reent+0x24>
 8004a70:	6824      	ldr	r4, [r4, #0]
 8004a72:	2c00      	cmp	r4, #0
 8004a74:	d1f7      	bne.n	8004a66 <_fwalk_reent+0xe>
 8004a76:	4638      	mov	r0, r7
 8004a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a7c:	89ab      	ldrh	r3, [r5, #12]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d907      	bls.n	8004a92 <_fwalk_reent+0x3a>
 8004a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a86:	3301      	adds	r3, #1
 8004a88:	d003      	beq.n	8004a92 <_fwalk_reent+0x3a>
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	47c0      	blx	r8
 8004a90:	4307      	orrs	r7, r0
 8004a92:	3568      	adds	r5, #104	; 0x68
 8004a94:	e7e9      	b.n	8004a6a <_fwalk_reent+0x12>

08004a96 <__retarget_lock_init_recursive>:
 8004a96:	4770      	bx	lr

08004a98 <__retarget_lock_acquire_recursive>:
 8004a98:	4770      	bx	lr

08004a9a <__retarget_lock_release_recursive>:
 8004a9a:	4770      	bx	lr

08004a9c <__swhatbuf_r>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	460e      	mov	r6, r1
 8004aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	b096      	sub	sp, #88	; 0x58
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	461d      	mov	r5, r3
 8004aac:	da07      	bge.n	8004abe <__swhatbuf_r+0x22>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	602b      	str	r3, [r5, #0]
 8004ab2:	89b3      	ldrh	r3, [r6, #12]
 8004ab4:	061a      	lsls	r2, r3, #24
 8004ab6:	d410      	bmi.n	8004ada <__swhatbuf_r+0x3e>
 8004ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004abc:	e00e      	b.n	8004adc <__swhatbuf_r+0x40>
 8004abe:	466a      	mov	r2, sp
 8004ac0:	f000 fc60 	bl	8005384 <_fstat_r>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	dbf2      	blt.n	8004aae <__swhatbuf_r+0x12>
 8004ac8:	9a01      	ldr	r2, [sp, #4]
 8004aca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ace:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ad2:	425a      	negs	r2, r3
 8004ad4:	415a      	adcs	r2, r3
 8004ad6:	602a      	str	r2, [r5, #0]
 8004ad8:	e7ee      	b.n	8004ab8 <__swhatbuf_r+0x1c>
 8004ada:	2340      	movs	r3, #64	; 0x40
 8004adc:	2000      	movs	r0, #0
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	b016      	add	sp, #88	; 0x58
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}

08004ae4 <__smakebuf_r>:
 8004ae4:	898b      	ldrh	r3, [r1, #12]
 8004ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ae8:	079d      	lsls	r5, r3, #30
 8004aea:	4606      	mov	r6, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	d507      	bpl.n	8004b00 <__smakebuf_r+0x1c>
 8004af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	2301      	movs	r3, #1
 8004afa:	6163      	str	r3, [r4, #20]
 8004afc:	b002      	add	sp, #8
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	ab01      	add	r3, sp, #4
 8004b02:	466a      	mov	r2, sp
 8004b04:	f7ff ffca 	bl	8004a9c <__swhatbuf_r>
 8004b08:	9900      	ldr	r1, [sp, #0]
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f879 	bl	8004c04 <_malloc_r>
 8004b12:	b948      	cbnz	r0, 8004b28 <__smakebuf_r+0x44>
 8004b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b18:	059a      	lsls	r2, r3, #22
 8004b1a:	d4ef      	bmi.n	8004afc <__smakebuf_r+0x18>
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	e7e3      	b.n	8004af0 <__smakebuf_r+0xc>
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <__smakebuf_r+0x7c>)
 8004b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	6020      	str	r0, [r4, #0]
 8004b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	9b00      	ldr	r3, [sp, #0]
 8004b38:	6163      	str	r3, [r4, #20]
 8004b3a:	9b01      	ldr	r3, [sp, #4]
 8004b3c:	6120      	str	r0, [r4, #16]
 8004b3e:	b15b      	cbz	r3, 8004b58 <__smakebuf_r+0x74>
 8004b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b44:	4630      	mov	r0, r6
 8004b46:	f000 fc2f 	bl	80053a8 <_isatty_r>
 8004b4a:	b128      	cbz	r0, 8004b58 <__smakebuf_r+0x74>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	89a0      	ldrh	r0, [r4, #12]
 8004b5a:	4305      	orrs	r5, r0
 8004b5c:	81a5      	strh	r5, [r4, #12]
 8004b5e:	e7cd      	b.n	8004afc <__smakebuf_r+0x18>
 8004b60:	080048f5 	.word	0x080048f5

08004b64 <_free_r>:
 8004b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b66:	2900      	cmp	r1, #0
 8004b68:	d048      	beq.n	8004bfc <_free_r+0x98>
 8004b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b6e:	9001      	str	r0, [sp, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f1a1 0404 	sub.w	r4, r1, #4
 8004b76:	bfb8      	it	lt
 8004b78:	18e4      	addlt	r4, r4, r3
 8004b7a:	f000 fc51 	bl	8005420 <__malloc_lock>
 8004b7e:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <_free_r+0x9c>)
 8004b80:	9801      	ldr	r0, [sp, #4]
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	4615      	mov	r5, r2
 8004b86:	b933      	cbnz	r3, 8004b96 <_free_r+0x32>
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	6014      	str	r4, [r2, #0]
 8004b8c:	b003      	add	sp, #12
 8004b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b92:	f000 bc4b 	b.w	800542c <__malloc_unlock>
 8004b96:	42a3      	cmp	r3, r4
 8004b98:	d90b      	bls.n	8004bb2 <_free_r+0x4e>
 8004b9a:	6821      	ldr	r1, [r4, #0]
 8004b9c:	1862      	adds	r2, r4, r1
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	bf04      	itt	eq
 8004ba2:	681a      	ldreq	r2, [r3, #0]
 8004ba4:	685b      	ldreq	r3, [r3, #4]
 8004ba6:	6063      	str	r3, [r4, #4]
 8004ba8:	bf04      	itt	eq
 8004baa:	1852      	addeq	r2, r2, r1
 8004bac:	6022      	streq	r2, [r4, #0]
 8004bae:	602c      	str	r4, [r5, #0]
 8004bb0:	e7ec      	b.n	8004b8c <_free_r+0x28>
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b10b      	cbz	r3, 8004bbc <_free_r+0x58>
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	d9fa      	bls.n	8004bb2 <_free_r+0x4e>
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	1855      	adds	r5, r2, r1
 8004bc0:	42a5      	cmp	r5, r4
 8004bc2:	d10b      	bne.n	8004bdc <_free_r+0x78>
 8004bc4:	6824      	ldr	r4, [r4, #0]
 8004bc6:	4421      	add	r1, r4
 8004bc8:	1854      	adds	r4, r2, r1
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	d1dd      	bne.n	8004b8c <_free_r+0x28>
 8004bd0:	681c      	ldr	r4, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	6053      	str	r3, [r2, #4]
 8004bd6:	4421      	add	r1, r4
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	e7d7      	b.n	8004b8c <_free_r+0x28>
 8004bdc:	d902      	bls.n	8004be4 <_free_r+0x80>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6003      	str	r3, [r0, #0]
 8004be2:	e7d3      	b.n	8004b8c <_free_r+0x28>
 8004be4:	6825      	ldr	r5, [r4, #0]
 8004be6:	1961      	adds	r1, r4, r5
 8004be8:	428b      	cmp	r3, r1
 8004bea:	bf04      	itt	eq
 8004bec:	6819      	ldreq	r1, [r3, #0]
 8004bee:	685b      	ldreq	r3, [r3, #4]
 8004bf0:	6063      	str	r3, [r4, #4]
 8004bf2:	bf04      	itt	eq
 8004bf4:	1949      	addeq	r1, r1, r5
 8004bf6:	6021      	streq	r1, [r4, #0]
 8004bf8:	6054      	str	r4, [r2, #4]
 8004bfa:	e7c7      	b.n	8004b8c <_free_r+0x28>
 8004bfc:	b003      	add	sp, #12
 8004bfe:	bd30      	pop	{r4, r5, pc}
 8004c00:	200000b8 	.word	0x200000b8

08004c04 <_malloc_r>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	1ccd      	adds	r5, r1, #3
 8004c08:	f025 0503 	bic.w	r5, r5, #3
 8004c0c:	3508      	adds	r5, #8
 8004c0e:	2d0c      	cmp	r5, #12
 8004c10:	bf38      	it	cc
 8004c12:	250c      	movcc	r5, #12
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	4606      	mov	r6, r0
 8004c18:	db01      	blt.n	8004c1e <_malloc_r+0x1a>
 8004c1a:	42a9      	cmp	r1, r5
 8004c1c:	d903      	bls.n	8004c26 <_malloc_r+0x22>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	6033      	str	r3, [r6, #0]
 8004c22:	2000      	movs	r0, #0
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c26:	f000 fbfb 	bl	8005420 <__malloc_lock>
 8004c2a:	4921      	ldr	r1, [pc, #132]	; (8004cb0 <_malloc_r+0xac>)
 8004c2c:	680a      	ldr	r2, [r1, #0]
 8004c2e:	4614      	mov	r4, r2
 8004c30:	b99c      	cbnz	r4, 8004c5a <_malloc_r+0x56>
 8004c32:	4f20      	ldr	r7, [pc, #128]	; (8004cb4 <_malloc_r+0xb0>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	b923      	cbnz	r3, 8004c42 <_malloc_r+0x3e>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f000 fb2c 	bl	8005298 <_sbrk_r>
 8004c40:	6038      	str	r0, [r7, #0]
 8004c42:	4629      	mov	r1, r5
 8004c44:	4630      	mov	r0, r6
 8004c46:	f000 fb27 	bl	8005298 <_sbrk_r>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d123      	bne.n	8004c96 <_malloc_r+0x92>
 8004c4e:	230c      	movs	r3, #12
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 fbea 	bl	800542c <__malloc_unlock>
 8004c58:	e7e3      	b.n	8004c22 <_malloc_r+0x1e>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	1b5b      	subs	r3, r3, r5
 8004c5e:	d417      	bmi.n	8004c90 <_malloc_r+0x8c>
 8004c60:	2b0b      	cmp	r3, #11
 8004c62:	d903      	bls.n	8004c6c <_malloc_r+0x68>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	441c      	add	r4, r3
 8004c68:	6025      	str	r5, [r4, #0]
 8004c6a:	e004      	b.n	8004c76 <_malloc_r+0x72>
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	42a2      	cmp	r2, r4
 8004c70:	bf0c      	ite	eq
 8004c72:	600b      	streq	r3, [r1, #0]
 8004c74:	6053      	strne	r3, [r2, #4]
 8004c76:	4630      	mov	r0, r6
 8004c78:	f000 fbd8 	bl	800542c <__malloc_unlock>
 8004c7c:	f104 000b 	add.w	r0, r4, #11
 8004c80:	1d23      	adds	r3, r4, #4
 8004c82:	f020 0007 	bic.w	r0, r0, #7
 8004c86:	1ac2      	subs	r2, r0, r3
 8004c88:	d0cc      	beq.n	8004c24 <_malloc_r+0x20>
 8004c8a:	1a1b      	subs	r3, r3, r0
 8004c8c:	50a3      	str	r3, [r4, r2]
 8004c8e:	e7c9      	b.n	8004c24 <_malloc_r+0x20>
 8004c90:	4622      	mov	r2, r4
 8004c92:	6864      	ldr	r4, [r4, #4]
 8004c94:	e7cc      	b.n	8004c30 <_malloc_r+0x2c>
 8004c96:	1cc4      	adds	r4, r0, #3
 8004c98:	f024 0403 	bic.w	r4, r4, #3
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d0e3      	beq.n	8004c68 <_malloc_r+0x64>
 8004ca0:	1a21      	subs	r1, r4, r0
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f000 faf8 	bl	8005298 <_sbrk_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d1dd      	bne.n	8004c68 <_malloc_r+0x64>
 8004cac:	e7cf      	b.n	8004c4e <_malloc_r+0x4a>
 8004cae:	bf00      	nop
 8004cb0:	200000b8 	.word	0x200000b8
 8004cb4:	200000bc 	.word	0x200000bc

08004cb8 <__ssputs_r>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	688e      	ldr	r6, [r1, #8]
 8004cbe:	429e      	cmp	r6, r3
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4690      	mov	r8, r2
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	d838      	bhi.n	8004d3c <__ssputs_r+0x84>
 8004cca:	898a      	ldrh	r2, [r1, #12]
 8004ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd0:	d032      	beq.n	8004d38 <__ssputs_r+0x80>
 8004cd2:	6825      	ldr	r5, [r4, #0]
 8004cd4:	6909      	ldr	r1, [r1, #16]
 8004cd6:	eba5 0901 	sub.w	r9, r5, r1
 8004cda:	6965      	ldr	r5, [r4, #20]
 8004cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	444b      	add	r3, r9
 8004ce8:	106d      	asrs	r5, r5, #1
 8004cea:	429d      	cmp	r5, r3
 8004cec:	bf38      	it	cc
 8004cee:	461d      	movcc	r5, r3
 8004cf0:	0553      	lsls	r3, r2, #21
 8004cf2:	d531      	bpl.n	8004d58 <__ssputs_r+0xa0>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f7ff ff85 	bl	8004c04 <_malloc_r>
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	b950      	cbnz	r0, 8004d14 <__ssputs_r+0x5c>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	f8ca 3000 	str.w	r3, [sl]
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	6921      	ldr	r1, [r4, #16]
 8004d16:	464a      	mov	r2, r9
 8004d18:	f7ff fb9a 	bl	8004450 <memcpy>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	6126      	str	r6, [r4, #16]
 8004d2a:	6165      	str	r5, [r4, #20]
 8004d2c:	444e      	add	r6, r9
 8004d2e:	eba5 0509 	sub.w	r5, r5, r9
 8004d32:	6026      	str	r6, [r4, #0]
 8004d34:	60a5      	str	r5, [r4, #8]
 8004d36:	463e      	mov	r6, r7
 8004d38:	42be      	cmp	r6, r7
 8004d3a:	d900      	bls.n	8004d3e <__ssputs_r+0x86>
 8004d3c:	463e      	mov	r6, r7
 8004d3e:	4632      	mov	r2, r6
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	4641      	mov	r1, r8
 8004d44:	f000 fb52 	bl	80053ec <memmove>
 8004d48:	68a3      	ldr	r3, [r4, #8]
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	1b9b      	subs	r3, r3, r6
 8004d4e:	4432      	add	r2, r6
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	6022      	str	r2, [r4, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e7db      	b.n	8004d10 <__ssputs_r+0x58>
 8004d58:	462a      	mov	r2, r5
 8004d5a:	f000 fb6d 	bl	8005438 <_realloc_r>
 8004d5e:	4606      	mov	r6, r0
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1e1      	bne.n	8004d28 <__ssputs_r+0x70>
 8004d64:	6921      	ldr	r1, [r4, #16]
 8004d66:	4650      	mov	r0, sl
 8004d68:	f7ff fefc 	bl	8004b64 <_free_r>
 8004d6c:	e7c7      	b.n	8004cfe <__ssputs_r+0x46>
	...

08004d70 <_svfiprintf_r>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	4698      	mov	r8, r3
 8004d76:	898b      	ldrh	r3, [r1, #12]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	b09d      	sub	sp, #116	; 0x74
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	460d      	mov	r5, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	d50e      	bpl.n	8004da2 <_svfiprintf_r+0x32>
 8004d84:	690b      	ldr	r3, [r1, #16]
 8004d86:	b963      	cbnz	r3, 8004da2 <_svfiprintf_r+0x32>
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	f7ff ff3b 	bl	8004c04 <_malloc_r>
 8004d8e:	6028      	str	r0, [r5, #0]
 8004d90:	6128      	str	r0, [r5, #16]
 8004d92:	b920      	cbnz	r0, 8004d9e <_svfiprintf_r+0x2e>
 8004d94:	230c      	movs	r3, #12
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e0d1      	b.n	8004f42 <_svfiprintf_r+0x1d2>
 8004d9e:	2340      	movs	r3, #64	; 0x40
 8004da0:	616b      	str	r3, [r5, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9309      	str	r3, [sp, #36]	; 0x24
 8004da6:	2320      	movs	r3, #32
 8004da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db0:	2330      	movs	r3, #48	; 0x30
 8004db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f5c <_svfiprintf_r+0x1ec>
 8004db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dba:	f04f 0901 	mov.w	r9, #1
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	469a      	mov	sl, r3
 8004dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc6:	b10a      	cbz	r2, 8004dcc <_svfiprintf_r+0x5c>
 8004dc8:	2a25      	cmp	r2, #37	; 0x25
 8004dca:	d1f9      	bne.n	8004dc0 <_svfiprintf_r+0x50>
 8004dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd0:	d00b      	beq.n	8004dea <_svfiprintf_r+0x7a>
 8004dd2:	465b      	mov	r3, fp
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f7ff ff6d 	bl	8004cb8 <__ssputs_r>
 8004dde:	3001      	adds	r0, #1
 8004de0:	f000 80aa 	beq.w	8004f38 <_svfiprintf_r+0x1c8>
 8004de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de6:	445a      	add	r2, fp
 8004de8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dea:	f89a 3000 	ldrb.w	r3, [sl]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80a2 	beq.w	8004f38 <_svfiprintf_r+0x1c8>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfe:	f10a 0a01 	add.w	sl, sl, #1
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	9307      	str	r3, [sp, #28]
 8004e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e0c:	4654      	mov	r4, sl
 8004e0e:	2205      	movs	r2, #5
 8004e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e14:	4851      	ldr	r0, [pc, #324]	; (8004f5c <_svfiprintf_r+0x1ec>)
 8004e16:	f7fb f9f3 	bl	8000200 <memchr>
 8004e1a:	9a04      	ldr	r2, [sp, #16]
 8004e1c:	b9d8      	cbnz	r0, 8004e56 <_svfiprintf_r+0xe6>
 8004e1e:	06d0      	lsls	r0, r2, #27
 8004e20:	bf44      	itt	mi
 8004e22:	2320      	movmi	r3, #32
 8004e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e28:	0711      	lsls	r1, r2, #28
 8004e2a:	bf44      	itt	mi
 8004e2c:	232b      	movmi	r3, #43	; 0x2b
 8004e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e32:	f89a 3000 	ldrb.w	r3, [sl]
 8004e36:	2b2a      	cmp	r3, #42	; 0x2a
 8004e38:	d015      	beq.n	8004e66 <_svfiprintf_r+0xf6>
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	4654      	mov	r4, sl
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f04f 0c0a 	mov.w	ip, #10
 8004e44:	4621      	mov	r1, r4
 8004e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4a:	3b30      	subs	r3, #48	; 0x30
 8004e4c:	2b09      	cmp	r3, #9
 8004e4e:	d94e      	bls.n	8004eee <_svfiprintf_r+0x17e>
 8004e50:	b1b0      	cbz	r0, 8004e80 <_svfiprintf_r+0x110>
 8004e52:	9207      	str	r2, [sp, #28]
 8004e54:	e014      	b.n	8004e80 <_svfiprintf_r+0x110>
 8004e56:	eba0 0308 	sub.w	r3, r0, r8
 8004e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	46a2      	mov	sl, r4
 8004e64:	e7d2      	b.n	8004e0c <_svfiprintf_r+0x9c>
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	9103      	str	r1, [sp, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfbb      	ittet	lt
 8004e72:	425b      	neglt	r3, r3
 8004e74:	f042 0202 	orrlt.w	r2, r2, #2
 8004e78:	9307      	strge	r3, [sp, #28]
 8004e7a:	9307      	strlt	r3, [sp, #28]
 8004e7c:	bfb8      	it	lt
 8004e7e:	9204      	strlt	r2, [sp, #16]
 8004e80:	7823      	ldrb	r3, [r4, #0]
 8004e82:	2b2e      	cmp	r3, #46	; 0x2e
 8004e84:	d10c      	bne.n	8004ea0 <_svfiprintf_r+0x130>
 8004e86:	7863      	ldrb	r3, [r4, #1]
 8004e88:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8a:	d135      	bne.n	8004ef8 <_svfiprintf_r+0x188>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9203      	str	r2, [sp, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfb8      	it	lt
 8004e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e9c:	3402      	adds	r4, #2
 8004e9e:	9305      	str	r3, [sp, #20]
 8004ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f6c <_svfiprintf_r+0x1fc>
 8004ea4:	7821      	ldrb	r1, [r4, #0]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	f7fb f9a9 	bl	8000200 <memchr>
 8004eae:	b140      	cbz	r0, 8004ec2 <_svfiprintf_r+0x152>
 8004eb0:	2340      	movs	r3, #64	; 0x40
 8004eb2:	eba0 000a 	sub.w	r0, r0, sl
 8004eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	4303      	orrs	r3, r0
 8004ebe:	3401      	adds	r4, #1
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec6:	4826      	ldr	r0, [pc, #152]	; (8004f60 <_svfiprintf_r+0x1f0>)
 8004ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ecc:	2206      	movs	r2, #6
 8004ece:	f7fb f997 	bl	8000200 <memchr>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d038      	beq.n	8004f48 <_svfiprintf_r+0x1d8>
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <_svfiprintf_r+0x1f4>)
 8004ed8:	bb1b      	cbnz	r3, 8004f22 <_svfiprintf_r+0x1b2>
 8004eda:	9b03      	ldr	r3, [sp, #12]
 8004edc:	3307      	adds	r3, #7
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	9303      	str	r3, [sp, #12]
 8004ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee8:	4433      	add	r3, r6
 8004eea:	9309      	str	r3, [sp, #36]	; 0x24
 8004eec:	e767      	b.n	8004dbe <_svfiprintf_r+0x4e>
 8004eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	e7a5      	b.n	8004e44 <_svfiprintf_r+0xd4>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	3401      	adds	r4, #1
 8004efc:	9305      	str	r3, [sp, #20]
 8004efe:	4619      	mov	r1, r3
 8004f00:	f04f 0c0a 	mov.w	ip, #10
 8004f04:	4620      	mov	r0, r4
 8004f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f0a:	3a30      	subs	r2, #48	; 0x30
 8004f0c:	2a09      	cmp	r2, #9
 8004f0e:	d903      	bls.n	8004f18 <_svfiprintf_r+0x1a8>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0c5      	beq.n	8004ea0 <_svfiprintf_r+0x130>
 8004f14:	9105      	str	r1, [sp, #20]
 8004f16:	e7c3      	b.n	8004ea0 <_svfiprintf_r+0x130>
 8004f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e7f0      	b.n	8004f04 <_svfiprintf_r+0x194>
 8004f22:	ab03      	add	r3, sp, #12
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	462a      	mov	r2, r5
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <_svfiprintf_r+0x1f8>)
 8004f2a:	a904      	add	r1, sp, #16
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f3af 8000 	nop.w
 8004f32:	1c42      	adds	r2, r0, #1
 8004f34:	4606      	mov	r6, r0
 8004f36:	d1d6      	bne.n	8004ee6 <_svfiprintf_r+0x176>
 8004f38:	89ab      	ldrh	r3, [r5, #12]
 8004f3a:	065b      	lsls	r3, r3, #25
 8004f3c:	f53f af2c 	bmi.w	8004d98 <_svfiprintf_r+0x28>
 8004f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f42:	b01d      	add	sp, #116	; 0x74
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f48:	ab03      	add	r3, sp, #12
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <_svfiprintf_r+0x1f8>)
 8004f50:	a904      	add	r1, sp, #16
 8004f52:	4638      	mov	r0, r7
 8004f54:	f000 f87a 	bl	800504c <_printf_i>
 8004f58:	e7eb      	b.n	8004f32 <_svfiprintf_r+0x1c2>
 8004f5a:	bf00      	nop
 8004f5c:	08005724 	.word	0x08005724
 8004f60:	0800572e 	.word	0x0800572e
 8004f64:	00000000 	.word	0x00000000
 8004f68:	08004cb9 	.word	0x08004cb9
 8004f6c:	0800572a 	.word	0x0800572a

08004f70 <_printf_common>:
 8004f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	4616      	mov	r6, r2
 8004f76:	4699      	mov	r9, r3
 8004f78:	688a      	ldr	r2, [r1, #8]
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bfb8      	it	lt
 8004f84:	4613      	movlt	r3, r2
 8004f86:	6033      	str	r3, [r6, #0]
 8004f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	b10a      	cbz	r2, 8004f96 <_printf_common+0x26>
 8004f92:	3301      	adds	r3, #1
 8004f94:	6033      	str	r3, [r6, #0]
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	0699      	lsls	r1, r3, #26
 8004f9a:	bf42      	ittt	mi
 8004f9c:	6833      	ldrmi	r3, [r6, #0]
 8004f9e:	3302      	addmi	r3, #2
 8004fa0:	6033      	strmi	r3, [r6, #0]
 8004fa2:	6825      	ldr	r5, [r4, #0]
 8004fa4:	f015 0506 	ands.w	r5, r5, #6
 8004fa8:	d106      	bne.n	8004fb8 <_printf_common+0x48>
 8004faa:	f104 0a19 	add.w	sl, r4, #25
 8004fae:	68e3      	ldr	r3, [r4, #12]
 8004fb0:	6832      	ldr	r2, [r6, #0]
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	42ab      	cmp	r3, r5
 8004fb6:	dc26      	bgt.n	8005006 <_printf_common+0x96>
 8004fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fbc:	1e13      	subs	r3, r2, #0
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	bf18      	it	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	0692      	lsls	r2, r2, #26
 8004fc6:	d42b      	bmi.n	8005020 <_printf_common+0xb0>
 8004fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fcc:	4649      	mov	r1, r9
 8004fce:	4638      	mov	r0, r7
 8004fd0:	47c0      	blx	r8
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d01e      	beq.n	8005014 <_printf_common+0xa4>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	68e5      	ldr	r5, [r4, #12]
 8004fda:	6832      	ldr	r2, [r6, #0]
 8004fdc:	f003 0306 	and.w	r3, r3, #6
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	bf08      	it	eq
 8004fe4:	1aad      	subeq	r5, r5, r2
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	bf0c      	ite	eq
 8004fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff0:	2500      	movne	r5, #0
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bfc4      	itt	gt
 8004ff6:	1a9b      	subgt	r3, r3, r2
 8004ff8:	18ed      	addgt	r5, r5, r3
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	341a      	adds	r4, #26
 8004ffe:	42b5      	cmp	r5, r6
 8005000:	d11a      	bne.n	8005038 <_printf_common+0xc8>
 8005002:	2000      	movs	r0, #0
 8005004:	e008      	b.n	8005018 <_printf_common+0xa8>
 8005006:	2301      	movs	r3, #1
 8005008:	4652      	mov	r2, sl
 800500a:	4649      	mov	r1, r9
 800500c:	4638      	mov	r0, r7
 800500e:	47c0      	blx	r8
 8005010:	3001      	adds	r0, #1
 8005012:	d103      	bne.n	800501c <_printf_common+0xac>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	3501      	adds	r5, #1
 800501e:	e7c6      	b.n	8004fae <_printf_common+0x3e>
 8005020:	18e1      	adds	r1, r4, r3
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	2030      	movs	r0, #48	; 0x30
 8005026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800502a:	4422      	add	r2, r4
 800502c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005034:	3302      	adds	r3, #2
 8005036:	e7c7      	b.n	8004fc8 <_printf_common+0x58>
 8005038:	2301      	movs	r3, #1
 800503a:	4622      	mov	r2, r4
 800503c:	4649      	mov	r1, r9
 800503e:	4638      	mov	r0, r7
 8005040:	47c0      	blx	r8
 8005042:	3001      	adds	r0, #1
 8005044:	d0e6      	beq.n	8005014 <_printf_common+0xa4>
 8005046:	3601      	adds	r6, #1
 8005048:	e7d9      	b.n	8004ffe <_printf_common+0x8e>
	...

0800504c <_printf_i>:
 800504c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	460c      	mov	r4, r1
 8005052:	4691      	mov	r9, r2
 8005054:	7e27      	ldrb	r7, [r4, #24]
 8005056:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005058:	2f78      	cmp	r7, #120	; 0x78
 800505a:	4680      	mov	r8, r0
 800505c:	469a      	mov	sl, r3
 800505e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005062:	d807      	bhi.n	8005074 <_printf_i+0x28>
 8005064:	2f62      	cmp	r7, #98	; 0x62
 8005066:	d80a      	bhi.n	800507e <_printf_i+0x32>
 8005068:	2f00      	cmp	r7, #0
 800506a:	f000 80d8 	beq.w	800521e <_printf_i+0x1d2>
 800506e:	2f58      	cmp	r7, #88	; 0x58
 8005070:	f000 80a3 	beq.w	80051ba <_printf_i+0x16e>
 8005074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800507c:	e03a      	b.n	80050f4 <_printf_i+0xa8>
 800507e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005082:	2b15      	cmp	r3, #21
 8005084:	d8f6      	bhi.n	8005074 <_printf_i+0x28>
 8005086:	a001      	add	r0, pc, #4	; (adr r0, 800508c <_printf_i+0x40>)
 8005088:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050f9 	.word	0x080050f9
 8005094:	08005075 	.word	0x08005075
 8005098:	08005075 	.word	0x08005075
 800509c:	08005075 	.word	0x08005075
 80050a0:	08005075 	.word	0x08005075
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005075 	.word	0x08005075
 80050ac:	08005075 	.word	0x08005075
 80050b0:	08005075 	.word	0x08005075
 80050b4:	08005075 	.word	0x08005075
 80050b8:	08005205 	.word	0x08005205
 80050bc:	08005129 	.word	0x08005129
 80050c0:	080051e7 	.word	0x080051e7
 80050c4:	08005075 	.word	0x08005075
 80050c8:	08005075 	.word	0x08005075
 80050cc:	08005227 	.word	0x08005227
 80050d0:	08005075 	.word	0x08005075
 80050d4:	08005129 	.word	0x08005129
 80050d8:	08005075 	.word	0x08005075
 80050dc:	08005075 	.word	0x08005075
 80050e0:	080051ef 	.word	0x080051ef
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	600a      	str	r2, [r1, #0]
 80050ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0a3      	b.n	8005240 <_printf_i+0x1f4>
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	6808      	ldr	r0, [r1, #0]
 80050fc:	062e      	lsls	r6, r5, #24
 80050fe:	f100 0304 	add.w	r3, r0, #4
 8005102:	d50a      	bpl.n	800511a <_printf_i+0xce>
 8005104:	6805      	ldr	r5, [r0, #0]
 8005106:	600b      	str	r3, [r1, #0]
 8005108:	2d00      	cmp	r5, #0
 800510a:	da03      	bge.n	8005114 <_printf_i+0xc8>
 800510c:	232d      	movs	r3, #45	; 0x2d
 800510e:	426d      	negs	r5, r5
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005114:	485e      	ldr	r0, [pc, #376]	; (8005290 <_printf_i+0x244>)
 8005116:	230a      	movs	r3, #10
 8005118:	e019      	b.n	800514e <_printf_i+0x102>
 800511a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800511e:	6805      	ldr	r5, [r0, #0]
 8005120:	600b      	str	r3, [r1, #0]
 8005122:	bf18      	it	ne
 8005124:	b22d      	sxthne	r5, r5
 8005126:	e7ef      	b.n	8005108 <_printf_i+0xbc>
 8005128:	680b      	ldr	r3, [r1, #0]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	1d18      	adds	r0, r3, #4
 800512e:	6008      	str	r0, [r1, #0]
 8005130:	0628      	lsls	r0, r5, #24
 8005132:	d501      	bpl.n	8005138 <_printf_i+0xec>
 8005134:	681d      	ldr	r5, [r3, #0]
 8005136:	e002      	b.n	800513e <_printf_i+0xf2>
 8005138:	0669      	lsls	r1, r5, #25
 800513a:	d5fb      	bpl.n	8005134 <_printf_i+0xe8>
 800513c:	881d      	ldrh	r5, [r3, #0]
 800513e:	4854      	ldr	r0, [pc, #336]	; (8005290 <_printf_i+0x244>)
 8005140:	2f6f      	cmp	r7, #111	; 0x6f
 8005142:	bf0c      	ite	eq
 8005144:	2308      	moveq	r3, #8
 8005146:	230a      	movne	r3, #10
 8005148:	2100      	movs	r1, #0
 800514a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800514e:	6866      	ldr	r6, [r4, #4]
 8005150:	60a6      	str	r6, [r4, #8]
 8005152:	2e00      	cmp	r6, #0
 8005154:	bfa2      	ittt	ge
 8005156:	6821      	ldrge	r1, [r4, #0]
 8005158:	f021 0104 	bicge.w	r1, r1, #4
 800515c:	6021      	strge	r1, [r4, #0]
 800515e:	b90d      	cbnz	r5, 8005164 <_printf_i+0x118>
 8005160:	2e00      	cmp	r6, #0
 8005162:	d04d      	beq.n	8005200 <_printf_i+0x1b4>
 8005164:	4616      	mov	r6, r2
 8005166:	fbb5 f1f3 	udiv	r1, r5, r3
 800516a:	fb03 5711 	mls	r7, r3, r1, r5
 800516e:	5dc7      	ldrb	r7, [r0, r7]
 8005170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005174:	462f      	mov	r7, r5
 8005176:	42bb      	cmp	r3, r7
 8005178:	460d      	mov	r5, r1
 800517a:	d9f4      	bls.n	8005166 <_printf_i+0x11a>
 800517c:	2b08      	cmp	r3, #8
 800517e:	d10b      	bne.n	8005198 <_printf_i+0x14c>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	07df      	lsls	r7, r3, #31
 8005184:	d508      	bpl.n	8005198 <_printf_i+0x14c>
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	6861      	ldr	r1, [r4, #4]
 800518a:	4299      	cmp	r1, r3
 800518c:	bfde      	ittt	le
 800518e:	2330      	movle	r3, #48	; 0x30
 8005190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005198:	1b92      	subs	r2, r2, r6
 800519a:	6122      	str	r2, [r4, #16]
 800519c:	f8cd a000 	str.w	sl, [sp]
 80051a0:	464b      	mov	r3, r9
 80051a2:	aa03      	add	r2, sp, #12
 80051a4:	4621      	mov	r1, r4
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff fee2 	bl	8004f70 <_printf_common>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d14c      	bne.n	800524a <_printf_i+0x1fe>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	b004      	add	sp, #16
 80051b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ba:	4835      	ldr	r0, [pc, #212]	; (8005290 <_printf_i+0x244>)
 80051bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	680e      	ldr	r6, [r1, #0]
 80051c4:	061f      	lsls	r7, r3, #24
 80051c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80051ca:	600e      	str	r6, [r1, #0]
 80051cc:	d514      	bpl.n	80051f8 <_printf_i+0x1ac>
 80051ce:	07d9      	lsls	r1, r3, #31
 80051d0:	bf44      	itt	mi
 80051d2:	f043 0320 	orrmi.w	r3, r3, #32
 80051d6:	6023      	strmi	r3, [r4, #0]
 80051d8:	b91d      	cbnz	r5, 80051e2 <_printf_i+0x196>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f023 0320 	bic.w	r3, r3, #32
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	2310      	movs	r3, #16
 80051e4:	e7b0      	b.n	8005148 <_printf_i+0xfc>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	f043 0320 	orr.w	r3, r3, #32
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	2378      	movs	r3, #120	; 0x78
 80051f0:	4828      	ldr	r0, [pc, #160]	; (8005294 <_printf_i+0x248>)
 80051f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051f6:	e7e3      	b.n	80051c0 <_printf_i+0x174>
 80051f8:	065e      	lsls	r6, r3, #25
 80051fa:	bf48      	it	mi
 80051fc:	b2ad      	uxthmi	r5, r5
 80051fe:	e7e6      	b.n	80051ce <_printf_i+0x182>
 8005200:	4616      	mov	r6, r2
 8005202:	e7bb      	b.n	800517c <_printf_i+0x130>
 8005204:	680b      	ldr	r3, [r1, #0]
 8005206:	6826      	ldr	r6, [r4, #0]
 8005208:	6960      	ldr	r0, [r4, #20]
 800520a:	1d1d      	adds	r5, r3, #4
 800520c:	600d      	str	r5, [r1, #0]
 800520e:	0635      	lsls	r5, r6, #24
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	d501      	bpl.n	8005218 <_printf_i+0x1cc>
 8005214:	6018      	str	r0, [r3, #0]
 8005216:	e002      	b.n	800521e <_printf_i+0x1d2>
 8005218:	0671      	lsls	r1, r6, #25
 800521a:	d5fb      	bpl.n	8005214 <_printf_i+0x1c8>
 800521c:	8018      	strh	r0, [r3, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	4616      	mov	r6, r2
 8005224:	e7ba      	b.n	800519c <_printf_i+0x150>
 8005226:	680b      	ldr	r3, [r1, #0]
 8005228:	1d1a      	adds	r2, r3, #4
 800522a:	600a      	str	r2, [r1, #0]
 800522c:	681e      	ldr	r6, [r3, #0]
 800522e:	6862      	ldr	r2, [r4, #4]
 8005230:	2100      	movs	r1, #0
 8005232:	4630      	mov	r0, r6
 8005234:	f7fa ffe4 	bl	8000200 <memchr>
 8005238:	b108      	cbz	r0, 800523e <_printf_i+0x1f2>
 800523a:	1b80      	subs	r0, r0, r6
 800523c:	6060      	str	r0, [r4, #4]
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	2300      	movs	r3, #0
 8005244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005248:	e7a8      	b.n	800519c <_printf_i+0x150>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	4632      	mov	r2, r6
 800524e:	4649      	mov	r1, r9
 8005250:	4640      	mov	r0, r8
 8005252:	47d0      	blx	sl
 8005254:	3001      	adds	r0, #1
 8005256:	d0ab      	beq.n	80051b0 <_printf_i+0x164>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	079b      	lsls	r3, r3, #30
 800525c:	d413      	bmi.n	8005286 <_printf_i+0x23a>
 800525e:	68e0      	ldr	r0, [r4, #12]
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	4298      	cmp	r0, r3
 8005264:	bfb8      	it	lt
 8005266:	4618      	movlt	r0, r3
 8005268:	e7a4      	b.n	80051b4 <_printf_i+0x168>
 800526a:	2301      	movs	r3, #1
 800526c:	4632      	mov	r2, r6
 800526e:	4649      	mov	r1, r9
 8005270:	4640      	mov	r0, r8
 8005272:	47d0      	blx	sl
 8005274:	3001      	adds	r0, #1
 8005276:	d09b      	beq.n	80051b0 <_printf_i+0x164>
 8005278:	3501      	adds	r5, #1
 800527a:	68e3      	ldr	r3, [r4, #12]
 800527c:	9903      	ldr	r1, [sp, #12]
 800527e:	1a5b      	subs	r3, r3, r1
 8005280:	42ab      	cmp	r3, r5
 8005282:	dcf2      	bgt.n	800526a <_printf_i+0x21e>
 8005284:	e7eb      	b.n	800525e <_printf_i+0x212>
 8005286:	2500      	movs	r5, #0
 8005288:	f104 0619 	add.w	r6, r4, #25
 800528c:	e7f5      	b.n	800527a <_printf_i+0x22e>
 800528e:	bf00      	nop
 8005290:	08005735 	.word	0x08005735
 8005294:	08005746 	.word	0x08005746

08005298 <_sbrk_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d06      	ldr	r5, [pc, #24]	; (80052b4 <_sbrk_r+0x1c>)
 800529c:	2300      	movs	r3, #0
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	602b      	str	r3, [r5, #0]
 80052a4:	f7fb ff92 	bl	80011cc <_sbrk>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_sbrk_r+0x1a>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_sbrk_r+0x1a>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	20000298 	.word	0x20000298

080052b8 <__sread>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	f000 f8e0 	bl	8005484 <_read_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	bfab      	itete	ge
 80052c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052ca:	89a3      	ldrhlt	r3, [r4, #12]
 80052cc:	181b      	addge	r3, r3, r0
 80052ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052d2:	bfac      	ite	ge
 80052d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052d6:	81a3      	strhlt	r3, [r4, #12]
 80052d8:	bd10      	pop	{r4, pc}

080052da <__swrite>:
 80052da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052de:	461f      	mov	r7, r3
 80052e0:	898b      	ldrh	r3, [r1, #12]
 80052e2:	05db      	lsls	r3, r3, #23
 80052e4:	4605      	mov	r5, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	4616      	mov	r6, r2
 80052ea:	d505      	bpl.n	80052f8 <__swrite+0x1e>
 80052ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f0:	2302      	movs	r3, #2
 80052f2:	2200      	movs	r2, #0
 80052f4:	f000 f868 	bl	80053c8 <_lseek_r>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	4632      	mov	r2, r6
 8005306:	463b      	mov	r3, r7
 8005308:	4628      	mov	r0, r5
 800530a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	f000 b817 	b.w	8005340 <_write_r>

08005312 <__sseek>:
 8005312:	b510      	push	{r4, lr}
 8005314:	460c      	mov	r4, r1
 8005316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531a:	f000 f855 	bl	80053c8 <_lseek_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	bf15      	itete	ne
 8005324:	6560      	strne	r0, [r4, #84]	; 0x54
 8005326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800532a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800532e:	81a3      	strheq	r3, [r4, #12]
 8005330:	bf18      	it	ne
 8005332:	81a3      	strhne	r3, [r4, #12]
 8005334:	bd10      	pop	{r4, pc}

08005336 <__sclose>:
 8005336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533a:	f000 b813 	b.w	8005364 <_close_r>
	...

08005340 <_write_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d07      	ldr	r5, [pc, #28]	; (8005360 <_write_r+0x20>)
 8005344:	4604      	mov	r4, r0
 8005346:	4608      	mov	r0, r1
 8005348:	4611      	mov	r1, r2
 800534a:	2200      	movs	r2, #0
 800534c:	602a      	str	r2, [r5, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f7fb feeb 	bl	800112a <_write>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_write_r+0x1e>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_write_r+0x1e>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	20000298 	.word	0x20000298

08005364 <_close_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_close_r+0x1c>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fb fef7 	bl	8001162 <_close>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_close_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_close_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	20000298 	.word	0x20000298

08005384 <_fstat_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d07      	ldr	r5, [pc, #28]	; (80053a4 <_fstat_r+0x20>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	f7fb fef2 	bl	800117a <_fstat>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d102      	bne.n	80053a0 <_fstat_r+0x1c>
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	b103      	cbz	r3, 80053a0 <_fstat_r+0x1c>
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	20000298 	.word	0x20000298

080053a8 <_isatty_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d06      	ldr	r5, [pc, #24]	; (80053c4 <_isatty_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fb fef1 	bl	800119a <_isatty>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_isatty_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_isatty_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000298 	.word	0x20000298

080053c8 <_lseek_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	; (80053e8 <_lseek_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fb feea 	bl	80011b0 <_lseek>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_lseek_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_lseek_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000298 	.word	0x20000298

080053ec <memmove>:
 80053ec:	4288      	cmp	r0, r1
 80053ee:	b510      	push	{r4, lr}
 80053f0:	eb01 0402 	add.w	r4, r1, r2
 80053f4:	d902      	bls.n	80053fc <memmove+0x10>
 80053f6:	4284      	cmp	r4, r0
 80053f8:	4623      	mov	r3, r4
 80053fa:	d807      	bhi.n	800540c <memmove+0x20>
 80053fc:	1e43      	subs	r3, r0, #1
 80053fe:	42a1      	cmp	r1, r4
 8005400:	d008      	beq.n	8005414 <memmove+0x28>
 8005402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800540a:	e7f8      	b.n	80053fe <memmove+0x12>
 800540c:	4402      	add	r2, r0
 800540e:	4601      	mov	r1, r0
 8005410:	428a      	cmp	r2, r1
 8005412:	d100      	bne.n	8005416 <memmove+0x2a>
 8005414:	bd10      	pop	{r4, pc}
 8005416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800541a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800541e:	e7f7      	b.n	8005410 <memmove+0x24>

08005420 <__malloc_lock>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__malloc_lock+0x8>)
 8005422:	f7ff bb39 	b.w	8004a98 <__retarget_lock_acquire_recursive>
 8005426:	bf00      	nop
 8005428:	20000290 	.word	0x20000290

0800542c <__malloc_unlock>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__malloc_unlock+0x8>)
 800542e:	f7ff bb34 	b.w	8004a9a <__retarget_lock_release_recursive>
 8005432:	bf00      	nop
 8005434:	20000290 	.word	0x20000290

08005438 <_realloc_r>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	4607      	mov	r7, r0
 800543c:	4614      	mov	r4, r2
 800543e:	460e      	mov	r6, r1
 8005440:	b921      	cbnz	r1, 800544c <_realloc_r+0x14>
 8005442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005446:	4611      	mov	r1, r2
 8005448:	f7ff bbdc 	b.w	8004c04 <_malloc_r>
 800544c:	b922      	cbnz	r2, 8005458 <_realloc_r+0x20>
 800544e:	f7ff fb89 	bl	8004b64 <_free_r>
 8005452:	4625      	mov	r5, r4
 8005454:	4628      	mov	r0, r5
 8005456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005458:	f000 f826 	bl	80054a8 <_malloc_usable_size_r>
 800545c:	42a0      	cmp	r0, r4
 800545e:	d20f      	bcs.n	8005480 <_realloc_r+0x48>
 8005460:	4621      	mov	r1, r4
 8005462:	4638      	mov	r0, r7
 8005464:	f7ff fbce 	bl	8004c04 <_malloc_r>
 8005468:	4605      	mov	r5, r0
 800546a:	2800      	cmp	r0, #0
 800546c:	d0f2      	beq.n	8005454 <_realloc_r+0x1c>
 800546e:	4631      	mov	r1, r6
 8005470:	4622      	mov	r2, r4
 8005472:	f7fe ffed 	bl	8004450 <memcpy>
 8005476:	4631      	mov	r1, r6
 8005478:	4638      	mov	r0, r7
 800547a:	f7ff fb73 	bl	8004b64 <_free_r>
 800547e:	e7e9      	b.n	8005454 <_realloc_r+0x1c>
 8005480:	4635      	mov	r5, r6
 8005482:	e7e7      	b.n	8005454 <_realloc_r+0x1c>

08005484 <_read_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d07      	ldr	r5, [pc, #28]	; (80054a4 <_read_r+0x20>)
 8005488:	4604      	mov	r4, r0
 800548a:	4608      	mov	r0, r1
 800548c:	4611      	mov	r1, r2
 800548e:	2200      	movs	r2, #0
 8005490:	602a      	str	r2, [r5, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	f7fb fe2c 	bl	80010f0 <_read>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_read_r+0x1e>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_read_r+0x1e>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000298 	.word	0x20000298

080054a8 <_malloc_usable_size_r>:
 80054a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ac:	1f18      	subs	r0, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bfbc      	itt	lt
 80054b2:	580b      	ldrlt	r3, [r1, r0]
 80054b4:	18c0      	addlt	r0, r0, r3
 80054b6:	4770      	bx	lr

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
